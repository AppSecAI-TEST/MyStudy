{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/gandalfr/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/css/gandalfr.css","path":"css/gandalfr.css","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/scss/gandalfr.scss","path":"scss/gandalfr.scss","modified":0,"renderable":1},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1}],"Cache":[{"_id":"themes/gandalfr/.DS_Store","hash":"7747248cac3668e2cef23f360345d4c578cb7000","modified":1488867680000},{"_id":"themes/gandalfr/.gitignore","hash":"def5f0c9ac6f013028d5b4e9938cbd679cb1c4bf","modified":1486537504000},{"_id":"themes/gandalfr/LICENSE","hash":"e80157fea03e4ee45500ea818fceaf6ca388c17d","modified":1486365845000},{"_id":"themes/gandalfr/README.md","hash":"d78cb9a38c3fd8b29dc6d5cf44a01883c33c45eb","modified":1493361944000},{"_id":"themes/gandalfr/TODO.md","hash":"7bdc71de385b581014c1232496963860219bab59","modified":1487745219000},{"_id":"themes/gandalfr/_config.yml.example","hash":"42f70a8c054f2094d44a1f37850526bafc7a7fc7","modified":1493360620000},{"_id":"themes/gandalfr/_config.yml","hash":"c798f84ca8daa11b0b0011942b25c433e2f62104","modified":1493360607000},{"_id":"themes/gandalfr/gulpfile.js","hash":"5f1e4d173e6ad54a4014c7b73b4b6202f54e0772","modified":1486537504000},{"_id":"themes/gandalfr/package.json","hash":"c706fa982a87c7a03426051f2626aaa388d4cf73","modified":1493622763000},{"_id":"source/tags/index.md","hash":"c7903929418ffa391eb94fa1ee0cb8238a53132d","modified":1484113382000},{"_id":"source/_posts/01Matrix.md","hash":"9e19c64ecc6fa5c486f763498171dfe7be0e4cf1","modified":1490095646000},{"_id":"source/_posts/132Pattern.md","hash":"e463c3d6369981f77cbf15ada12e12163ea33a66","modified":1484276978000},{"_id":"source/_posts/403Forbidden.md","hash":"e0536cc456f725414ebeb8c92c2bcef8346c53a5","modified":1492534257000},{"_id":"source/_posts/4SumII.md","hash":"d47f88b41688ccd7b8e7eecbcb9ebd2d4d92d4b9","modified":1487813067000},{"_id":"source/_posts/Base7.md","hash":"26aa2c95b973dd02bd5b82bf1600aedefdd3b175","modified":1486877694000},{"_id":"source/_posts/BeautifulArrangement.md","hash":"bf935d1a7e43ec7c568c4d466013059c7a203c02","modified":1487928233000},{"_id":"source/_posts/BattleshipsinaBoard.md","hash":"7b802fc1894ee7a8064d72053fad5abcb5ec4a8f","modified":1492535137000},{"_id":"source/_posts/BestTimetoBuyandSellStockwithCooldown.md","hash":"e5967c09d77fd26347713818129cbd5dcc78e3ae","modified":1486370100000},{"_id":"source/_posts/BrickWall.md","hash":"a6b9f010f835eebb3cc1ca4084e07868547fa661","modified":1491730666000},{"_id":"source/_posts/BulbSwitcher.md","hash":"6d6fdb29d9b5c20bfd4ac65bdb6baf9fa9ba0db1","modified":1490689181000},{"_id":"source/_posts/CanIWin.md","hash":"371c3a91d74cd3697ce10a12615049e20cd7fcb2","modified":1489489717000},{"_id":"source/_posts/CoinChange.md","hash":"a9ad85d481fa3ddabb192a6fdda89ac9d15be0ca","modified":1484395787000},{"_id":"source/_posts/CoinChangeII.md","hash":"afe9ca35ef1631e73ed69526ddd02a8cc10368bf","modified":1491923745000},{"_id":"source/_posts/CombinationSumIV.md","hash":"7f093afd316469167fbf76379d2ec4d73f648439","modified":1484276990000},{"_id":"source/_posts/ContainerWithMostWater.md","hash":"555b70485a4f1e2e7ed9389f9c14f84029886fc5","modified":1488108641000},{"_id":"source/_posts/ContiguousArray.md","hash":"fe11731afe57a10088e0ee4d20c8e5fecec6b959","modified":1487667202000},{"_id":"source/_posts/ComplexNumberMultiplication.md","hash":"40688ce9200ca0ac2a297049ee10e1c660fe84d6","modified":1491110846000},{"_id":"source/_posts/ContainsDuplicateIII.md","hash":"dd27b0715783560b8ee9fece42bd54b4ef07e2ba","modified":1490600372000},{"_id":"source/_posts/ContinuousSubarraySum.md","hash":"ace1089592dae2a0e4b06632b776fa87038a47b7","modified":1488950168000},{"_id":"source/_posts/ConvertBSTtoGreaterTree.md","hash":"fdc26586710add3e71fc8c8d7cbefd5657d9a609","modified":1491057233000},{"_id":"source/_posts/CountNumberswithUniqueDigits.md","hash":"e1b5ac465538e460af1203b74b9bdd1e6c37b188","modified":1490595772000},{"_id":"source/_posts/CourseScheduleII.md","hash":"b63d7930c031fddd73e8032ae2fff99638c91ccd","modified":1492185106000},{"_id":"source/_posts/DecodeString.md","hash":"8079af62e674ead7977527a3a1a3a7acab79121b","modified":1485525942000},{"_id":"source/_posts/DetectCapital.md","hash":"0ee5fc56ad8d066acac2f47d346076e83646db31","modified":1487996102000},{"_id":"source/_posts/DiameterofBinaryTree.md","hash":"f6725e8d9dc633295a85af566f4a0113232b3c96","modified":1490013928000},{"_id":"source/_posts/DiagonalTraverse.md","hash":"1d77bf2c9ac29fbe96249aba99ed479d63414ef7","modified":1487055776000},{"_id":"source/_posts/EncodeandDecodeTinyURL.md","hash":"4ad484b31c5832ccbabe831d6b377619e3f91432","modified":1488632442000},{"_id":"source/_posts/DiligentRobots.md","hash":"28d336816d9e2d6bc3b85d46af0091359df62d95","modified":1491657938000},{"_id":"source/_posts/EvaluateReversePolishNotation.md","hash":"037d030ace4b3ef1be01eb81806ee0ad4d53f9db","modified":1490543642000},{"_id":"source/_posts/FindLargestElementinEachRow.md","hash":"d3ef7450ab2967e95a2ba4d2a015f699c018f627","modified":1487141292000},{"_id":"source/_posts/FindKPairswithSmallestSums.md","hash":"d4ff5c59f31f378cd9730fd1b9ad149ac2590fea","modified":1490927151000},{"_id":"source/_posts/FindLeftMostElement.md","hash":"e8fe1cdce0c622f5158c725aee0e846433faec1c","modified":1487055833000},{"_id":"source/_posts/FindModeinBinarySearchTree.md","hash":"19490351bcef175c4477f128500c5018bfac98f4","modified":1485965708000},{"_id":"source/_posts/FindtheClosestPalindrome.md","hash":"5b3f096ba7a85c6b370fbb3fe675d34597c39de9","modified":1493347267000},{"_id":"source/_posts/FindtheDuplicateNumber.md","hash":"ec46ffcc4d9a0549fdecfbbfdd8013dae8922259","modified":1486529425000},{"_id":"source/_posts/FontSize.md","hash":"607bffa975215c9321f02591a04e2ba5dd580449","modified":1487136171000},{"_id":"source/_posts/FractiontoRecurringDecimal.md","hash":"be49318bd797f2c09f874b1ae96ff68ca6f099a8","modified":1492526197000},{"_id":"source/_posts/FriendCircles.md","hash":"a24dca5dbeab056a1b2403c725d5e576707ba37f","modified":1491232195000},{"_id":"source/_posts/GroupAnagrams.md","hash":"25bc7e9150f527f4c8e5603f37c591319fa9a755","modified":1487055866000},{"_id":"source/_posts/Heaters.md","hash":"f6b1d02ddd7647d8cd6512efefe8f0b2c9205f93","modified":1483507667000},{"_id":"source/_posts/HouseRobberII.md","hash":"234ee1c547559221a2596b4434c87592984c0920","modified":1492617134000},{"_id":"source/_posts/HouseRobberIII.md","hash":"739b8c75c9b9101f288a171d7fb699a055852117","modified":1487055909000},{"_id":"source/_posts/IncreasingSubsequences.md","hash":"01685747e4812efad6593dfc8cc97953b65c56de","modified":1485704340000},{"_id":"source/_posts/IncreasingTripletSubsequence.md","hash":"0fe9ad087a306aebf173d6d3c6405dc879519f7f","modified":1491406257000},{"_id":"source/_posts/IntersectionofTwoArraysII.md","hash":"99d1ce4e9874ac725ecf2079404fcf40ab4f4faf","modified":1483887680000},{"_id":"source/_posts/IntegerReplacement.md","hash":"51c8dfaf049ceb5b448009bf05d1238aa76838a3","modified":1485272461000},{"_id":"source/_posts/IntegerBreak.md","hash":"41b3d9047cccacc4243ad97f610dd128b99fefd9","modified":1489210526000},{"_id":"source/_posts/JumpGame.md","hash":"870abc8981266645197a2fd9db8cd643243d1bac","modified":1492694771000},{"_id":"source/_posts/K-diffPairsinanArray.md","hash":"1fb1f82f7a75e0582f085501b20422f9b10b9c59","modified":1488723705000},{"_id":"source/_posts/KthSmallestElementinaSortedMatrix.md","hash":"c9a6188999b8276c5a33544539a5d1e2752eac81","modified":1493049011000},{"_id":"source/_posts/KeyboardRow.md","hash":"2473f84282bc533247b45f36a035a65936d7e67a","modified":1487558686000},{"_id":"source/_posts/LonelyPixelII.md","hash":"dcb651704096ab56c8ce2de8bb3f1cb3e27d1098","modified":1488939758000},{"_id":"source/_posts/LicenseKeyFormatting.md","hash":"3fc30a342173883a86126b490ab49adb7da1ac94","modified":1484667180000},{"_id":"source/_posts/LargestDivisibleSubset.md","hash":"549acae7f7b6f7f01cabb4f508ca5369ee9af559","modified":1484395907000},{"_id":"source/_posts/LongestIncreasingPathinaMatrix.md","hash":"b0c9d9cc27c46fd7d00e96a11eee85694aa63ab0","modified":1483950266000},{"_id":"source/_posts/LongestIncreasingSubsequence.md","hash":"e7b9dd5f7a1176654ea8faa2a3b9f080d592bcb6","modified":1490173243000},{"_id":"source/_posts/LongestLineofConsecutiveOneinMatrix.md","hash":"79d7b82cc04a8b9ba478b5ea9b95db643c286e5a","modified":1492955790000},{"_id":"source/_posts/LongestPalindromicSubsequence.md","hash":"be9127754649afb62bbe7c1d5b5b4db3ba1a6d65","modified":1487744442000},{"_id":"source/_posts/LongestSubstringwithAtLeastKRepeatingCharacters.md","hash":"a29cd1308cd8b9a6f0879a7ce1f6af30284f83a0","modified":1490766643000},{"_id":"source/_posts/LongestUncommonSubsequenceI.md","hash":"6698a5422e07355dd261fb7aa2d4daa1c2d456c9","modified":1491493970000},{"_id":"source/_posts/LongestUncommonSubsequenceII.md","hash":"58b8b3ffe8a5a56f2e2229cf7c85f019944d2451","modified":1491657650000},{"_id":"source/_posts/LongestWordinDictionarythroughDeleting.md","hash":"4de4686ba780ba345358d0942a0efdc51beb0e91","modified":1488333720000},{"_id":"source/_posts/MatchstickstoSquare.md","hash":"c322da8438dba110f82734999ba0a116d48bcf5a","modified":1486194549000},{"_id":"source/_posts/MaxConsecutiveOnesII.md","hash":"a9760cb3278a7fa40ec94e5158da7a781d18bf0b","modified":1484461913000},{"_id":"source/_posts/MaxConsecutiveOnes.md","hash":"dd77253a7fb1dd271bb80ca323453ab6e786cddd","modified":1487495351000},{"_id":"source/_posts/MaximumProductofWordLengths.md","hash":"a473acb044875d93b72311bcf390bbf38011a498","modified":1485526112000},{"_id":"source/_posts/MaximumVacationDays.md","hash":"6624a050172f22dc80704f2f45a8356334ee9c75","modified":1493621080000},{"_id":"source/_posts/MergeIntervals.md","hash":"031ee6fc460eb032bd2003e83fcc64121e92d168","modified":1490848917000},{"_id":"source/_posts/MaximumXORofTwoNumbersinanArray.md","hash":"b8a5d90ec0500bbea682358908715db315033c5a","modified":1486653085000},{"_id":"source/_posts/Minesweeper.md","hash":"8984bff8982f8aa591f3d4e8cb06a86b0ec20e4d","modified":1488248645000},{"_id":"source/_posts/MinimumAbsoluteDifferenceinBST.md","hash":"3932c1f1f64f1dfd41c3652fc209817feaf6754e","modified":1488510122000},{"_id":"source/_posts/MinimumMovestoEqualArrayElementsII.md","hash":"a5414a770a4279f3ad2b188118ab734a6d8c5259","modified":1485442375000},{"_id":"source/_posts/MinimumTimeDifference.md","hash":"03750cdd05ab954cc0a56f8701c75afcdfb4b37c","modified":1489478849000},{"_id":"source/_posts/MostFrequentSubtreeSum.md","hash":"5833605ace7a00020f50a8bdbf159cf897958a86","modified":1487056007000},{"_id":"source/_posts/NewStart.md","hash":"8e373a9c4e54ad72603e05d0edd11cdfeb3a0673","modified":1483426041000},{"_id":"source/_posts/NextGreaterElementI.md","hash":"0d4fe0c3278b3544288b7d7b08db4ebcdd8c06e1","modified":1486276056000},{"_id":"source/_posts/NextGreaterElementII.md","hash":"57cc6334c4b929b0e8c6f21ac6f8a17ba8ffcc53","modified":1488178506000},{"_id":"source/_posts/NextGreaterElementIII.md","hash":"998e39a9cad9b09dd4206f53f8a4aaadeecec87c","modified":1491832031000},{"_id":"source/_posts/NextPermutation.md","hash":"71750a76ef294c36e2d56136f94c0318c5bd3838","modified":1493460416000},{"_id":"source/_posts/NumberComplement.md","hash":"7b6a24daf1a7d7c5478d9ddee083f4bb2e620062","modified":1485273094000},{"_id":"source/_posts/OnesandZeroes.md","hash":"1db9b0fd255ea9a02593ee7b19f15a349cb23968","modified":1484929423000},{"_id":"source/_posts/OptimalDivision.md","hash":"b8ba8b5f12d8b8991aa36910816057fa8e6223b8","modified":1492312093000},{"_id":"source/_posts/PartitionEqualSubsetSum.md","hash":"2827ec318420479702406f9becd5a4df120550ed","modified":1484277030000},{"_id":"source/_posts/PathSumIII.md","hash":"c3d67bb6e610f0e952e7b504fc236aafe6f88a38","modified":1487056069000},{"_id":"source/_posts/PerfectSquares.md","hash":"f780574e45803d0562454812f066e6d2cd2d6029","modified":1484554268000},{"_id":"source/_posts/PermutationinString.md","hash":"df5c4bdb192edf474d4fa0143e72815b66c3b61a","modified":1493520656000},{"_id":"source/_posts/Permutations.md","hash":"2b0e871582d031934ce8b5d2017b1bc04125388a","modified":1487056097000},{"_id":"source/_posts/PowerofFour.md","hash":"4d755bc580344ab54c88761f89fc659d95186dad","modified":1490276513000},{"_id":"source/_posts/PermutationsII.md","hash":"3c39df33372f1e0400af61fe78f7a59fb0fdf282","modified":1492789169000},{"_id":"source/_posts/PredicttheWinner.md","hash":"aa1979cfe6126cf87fca5b2e497519f1bd325d48","modified":1486194619000},{"_id":"source/_posts/QueenAttack.md","hash":"7ee87beec4a7cb51d71b91f9699b011076ff63d2","modified":1491730101000},{"_id":"source/_posts/RangeSumQuery-Mutable.md","hash":"74058623734b6dae47a5e9052d7823c096595d0a","modified":1492871763000},{"_id":"source/_posts/RangeSumQuery2D-Immutable.md","hash":"9e2d2aac0036ca72e062f6aa50e516d0922b8b23","modified":1492010705000},{"_id":"source/_posts/RansomNote.md","hash":"c7d244c776cd29768df6800b24e7666342208fdd","modified":1484236683000},{"_id":"source/_posts/RelativeRanks.md","hash":"4a9609dbf63265f9a6601562381880857ed2b819","modified":1486277334000},{"_id":"source/_posts/RemoveKDigits.md","hash":"55a52679c1495e831110ec92e358e05bf86cb1cb","modified":1493133896000},{"_id":"source/_posts/RestoreIPAddresses.md","hash":"8c10d7420670df11268dfbd59a23beb7bd956c5c","modified":1493307331000},{"_id":"source/_posts/ReverseStringII.md","hash":"9eee2e8762edeabdf8a7680d56b77a110f98715e","modified":1489650929000},{"_id":"source/_posts/SearchforaRange.md","hash":"e331dba722bbbdf54f0f13c4442145fc2edfdb3a","modified":1493217909000},{"_id":"source/_posts/SingleElementinaSortedArray.md","hash":"2021c817cb0a8a185965ff3fa887b2ec1d2587a5","modified":1489046175000},{"_id":"source/_posts/SpiralMatrix.md","hash":"474c2c0522267860293aac60861cd595ff308db0","modified":1492093200000},{"_id":"source/_posts/SubarraySumEqualsK.md","hash":"56c0132163ab7a770d51ac9be13f4a5380676a88","modified":1493520390000},{"_id":"source/_posts/SurroundedRegions.md","hash":"e1f75c8862ba7f07474f9b39a5f71e0234f49ebe","modified":1489300552000},{"_id":"source/_posts/TargetSum.md","hash":"064b84c71bbfb4c2f5599fdd42b1c7a4101740bc","modified":1485618060000},{"_id":"source/_posts/TeemoAttacking.md","hash":"d4586c75ec7794fd8ae62c49a24cb4c5e6d5e107","modified":1486039618000},{"_id":"source/_posts/TotalHammingDistance.md","hash":"3543dc2fb9cd9417061fd0377a0725999b835a6b","modified":1484277003000},{"_id":"source/_posts/UniqueSubstringsinWraparoundString.md","hash":"c027d2558f269dc70155641f9c05e5f0d4158873","modified":1485788870000},{"_id":"source/_posts/WaterandJugProblem.md","hash":"c54cd901b528f078fcc96ae22687786b2ed8ef76","modified":1492426285000},{"_id":"source/_posts/ValidPerfectSquare.md","hash":"894e31eaa400441be33bdb1ebcaae08fadf202cb","modified":1485354344000},{"_id":"source/_posts/WiggleSortII.md","hash":"ebfad626855c8d6f381d09f6bd5cb74e58a12cc0","modified":1492268003000},{"_id":"source/_posts/WordSearchII.md","hash":"59c2de4e3912ef11c81a94964fc8651d0da9fd26","modified":1491291003000},{"_id":"themes/gandalfr/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486357308000},{"_id":"themes/gandalfr/.git/FETCH_HEAD","hash":"444beeaee09a43553c13a5baa7d9ca5eabfe5037","modified":1493622763000},{"_id":"themes/gandalfr/.git/ORIG_HEAD","hash":"6bcef924fe5b7d02ac0a1c749405001e18775062","modified":1493622763000},{"_id":"themes/gandalfr/.git/config","hash":"a70f111fb8b3d18c7007d06ff9bd6c5c6e6bdee6","modified":1486365832000},{"_id":"themes/gandalfr/.git/COMMIT_EDITMSG","hash":"eed7f7feb37e4dcc2adecd833054149e1fc6234a","modified":1493362973000},{"_id":"themes/gandalfr/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486357308000},{"_id":"themes/gandalfr/.git/index","hash":"a11687de7e3300d4ce3c26e7eebe8d41a413a4ba","modified":1493622764000},{"_id":"themes/gandalfr/.git/packed-refs","hash":"6f299e362770d70250edb034cd187c9f3988f689","modified":1486357309000},{"_id":"themes/gandalfr/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1486357309000},{"_id":"themes/gandalfr/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1486357309000},{"_id":"themes/gandalfr/layout/archive.jade","hash":"38369908f0f0fa5c9fbfc3594facd357994d2897","modified":1491923269000},{"_id":"themes/gandalfr/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1486357309000},{"_id":"themes/gandalfr/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1486357309000},{"_id":"themes/gandalfr/source/favicon.ico","hash":"b8eb4ec54a6ce48e939cfdcb775493d3d0ab58ef","modified":1486357309000},{"_id":"themes/gandalfr/node_modules/.DS_Store","hash":"faeeddc09fa77c8ca1d91bcb2445ce4cc271132d","modified":1488867680000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/shelljs_99e0d38f08fff0dcbff6","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486458132000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/shelljs_5ae170045d22f59326c8","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486458132000},{"_id":"themes/gandalfr/node_modules/verror/.gitmodules","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1360175300000},{"_id":"themes/gandalfr/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486357308000},{"_id":"themes/gandalfr/.git/logs/HEAD","hash":"a7730d5b4b4ca2ca75afe8c68be52eac92f270ef","modified":1493622763000},{"_id":"themes/gandalfr/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486357308000},{"_id":"themes/gandalfr/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1486357308000},{"_id":"themes/gandalfr/layout/mixins/paginator.jade","hash":"7451a25545dfcc64cc5f2c8bf0c817fde41770e3","modified":1493362916000},{"_id":"themes/gandalfr/layout/mixins/post.jade","hash":"4475dd99479cb6c2a122b0fe353e451e4a056575","modified":1486538165000},{"_id":"themes/gandalfr/layout/partial/comment.jade","hash":"738c2ec3858b3af88ff6a8883f9ce66e62977065","modified":1493357775000},{"_id":"themes/gandalfr/layout/partial/copyright.jade","hash":"3f2a357c9d4861386f81d97a97cde9b6817e35cc","modified":1490927831000},{"_id":"themes/gandalfr/layout/partial/layout.jade","hash":"d28fa3c39fca9624a87e7e83736cf2509dc14a43","modified":1486357309000},{"_id":"themes/gandalfr/layout/partial/head.jade","hash":"994b3ad3661cac35f78fa8d3450e86cb7eb7a5c6","modified":1486537504000},{"_id":"themes/gandalfr/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1486357309000},{"_id":"themes/gandalfr/layout/partial/scripts.jade","hash":"4577068667fb0210c85497340cd098abd5bc957f","modified":1486537836000},{"_id":"themes/gandalfr/source/css/gandalfr.css","hash":"ce037730191d183a6ff77291a1e09d8f093d31f8","modified":1493622763000},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1486357309000},{"_id":"themes/gandalfr/source/scss/gandalfr.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1486537504000},{"_id":"themes/gandalfr/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1486357309000},{"_id":"themes/gandalfr/node_modules/ansi-regex/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1465490702000},{"_id":"themes/gandalfr/node_modules/ansi-regex/index.js","hash":"8e2fe7fc814a39d590cf170ccc989a166d505c1e","modified":1484362985000},{"_id":"themes/gandalfr/node_modules/ansi-regex/package.json","hash":"f8b0184f52fe3ca34e62919c195e00e9c1257e72","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/ansi-regex/readme.md","hash":"79b8bd5d8af7fd6d79dcb7c24b3f2e03e1d2a029","modified":1484362985000},{"_id":"themes/gandalfr/node_modules/abbrev/README.md","hash":"c520bc857ec612ed88e13d794c47882d5aed3286","modified":1286218346000},{"_id":"themes/gandalfr/node_modules/abbrev/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432169859000},{"_id":"themes/gandalfr/node_modules/abbrev/abbrev.js","hash":"b75c6b10bbfac1092ef493079ae044cc89824dc0","modified":1397765081000},{"_id":"themes/gandalfr/node_modules/abbrev/package.json","hash":"f6d5b02b1a697a0dda87f8f7d1fe536fc0043f34","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/aproba/LICENSE","hash":"279f47bedbc7bb9520c5f26216b2323e8f0e728e","modified":1425060589000},{"_id":"themes/gandalfr/node_modules/aproba/README.md","hash":"61be99896f1ac5a80d32bf836976f68c3f2f7c99","modified":1486503781000},{"_id":"themes/gandalfr/node_modules/aproba/index.js","hash":"d418fd381ccd792368ff500952160e9e762d2989","modified":1486503781000},{"_id":"themes/gandalfr/node_modules/aproba/package.json","hash":"06d12a3ced33953456e7ff391c19f13972621a26","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/ansi-styles/index.js","hash":"7e89eee4c6711e897597268d129348b685cc6548","modified":1459197140000},{"_id":"themes/gandalfr/node_modules/ansi-styles/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/ansi-styles/package.json","hash":"f87af8fb3abaf7177fec3930b3a47a68c68dfc4d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/arr-diff/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1440300569000},{"_id":"themes/gandalfr/node_modules/ansi-styles/readme.md","hash":"b12348b9ea14a18112719b1aad4cdf7e52f4b35f","modified":1459197140000},{"_id":"themes/gandalfr/node_modules/arr-diff/README.md","hash":"aea1c9d09e3e4836b20459900490582a913ba318","modified":1449375940000},{"_id":"themes/gandalfr/node_modules/arr-diff/index.js","hash":"b0af4d581bd0e4f370526dfaee3d2a8daf45880c","modified":1449375115000},{"_id":"themes/gandalfr/node_modules/arr-diff/package.json","hash":"8f825734187808426aa94b7ad34c7ba63999c304","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/arr-flatten/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1426048064000},{"_id":"themes/gandalfr/node_modules/arr-flatten/README.md","hash":"3f5ac995fae4c1ac9372779114b7b683e3b21a85","modified":1426048068000},{"_id":"themes/gandalfr/node_modules/arr-flatten/index.js","hash":"f520001d7bfbf978f6b90448fc2dc51f5bdf6ca4","modified":1426048064000},{"_id":"themes/gandalfr/node_modules/array-differ/index.js","hash":"fa4d86125291436d0770fde12e47a92e6f521505","modified":1403205411000},{"_id":"themes/gandalfr/node_modules/array-differ/package.json","hash":"17617dfd74fbf4481e315f1e936b550cda7414ee","modified":1486538208000},{"_id":"themes/gandalfr/node_modules/arr-flatten/package.json","hash":"48b5b5ffad7a80f263779840279c327b2b301302","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/array-find-index/index.js","hash":"efd290fcda74bc499ada359abb6f06e7d0ea29f2","modified":1451410643000},{"_id":"themes/gandalfr/node_modules/array-differ/readme.md","hash":"a4e0fbfa8619397e85729ffe5dbc062672265821","modified":1403301440000},{"_id":"themes/gandalfr/node_modules/array-find-index/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/array-find-index/package.json","hash":"1cde84157a39590c73829730a128ab98849dec98","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/array-find-index/readme.md","hash":"b6c094ce304eac2a92a9139f491fdff4f2d951f2","modified":1475224475000},{"_id":"themes/gandalfr/node_modules/array-uniq/index.js","hash":"21fde13d097073e7ad115f5dd663807dcdfd9a89","modified":1466079614000},{"_id":"themes/gandalfr/node_modules/array-uniq/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/array-uniq/package.json","hash":"5f8505577e7cce8b3570b3c23990742a610b7be0","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/array-uniq/readme.md","hash":"b288e6729149a224019af0f9db91fa1435f05fa3","modified":1466079396000},{"_id":"themes/gandalfr/node_modules/array-unique/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1427255160000},{"_id":"themes/gandalfr/node_modules/array-unique/README.md","hash":"c469edac074366095833e9e37da13d111df44bd7","modified":1427255211000},{"_id":"themes/gandalfr/node_modules/array-unique/index.js","hash":"1826adc4c19e8d8bcf421d342ae7e2db52f69bb6","modified":1427255160000},{"_id":"themes/gandalfr/node_modules/array-unique/package.json","hash":"de270d777d83d1e6c065f4108234c86955778a8b","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/.bin/browserslist","hash":"3a6494eb45be76093f74550ebe6a300060ba94ac","modified":1485415772000},{"_id":"themes/gandalfr/node_modules/.bin/gulp","hash":"6febf2868b92a817f55f40172cc25b742da27e5e","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/.bin/har-validator","hash":"702b45900cba1bd2ee74c4df1a5b51db0aeab0d7","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/.bin/in-install","hash":"a16e50feb642c3d5fd3af55b8c14d607ef953709","modified":1436294964000},{"_id":"themes/gandalfr/node_modules/.bin/in-publish","hash":"047bfe380b20b46a52b2e12e1bb3f1c80681e6cd","modified":1436294941000},{"_id":"themes/gandalfr/node_modules/.bin/node-gyp","hash":"fc5a671da8fdc83c6bcd515cfcfdfcdc785db2d7","modified":1484011833000},{"_id":"themes/gandalfr/node_modules/.bin/mkdirp","hash":"0dbed17e23d62e8dc9893f9459768531b300c95c","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/.bin/node-sass","hash":"5d8f9cf25b83be5ca2ce3d6bf720116075566ad5","modified":1481344776000},{"_id":"themes/gandalfr/node_modules/.bin/nopt","hash":"f2a561712df0e004c712bfd6c9b0fdc70cc26e8e","modified":1447359143000},{"_id":"themes/gandalfr/node_modules/.bin/not-in-install","hash":"f48aff82c84d6442e8c9715ce7aae46604ef252b","modified":1436295265000},{"_id":"themes/gandalfr/node_modules/.bin/not-in-publish","hash":"93160a91cb683376190647b68dcfe86b722da241","modified":1436295264000},{"_id":"themes/gandalfr/node_modules/.bin/rimraf","hash":"366b465d5a8637f94cea9366f505a25fc78c8a83","modified":1447980323000},{"_id":"themes/gandalfr/node_modules/.bin/sassgraph","hash":"983e1581a6c68c99ccca85cb709081aa9a79c01c","modified":1465989192000},{"_id":"themes/gandalfr/node_modules/.bin/semver","hash":"95e0a5fdac7ea5824aff144c4416ca4a31b2ea6f","modified":1413420141000},{"_id":"themes/gandalfr/node_modules/.bin/sshpk-conv","hash":"83421a52e1420251e70586af88d6e2e34f3a7fed","modified":1472499521000},{"_id":"themes/gandalfr/node_modules/.bin/sshpk-sign","hash":"75271a4b0392b5549555f50085b991e8d9a3bd0c","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/.bin/strip-bom","hash":"89d5f738b25054bb4c82e60ad90f0a6ee81c9e34","modified":1408712487000},{"_id":"themes/gandalfr/node_modules/.bin/sshpk-verify","hash":"a74dd8749820e0a9e9d334bd09665d6e3e4885f2","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/.bin/strip-indent","hash":"aef33a307f851bb25b1bb7efbe24089df85cf7c8","modified":1407937346000},{"_id":"themes/gandalfr/node_modules/.bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1462408202000},{"_id":"themes/gandalfr/node_modules/.bin/uuid","hash":"cc4874ec4258ffff8b743227a3619f895941b563","modified":1479445477000},{"_id":"themes/gandalfr/node_modules/.bin/user-home","hash":"5df51f1f8552b61704a808793c129196b5efeb68","modified":1421171004000},{"_id":"themes/gandalfr/node_modules/.bin/window-size","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1447614663000},{"_id":"themes/gandalfr/node_modules/archy/.travis.yml","hash":"475f49f2ac7ca71a18a511fe8549491952a94a71","modified":1355734082000},{"_id":"themes/gandalfr/node_modules/archy/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1355734018000},{"_id":"themes/gandalfr/node_modules/archy/index.js","hash":"893d827a6d051964e215c48ee9a9ecdcb6a5d899","modified":1331248175000},{"_id":"themes/gandalfr/node_modules/archy/package.json","hash":"2cde1a2c556666edb7a7c0858e3cf3381b882a74","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/archy/readme.markdown","hash":"786f5f364ad18b4d50fe04ccb4571b09d027295f","modified":1355734012000},{"_id":"themes/gandalfr/node_modules/async-foreach/LICENSE-MIT","hash":"66da65f826b5293a5437c475751a9d0826d2956e","modified":1316119536000},{"_id":"themes/gandalfr/node_modules/async-foreach/README.md","hash":"7aba653cf644c5456b51586294f8b63a2c44a4f8","modified":1367240097000},{"_id":"themes/gandalfr/node_modules/async-foreach/grunt.js","hash":"dcf9112bffd310c7e6b042d13d02a1f8a9672b72","modified":1326250034000},{"_id":"themes/gandalfr/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1446952976000},{"_id":"themes/gandalfr/node_modules/async-foreach/package.json","hash":"bcb58aef16a928d850d82d50c9b39691109ea6f2","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/assert-plus/CHANGES.md","hash":"b64b8d16f3858a1c3d55538c5bfee934437af75b","modified":1447141659000},{"_id":"themes/gandalfr/node_modules/assert-plus/README.md","hash":"79988e7cb3bb80b7cc20dc420ee2a7f86ab3d3e0","modified":1446952976000},{"_id":"themes/gandalfr/node_modules/asn1/.npmignore","hash":"e4d8961c077c0e5648b0dcf3e885a607190674c2","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/assert-plus/package.json","hash":"045a7b6aa24f635ed97813ea49712c757bdb4a5e","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/assert-plus/assert.js","hash":"8f3f85bae8edd30db24882766a5c8c4df8357462","modified":1447140668000},{"_id":"themes/gandalfr/node_modules/asn1/.travis.yml","hash":"ccb3d08679457eddf37ce946ffab66f6440f70da","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asn1/README.md","hash":"71e6a47944ebaefe5d5357a7b6f46df9c389316f","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asn1/LICENSE","hash":"724e48cfc739674999ff82b4e49d76d5376818e9","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asn1/package.json","hash":"70ba62177f6e229defc8d59b37d5e22bc1773467","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/asynckit/LICENSE","hash":"9171131798797e013e6c922921540694b1e3542d","modified":1463552412000},{"_id":"themes/gandalfr/node_modules/asynckit/README.md","hash":"030a12b4b2a9151538e9491d3a4f23dfe9848f32","modified":1465928899000},{"_id":"themes/gandalfr/node_modules/asynckit/index.js","hash":"9201eacd2650642ff12a8af5fd1dbf7dc7848bee","modified":1463795005000},{"_id":"themes/gandalfr/node_modules/asynckit/bench.js","hash":"8dacd95640ad3d0ae47aebf5bd1ba4d83f6a1f1d","modified":1463686174000},{"_id":"themes/gandalfr/node_modules/asynckit/package.json","hash":"a67ffb34d6b26b769e7937c5c32f85a774e10ccc","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/asynckit/serial.js","hash":"9af5e746a0a9f8ba24926bc2fbb9786cf13f081b","modified":1465665583000},{"_id":"themes/gandalfr/node_modules/asynckit/parallel.js","hash":"ecead062825e6790ce70c1879c745808c8ce7528","modified":1465665593000},{"_id":"themes/gandalfr/node_modules/asynckit/serialOrdered.js","hash":"26f4cadf2685ee07af06e82803171847f74b9fb3","modified":1465665610000},{"_id":"themes/gandalfr/node_modules/asynckit/stream.js","hash":"c8bde32c80d2f3ecb33462a0aed86851c4c7e9e6","modified":1465859636000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/.npmignore","hash":"37d30d03d55d2451e3155618fed639b5d1bebafb","modified":1453936297000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/LICENSE","hash":"13b22b5c5f89edc3f31e092b7298cd65687e7250","modified":1449362748000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/README.md","hash":"666f3b79e2fd863f6118b041a37130058637de9d","modified":1454115179000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/CHANGES.md","hash":"b7811fe6c7dbff3708107fe65b34b94081cf0371","modified":1454118439000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/index.js","hash":"d154805f279e1f7708732426e960ab7990fffbe2","modified":1454118261000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/tracker-base.js","hash":"7246c8d6f9faa94a98ed31353cbdf41c62ce20fb","modified":1454118261000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/package.json","hash":"24e3b8f7c1b50a4c045dbdf04aa0363156401887","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/tracker-group.js","hash":"7dd60bcd62aa5385de69e4b5d6e91362ed305616","modified":1458084382000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/tracker-stream.js","hash":"f0f0d608c7bc4dbf6adbf1af52baf68f84905a2d","modified":1454118261000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/tracker.js","hash":"6afd823dfe51e31c67fd4e79a9db24790e7770d9","modified":1454118261000},{"_id":"themes/gandalfr/node_modules/autoprefixer/AUTHORS","hash":"d1575628059014885cc3b4bdb01e2e6e405c1da1","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/LICENSE","hash":"0b4be858ebd79c7ec4f7ba4fbda0406e3f3e821f","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/CHANGELOG.md","hash":"00700249aed7e881270e2f2c6ae3c6ec6c94abd8","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/README.md","hash":"675a33e73212e21b66303ef9d620781f64e28eba","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/aws4/.npmignore","hash":"c2ad4c3e5e24417715cba447a66fa2a024477584","modified":1456867923000},{"_id":"themes/gandalfr/node_modules/autoprefixer/package.json","hash":"3a7754d62be5e42eb1f5e9ec4b34d9fe0d59b026","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/aws4/.tern-port","hash":"8db710197696210837bb654bcdc25d6c523c1150","modified":1371607454000},{"_id":"themes/gandalfr/node_modules/aws4/.travis.yml","hash":"73c40717fe695caf839f2bc871320837b3c2abae","modified":1451426685000},{"_id":"themes/gandalfr/node_modules/aws4/LICENSE","hash":"9ba903f14c37d0ab0250a8e6920e7269bdc5b294","modified":1384232184000},{"_id":"themes/gandalfr/node_modules/aws4/README.md","hash":"8c7e5705921c53e38919481a09ad2d545422648c","modified":1476225268000},{"_id":"themes/gandalfr/node_modules/aws4/aws4.js","hash":"3af299bb062502fec5a6e688db29e39df752a807","modified":1486481903000},{"_id":"themes/gandalfr/node_modules/aws4/lru.js","hash":"015965230b90e69906f66fca1792c4557336336f","modified":1462643151000},{"_id":"themes/gandalfr/node_modules/aws4/package.json","hash":"16b8ee94fe83e27f05a45bfe99208b51d138b18d","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/aws-sign2/README.md","hash":"5e8e0e7c811b1f319c0e94ff08f38ecf4896e3c9","modified":1366607619000},{"_id":"themes/gandalfr/node_modules/aws-sign2/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1366607619000},{"_id":"themes/gandalfr/node_modules/aws-sign2/index.js","hash":"b380be041c204108febb8f32b19431a54aaed4a6","modified":1444584231000},{"_id":"themes/gandalfr/node_modules/aws-sign2/package.json","hash":"fd9edc601b2e0c019751df1dbb8838fb52643966","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/balanced-match/.npmignore","hash":"bf3481c896126bd5395e5095c994fb82c9e4fa8a","modified":1468834297000},{"_id":"themes/gandalfr/node_modules/balanced-match/README.md","hash":"1386baac658274264e12701b085143357d817bb1","modified":1468834463000},{"_id":"themes/gandalfr/node_modules/balanced-match/LICENSE.md","hash":"09013c002fbdd686da2ec13c5a6d014f0a294ba9","modified":1468834297000},{"_id":"themes/gandalfr/node_modules/balanced-match/index.js","hash":"d21b9b828ab5ebb248d8973602f036f1ab301fcf","modified":1468834350000},{"_id":"themes/gandalfr/node_modules/balanced-match/package.json","hash":"7340d7fa195254a52bfa46aef8e75f71d083bfdc","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/beeper/index.js","hash":"6602481e6c15ce65d3a17ac83092866e16f6381f","modified":1477419650000},{"_id":"themes/gandalfr/node_modules/beeper/package.json","hash":"d67aa6b6f7b2e03e819eae1f08430e694aa776b5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/beeper/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477419650000},{"_id":"themes/gandalfr/node_modules/beeper/readme.md","hash":"d50f3e764f0836cea37c187224fba2acd0b4eda7","modified":1477419650000},{"_id":"themes/gandalfr/node_modules/bcrypt-pbkdf/README.md","hash":"1ab2ae999a63598c7e6128ac485fc9515e9cb6f1","modified":1486007492000},{"_id":"themes/gandalfr/node_modules/bcrypt-pbkdf/package.json","hash":"da0fe85b02f817faa5fef9ca5b5f99393bfb312a","modified":1486538259000},{"_id":"themes/gandalfr/node_modules/bcrypt-pbkdf/index.js","hash":"4be9d75ea7a7a9c91fe8436f52ebd113fdc674f3","modified":1486007667000},{"_id":"themes/gandalfr/node_modules/block-stream/LICENCE","hash":"fbc159c463d7717ec1acff3d8b6524d0ce74f2a7","modified":1331939706000},{"_id":"themes/gandalfr/node_modules/block-stream/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432105388000},{"_id":"themes/gandalfr/node_modules/block-stream/README.md","hash":"165520dbb78c0d401c0cbc3efc33753b9737d2f0","modified":1317956974000},{"_id":"themes/gandalfr/node_modules/block-stream/block-stream.js","hash":"60770fccf771c6d03441efebf62fb257473c163a","modified":1366232220000},{"_id":"themes/gandalfr/node_modules/boom/.npmignore","hash":"ea5a6d3bfaa388a6dbf7be84ef42c1a51dd7c416","modified":1407506005000},{"_id":"themes/gandalfr/node_modules/block-stream/package.json","hash":"d3d2d2525f9ed1a943b7322d34f9f2c2358d8463","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/boom/.travis.yml","hash":"d6a8554d6a87df690d085a197d30109f26bdb583","modified":1442930822000},{"_id":"themes/gandalfr/node_modules/boom/CONTRIBUTING.md","hash":"61998267d75f17fdd423c1c742edc20a1561c1e2","modified":1411478104000},{"_id":"themes/gandalfr/node_modules/boom/LICENSE","hash":"53ded9fedb90236c92321a45d1ab00fa35f282d8","modified":1407506005000},{"_id":"themes/gandalfr/node_modules/boom/README.md","hash":"2d7368cd181df38d42b300f04f7323cc16f9b7d2","modified":1446232305000},{"_id":"themes/gandalfr/node_modules/brace-expansion/README.md","hash":"3ed262742cc9e8e0db93c5f1d729127af1ffbe82","modified":1469021318000},{"_id":"themes/gandalfr/node_modules/boom/package.json","hash":"8dba37f00ca63b09a01971bf53dcbfc9ee78de3f","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/brace-expansion/index.js","hash":"ca6eef16d70a99ded935606f7b62f97be1033323","modified":1469021318000},{"_id":"themes/gandalfr/node_modules/browserslist/cli.js","hash":"3a6494eb45be76093f74550ebe6a300060ba94ac","modified":1485415772000},{"_id":"themes/gandalfr/node_modules/browserslist/CHANGELOG.md","hash":"5d0c8ea1bd45341388daa757e92750c4cd62431a","modified":1485779734000},{"_id":"themes/gandalfr/node_modules/browserslist/LICENSE","hash":"ebcfde46d0d8f79d00d5c42bbcfaccdb28d67cb0","modified":1484581285000},{"_id":"themes/gandalfr/node_modules/browserslist/README.md","hash":"8cf66bc1de9e371f59527d20822632de7c248581","modified":1485257605000},{"_id":"themes/gandalfr/node_modules/browserslist/index.js","hash":"84668a568eff31f07b65956c4b627fc7adbbcb38","modified":1485779538000},{"_id":"themes/gandalfr/node_modules/browserslist/package.json","hash":"de5eb44bc0816ecafb4518efd04db7e2ac82bcb1","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/brace-expansion/package.json","hash":"dcb1e3529e2e4b6ee10f99d7b0dd9a48ad02d9be","modified":1486538208000},{"_id":"themes/gandalfr/node_modules/braces/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1463843013000},{"_id":"themes/gandalfr/node_modules/braces/README.md","hash":"5d8b9eba6236008531040cf7a3ae36199bba4241","modified":1463843571000},{"_id":"themes/gandalfr/node_modules/braces/package.json","hash":"6c319ed5b66c609a55208b955535ca36636bc112","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/braces/index.js","hash":"68b2876bd7c9fa21956c4bacb0af16978eee6c08","modified":1463843400000},{"_id":"themes/gandalfr/node_modules/builtin-modules/builtin-modules.json","hash":"953b59a184bce91f59b938f6e60a19782c68bfb0","modified":1451655545000},{"_id":"themes/gandalfr/node_modules/builtin-modules/index.js","hash":"c5531b6f78beb7583eb04832971f23056d11f5dc","modified":1451655539000},{"_id":"themes/gandalfr/node_modules/builtin-modules/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/builtin-modules/package.json","hash":"3c198b65090f2811716dbd96d1d730a95f804833","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/builtin-modules/readme.md","hash":"5456a1f751e5525acb49307bedc1f58a5b6a5b3f","modified":1441128472000},{"_id":"themes/gandalfr/node_modules/builtin-modules/static.js","hash":"236bc8e0e9861a4dd0e629b3189fcd1eab61c005","modified":1430753509000},{"_id":"themes/gandalfr/node_modules/buffer-shims/index.js","hash":"dd320600941e8120a2b23f4dae07ea8c263e4647","modified":1462560643000},{"_id":"themes/gandalfr/node_modules/buffer-shims/license.md","hash":"f6a31aeb7f0de3db0bf8eb10c2ea236257fdb187","modified":1462554386000},{"_id":"themes/gandalfr/node_modules/buffer-shims/package.json","hash":"4f923d1b9cb89fb9d923a338e41dd9e3c58947c8","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/buffer-shims/readme.md","hash":"cb2ff15a1b206374422c38790db50ed936e03cc0","modified":1462558986000},{"_id":"themes/gandalfr/node_modules/camelcase-keys/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/camelcase-keys/index.js","hash":"1dfea152d4c0081f9a2b43ca8b060d04874e0021","modified":1458051710000},{"_id":"themes/gandalfr/node_modules/camelcase-keys/readme.md","hash":"2e8d2e70154ef46f7f2d3118ccff382bd4f7b549","modified":1458051609000},{"_id":"themes/gandalfr/node_modules/camelcase-keys/package.json","hash":"5b8103de4188a865daf41db693806219929d6041","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/camelcase/readme.md","hash":"c90528b5f1cea2de255651c9daab5b0aea013737","modified":1447354467000},{"_id":"themes/gandalfr/node_modules/camelcase/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/camelcase/package.json","hash":"d53ce8cd6639944bffe7868fbc2905e959393c5b","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/camelcase/index.js","hash":"2b8c116fea89376fba3557ffb11fa0e3328846d5","modified":1457803830000},{"_id":"themes/gandalfr/node_modules/caseless/LICENSE","hash":"48f9e0a4c07f36c07d47962212fe022d0417c90f","modified":1435268329000},{"_id":"themes/gandalfr/node_modules/caseless/index.js","hash":"326fc25f6edec25f7d239314ed6e75259147088a","modified":1424972076000},{"_id":"themes/gandalfr/node_modules/caseless/README.md","hash":"5770b9496fb480f7c403b6c38759a27d6170e882","modified":1414608769000},{"_id":"themes/gandalfr/node_modules/caseless/package.json","hash":"866c40e48e0da9125155d3ae77cba3df03f87a94","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/caseless/test.js","hash":"73948ff77c144352fb9d9615079ee35cab781912","modified":1414609010000},{"_id":"themes/gandalfr/node_modules/caniuse-db/.npmignore","hash":"8450da94364ad56c1f0704465fc30429d96b97a2","modified":1390883653000},{"_id":"themes/gandalfr/node_modules/caniuse-db/.editorconfig","hash":"7aed10b32add23f5aeaaf0077b431e926e1417b5","modified":1433902033000},{"_id":"themes/gandalfr/node_modules/caniuse-db/CONTRIBUTING.md","hash":"e56c388b39e491ef7528164a6edaaacda07f590e","modified":1459919991000},{"_id":"themes/gandalfr/node_modules/caniuse-db/LICENSE","hash":"1167f0e28fe2db01e38e883aaf1e749fb09f9ceb","modified":1464965485000},{"_id":"themes/gandalfr/node_modules/caniuse-db/README.md","hash":"369d4e54e3f5cbd8e6d6836f6f97aecbe54ff1d9","modified":1479361973000},{"_id":"themes/gandalfr/node_modules/caniuse-db/package.json","hash":"383ecf9bbefb023740a1a0d1e4df1844107a83e1","modified":1486538261000},{"_id":"themes/gandalfr/node_modules/clone/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1346721042000},{"_id":"themes/gandalfr/node_modules/clone/.travis.yml","hash":"35c3960038b3eb1390c0970d0713b4ca33a99c31","modified":1427326534000},{"_id":"themes/gandalfr/node_modules/clone/LICENSE","hash":"ab8d07f122b88e61e3c3596d78fe4a41ee3c2e13","modified":1421231867000},{"_id":"themes/gandalfr/node_modules/clone/README.md","hash":"697e5c6b42265181c282c7797c349c7737df0b3a","modified":1425167635000},{"_id":"themes/gandalfr/node_modules/clone/package.json","hash":"d842786fa22ba83fa083f5172f9607453e33868b","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/clone/clone.js","hash":"dc80d1d2716cb3180d344f4b4cbbee5d7736c52d","modified":1427323823000},{"_id":"themes/gandalfr/node_modules/clone/test-apart-ctx.html","hash":"f5288e5d44243cb371126a0dc6aac649a18c43aa","modified":1427323680000},{"_id":"themes/gandalfr/node_modules/clone/test.html","hash":"87e49bc506f97b3c491d1723970b2c134f37e4ad","modified":1427323548000},{"_id":"themes/gandalfr/node_modules/clone-stats/LICENSE.md","hash":"a2044c244873a141001e2bcae34bd06c491545b5","modified":1389417013000},{"_id":"themes/gandalfr/node_modules/clone/test.js","hash":"9eb61238eead53a319845309edb1a557708bb9e5","modified":1427324275000},{"_id":"themes/gandalfr/node_modules/clone-stats/README.md","hash":"cf817d942fe8d9b8ef6c08c65701d10e53a4daea","modified":1389417059000},{"_id":"themes/gandalfr/node_modules/clone-stats/index.js","hash":"e4d66adbb2e1e760df1d70b8d2781564c163f3c0","modified":1389416516000},{"_id":"themes/gandalfr/node_modules/clone-stats/package.json","hash":"cace229a078d8e57e8cb133034ad485327cf259a","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/clone-stats/test.js","hash":"68e04b2b4b70a534fe0828a20aa1e599857752d3","modified":1389423624000},{"_id":"themes/gandalfr/node_modules/code-point-at/index.js","hash":"280ea6787e2472d6001554ab9513814ef27695bd","modified":1478169479000},{"_id":"themes/gandalfr/node_modules/code-point-at/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477419843000},{"_id":"themes/gandalfr/node_modules/code-point-at/readme.md","hash":"821d0f3d8140f560309f58e197b9ddc5b158355f","modified":1478167595000},{"_id":"themes/gandalfr/node_modules/code-point-at/package.json","hash":"122347398489bcc4b23d5edce11e52d8717033ba","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/combined-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1403594961000},{"_id":"themes/gandalfr/node_modules/combined-stream/Readme.md","hash":"9a4115c7973388087b21e93e1c538371e5f94ce9","modified":1434294512000},{"_id":"themes/gandalfr/node_modules/concat-map/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1339129737000},{"_id":"themes/gandalfr/node_modules/combined-stream/package.json","hash":"00c36bb32e01373307277297cadaa04a36f01122","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/concat-map/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1391050985000},{"_id":"themes/gandalfr/node_modules/concat-map/README.markdown","hash":"132e6e8fd1d19ec2422fdcde00840d8237e44094","modified":1354099276000},{"_id":"themes/gandalfr/node_modules/concat-map/index.js","hash":"a3063f014cc693b320dbd64de3243a79247c1e05","modified":1354939769000},{"_id":"themes/gandalfr/node_modules/concat-map/package.json","hash":"11b4a8d1968e0f6e4cf14903af1156d095d0c6cb","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/cliui/CHANGELOG.md","hash":"26cb805006986096e67141729c6fa6e6de4b3fc6","modified":1460342812000},{"_id":"themes/gandalfr/node_modules/cliui/LICENSE.txt","hash":"039fa81eb89fc5c892f5ce2d22ee6ac0a8503880","modified":1458191766000},{"_id":"themes/gandalfr/node_modules/cliui/README.md","hash":"1e22b71fd4a73fa941054e5f565c3f4e21827804","modified":1460340216000},{"_id":"themes/gandalfr/node_modules/cliui/index.js","hash":"ffb7fefbb726b99e2dff9e1342ff86caba27e863","modified":1458191766000},{"_id":"themes/gandalfr/node_modules/cliui/package.json","hash":"fd3de44cdde1c0931eb576bda3967b0f9f78022f","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/console-control-strings/LICENSE","hash":"ce0c4782bdbd720baf4d2484e5b71728d3a943af","modified":1466024803000},{"_id":"themes/gandalfr/node_modules/console-control-strings/README.md","hash":"92bb88022a6dbb3c43e3e75f4dc5ff3338761e10","modified":1466033324000},{"_id":"themes/gandalfr/node_modules/console-control-strings/README.md~","hash":"52143f6d5b872e8195a990d94f28cbb7ba02402d","modified":1466025219000},{"_id":"themes/gandalfr/node_modules/console-control-strings/index.js","hash":"595ec205c05580516996aa88de64adc088fddd66","modified":1466033248000},{"_id":"themes/gandalfr/node_modules/console-control-strings/package.json","hash":"dd838e39a61e4f05c27445db59728fa4d522a114","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/core-util-is/LICENSE","hash":"a95471326a84657b0e164f84e1285685f63011e0","modified":1447979068000},{"_id":"themes/gandalfr/node_modules/core-util-is/README.md","hash":"d4987293f1078d937454a14a5ca6f386d227679d","modified":1447978999000},{"_id":"themes/gandalfr/node_modules/core-util-is/package.json","hash":"66969d206e004dd87a0e5184921de184d24c2f77","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/core-util-is/float.patch","hash":"d7f073ceb05c6f6dd1bb852fc00f5379a3e41301","modified":1447978999000},{"_id":"themes/gandalfr/node_modules/core-util-is/test.js","hash":"2837ee1d57f385943ba5ccc7fd0ec4ed1cb8cfdd","modified":1447979358000},{"_id":"themes/gandalfr/node_modules/commander/History.md","hash":"386cc2f8d7b3b54307b7056a57fc4516402aa894","modified":1444749720000},{"_id":"themes/gandalfr/node_modules/commander/LICENSE","hash":"63513188251d15fcdc716703fbee89be4a3a20e6","modified":1444531073000},{"_id":"themes/gandalfr/node_modules/commander/Readme.md","hash":"af810334e87894faf80bd73d9e207c9d5f2b3c90","modified":1444531073000},{"_id":"themes/gandalfr/node_modules/commander/package.json","hash":"0125fe310d05f2970fda1c5dd65b4f50b7bba4ce","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/commander/index.js","hash":"5adc820ea125a479f7fa597cfe2083eeede0dd2b","modified":1444748408000},{"_id":"themes/gandalfr/node_modules/chalk/index.js","hash":"08315806beaa18a4eb58052e8e7182b2d8bddf8f","modified":1459210441000},{"_id":"themes/gandalfr/node_modules/chalk/package.json","hash":"ef00e967fcff92d5a6141ac92bf95d7bdf44380b","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/chalk/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1459195776000},{"_id":"themes/gandalfr/node_modules/chalk/readme.md","hash":"a10251893e1a61957a4c7238001e682d20d46d47","modified":1459210441000},{"_id":"themes/gandalfr/node_modules/dashdash/CHANGES.md","hash":"d4c1434f92782308105f24a11c0bdb076127be5e","modified":1479854012000},{"_id":"themes/gandalfr/node_modules/dashdash/LICENSE.txt","hash":"427497f949741f3f7e72ea1e62749908e9c4f5b9","modified":1451581401000},{"_id":"themes/gandalfr/node_modules/dashdash/package.json","hash":"0d8371cc3688a997c19ac4c8aa398495d84f49f9","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/dashdash/README.md","hash":"e40739349732594d5d96438bd27aa444915d3f79","modified":1453144686000},{"_id":"themes/gandalfr/node_modules/currently-unhandled/browser.js","hash":"233ff2ee2584747df9a03363e1e6279a37cbd975","modified":1464863052000},{"_id":"themes/gandalfr/node_modules/currently-unhandled/core.js","hash":"7fdacb0bc9192bf6151701612df40e8e44a3dd4e","modified":1464842694000},{"_id":"themes/gandalfr/node_modules/currently-unhandled/index.js","hash":"274467fba7e013f8c6a48f3763023ca1b2d8610f","modified":1464848650000},{"_id":"themes/gandalfr/node_modules/currently-unhandled/license","hash":"76a1abf5ae34f3a0ccdeff35879f4b42c24c333e","modified":1464837341000},{"_id":"themes/gandalfr/node_modules/currently-unhandled/package.json","hash":"b7420a3b8150f9faf3e814fc92d8f3a63d12255d","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/currently-unhandled/readme.md","hash":"90b084bd130f094dc0f467f5fa8dd6c3ca0c5faf","modified":1464863904000},{"_id":"themes/gandalfr/node_modules/cross-spawn/.editorconfig","hash":"625a1e1af0bffc1c37d437fa4455ee6380c0ddc6","modified":1451748453000},{"_id":"themes/gandalfr/node_modules/cross-spawn/.eslintrc","hash":"ae12a60880d42abf6c59d85f7f441ebc066ea752","modified":1463572148000},{"_id":"themes/gandalfr/node_modules/cross-spawn/.npmignore","hash":"b9cde40294800ff90fa50ee4723d34c714ce4af6","modified":1435782623000},{"_id":"themes/gandalfr/node_modules/cross-spawn/.travis.yml","hash":"99dce7699b4b61d529c92ed131927c95bcec5451","modified":1463577802000},{"_id":"themes/gandalfr/node_modules/cross-spawn/LICENSE","hash":"45c1476739d0c028c845b2c90c401c3a4435de04","modified":1435844224000},{"_id":"themes/gandalfr/node_modules/cross-spawn/README.md","hash":"b9cf731a01fdfe647c5786041f7ffc767f5cf1e8","modified":1463577802000},{"_id":"themes/gandalfr/node_modules/cross-spawn/appveyor.yml","hash":"475bcce83ad5df97d7c7955b42f047ebee3a784d","modified":1463577802000},{"_id":"themes/gandalfr/node_modules/cross-spawn/index.js","hash":"db81cb7b0c65f5b0dfe1b81f2217a6277bc4822a","modified":1463577802000},{"_id":"themes/gandalfr/node_modules/cross-spawn/package.json","hash":"f2e0a0677fe9ebe2936eb9b28116799309093a8f","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/cryptiles/.npmignore","hash":"5780c6e4913f76085dc4a32b9a8c5b2d2a37ae1d","modified":1432064081000},{"_id":"themes/gandalfr/node_modules/cryptiles/.travis.yml","hash":"a76172450d8ce91e1812ed3c7591fe03d7364446","modified":1441778625000},{"_id":"themes/gandalfr/node_modules/cryptiles/LICENSE","hash":"2d1840f1b4088e3a370317c82e7b443321f2b2eb","modified":1441778892000},{"_id":"themes/gandalfr/node_modules/cryptiles/README.md","hash":"52c9561e75f66870d194d12ac07c05bc0484df18","modified":1441778892000},{"_id":"themes/gandalfr/node_modules/cryptiles/package.json","hash":"f3d234ac6e6f79b310742c6c7efc54e91bbbdb35","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/decamelize/index.js","hash":"b2b327355fce3e54d2a2c542beb41ae803c33285","modified":1457167643000},{"_id":"themes/gandalfr/node_modules/decamelize/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/decamelize/package.json","hash":"738843754359a521676544e7a765031e3efe2e9e","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/decamelize/readme.md","hash":"ab75be4d249b40443b662f2cd920be0cf657c6e0","modified":1457167687000},{"_id":"themes/gandalfr/node_modules/delayed-stream/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1430430799000},{"_id":"themes/gandalfr/node_modules/delayed-stream/License","hash":"04e7b761eee5270ea8914303516852faf990394b","modified":1430160212000},{"_id":"themes/gandalfr/node_modules/delayed-stream/Makefile","hash":"1d88cf18c0fef56e91425a086590e31271a7c4d5","modified":1430160212000},{"_id":"themes/gandalfr/node_modules/delayed-stream/package.json","hash":"d7249f297b55fe7d285423217355c80ebd80a439","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/delayed-stream/Readme.md","hash":"21db9b7ec97b7028a031a18867aab00575b09850","modified":1430160212000},{"_id":"themes/gandalfr/node_modules/dateformat/.npmignore","hash":"12ec46da941fbfdf8180fdd70be3b4fe7d4148ef","modified":1468365741000},{"_id":"themes/gandalfr/node_modules/dateformat/LICENSE","hash":"bbdbafe95c7e86caa022d7012805e8f06532b3e1","modified":1468365741000},{"_id":"themes/gandalfr/node_modules/dateformat/Readme.md","hash":"e66643d6bf35e749ee637bf0c05ac02f8cbd0acf","modified":1468365741000},{"_id":"themes/gandalfr/node_modules/dateformat/package.json","hash":"7fb9ec750d53eb20c55027f54de001acc9063899","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/defaults/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1443824587000},{"_id":"themes/gandalfr/node_modules/defaults/LICENSE","hash":"cc09a716da29a2bfcb41930b14a153f145a0a057","modified":1443824587000},{"_id":"themes/gandalfr/node_modules/defaults/README.md","hash":"47acb2e278952ea76467c6e0165e8a1ef8fa45c4","modified":1443824587000},{"_id":"themes/gandalfr/node_modules/defaults/package.json","hash":"65567add56d8d9f10aae469d9c420bf74d98ac11","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/defaults/index.js","hash":"e40db818e440a87121be59fc3169018315e2db23","modified":1443824587000},{"_id":"themes/gandalfr/node_modules/defaults/test.js","hash":"41537038884b550553e36f41145abb61b9193efc","modified":1443824587000},{"_id":"themes/gandalfr/node_modules/delegates/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1450122923000},{"_id":"themes/gandalfr/node_modules/delegates/History.md","hash":"37e8641729544115b9d3a566ead3480e47d44a9b","modified":1450122948000},{"_id":"themes/gandalfr/node_modules/delegates/License","hash":"9d414bd96ce8326fadc2f959781154de49af5b00","modified":1450122923000},{"_id":"themes/gandalfr/node_modules/delegates/Makefile","hash":"abd4a7cd4a519df349900dd853a307f58a5cd4a5","modified":1450122923000},{"_id":"themes/gandalfr/node_modules/delegates/Readme.md","hash":"b0afdd75170fd52fc87f9d0bbaa713054fdf42c7","modified":1450122923000},{"_id":"themes/gandalfr/node_modules/delegates/index.js","hash":"694697be68fb102fb7e9f70d9f35a8827c6d6943","modified":1450122923000},{"_id":"themes/gandalfr/node_modules/delegates/package.json","hash":"b2d9f786c4ee83a896051ad9f38423c2244925f7","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/deprecated/.npmignore","hash":"79b4a373fe874f8320da91bb5ff7bfb1b0cb3404","modified":1390537035000},{"_id":"themes/gandalfr/node_modules/deprecated/.travis.yml","hash":"90f5e8d71697d1271575c5be0c3d9174ffa49f6f","modified":1390537035000},{"_id":"themes/gandalfr/node_modules/deprecated/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1390537035000},{"_id":"themes/gandalfr/node_modules/deprecated/README.md","hash":"ffdd6a0f1e831d1933c19bc546526883964ef28e","modified":1390538777000},{"_id":"themes/gandalfr/node_modules/deprecated/index.js","hash":"5eb9790e1df022081b0d1fc24a52a5b61ee47990","modified":1390539034000},{"_id":"themes/gandalfr/node_modules/deprecated/package.json","hash":"4aade2f9061f37280e397cbfdb137be2982c20ed","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/detect-file/LICENSE","hash":"dddf9874838d698dd4b1eae7422ba6d315e0acc6","modified":1461831633000},{"_id":"themes/gandalfr/node_modules/detect-file/index.js","hash":"e5e3c3028d6a4025111cc19c6eac2ec27b6253a6","modified":1467839863000},{"_id":"themes/gandalfr/node_modules/detect-file/README.md","hash":"df07026995c4fa0e34bde3e0dc1dda5860b59701","modified":1467839867000},{"_id":"themes/gandalfr/node_modules/duplexer2/.npmignore","hash":"cc16a69ea300506c49a0844bc69745bf8f34cf40","modified":1378905957000},{"_id":"themes/gandalfr/node_modules/detect-file/package.json","hash":"77dca52b4b9a29422e17737b2d73708d51fa241c","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/duplexer2/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1378532352000},{"_id":"themes/gandalfr/node_modules/duplexer2/LICENSE.md","hash":"e3136307cb0ebcb271379a109b98b19e8c481ffd","modified":1362299114000},{"_id":"themes/gandalfr/node_modules/duplexer2/README.md","hash":"a2f5cdfd53e3f8e1c415b097df376e7f32b3b7a1","modified":1378905869000},{"_id":"themes/gandalfr/node_modules/duplexer2/example.js","hash":"194a1edd345562fb45486c1cb4cbd63143ca1d86","modified":1398042537000},{"_id":"themes/gandalfr/node_modules/duplexer2/index.js","hash":"5dc1cf405aad205f2033b4635f199cf51dc98db8","modified":1398042537000},{"_id":"themes/gandalfr/node_modules/duplexer2/package.json","hash":"7b385055067b45260dbbc86ddbe2903707383d77","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1484769627000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/README.md","hash":"6ce8a077417906eff4ecfe4ca6746eb2584d58e4","modified":1485174979000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/automated-update.js","hash":"644840be2c6a80839bac6c2f5afa8e43adfa8d7d","modified":1485174979000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/CHANGELOG.md","hash":"65d03380ee2410b26b6878b7b9f5427286533af0","modified":1485174979000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/build.js","hash":"22859231113625bb5a0afe8879bbd97f41ed619c","modified":1485174979000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/full-versions.js","hash":"6e7b9e28060c8cd0fe37bb8de974c340292cccdf","modified":1486458126000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/index.js","hash":"f1e68855008ddbaaaa5ec75e804d3f7ed6f15410","modified":1485174979000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/package.json","hash":"93c87b2d7d84f1ba8673812b8bc540beb74eb8a7","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/shelljs_e0f1de03fd2e15804389","hash":"18aa9c4fa78046de575513f2bd6c8bb0d39b0e95","modified":1486458132000},{"_id":"themes/gandalfr/node_modules/electron-to-chromium/versions.js","hash":"735e61bbab10b41c58390bb9166812ceb1387604","modified":1486458126000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/.npmignore","hash":"4eb6d3215a6bbe8de1dd28113d86860c61a5531e","modified":1393978405000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/LICENSE","hash":"d9dddd103d636dbaa178cd222de612fd923f62da","modified":1393978405000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/index.js","hash":"13c052ad0b0507a4203d5d1274fdfa049a6c1339","modified":1448288282000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/README.md","hash":"97cb1bdec48ebb5e46e64fc5441c79d3d38a3c82","modified":1408853444000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/package.json","hash":"c11fe6ae1a300685d8a24ee8712dc0b156825876","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/test.js","hash":"9709f584f556ceb8acaa0fd746029dcb58390eb4","modified":1408853485000},{"_id":"themes/gandalfr/node_modules/end-of-stream/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1385507043000},{"_id":"themes/gandalfr/node_modules/end-of-stream/README.md","hash":"9873a3d2102becace683bf903a8d4e8df09a7ea4","modified":1387449646000},{"_id":"themes/gandalfr/node_modules/end-of-stream/index.js","hash":"138bd49bcb95b65244f0eb267fcac0288e5b059b","modified":1392718617000},{"_id":"themes/gandalfr/node_modules/end-of-stream/package.json","hash":"50cac5dec2db63f5def53a64da48cdc2bc8eaf8d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/end-of-stream/test.js","hash":"9a67fcb50b7d7f08969bd3b06dcc2da6cd5cb9f0","modified":1385507579000},{"_id":"themes/gandalfr/node_modules/error-ex/LICENSE","hash":"92605120ca7f929c96354540307a059bafe2e78a","modified":1446649645000},{"_id":"themes/gandalfr/node_modules/error-ex/README.md","hash":"835fcba18a8825187127541e7502610e2dcfa5b0","modified":1446649645000},{"_id":"themes/gandalfr/node_modules/error-ex/index.js","hash":"f7ad7bfb3633d3f6c10f52568478cbf33c1a898d","modified":1446650289000},{"_id":"themes/gandalfr/node_modules/error-ex/package.json","hash":"154ca1b931efd83ffe9c731db69c6784c52521f6","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/expand-range/LICENSE","hash":"4a1040f60d8e056a8bc2df7310046ab0a3127d91","modified":1462439296000},{"_id":"themes/gandalfr/node_modules/expand-range/index.js","hash":"34a62cc825d22f01bbb691a1a6d2ff68686e692e","modified":1462439635000},{"_id":"themes/gandalfr/node_modules/expand-range/README.md","hash":"42710977e33fb611a921985af4df9fb1062f3b81","modified":1462440314000},{"_id":"themes/gandalfr/node_modules/expand-range/package.json","hash":"4aba0e3463199973e91e0342e4848f94c59491d6","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/escape-string-regexp/index.js","hash":"17b40cc4dc8a455277994ab351c0650215394042","modified":1456057032000},{"_id":"themes/gandalfr/node_modules/extend/.npmignore","hash":"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3","modified":1435780828000},{"_id":"themes/gandalfr/node_modules/escape-string-regexp/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1403645654000},{"_id":"themes/gandalfr/node_modules/escape-string-regexp/readme.md","hash":"b693d3ddaf0a2edac02f8dc9b60382f7a818083e","modified":1456057032000},{"_id":"themes/gandalfr/node_modules/escape-string-regexp/package.json","hash":"8f5f7f1f80af9a24568606e6c1ecce1ed8ea9c88","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/extend/.eslintrc","hash":"c69a8fa86ac6bdf27526c4eab76de9688107e185","modified":1435781323000},{"_id":"themes/gandalfr/node_modules/extend/.travis.yml","hash":"2836505a6f7474044fe7f70648052fa3a823a4db","modified":1435781025000},{"_id":"themes/gandalfr/node_modules/extend/.jscs.json","hash":"7f5a3e8db0f48b0741606ecae7fe55d9cdc3a7b7","modified":1435781035000},{"_id":"themes/gandalfr/node_modules/extend/CHANGELOG.md","hash":"782aabec0278f6500fbedf61e29a5a0d748c78fb","modified":1435783518000},{"_id":"themes/gandalfr/node_modules/extend/README.md","hash":"4bce70a4b2e7dda8a760418301a4622c0557bae9","modified":1435780828000},{"_id":"themes/gandalfr/node_modules/extend/index.js","hash":"9154a195afa931672ff49f30d5fdf0c5a10614bc","modified":1435780828000},{"_id":"themes/gandalfr/node_modules/extend/LICENSE","hash":"bed93ae1abcd71e5d1c9c363595dd24bb1b9016c","modified":1435780828000},{"_id":"themes/gandalfr/node_modules/extend/component.json","hash":"07af5d609ee23647ce3238a0e1322c35b385fc45","modified":1435783532000},{"_id":"themes/gandalfr/node_modules/extend/package.json","hash":"a017c1a2b9c595e0095fdd322e5fd0fd0605a06c","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/expand-brackets/index.js","hash":"8637e90b2cbfda4cf2edf6b394e57f50c6747684","modified":1459553635000},{"_id":"themes/gandalfr/node_modules/expand-brackets/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1423173787000},{"_id":"themes/gandalfr/node_modules/expand-brackets/README.md","hash":"a8e35b4b855a62ebf1b02710cad6e23431db31b4","modified":1459553697000},{"_id":"themes/gandalfr/node_modules/expand-brackets/package.json","hash":"bde2c3b68cc237a73e4cb7762c044829e329ff41","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/fancy-log/LICENSE","hash":"a7ad9b04a4e7a59f3da00f99c6b9533a4ecd5c93","modified":1482796899000},{"_id":"themes/gandalfr/node_modules/fancy-log/README.md","hash":"61f1aac92c3d4d1e8938a4469716e8196a6da061","modified":1482796835000},{"_id":"themes/gandalfr/node_modules/fancy-log/index.js","hash":"7ee0a4f3b9a82ee9756bce860c91cce9357c4f06","modified":1482797370000},{"_id":"themes/gandalfr/node_modules/fancy-log/package.json","hash":"e8e29fc33abb5e9ec6790bf4169770a3c62ef2b2","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/expand-tilde/index.js","hash":"96f285aab13770b724968ed8a60fa9bc240fb02e","modified":1460059045000},{"_id":"themes/gandalfr/node_modules/expand-tilde/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1421709807000},{"_id":"themes/gandalfr/node_modules/expand-tilde/package.json","hash":"d98e81480e2c6a8fc2b7059acca937ba1f5e34b2","modified":1486538208000},{"_id":"themes/gandalfr/node_modules/filename-regex/README.md","hash":"6f7b2600f371413b90ac67824993d73f8e209664","modified":1422107084000},{"_id":"themes/gandalfr/node_modules/filename-regex/package.json","hash":"648d41b8bd14777f0fddee37e6db672f3fd4d070","modified":1486538208000},{"_id":"themes/gandalfr/node_modules/filename-regex/index.js","hash":"0c901dd7fd6cedfd15f2c1fea2cbf3efb3837aaf","modified":1422106871000},{"_id":"themes/gandalfr/node_modules/find-index/README.md","hash":"43e82774070e5848db5eef44d7028d982dc8d695","modified":1404040111000},{"_id":"themes/gandalfr/node_modules/find-index/index.js","hash":"7aa83db59d51b90d827641ebca5d1b4ba5fdd749","modified":1404032977000},{"_id":"themes/gandalfr/node_modules/find-index/last.js","hash":"cdc89afea68a4f1606d7dcfccb937298f9b17bc1","modified":1404035964000},{"_id":"themes/gandalfr/node_modules/find-index/package.json","hash":"c2b4ab986e43f4ee6efdf304e3769e86e0fbd809","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/fill-range/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1428396142000},{"_id":"themes/gandalfr/node_modules/fill-range/README.md","hash":"846adfe3de4ed18174b00fd079e3704daab075e9","modified":1428396632000},{"_id":"themes/gandalfr/node_modules/fill-range/index.js","hash":"5ddcbe607a51a43d05eecfc9fe333a96005e91e1","modified":1449439890000},{"_id":"themes/gandalfr/node_modules/fill-range/package.json","hash":"d5f3c942b923d79fc66bf7621c66e0773f6a9051","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/extglob/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1429345875000},{"_id":"themes/gandalfr/node_modules/extglob/index.js","hash":"c330dc0091d0f58e6a22455c1dc1ad5796013bbd","modified":1453279404000},{"_id":"themes/gandalfr/node_modules/extglob/README.md","hash":"ac4514f62a9bbf39090ca79839a0cc9a95d8e810","modified":1438459882000},{"_id":"themes/gandalfr/node_modules/extglob/package.json","hash":"4238ac434b2171a0f6688affb2ae1354e95d79a1","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/extsprintf/.gitmodules","hash":"4e4b68b6130a57a1e75d2ac0666725b9de1a23d3","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/Makefile","hash":"88eff1bf9d8152cf847e0720e384a4a84418082f","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/Makefile.deps","hash":"f27b6650501f14e21f8ce186476537d0e2f3e026","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/Makefile.targ","hash":"f66e38899fc918aac830c478ae402c66d8793bc7","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/README.md","hash":"e06a0c86165e03cf3170be3f4e5b7dfd5c7eca5f","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/jsl.node.conf","hash":"7197578b829d6c93d8356bf114c7f3d26722ec0b","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/package.json","hash":"28f3ea7d7d91bd21a4558ec30b4324a78b269518","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/find-up/index.js","hash":"ca95796b11fe9c62570d1881f6c40603ffbd1f80","modified":1457198946000},{"_id":"themes/gandalfr/node_modules/find-up/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/find-up/package.json","hash":"9a903708a48f6f5bf31c57798e53aa0158918d66","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/find-up/readme.md","hash":"bea77ddbf765541e6bdc10eacabbe12548187cb8","modified":1453750929000},{"_id":"themes/gandalfr/node_modules/findup-sync/README.md","hash":"865f2633bb30c8c47233d81e8abc4af185efc10e","modified":1475619833000},{"_id":"themes/gandalfr/node_modules/findup-sync/index.js","hash":"ea6933bc4feb4169d3deff568d4ffc97459d3822","modified":1476300706000},{"_id":"themes/gandalfr/node_modules/findup-sync/package.json","hash":"18fcc3ee14ed8219fc5518ce047dfa54e61f004d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/fined/LICENSE","hash":"0536c0cc9f21f9c09bd7c4411b1395ed4e74355b","modified":1464391663000},{"_id":"themes/gandalfr/node_modules/fined/README.md","hash":"e9b56c2514f9af0db43e2798468980457ad50566","modified":1475704651000},{"_id":"themes/gandalfr/node_modules/fined/index.js","hash":"8feff6c18f8fa5f3a2702142c922887eab819c7c","modified":1475704651000},{"_id":"themes/gandalfr/node_modules/fined/package.json","hash":"3ab9c9f5580e093eacd0f2dfcf63acf1e4610224","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/first-chunk-stream/index.js","hash":"7aa7f1dcb44280830b4d22a22e3d64256ad240b6","modified":1401032813000},{"_id":"themes/gandalfr/node_modules/first-chunk-stream/package.json","hash":"4e65db69663ed5a87db20598d6d46ce50da060f5","modified":1486538208000},{"_id":"themes/gandalfr/node_modules/first-chunk-stream/readme.md","hash":"dd2d5a3b6ffb86251f250b61e92e128141787ef1","modified":1401032664000},{"_id":"themes/gandalfr/node_modules/for-in/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1459090429000},{"_id":"themes/gandalfr/node_modules/for-in/README.md","hash":"7c65d4cf33e20b0df5846b379d501aa346abf528","modified":1473858370000},{"_id":"themes/gandalfr/node_modules/for-in/index.js","hash":"10f54d28a782bb79b781f7e5b33151802abd90b2","modified":1459090423000},{"_id":"themes/gandalfr/node_modules/for-in/package.json","hash":"07eb1be1434b8cc66cbaaad29c079a961b4f6119","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/for-own/README.md","hash":"387ea9211f5e4116fa100072852d196f1945147b","modified":1459091242000},{"_id":"themes/gandalfr/node_modules/for-own/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1459091180000},{"_id":"themes/gandalfr/node_modules/for-own/index.js","hash":"b22afcd44da9188c7ad05b7190a4002413bf6d8a","modified":1459091190000},{"_id":"themes/gandalfr/node_modules/for-own/package.json","hash":"2fe251f82492f0284cbce72b20e5617bb7260aea","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/.travis.yml","hash":"77c8ed2e952017cb862891774d71f2d4e1c1a355","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/.npmignore","hash":"21e24145b35d4ce2addb430c559b06cd88cd2111","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/README.md","hash":"373a351c56591a390fcd4ab8ba22e438ab6e49c8","modified":1458638667000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/index.js","hash":"fc73edba8bacf46313930820a66e9fcecb8dbafc","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/package.json","hash":"5cbe5ec99530dae9278d601a7cee7e11b990e500","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/forever-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1426938522000},{"_id":"themes/gandalfr/node_modules/forever-agent/README.md","hash":"fd2b1d08b55284aa2abc72d199e3c487744a0c31","modified":1426938522000},{"_id":"themes/gandalfr/node_modules/forever-agent/package.json","hash":"d723b863bd89b3c4f4fb823faca33ba361859e84","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/forever-agent/index.js","hash":"a96917d5912eef5a8ed12a4b1f3a41400eac80d1","modified":1428426146000},{"_id":"themes/gandalfr/node_modules/fs-exists-sync/LICENSE","hash":"d5885ada4599bfa2e2bab0665853babff900d21e","modified":1448613704000},{"_id":"themes/gandalfr/node_modules/fs-exists-sync/README.md","hash":"304cbb4f562f9df181320073b11d185aa926a0ef","modified":1460201957000},{"_id":"themes/gandalfr/node_modules/fs-exists-sync/package.json","hash":"599c047f1c181f2cc33b1d35dd304f9f916d052f","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/fs-exists-sync/index.js","hash":"63034bfc889b452b2162435354177cbef1b7c669","modified":1460180613000},{"_id":"themes/gandalfr/node_modules/fs.realpath/LICENSE","hash":"cdf711a72ab90a1b193aea27e96cccf491e157e2","modified":1466015087000},{"_id":"themes/gandalfr/node_modules/fs.realpath/README.md","hash":"325af4f63ad42821a34e8df60f6e3b502f1a3f64","modified":1466015245000},{"_id":"themes/gandalfr/node_modules/fs.realpath/index.js","hash":"9b5cdf4ef79264959ed0a23e4c35efbe6d64b0df","modified":1466015723000},{"_id":"themes/gandalfr/node_modules/fs.realpath/old.js","hash":"d2d656e98e4d0735902068408824f8d08aaea84c","modified":1466011904000},{"_id":"themes/gandalfr/node_modules/fs.realpath/package.json","hash":"99b0b5c2b192a93c8ce315877b3d592ef829bfd5","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/fstream/.npmignore","hash":"f098fc2ff8ac864bb604b9e084022be99571b879","modified":1463086097000},{"_id":"themes/gandalfr/node_modules/fstream/.travis.yml","hash":"0668e8d5d7ad195fcb7df954a554c1509ca8019d","modified":1466188568000},{"_id":"themes/gandalfr/node_modules/fstream/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431045599000},{"_id":"themes/gandalfr/node_modules/fstream/README.md","hash":"ed7e0a5f1120d22e425ac6c5f08c3ed611f93baa","modified":1463086097000},{"_id":"themes/gandalfr/node_modules/fstream/fstream.js","hash":"cde00245f823e368a96b0bf0aa7749fbf94021bd","modified":1423521976000},{"_id":"themes/gandalfr/node_modules/fstream/package.json","hash":"9e783817686f4c36ee0ec3dee0742bcce3c77184","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/generate-function/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1406740680000},{"_id":"themes/gandalfr/node_modules/generate-function/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1406740697000},{"_id":"themes/gandalfr/node_modules/generate-function/README.md","hash":"d9255d9f65aeed364e61715ce43392b237dd10a7","modified":1406741356000},{"_id":"themes/gandalfr/node_modules/generate-function/example.js","hash":"677d763dc7b82f9d69585388ff04094107481e4d","modified":1406741329000},{"_id":"themes/gandalfr/node_modules/generate-function/index.js","hash":"2942e1c63f5a2013a70196110b4859029d09c48d","modified":1408639884000},{"_id":"themes/gandalfr/node_modules/generate-function/package.json","hash":"0ca5f9229cb8fae6ec24d40e5dd52fec5f2229fe","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/generate-function/test.js","hash":"9bb3d8f4f20a97f1af0ef033d8dbe32693f9fb3a","modified":1406740670000},{"_id":"themes/gandalfr/node_modules/gaze/LICENSE-MIT","hash":"37915b706014362d2676a6f7b3ee86e1322f27be","modified":1444075561000},{"_id":"themes/gandalfr/node_modules/gaze/README.md","hash":"23d436d51a34c68353db4a4671092234a47ac1cc","modified":1444076172000},{"_id":"themes/gandalfr/node_modules/gaze/package.json","hash":"2adaf5d6755b81c40e8d748344ac10b8c291860c","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/form-data/License","hash":"1d11381521bdc7e7df9bb1d7bf85341ffca266d9","modified":1354688992000},{"_id":"themes/gandalfr/node_modules/form-data/README.md","hash":"6492b4fcbb30b715bbb56896c05164ea29a94811","modified":1478577738000},{"_id":"themes/gandalfr/node_modules/form-data/package.json","hash":"1eae03bf5aa180f6623d808a1f84c842a18edd7c","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/generate-object-property/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1427465395000},{"_id":"themes/gandalfr/node_modules/generate-object-property/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1427465395000},{"_id":"themes/gandalfr/node_modules/generate-object-property/LICENSE","hash":"a95ab3a4b0e4bd978897f09b3b430a449da20a08","modified":1427465395000},{"_id":"themes/gandalfr/node_modules/generate-object-property/README.md","hash":"e300730218d5bbf519653e5d19cfbd5857b78796","modified":1427465395000},{"_id":"themes/gandalfr/node_modules/generate-object-property/index.js","hash":"47eacac5534f58609e9f3ccc3a1c5879c20f9add","modified":1431893671000},{"_id":"themes/gandalfr/node_modules/generate-object-property/test.js","hash":"b738cbfd474028baa30f5b003e228356d61c6a58","modified":1427465395000},{"_id":"themes/gandalfr/node_modules/generate-object-property/package.json","hash":"5fa5efefb8726f6d3f5154916a3731ef3e11f21f","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/get-caller-file/README.md","hash":"4d9dd0ebc6dcda844f0c3cfe04e25ade30a72651","modified":1470703400000},{"_id":"themes/gandalfr/node_modules/get-caller-file/index.js","hash":"f3b06705f6720c719921447d97d6bd00a999933c","modified":1470703400000},{"_id":"themes/gandalfr/node_modules/get-caller-file/package.json","hash":"f81fb4efafe28b5a92f0d0c20017e9406997ca58","modified":1486538259000},{"_id":"themes/gandalfr/node_modules/get-stdin/index.js","hash":"d2a3722d41b11b6c0783046b1657b5aa0c56e536","modified":1421760909000},{"_id":"themes/gandalfr/node_modules/getpass/.npmignore","hash":"013de6e5745b61fd07777e2bff18d3d44c11c0a1","modified":1461906879000},{"_id":"themes/gandalfr/node_modules/get-stdin/package.json","hash":"25f794ddbc80a0092ea445a654032c7d163240b9","modified":1486538259000},{"_id":"themes/gandalfr/node_modules/get-stdin/readme.md","hash":"463253693f496ad1b7e3d7504489d24625a33859","modified":1408302976000},{"_id":"themes/gandalfr/node_modules/getpass/.travis.yml","hash":"4f7f46c996ede594c41fefbe08df3248206d895d","modified":1461906879000},{"_id":"themes/gandalfr/node_modules/getpass/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1461906909000},{"_id":"themes/gandalfr/node_modules/getpass/README.md","hash":"72706fc471e2713656e5dbc049a4c1a2c418b2e7","modified":1461906879000},{"_id":"themes/gandalfr/node_modules/getpass/package.json","hash":"ca4660f4114c3866dbe0a6e4bc49fedb4cc0db8c","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/gauge/CHANGELOG.md","hash":"8ea9391610f299c0a0a4dfd4a7333900302f64dc","modified":1486515178000},{"_id":"themes/gandalfr/node_modules/gauge/LICENSE","hash":"ce0c4782bdbd720baf4d2484e5b71728d3a943af","modified":1422219909000},{"_id":"themes/gandalfr/node_modules/gauge/base-theme.js","hash":"abe6cba0fc12d2b82d5bd84543f5c3e9b2ba5e3a","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/error.js","hash":"04e38f90829460d150c24677f678be9c59a1986d","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/README.md","hash":"81fd1455668c9343defe69cbbbff10d48b1f97ef","modified":1478208828000},{"_id":"themes/gandalfr/node_modules/gauge/has-color.js","hash":"a1e073083f20b6cc77b8d164267e14e58771c909","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/plumbing.js","hash":"600625ff4b430b05aa80725e199c99cad4b1c378","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/index.js","hash":"5961edcf3d4483cbe20646a2be39e7339fd21f09","modified":1486514967000},{"_id":"themes/gandalfr/node_modules/gauge/package.json","hash":"c8194d5d07c254d68bf4a20c5106c618e85b0570","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/gauge/process.js","hash":"8710bc75e47006d96f52c5a8ce8ac224f3e2356d","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/progress-bar.js","hash":"285abdf17d57765ebe2d807d484851e83f932292","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/render-template.js","hash":"1d4b5d10409ff9258d8c8459080a98bbeb7189fd","modified":1466067085000},{"_id":"themes/gandalfr/node_modules/gauge/set-immediate.js","hash":"0ee3511b6dac6bd821ff613bc07feafe664ccf3f","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/set-interval.js","hash":"5c2c33590101b8947fdfe9a22ba1d17b1f1e4d70","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/spin.js","hash":"b2a1975a8a0d714909fe8d5056804700fefd11d3","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/template-item.js","hash":"44ea3e6d6ce673580fb2d20cb6a83e53ba59c197","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/theme-set.js","hash":"6916f70ae783e1b92b6f4089b95a0d1b15280755","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/themes.js","hash":"2556b438216c7f2ce9985c2e3350a8dd7e419394","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/gauge/wide-truncate.js","hash":"684a2d866c9dba4f80f0b645600a096883f79b5c","modified":1466042398000},{"_id":"themes/gandalfr/node_modules/glob-base/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1442599168000},{"_id":"themes/gandalfr/node_modules/glob-base/README.md","hash":"83e0e13e0f9d9bed8b85f401fd22e6fd146fbc49","modified":1442599168000},{"_id":"themes/gandalfr/node_modules/glob-base/index.js","hash":"2f15588ede319f3f78ecb5b8be65c80f8c1570cf","modified":1442930224000},{"_id":"themes/gandalfr/node_modules/glob-base/package.json","hash":"349dc1f6a6454f6df5cd67a57eb991855b3230a0","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glob-parent/.npmignore","hash":"54c4045bc2a2525978de7a75dab4af99dc9ed7a0","modified":1426989797000},{"_id":"themes/gandalfr/node_modules/glob-parent/LICENSE","hash":"0f5ecc10b17b4e9208f2eee02966ad7b02d7ebf6","modified":1426989797000},{"_id":"themes/gandalfr/node_modules/glob-parent/.travis.yml","hash":"5053409ffeab2fae8d586077018f76b3f3241453","modified":1441806686000},{"_id":"themes/gandalfr/node_modules/glob-parent/README.md","hash":"741eed87e0324d39712974e26c15ab63d819589c","modified":1442588290000},{"_id":"themes/gandalfr/node_modules/glob-parent/index.js","hash":"bc23a7b46fa7a53ce69d21ea1eaaed6cee918e66","modified":1442588290000},{"_id":"themes/gandalfr/node_modules/glob-parent/package.json","hash":"a449f7e9a0896a9e070ebd6008072bcf57ca17b9","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glob-parent/test.js","hash":"b839f9516685893bc7b6229577e403f19ab6804f","modified":1442588290000},{"_id":"themes/gandalfr/node_modules/glob2base/README.md","hash":"2422c76b894de6ca05649c9d938600a8707c64e0","modified":1402377227000},{"_id":"themes/gandalfr/node_modules/glob2base/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1402376992000},{"_id":"themes/gandalfr/node_modules/glob2base/index.js","hash":"44c2325e713fd4a2f6f39a8f7b3e559bb8abb8ef","modified":1415921443000},{"_id":"themes/gandalfr/node_modules/glob2base/package.json","hash":"72c1ec458bb351738373deb15b6b68667bd3eca8","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/global-modules/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1425003088000},{"_id":"themes/gandalfr/node_modules/global-modules/README.md","hash":"0c23778aff16c34832a927cf70a5b4f0e25ac925","modified":1469511824000},{"_id":"themes/gandalfr/node_modules/global-modules/index.js","hash":"b05902aa58183ca615b882055d3c4428a432a49e","modified":1465119249000},{"_id":"themes/gandalfr/node_modules/global-modules/package.json","hash":"8e63ac103238771d81a567c35a66d5bfcc91a09c","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/gandalfr/node_modules/glob/common.js","hash":"8b512afa64e1c9b387f57509b20999d503f4b4d9","modified":1426225989000},{"_id":"themes/gandalfr/node_modules/glob/README.md","hash":"baad5ea68016e9b668194d7ca0969c2485407407","modified":1426224735000},{"_id":"themes/gandalfr/node_modules/glob/package.json","hash":"9bb494d149b7f971f9c6e238cb00d7e90f36345a","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glob/glob.js","hash":"c9fa574abcc02f3774948acc39c957c08dbc923f","modified":1426226723000},{"_id":"themes/gandalfr/node_modules/glob/sync.js","hash":"4fe72cbca7ae1d6dc58b8a801948985516ff6128","modified":1426226292000},{"_id":"themes/gandalfr/node_modules/glob-stream/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1389191537000},{"_id":"themes/gandalfr/node_modules/glob-stream/index.js","hash":"a006ea91f5e611d2c2e49a31f4f73949f3d5a534","modified":1409596176000},{"_id":"themes/gandalfr/node_modules/glob-stream/README.md","hash":"8ea2556ce51cca33019efb76a92f1977157c2b29","modified":1389854784000},{"_id":"themes/gandalfr/node_modules/glob-stream/package.json","hash":"1a500ed4f599d2de8dcd9390fb86d948bd22cc7e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glob-watcher/.npmignore","hash":"79b4a373fe874f8320da91bb5ff7bfb1b0cb3404","modified":1397537692000},{"_id":"themes/gandalfr/node_modules/glob-watcher/.travis.yml","hash":"90f5e8d71697d1271575c5be0c3d9174ffa49f6f","modified":1397537692000},{"_id":"themes/gandalfr/node_modules/glob-watcher/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1397537692000},{"_id":"themes/gandalfr/node_modules/glob-watcher/README.md","hash":"32cf4bbd08ca0a7c932863facf42a045c54497dd","modified":1397537692000},{"_id":"themes/gandalfr/node_modules/glob-watcher/index.js","hash":"d2cc0b87f11d6eb6a7b930d2d21f8c4eca2f9cbb","modified":1397537770000},{"_id":"themes/gandalfr/node_modules/glob-watcher/package.json","hash":"fc5bba1f5015cb17b9332663a687d66832e9733d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/global-prefix/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1476914717000},{"_id":"themes/gandalfr/node_modules/global-prefix/README.md","hash":"2b20becd54dbf3553f9bd394808be0a4bc8050e1","modified":1476914717000},{"_id":"themes/gandalfr/node_modules/global-prefix/index.js","hash":"e52ed97aca4a8b3043ed0e4912df8ffcd352ffe2","modified":1480527493000},{"_id":"themes/gandalfr/node_modules/global-prefix/package.json","hash":"514f04dc36a565c9cafc1aea379bb399f3368dfe","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/graceful-readlink/.npmignore","hash":"9b5c8076a6c12fe70da70e40d7ed1e53735810cb","modified":1423667128000},{"_id":"themes/gandalfr/node_modules/graceful-readlink/.travis.yml","hash":"1f437f56c31df7e844c4eae4ec71c51a4b5c6f45","modified":1423665419000},{"_id":"themes/gandalfr/node_modules/graceful-readlink/LICENSE","hash":"e9f4a5c36ecaa401588e457af96e7a85d53a98f0","modified":1423665419000},{"_id":"themes/gandalfr/node_modules/graceful-readlink/README.md","hash":"a3e9fe045614e9dc2473a75cd9a7e9a6315043c9","modified":1423714083000},{"_id":"themes/gandalfr/node_modules/graceful-readlink/index.js","hash":"3ecfe7f28912aa64161b8a6e4129c2b4fbcf50a0","modified":1423714095000},{"_id":"themes/gandalfr/node_modules/graceful-readlink/package.json","hash":"84f800b62907e638c058fd9146a4769df615832c","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/globule/.jshintrc","hash":"29433d358ee71a9b57a8059eaa4a01a227c3e664","modified":1363728678000},{"_id":"themes/gandalfr/node_modules/globule/.npmignore","hash":"4908b67461dad9714fb835308800efdeea795c62","modified":1363728678000},{"_id":"themes/gandalfr/node_modules/globule/Gruntfile.js","hash":"f69e615ca9653096cdaf8d3c18ba10e0dfa9118c","modified":1363894316000},{"_id":"themes/gandalfr/node_modules/globule/LICENSE-MIT","hash":"b418ef01b1aa695789ec0237509d4c54bbec98ee","modified":1363728678000},{"_id":"themes/gandalfr/node_modules/globule/README.md","hash":"3977f5ddc732867ab17cbbfa40eab7959124b3bc","modified":1365709973000},{"_id":"themes/gandalfr/node_modules/globule/.travis.yml","hash":"75d47644e03b370399b1c187df69c8f10f780b65","modified":1365707661000},{"_id":"themes/gandalfr/node_modules/glogg/LICENSE","hash":"de40e364b1016b13d3888c8a778cae31652bc20c","modified":1419816613000},{"_id":"themes/gandalfr/node_modules/globule/package.json","hash":"d9d727f168bbf1221b672d0a452591658a8a3d4b","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glogg/README.md","hash":"b3a65f8bdf4cb09bffe5c6173d67fc223f88e6e7","modified":1441934182000},{"_id":"themes/gandalfr/node_modules/glogg/index.js","hash":"d3049a8abb64a80355f0319be2dce88f3c187214","modified":1420966777000},{"_id":"themes/gandalfr/node_modules/glogg/package.json","hash":"1c6aa7cfa9843edb6fbe961fcf7b7a56259ae098","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/graceful-fs/.npmignore","hash":"445487b2b5b6b23bd4726078048eeb147671e9c7","modified":1471913751000},{"_id":"themes/gandalfr/node_modules/graceful-fs/.travis.yml","hash":"e88718cf2d50d92c28689b04e5af5b2cc6d7cb1a","modified":1471913751000},{"_id":"themes/gandalfr/node_modules/graceful-fs/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/graceful-fs/README.md","hash":"39b898216c6bc12c6364d5477fb69d7abeb0c1eb","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/graceful-fs/fs.js","hash":"e432bed89dabea7ce3e77e24539993b284aebebf","modified":1472583662000},{"_id":"themes/gandalfr/node_modules/graceful-fs/package.json","hash":"4a2b593bfc52c1566c1053f1cc55b844eb5a10d6","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/graceful-fs/graceful-fs.js","hash":"b052eadbfcc08c68aa22828abcdabcb7a1b38d3e","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/graceful-fs/polyfills.js","hash":"1ee3e1dcc76baed780d3f21cb1496d66d0b8d091","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/gulp-autoprefixer/index.js","hash":"d4adc73145b1462a27432ca0ec74befef7686fa4","modified":1443030273000},{"_id":"themes/gandalfr/node_modules/gulp-autoprefixer/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/gulp-autoprefixer/package.json","hash":"c1b01875f093f32c7b5f9b79777b19a843c54300","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/gulp-autoprefixer/readme.md","hash":"71323042305617f3602607dfe212b7a5a8e5b245","modified":1471047356000},{"_id":"themes/gandalfr/node_modules/gulp/CHANGELOG.md","hash":"b52272a392a067b0f635520611adfe8316c303d5","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/LICENSE","hash":"427b714be75a629933266745058f51e5c86e0a9c","modified":1454273752000},{"_id":"themes/gandalfr/node_modules/gulp/README.md","hash":"2ea9ea8a51472fcb14bcf299410425b6d847bd9c","modified":1454956378000},{"_id":"themes/gandalfr/node_modules/gulp/gulp.1","hash":"bb67a888e903b546457b1eb9bafeed9a917e5aa9","modified":1454957415000},{"_id":"themes/gandalfr/node_modules/gulp/index.js","hash":"d96a102f21c188b975a465e400ac36d395664e54","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/package.json","hash":"51bd97715db34e1fd21a161ca55351eb0fce4798","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/gulp-sass/.editorconfig","hash":"9bb210d7cd9310319b10ed733408c481d5cdff8c","modified":1461279666000},{"_id":"themes/gandalfr/node_modules/gulp-sass/.eslintrc","hash":"f2146d6b462a68e07da42995cff1da72ff6007f7","modified":1462883325000},{"_id":"themes/gandalfr/node_modules/gulp-sass/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1461279666000},{"_id":"themes/gandalfr/node_modules/gulp-sass/.travis.yml","hash":"58c493b0a24cd96ae2bf57701e4bd66ee11077bf","modified":1461279666000},{"_id":"themes/gandalfr/node_modules/gulp-sass/CHANGELOG.md","hash":"e4b9749c74425575cfcdfa5c6b3faf1f0eb1cc39","modified":1461279666000},{"_id":"themes/gandalfr/node_modules/gulp-sass/CONTRIBUTING.md","hash":"74b155eb0dc3fae69db1bd96c0bb96778e310a28","modified":1461279666000},{"_id":"themes/gandalfr/node_modules/gulp-sass/LICENSE","hash":"c5071cbccec37fb710f5f9b2c2d2b04564484106","modified":1461279666000},{"_id":"themes/gandalfr/node_modules/gulp-sass/README.md","hash":"d2841abe8a602905f77f2dbce65d59ee0fc36dc5","modified":1461279666000},{"_id":"themes/gandalfr/node_modules/gulp-sass/index.js","hash":"6c23ad2cf2ff7ed1d5a70e33d5230c1eea6f0ed8","modified":1465988188000},{"_id":"themes/gandalfr/node_modules/gulp-sass/package.json","hash":"6f2cb74f6e56a4ce9d48a47b035d3457e9f13aad","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/gulp-sass/test.js","hash":"76651223ca9f7540b02b8ed922dc2f60afcf50f4","modified":1462883780000},{"_id":"themes/gandalfr/node_modules/gulp-sass/test.scss","hash":"3ce193c52d8fdfafa19108cf8eebce61bed9c9b4","modified":1462883791000},{"_id":"themes/gandalfr/node_modules/gulplog/CHANGELOG.md","hash":"05c91cdc491d511cc139d43a48228508af191f45","modified":1443228982000},{"_id":"themes/gandalfr/node_modules/gulplog/LICENSE","hash":"b04e7634ad4f265c22c571a43201d16ac9f8e855","modified":1443228093000},{"_id":"themes/gandalfr/node_modules/gulplog/README.md","hash":"9e5c10a708d3606f8b4ca80dfd0d9f57f3463eb5","modified":1443229042000},{"_id":"themes/gandalfr/node_modules/gulplog/index.js","hash":"85b5a6aa1ef72d9a3dd0d139ce40de9dea456231","modified":1439942211000},{"_id":"themes/gandalfr/node_modules/gulplog/package.json","hash":"ae1da3ec4f34f3e502fdc46a39cc5ab82a7022c1","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/gulp-util/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/README.md","hash":"7f30f864999c7f59b971ebb1e2f90d1d876ed6fc","modified":1482793554000},{"_id":"themes/gandalfr/node_modules/gulp-util/index.js","hash":"73d4c17894c17e0699b09dcd412c9c30f0849024","modified":1441922300000},{"_id":"themes/gandalfr/node_modules/gulp-util/package.json","hash":"c5a8eaf70d6b651b5d92427501ef464d6b5f6aa2","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/har-validator/LICENSE","hash":"57fc502455231f1d10c4d2e67c261f0fc56bb17d","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/README.md","hash":"43ef10fa75b3eb5369012ac32654ab907a79fb14","modified":1453244556000},{"_id":"themes/gandalfr/node_modules/har-validator/package.json","hash":"2a2f0b161adb71e190297e6aa986efcee4ce9717","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/has-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/has-ansi/index.js","hash":"e7305f641b51be9dc463cdfc1e6b7afb8d03576e","modified":1402774137000},{"_id":"themes/gandalfr/node_modules/has-ansi/package.json","hash":"766eb8ef8021c9f1d58c722be491ce5acb4efa3b","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/has-ansi/readme.md","hash":"8f5dd99e33b07d2f4abaff2410728acca335ebfc","modified":1435680789000},{"_id":"themes/gandalfr/node_modules/has-flag/index.js","hash":"4bbcc37d7537b7270cdc9b39b382427dac49fb0e","modified":1436308206000},{"_id":"themes/gandalfr/node_modules/has-flag/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/has-flag/package.json","hash":"a67cf66c20c7afb3b53c30cba19e02b5fa312f46","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/has-flag/readme.md","hash":"775711555f26eaa075650debedd9142a61ece8a3","modified":1436308214000},{"_id":"themes/gandalfr/node_modules/has-gulplog/LICENSE","hash":"a63c2eb3459651162782880d7bdb565ba69e5016","modified":1441921816000},{"_id":"themes/gandalfr/node_modules/has-gulplog/README.md","hash":"e97244e6e9843ceec5d99eed422f54a24ea4e5f0","modified":1441921816000},{"_id":"themes/gandalfr/node_modules/has-gulplog/index.js","hash":"1c2d8b9d681605a991aacf13007ad6362fe92dbb","modified":1441922085000},{"_id":"themes/gandalfr/node_modules/has-gulplog/package.json","hash":"d40d97cc58369260a77a1a4f718bf4b115af139f","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/has-unicode/LICENSE","hash":"0478d8708f5ff5e49c150412201cb066a9b2006d","modified":1419955664000},{"_id":"themes/gandalfr/node_modules/has-unicode/README.md","hash":"ace56f38c5b7a359fa99a9338a7d93a85a1d24ab","modified":1448499284000},{"_id":"themes/gandalfr/node_modules/has-unicode/index.js","hash":"38b6c5bcc04ade8672f9227840e6b9f57be816c7","modified":1466719796000},{"_id":"themes/gandalfr/node_modules/has-unicode/package.json","hash":"b29f616c7f60263bcff9cc7ac18b2a93a2314075","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/hawk/.npmignore","hash":"45153061dbfa521e3ae4055e4ac17ec38883ac1d","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/.travis.yml","hash":"7b48f22fde36baa336c21d81436dce6a2f47ff4c","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/LICENSE","hash":"23dc309f4a3614d359884bbc4a64d0ca20e41d68","modified":1453233148000},{"_id":"themes/gandalfr/node_modules/hawk/bower.json","hash":"0394736479292c80f177ca8d29263d9162d489b3","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/component.json","hash":"004be58031f7d1cbdbff8ca684b464df449cde8c","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/README.md","hash":"332080064c5f554a1ad68a43ab48a68d2b49a1a4","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/package.json","hash":"dee4f99528b634533bdbd131c649b01a9f0a9d62","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/hoek/.travis.yml","hash":"2d3f9431018875b0c8c44e8f45b62a5d54eb72fc","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/.npmignore","hash":"09229b8d2f1d99ec4a5068fbe0e8e6b6ed13219b","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/CONTRIBUTING.md","hash":"61998267d75f17fdd423c1c742edc20a1561c1e2","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/LICENSE","hash":"8798f9342afed7351f4aa459b96e4d1062c1dd89","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/package.json","hash":"e0c59c5dd8d79df0e79639db9fb83c3dc72fe467","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/hoek/README.md","hash":"fa10590d10b5c14546e9124bf634621583235285","modified":1442428161000},{"_id":"themes/gandalfr/node_modules/hosted-git-info/.npmignore","hash":"12ec46da941fbfdf8180fdd70be3b4fe7d4148ef","modified":1463518765000},{"_id":"themes/gandalfr/node_modules/hosted-git-info/LICENSE","hash":"f87fe9863dc6d7d54117b1670ce07a85715dc465","modified":1463518513000},{"_id":"themes/gandalfr/node_modules/hosted-git-info/git-host-info.js","hash":"a295bf6c82bb9a146b05e5764505e9a6b0b6d336","modified":1486365750000},{"_id":"themes/gandalfr/node_modules/hosted-git-info/README.md","hash":"eb746c4763790fcea47475e08165d6f6ddbeadd1","modified":1486365750000},{"_id":"themes/gandalfr/node_modules/hosted-git-info/git-host.js","hash":"e5677e85df5a85a263f33245c6bcc679874c8a7c","modified":1486365750000},{"_id":"themes/gandalfr/node_modules/hosted-git-info/index.js","hash":"c4abf83418f40156084d8e003cf233d52a8b9c6d","modified":1463518513000},{"_id":"themes/gandalfr/node_modules/hosted-git-info/package.json","hash":"13b66b02493cd65e7fbc6c2753324fc28e25e708","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/http-signature/.dir-locals.el","hash":"bda1c75ba87348876340908be6799d6ac3a4b807","modified":1442600921000},{"_id":"themes/gandalfr/node_modules/http-signature/.npmignore","hash":"8992dfba5fdf2ba23c1da7e57021d6b1274f2456","modified":1442600921000},{"_id":"themes/gandalfr/node_modules/http-signature/CHANGES.md","hash":"59a2ab5cc1ac7f7691560038beb2349e628eeacc","modified":1453759387000},{"_id":"themes/gandalfr/node_modules/http-signature/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1442600921000},{"_id":"themes/gandalfr/node_modules/http-signature/README.md","hash":"5847fa2ec86a2ca744776acd5528fdfd6c3377fc","modified":1444857627000},{"_id":"themes/gandalfr/node_modules/http-signature/package.json","hash":"1042af090c1ac396aaddc473b06e1725350dc8a4","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/http-signature/http_signing.md","hash":"945eb22661d1c43e547371ac8d354a4b761eab09","modified":1453759268000},{"_id":"themes/gandalfr/node_modules/in-publish/.npmignore","hash":"850d8e99b91c6d7c1dc50d38bb2682580cad46c7","modified":1421117691000},{"_id":"themes/gandalfr/node_modules/in-publish/LICENSE","hash":"279f47bedbc7bb9520c5f26216b2323e8f0e728e","modified":1421122251000},{"_id":"themes/gandalfr/node_modules/in-publish/in-install.js","hash":"a16e50feb642c3d5fd3af55b8c14d607ef953709","modified":1436294964000},{"_id":"themes/gandalfr/node_modules/in-publish/in-publish.js","hash":"047bfe380b20b46a52b2e12e1bb3f1c80681e6cd","modified":1436294941000},{"_id":"themes/gandalfr/node_modules/in-publish/not-in-install.js","hash":"f48aff82c84d6442e8c9715ce7aae46604ef252b","modified":1436295265000},{"_id":"themes/gandalfr/node_modules/in-publish/not-in-publish.js","hash":"93160a91cb683376190647b68dcfe86b722da241","modified":1436295264000},{"_id":"themes/gandalfr/node_modules/in-publish/README.md","hash":"122caeb15188ce6a34559c533d91d1c68813f9a6","modified":1436295628000},{"_id":"themes/gandalfr/node_modules/in-publish/README.md~","hash":"a8a49d139b5780be31fd25c4856727c8b39bdaff","modified":1421122853000},{"_id":"themes/gandalfr/node_modules/in-publish/index.js","hash":"3466a5ebb995b39895f20dffcb417830d3403f65","modified":1436295139000},{"_id":"themes/gandalfr/node_modules/in-publish/package.json","hash":"b4c11e5180cf2156b147f43d53b6063d133804f2","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/inflight/LICENSE","hash":"515ec4469197395143dd4bfe9b1bc4e0d9b6b12a","modified":1399258628000},{"_id":"themes/gandalfr/node_modules/inflight/inflight.js","hash":"84aed0b47c15de35a85a5aa6c641342ba4dd5a88","modified":1476330767000},{"_id":"themes/gandalfr/node_modules/inflight/README.md","hash":"cabcd4da1794331188da1f8f864ea1aa0ca68657","modified":1399260771000},{"_id":"themes/gandalfr/node_modules/inflight/package.json","hash":"d0821a790105709238ba25f1b151cd39e36cdd51","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":1376950172000},{"_id":"themes/gandalfr/node_modules/inherits/README.md","hash":"f2f8d26f1cf5fb1e3a68aa225221b064f999fefb","modified":1368714278000},{"_id":"themes/gandalfr/node_modules/inherits/inherits.js","hash":"491caba7b70590f6dcbe37d7edccd9f89ac1b9fd","modified":1473280161000},{"_id":"themes/gandalfr/node_modules/inherits/package.json","hash":"04e513716d0db109bd43faadd52f2a9459fc4f55","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/inherits/inherits_browser.js","hash":"7c13eacf36e79e5e7dd257d80ec25846e4df7eb3","modified":1368715198000},{"_id":"themes/gandalfr/node_modules/ini/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1416911895000},{"_id":"themes/gandalfr/node_modules/ini/README.md","hash":"1997c778eb616617ba9d369f6a27828bf83af8b8","modified":1410851261000},{"_id":"themes/gandalfr/node_modules/ini/ini.js","hash":"361f1811be8059fe1e009db0b8805fb17046d4fb","modified":1423612669000},{"_id":"themes/gandalfr/node_modules/ini/package.json","hash":"12534c6ec9ec1262f45c8e19b9200a515610b804","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/homedir-polyfill/LICENSE","hash":"4b46a76a0997b639c10c5bad7d4a55c864651eb4","modified":1471487115000},{"_id":"themes/gandalfr/node_modules/homedir-polyfill/README.md","hash":"61cd900cd90f74fbfd99f12b9906513c9b40e7d8","modified":1476898604000},{"_id":"themes/gandalfr/node_modules/homedir-polyfill/index.js","hash":"bc109cb9c659d16fd85350632991da8a342744d9","modified":1476901118000},{"_id":"themes/gandalfr/node_modules/homedir-polyfill/package.json","hash":"348df70612c6f499471f0ff7feea287aa20a0d90","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/interpret/CHANGELOG","hash":"81e642c3466be44ec811e8764e154ca44d33b3a3","modified":1462139649000},{"_id":"themes/gandalfr/node_modules/interpret/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1462139649000},{"_id":"themes/gandalfr/node_modules/interpret/README.md","hash":"e27206a7ea562ab31c017f83895960c7850b6e4d","modified":1462139649000},{"_id":"themes/gandalfr/node_modules/interpret/index.js","hash":"52d79e40591eb9fed47ee4ef796fa599c8ca08d2","modified":1462139649000},{"_id":"themes/gandalfr/node_modules/interpret/package.json","hash":"7d22055a0b321559637024bc1a26efd124e55679","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/invert-kv/index.js","hash":"de8db0a1bda39e00bb4831788a8a52fb7c968e94","modified":1403813196000},{"_id":"themes/gandalfr/node_modules/invert-kv/package.json","hash":"21777e1a5c4f258c3f6a8d8770cda505aaa6de14","modified":1486538259000},{"_id":"themes/gandalfr/node_modules/invert-kv/readme.md","hash":"b50599e017388e5820ce7991ef8815c1cc334aa8","modified":1403813226000},{"_id":"themes/gandalfr/node_modules/is-absolute/LICENSE","hash":"a2e9eca129d6defa56375bea26309205b94d7d59","modified":1425579512000},{"_id":"themes/gandalfr/node_modules/is-absolute/README.md","hash":"79230b30eb68e132d4c6863ace4b119f0b254746","modified":1459230981000},{"_id":"themes/gandalfr/node_modules/is-absolute/index.js","hash":"8e592000c34341e7417a156c36a6029902eae373","modified":1459582787000},{"_id":"themes/gandalfr/node_modules/is-absolute/package.json","hash":"48b4af6ae3fac4bb27ffb96180818c7af46b6d69","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-arrayish/.editorconfig","hash":"1ab3c49e2db2133a92189f897310593ff089ecdf","modified":1440522010000},{"_id":"themes/gandalfr/node_modules/is-arrayish/.istanbul.yml","hash":"24082b12cb3200acec9ea0cb536ceebd5054da0d","modified":1440522010000},{"_id":"themes/gandalfr/node_modules/is-arrayish/.npmignore","hash":"ed562b110b79d75f57d1731f08882d7020aac45a","modified":1440522010000},{"_id":"themes/gandalfr/node_modules/is-arrayish/.travis.yml","hash":"6f54a686b1b0f4531fbabc3409a86e150ea99f85","modified":1440625885000},{"_id":"themes/gandalfr/node_modules/is-arrayish/index.js","hash":"6f9d636aff36876efe7d1cefbbdee98bfcc28c98","modified":1441062121000},{"_id":"themes/gandalfr/node_modules/is-arrayish/LICENSE","hash":"92605120ca7f929c96354540307a059bafe2e78a","modified":1440522010000},{"_id":"themes/gandalfr/node_modules/is-arrayish/README.md","hash":"a3cd377afa76023f030cb6b0ac78e02240e3e476","modified":1440522104000},{"_id":"themes/gandalfr/node_modules/is-arrayish/package.json","hash":"5dc692f9acb38cf06ed7fb026582404c5d1a1c63","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/indent-string/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/indent-string/index.js","hash":"1a88e38403d5119488e8e3568efe1f7b5738f551","modified":1437352719000},{"_id":"themes/gandalfr/node_modules/indent-string/readme.md","hash":"5b78316edc5fffbe1c442407a96e2087d2c47db1","modified":1437851704000},{"_id":"themes/gandalfr/node_modules/indent-string/package.json","hash":"15b73fc4d3f99ec9fb17ae5c340710331e4b52b1","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/is-buffer/.travis.yml","hash":"c9d7d97844866248472ed0e6af71f2f3c0458120","modified":1470266585000},{"_id":"themes/gandalfr/node_modules/is-buffer/.zuul.yml","hash":"5ee45268c63b82b769f1a8c4499250fdd22c11e4","modified":1470264619000},{"_id":"themes/gandalfr/node_modules/is-buffer/LICENSE","hash":"07d9563f6153658de124707787ff43f0458ab24a","modified":1442461838000},{"_id":"themes/gandalfr/node_modules/is-buffer/README.md","hash":"c5ab62b7664349dda53564487eda0b79d0bcc72b","modified":1470256732000},{"_id":"themes/gandalfr/node_modules/is-buffer/index.js","hash":"e02257ad46671767a1d044aebcf75e7f3f4c9441","modified":1470266086000},{"_id":"themes/gandalfr/node_modules/is-buffer/package.json","hash":"0bf75a81478e35d9ca4d08418ead48d06d87c29d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-builtin-module/index.js","hash":"65a5abe8edf49455c359cdf6142534e8c2d8ce75","modified":1430754166000},{"_id":"themes/gandalfr/node_modules/is-builtin-module/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/is-builtin-module/package.json","hash":"e4ea2717fe1eaf87b0d8d6127a85a50954185fac","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/is-builtin-module/readme.md","hash":"44b4718cee02b8402f61463e49ad452012e0b61e","modified":1430754402000},{"_id":"themes/gandalfr/node_modules/is-dotfile/LICENSE","hash":"7e21c9f5aa0a1be61e943a935506095ea40bbafc","modified":1421900238000},{"_id":"themes/gandalfr/node_modules/is-dotfile/README.md","hash":"a339a6cc02297687e3420dc751b47b9ae7d400a4","modified":1445317061000},{"_id":"themes/gandalfr/node_modules/is-dotfile/index.js","hash":"c1a0fc16e3b10c1dbdfc77cb46097575bf7293e0","modified":1445316868000},{"_id":"themes/gandalfr/node_modules/is-dotfile/package.json","hash":"1869bec7d3e37acc4b9760bd0e66de76a5b3785c","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-extendable/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1435545738000},{"_id":"themes/gandalfr/node_modules/is-extendable/README.md","hash":"e47f712e0969fbe6cda9f18339d0fc7ad37cb62c","modified":1436050202000},{"_id":"themes/gandalfr/node_modules/is-extendable/index.js","hash":"c38e98e8a299a93debd6e95bdcb56da06580a884","modified":1436049745000},{"_id":"themes/gandalfr/node_modules/is-extendable/package.json","hash":"d5f6eb4d9fc64f6974148aecadcfe7d4a2680947","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-extglob/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1424431146000},{"_id":"themes/gandalfr/node_modules/is-extglob/README.md","hash":"70fccdf58f29062dbed00016f2790ae604a83d54","modified":1425675606000},{"_id":"themes/gandalfr/node_modules/is-extglob/index.js","hash":"f2caa8e7efa77712cf91d0f349830dc563f1c9fa","modified":1425675072000},{"_id":"themes/gandalfr/node_modules/is-extglob/package.json","hash":"7c599cb7d3d5142dc3fc782ac8c3eb186d13a02d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-glob/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1424431146000},{"_id":"themes/gandalfr/node_modules/is-glob/README.md","hash":"c63677aa8188743e55fa3988d143b031e08ade12","modified":1443760455000},{"_id":"themes/gandalfr/node_modules/is-glob/index.js","hash":"b3dcfb08edc51fa11b2f6a028e432f7f81c67ca8","modified":1443759204000},{"_id":"themes/gandalfr/node_modules/is-equal-shallow/README.md","hash":"d3ec7e25f88751d4aa7536c376f32d97816038ec","modified":1435030788000},{"_id":"themes/gandalfr/node_modules/is-equal-shallow/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1424905916000},{"_id":"themes/gandalfr/node_modules/is-glob/package.json","hash":"c5c86650101570c6d00e9e37619db6a86bced8b9","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-equal-shallow/index.js","hash":"8ad23aff08c366907d80bf6f3d24a6c6a13d6a89","modified":1435030513000},{"_id":"themes/gandalfr/node_modules/is-equal-shallow/package.json","hash":"bdfe14de10a91e879d1274caa658b2f02be6757e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-finite/index.js","hash":"fd55fe3079504f4cdefb03d31382e336ac220156","modified":1432155356000},{"_id":"themes/gandalfr/node_modules/is-finite/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/is-finite/package.json","hash":"34aeff20b27c896a3f1cba114124eaefb1e7cd03","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/is-finite/readme.md","hash":"afd959df4efb3f283d827110e0a1cbfc19fe97b3","modified":1475221368000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/.npmignore","hash":"1fedf869763716fdbe1101e24a0d2231d4ddfc7d","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/LICENSE","hash":"a95ab3a4b0e4bd978897f09b3b430a449da20a08","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/README.md","hash":"f2703730d556b550b13e00597a8ccb2f43eb1941","modified":1456180252000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/example.js","hash":"cee9de4194e0c4ba372b5678983d6d701385d355","modified":1474298221000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/formats.js","hash":"2d511859d3d654f3bf604a47e13f98e9b1bc305c","modified":1453067668000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/package.json","hash":"86ab4b382ae361714992ff487a67f3de110562b9","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/index.js","hash":"c2aa15ead4e85de08b70bafe0a5b71645b9ed481","modified":1474298216000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/require.js","hash":"24081d202d91cdd0b4910b57dfd434ab41543b07","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-primitive/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1426564547000},{"_id":"themes/gandalfr/node_modules/is-primitive/README.md","hash":"13fde70833e452345cce4c999e73872f5ce83d49","modified":1426564595000},{"_id":"themes/gandalfr/node_modules/is-primitive/package.json","hash":"792e42bb9445e349f61ad926cacb5ec4d3534d5d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-primitive/index.js","hash":"4d12a2283734792d84b1b92555671f52adc55a99","modified":1426564547000},{"_id":"themes/gandalfr/node_modules/is-posix-bracket/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1438461363000},{"_id":"themes/gandalfr/node_modules/is-posix-bracket/README.md","hash":"adc082455ae8422d02b15123af4ea4066d4bba3b","modified":1459834230000},{"_id":"themes/gandalfr/node_modules/is-posix-bracket/index.js","hash":"c029d99d05d6868e753a517bdb2e22db5ae7c274","modified":1459833759000},{"_id":"themes/gandalfr/node_modules/is-posix-bracket/package.json","hash":"b7662526fead98412a4d39644ff5e9a5349bd187","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-property/.npmignore","hash":"eb8c8804bfda6f6b62a7b34a0e7b709ed862a510","modified":1374156601000},{"_id":"themes/gandalfr/node_modules/is-property/LICENSE","hash":"50fe55ab192fa4860c14bd57bcec5d090904eb97","modified":1374156563000},{"_id":"themes/gandalfr/node_modules/is-property/README.md","hash":"dc4d53b5d6c1d1387fd41fb6bf3597d9642540a4","modified":1374156267000},{"_id":"themes/gandalfr/node_modules/is-property/is-property.js","hash":"d09cd64e2bcead412c4d3be1d95f76fe1e315794","modified":1419518893000},{"_id":"themes/gandalfr/node_modules/is-property/package.json","hash":"30da270c3b009c6f6a23be4d4a888eac69eac1c6","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/is-number/README.md","hash":"6a27818480a55a97b4c590b0ddd1827b6ff836d9","modified":1430553159000},{"_id":"themes/gandalfr/node_modules/is-number/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1425580476000},{"_id":"themes/gandalfr/node_modules/is-number/index.js","hash":"be43df441aa52b7b5827318a5bb9e17601c1f616","modified":1436588444000},{"_id":"themes/gandalfr/node_modules/is-number/package.json","hash":"e0485caccf919dd6a2a5331f46a90d82104677a5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-relative/LICENSE","hash":"dca158e397fcbeca66ffb021f88ec99236a2096a","modified":1436272020000},{"_id":"themes/gandalfr/node_modules/is-relative/README.md","hash":"f3495bc2bab3ff743e856c155962beb377f396f7","modified":1436642827000},{"_id":"themes/gandalfr/node_modules/is-relative/index.js","hash":"09a007d14ed74505be36bac368be0991d0514e60","modified":1436642781000},{"_id":"themes/gandalfr/node_modules/is-relative/package.json","hash":"a2294c4ce498dd6ac0a1ea45724c53e6ca6803e5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-typedarray/LICENSE.md","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1401649683000},{"_id":"themes/gandalfr/node_modules/is-typedarray/README.md","hash":"8f33b0dd445cfa2ab6712dee34df082f480a5a76","modified":1401649785000},{"_id":"themes/gandalfr/node_modules/is-typedarray/index.js","hash":"b7ff45ac41fdcb4bb75dd771d6cb9bfbd129e56d","modified":1431824601000},{"_id":"themes/gandalfr/node_modules/is-typedarray/package.json","hash":"c572302f98a7af4aec6766d9b6fd8ea8a1cf5fb3","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/is-fullwidth-code-point/index.js","hash":"7647b9a016393c95e9694ff1dafb3e4ee66fd795","modified":1437083853000},{"_id":"themes/gandalfr/node_modules/is-typedarray/test.js","hash":"c3aa563061f8d086aaf066b389b0e811444e3913","modified":1401649839000},{"_id":"themes/gandalfr/node_modules/is-fullwidth-code-point/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/is-fullwidth-code-point/package.json","hash":"7c54436d2b14a553d1a94bc193e74d80bfa85156","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/is-fullwidth-code-point/readme.md","hash":"51b58cdc5cdf9b9e20396c9daaa411a7337280c3","modified":1437083960000},{"_id":"themes/gandalfr/node_modules/is-unc-path/LICENSE","hash":"6b6e43e748f05929750a1016160c9ade94e7e644","modified":1421135032000},{"_id":"themes/gandalfr/node_modules/is-unc-path/index.js","hash":"e49fb3850d4a5c6c2983baaeb8f5c50252798477","modified":1436279407000},{"_id":"themes/gandalfr/node_modules/is-unc-path/README.md","hash":"c02c5fcec3019cd7c0e12684fcf8e307d831c1f8","modified":1481094339000},{"_id":"themes/gandalfr/node_modules/is-unc-path/package.json","hash":"6ebd55ca99d6bab852cedad5ce6d05616b2cdb82","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-utf8/LICENSE","hash":"c4d6d6cfd18041480abed5fef0e5e8b05a967b55","modified":1450496628000},{"_id":"themes/gandalfr/node_modules/is-utf8/README.md","hash":"9d91db7e709bb926bcb715a51456512a6369a92b","modified":1450497590000},{"_id":"themes/gandalfr/node_modules/is-utf8/is-utf8.js","hash":"a2882b28b048e22eb16505e19206e6c1cbf34eec","modified":1347540258000},{"_id":"themes/gandalfr/node_modules/is-utf8/package.json","hash":"2b408d5e3a0a8edaeefd0e2f34ecd0ffee872619","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/is-windows/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1436641222000},{"_id":"themes/gandalfr/node_modules/is-windows/index.js","hash":"4cf2f8c97ee83c613af2a174beed251f5c22dd25","modified":1465117498000},{"_id":"themes/gandalfr/node_modules/is-windows/package.json","hash":"3c2e110ac199043b7f799fbbd37a23963b96b994","modified":1486538208000},{"_id":"themes/gandalfr/node_modules/isstream/.jshintrc","hash":"61590c8e7282c327fe7f2987a3c5a7514446561d","modified":1396828238000},{"_id":"themes/gandalfr/node_modules/isstream/.npmignore","hash":"ecb39380a39d86a6861344abf98891016990e2c5","modified":1396757852000},{"_id":"themes/gandalfr/node_modules/isstream/.travis.yml","hash":"890d1669abc18b7c0541df1483b9f27c60063712","modified":1396829306000},{"_id":"themes/gandalfr/node_modules/isstream/LICENSE.md","hash":"3fc5bd6825a9d8fd53c0cd8de0bd16d1c1a7f37a","modified":1425687271000},{"_id":"themes/gandalfr/node_modules/isstream/README.md","hash":"0563c8dd8178c335de8d882a14c0408ba179789b","modified":1425687291000},{"_id":"themes/gandalfr/node_modules/isstream/isstream.js","hash":"db3d8708d100bdb66fd33e1eeb6d2b232016934b","modified":1396827239000},{"_id":"themes/gandalfr/node_modules/isstream/package.json","hash":"0745c886a3ecbad6af7669a0180c89045a5a726d","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/isstream/test.js","hash":"3c3c171729a3738bd73b12d311265c7fcfb2a9fa","modified":1396831146000},{"_id":"themes/gandalfr/node_modules/isarray/README.md","hash":"34470c173ddf6ddfbf9683cf343e83cea1629049","modified":1369676403000},{"_id":"themes/gandalfr/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1369676355000},{"_id":"themes/gandalfr/node_modules/isarray/index.js","hash":"eec5f3c0d16211678cfc7c2d9c18bc4718adf700","modified":1369249661000},{"_id":"themes/gandalfr/node_modules/isarray/package.json","hash":"20a19c36fbfde5a0d2673944d8d28a0434035d23","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/isexe/.npmignore","hash":"5c82cb364ccc42139031fc6519c138ef81f2df26","modified":1453008305000},{"_id":"themes/gandalfr/node_modules/isexe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1454992766000},{"_id":"themes/gandalfr/node_modules/isexe/README.md","hash":"59d02c0354fd7d5da52783976038003d940525bf","modified":1453773938000},{"_id":"themes/gandalfr/node_modules/isexe/access.js","hash":"b9e0d3355dd35037a45023b198664a230994e1fa","modified":1453771669000},{"_id":"themes/gandalfr/node_modules/isexe/index.js","hash":"3bf4b638355aae1a2d37ce7349aa4c85a69bd0f8","modified":1453771901000},{"_id":"themes/gandalfr/node_modules/isexe/mode.js","hash":"0ff34b943491989ff0c89b9fd88ab591cb39980b","modified":1453771822000},{"_id":"themes/gandalfr/node_modules/isexe/package.json","hash":"761560df59966d124de698ff64000615bd6b8eee","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/isexe/windows.js","hash":"800422a4c5d1957e62da0cff8b1e990d0e1f5403","modified":1453773768000},{"_id":"themes/gandalfr/node_modules/isobject/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1429583250000},{"_id":"themes/gandalfr/node_modules/isobject/README.md","hash":"0a45cf971072445d3a2ca2d52920e6e668c015eb","modified":1461618236000},{"_id":"themes/gandalfr/node_modules/isobject/index.js","hash":"8da9927ffb038a7aa79044b181f555522f52e102","modified":1461618070000},{"_id":"themes/gandalfr/node_modules/isobject/package.json","hash":"244b1daf90bec863729fdfc0fa43e34a99568f99","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/jodid25519/.npmignore","hash":"1b7230afa85802664d24976363ffd9c7474e7591","modified":1445887357000},{"_id":"themes/gandalfr/node_modules/jodid25519/.travis.yml","hash":"d23fdefa0ecc6a5d79fc861fe6a058d8336ce51c","modified":1445881497000},{"_id":"themes/gandalfr/node_modules/jodid25519/AUTHORS.md","hash":"cc3f12565134b1da757450b40b5f3fa80c7fc132","modified":1445881497000},{"_id":"themes/gandalfr/node_modules/jodid25519/LICENSE","hash":"4fe6ded38ad123523792104dcf60f28badd905f2","modified":1445881497000},{"_id":"themes/gandalfr/node_modules/jodid25519/README.md","hash":"3a28ce7b2aa6b6343508cfe28eadec9733fd14e7","modified":1445881497000},{"_id":"themes/gandalfr/node_modules/jodid25519/almond.0","hash":"216d893df0f002babc23e63d4c98005db5e8104e","modified":1445881497000},{"_id":"themes/gandalfr/node_modules/jodid25519/almond.1","hash":"157b7bc54f90865debe5b1f817a8c1155b580dd8","modified":1445881497000},{"_id":"themes/gandalfr/node_modules/jodid25519/index.js","hash":"29e0b96fa095b35ecac9be6c2afde6c9b769e73b","modified":1445885964000},{"_id":"themes/gandalfr/node_modules/jodid25519/jsdoc.json","hash":"5a3782a2b7072783e0e5aa3b74d9c87c423818dc","modified":1445881497000},{"_id":"themes/gandalfr/node_modules/jodid25519/package.json","hash":"a3b71fd3af12da09a3d6886ae8b696e5810ac22e","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/js-base64/.npmignore","hash":"3d9b83469a219864d251f4d6316148aaccb90811","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/.travis.yml","hash":"36d08aa45fdb034882c97011ab43f803fd9af076","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/README.md","hash":"fb1d22f0129aef3258b649e9ea6c1eac4d9bbac4","modified":1367824105000},{"_id":"themes/gandalfr/node_modules/js-base64/LICENSE.md","hash":"55bbeb2cb5fb210d5c3ec0f60c75ffd2e8134340","modified":1417899057000},{"_id":"themes/gandalfr/node_modules/js-base64/base64.html","hash":"51590d533a05fce77ee0473e9b6da3dc9a507b1e","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/base64.js","hash":"2a277e5f3bbc8fca0b038d8da7b8467b150debe6","modified":1438308600000},{"_id":"themes/gandalfr/node_modules/js-base64/base64.min.js","hash":"b4cc42b73ecaaae097987e471bf7eebecc96ef2a","modified":1438308695000},{"_id":"themes/gandalfr/node_modules/js-base64/base64_utf8","hash":"b1b53b930c74b332a85012725674494bbbcc416d","modified":1387683977000},{"_id":"themes/gandalfr/node_modules/js-base64/bower.json","hash":"f34a30cc0ca1a5b0818d98106999869247ff8099","modified":1438308624000},{"_id":"themes/gandalfr/node_modules/js-base64/package.js","hash":"f9351d7e58c0b8cb6ed6c2ec557fadc7377eee5b","modified":1396376126000},{"_id":"themes/gandalfr/node_modules/js-base64/package.json","hash":"d4f5a07bbd3e4822da494789ace20bc70cf97967","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/jsbn/.npmignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1446141602000},{"_id":"themes/gandalfr/node_modules/jsbn/LICENSE","hash":"d9b1b910dfea689402ffdb75f5467ec263f8480d","modified":1446141666000},{"_id":"themes/gandalfr/node_modules/jsbn/README.md","hash":"6db673c03e15b4e75f95e25ba87177799511ad0c","modified":1446141602000},{"_id":"themes/gandalfr/node_modules/jsbn/example.html","hash":"ec1f94b093e0f1457642f8647294be35d4af033f","modified":1446141602000},{"_id":"themes/gandalfr/node_modules/jsbn/example.js","hash":"ba7f33b1196eca41a007177372fe237ac7a85c1b","modified":1446141602000},{"_id":"themes/gandalfr/node_modules/jsbn/package.json","hash":"a682e24cfcf480d7f532ced02387336a4f17bcac","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/jsbn/index.js","hash":"f53a89111c54f03ab39eab110c924b560b877051","modified":1446141602000},{"_id":"themes/gandalfr/node_modules/json-schema/README.md","hash":"9065e9ab354ce910706716a42584222674fe1470","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-zyp-json-schema-03.xml","hash":"da15453583b019a448fae4b857fe29a583bc1a38","modified":1307480092000},{"_id":"themes/gandalfr/node_modules/json-schema/package.json","hash":"0c88c00148a95336c64a7627b0fcd28a07e12b39","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/.npmignore","hash":"454bf1af6e2932c514862b67b108ef4ad00d7c1a","modified":1431999690000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-zyp-json-schema-04.xml","hash":"02845f4b0406bffb06ff5cb01eca43f492db6901","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/CHANGELOG.md","hash":"d9b3407ce2eef8d2dadc6b2839a8b16b783eef47","modified":1431999690000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999719000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/README.md","hash":"a2972dd72d8ec7c8b1f229f7732f911ed721dbca","modified":1431999690000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/Makefile","hash":"589819e00a30573f50fa4a11ddb22fb45b372a65","modified":1431999690000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/package.json","hash":"551b2c96442990601df837b1028d370b0c8f1523","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/stringify.js","hash":"b36a3a8d0f794fae13dc8e1c93bd4a8cae311bf2","modified":1431999708000},{"_id":"themes/gandalfr/node_modules/jsonpointer/LICENSE.md","hash":"7326e79ea70f73018a0c130cd2beeb968882d382","modified":1463642501000},{"_id":"themes/gandalfr/node_modules/jsonpointer/README.md","hash":"f56c6ebdddca7156b18581a2f28e2d40d71f7f73","modified":1482325449000},{"_id":"themes/gandalfr/node_modules/jsonpointer/jsonpointer.js","hash":"329fab008086ff01f54dc9f14242c3619b068b20","modified":1482325309000},{"_id":"themes/gandalfr/node_modules/jsonpointer/package.json","hash":"e492e9659d0eb4070e40ce6ebc775331cc6f6dbc","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/kind-of/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1447758397000},{"_id":"themes/gandalfr/node_modules/kind-of/index.js","hash":"c9823e5ffa81bd5400061e4a06b3cf197e84a07c","modified":1481093545000},{"_id":"themes/gandalfr/node_modules/kind-of/README.md","hash":"56fe69816d6a0fcab769959c9f59871f31ea26e9","modified":1462262861000},{"_id":"themes/gandalfr/node_modules/kind-of/package.json","hash":"ebae3f69b91f0c1bde381b9e48874f3661d2bbf4","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/jsprim/CHANGES.md","hash":"6f3c02bfe4acea06de83bf2b0c764a8f4d4ec07a","modified":1473725074000},{"_id":"themes/gandalfr/node_modules/jsprim/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1466637138000},{"_id":"themes/gandalfr/node_modules/jsprim/README.md","hash":"1e6321c157fbec42de91c8c1e9606d6da0d65d62","modified":1466638809000},{"_id":"themes/gandalfr/node_modules/jsprim/package.json","hash":"609157074d4f6bf92eda11fc039a992399bb6733","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/liftoff/.jscsrc","hash":"bb18fe9931b141f6174659b77b6898c84ca4f775","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/.jshintrc","hash":"085e596856f62029041f22762b71d741f837b720","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/.npmignore","hash":"fc2bfae6bb51b296613b0adb9306f54786731272","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/.travis.yml","hash":"84ef53ee77cb4a3718f2a99aca3cb07a26ce480c","modified":1468876570000},{"_id":"themes/gandalfr/node_modules/liftoff/CHANGELOG","hash":"e5f1cc0daa3a89e7c3ab1d80e0193c17d6e22400","modified":1468876570000},{"_id":"themes/gandalfr/node_modules/liftoff/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/UPGRADING.md","hash":"32ba723415ab30d4f9f92a4bc3753a0f7c5b9cbd","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/README.md","hash":"0eb0e9009fcd90c752decdf69abdd52469f54d41","modified":1469644272000},{"_id":"themes/gandalfr/node_modules/liftoff/appveyor.yml","hash":"d909a0d742027fb90c4dc638180b56be495bc347","modified":1469478786000},{"_id":"themes/gandalfr/node_modules/liftoff/index.js","hash":"37644e5cd6ff484379c9210c151c3e86be420640","modified":1469478786000},{"_id":"themes/gandalfr/node_modules/liftoff/package.json","hash":"034acd6187b605c457953901948dcbf3edd4a417","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/load-json-file/index.js","hash":"1b4d637a3e58f11db9b07de7092b8c49869a49c2","modified":1441175798000},{"_id":"themes/gandalfr/node_modules/load-json-file/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/load-json-file/package.json","hash":"189624b0273daa32540060669cee11f9f20fc419","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/load-json-file/readme.md","hash":"c1c5d059deb4994007355f2daa2716c2fe20986b","modified":1446990383000},{"_id":"themes/gandalfr/node_modules/lodash/README.md","hash":"dd442c502cd26ed6c47b83ab6fa0024c601ad346","modified":1427729993000},{"_id":"themes/gandalfr/node_modules/lodash/LICENSE.txt","hash":"1405d83ff498af3a9fc5bda1b076523e95c45904","modified":1427729364000},{"_id":"themes/gandalfr/node_modules/lodash._basecopy/LICENSE.txt","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1429199429000},{"_id":"themes/gandalfr/node_modules/lodash._basecopy/README.md","hash":"786db542ca95f1845bcdd7af61934b5f02887e85","modified":1429199429000},{"_id":"themes/gandalfr/node_modules/lodash._basecopy/index.js","hash":"702997f9c794b78732760c0295060618e1f50be0","modified":1429199429000},{"_id":"themes/gandalfr/node_modules/lodash/package.json","hash":"ada9bf674c6e847ef79495884c9c793527c809e4","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._basecopy/package.json","hash":"82089300708bdc8588944d50dfdac7151d90a587","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._basetostring/README.md","hash":"e075950489d6d73eeeacb4906e37b09e4f6cfe78","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash._basetostring/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash._basetostring/index.js","hash":"835c23c6a3642d720f0ee0618c0e8861d8cb3134","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash._basetostring/package.json","hash":"acd124604f0c9948d50f01672cd8a560cc155347","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lcid/index.js","hash":"44bee35e89acd1a5d4f69588d68d0aab44ea3d2e","modified":1426489151000},{"_id":"themes/gandalfr/node_modules/lcid/lcid.json","hash":"8fa5db38e0809fdbcdd19e59bb3377504612863e","modified":1426485054000},{"_id":"themes/gandalfr/node_modules/lcid/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/lcid/package.json","hash":"81b9b2798caa1c0622d29d4c385830ed507ce506","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/lcid/readme.md","hash":"f8875f8dd5001202245c475d8e10a0ccb4d4552d","modified":1426488990000},{"_id":"themes/gandalfr/node_modules/lodash._getnative/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash._getnative/README.md","hash":"fdcaec98294e6ca31eefd3a3d390428d00622f10","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash._getnative/index.js","hash":"91d6c7694cf3ba08e5ebdbea561cbcfa42a38ae5","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash._getnative/package.json","hash":"7a642e1d107f1e4319ca7ff2a7402f110e24d957","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._isiterateecall/LICENSE.txt","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1432605162000},{"_id":"themes/gandalfr/node_modules/lodash._isiterateecall/README.md","hash":"30ea1b71da82533c1ae26d4fd497ff8d083fb126","modified":1432605162000},{"_id":"themes/gandalfr/node_modules/lodash._isiterateecall/index.js","hash":"9a98210c542168e84fcd35fa8bc5c32d20ccace2","modified":1432605162000},{"_id":"themes/gandalfr/node_modules/lodash._isiterateecall/package.json","hash":"f501036d733502e1e6c13ea58633dd531e8bf5f8","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._reevaluate/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reevaluate/README.md","hash":"a1c06cbcaaf8e4a66f436e89730f4bf6f610c7d7","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reevaluate/index.js","hash":"8f6b32ed1d1a43c237a862bae975c23d3278558e","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reevaluate/package.json","hash":"6d63a60fe40078863cb269183a08c7ce04e11ab4","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._reescape/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reescape/README.md","hash":"ea8e5064060f7451d83cdb909ac756597e0e71ec","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reescape/package.json","hash":"4347317a069ff9b48ff253110ea48601b36544e4","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._reescape/index.js","hash":"ea853f4ca91e570c1fa5776ca0ec5b8615801204","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._basevalues/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1422285570000},{"_id":"themes/gandalfr/node_modules/lodash._basevalues/README.md","hash":"d25cdb94fec496ac27900fdd3be397510bffcb2c","modified":1422285570000},{"_id":"themes/gandalfr/node_modules/lodash._basevalues/index.js","hash":"f9ff8c1e6facb611859ef64a1c33b746a63ad610","modified":1422285570000},{"_id":"themes/gandalfr/node_modules/lodash._basevalues/package.json","hash":"fa50be852efba0f9b45751ac0a56fbf8a28da198","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._reinterpolate/LICENSE.txt","hash":"593fb352bdc14f6dec15e72d450728d7892417f1","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reinterpolate/README.md","hash":"eec455672bad89c911a7ac713ba2ffe1dd461a30","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reinterpolate/index.js","hash":"1bbf104a43916596a1930d31990fbf03e53a06db","modified":1423071018000},{"_id":"themes/gandalfr/node_modules/lodash._reinterpolate/package.json","hash":"0bede97cf47eb6ddcd2220b67747ecd04dc20428","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.clonedeep/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109641000},{"_id":"themes/gandalfr/node_modules/lodash.clonedeep/README.md","hash":"7d9c44ee0a6215d6de9884eaee234438eb5c4a3b","modified":1471109652000},{"_id":"themes/gandalfr/node_modules/lodash.clonedeep/package.json","hash":"aa913c72eee6eae1390116108e8e59f2ee9625e3","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/lodash.assign/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109579000},{"_id":"themes/gandalfr/node_modules/lodash.assign/README.md","hash":"0c98da926c81ec657bc4f5b7fc420c5a9845901d","modified":1471109607000},{"_id":"themes/gandalfr/node_modules/lodash.clonedeep/index.js","hash":"676bae5b33014ef1bdc09e265797ac102010d3bd","modified":1471109652000},{"_id":"themes/gandalfr/node_modules/lodash.assign/index.js","hash":"c90c73f2b31e3d1cb834957747fe12f6e900e244","modified":1471109607000},{"_id":"themes/gandalfr/node_modules/lodash.assign/package.json","hash":"4ac617351eb609627869914e7e55f3163093f0f2","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/lodash.assignwith/README.md","hash":"72c8d2e54ef31e85d52a0942ef7a11954bbcfc16","modified":1471109607000},{"_id":"themes/gandalfr/node_modules/lodash.assignwith/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109577000},{"_id":"themes/gandalfr/node_modules/lodash.assignwith/index.js","hash":"85b82f44c4f9ca92a5018d8b95aafb2dbc8d6db8","modified":1471109607000},{"_id":"themes/gandalfr/node_modules/lodash.assignwith/package.json","hash":"cc16ab04807db2be781a94838e32a188151b877e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.isarguments/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109414000},{"_id":"themes/gandalfr/node_modules/lodash.isarguments/README.md","hash":"3ace98916099be4c74403d32a3af0caedcd91175","modified":1471109416000},{"_id":"themes/gandalfr/node_modules/lodash.isarguments/index.js","hash":"c4885b64c8f97cc1265b3c75b22afaaa8c93663f","modified":1471109416000},{"_id":"themes/gandalfr/node_modules/lodash._root/LICENSE","hash":"b8852beae60882e5254854d5282219df9c663ce5","modified":1455615051000},{"_id":"themes/gandalfr/node_modules/lodash.isarguments/package.json","hash":"9c25aee86cf11d9c291a6ca48e986633aad786d3","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash._root/README.md","hash":"0e89d947cb0c4bdf9aa46b6022ca4bdb0ca0084c","modified":1455615051000},{"_id":"themes/gandalfr/node_modules/lodash._root/index.js","hash":"7e30dda1a03bf7a1837903aa8ed1909f352e097b","modified":1455615051000},{"_id":"themes/gandalfr/node_modules/lodash._root/package.json","hash":"136948a767215549d8dcb777383a4c931a1c0745","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.escape/LICENSE","hash":"3a1d08be6b4b07a0ec877adc0a9d2e238ff711f5","modified":1454898280000},{"_id":"themes/gandalfr/node_modules/lodash.escape/README.md","hash":"10f6329a563624bc7bb4220f2f3175695df7e346","modified":1454898280000},{"_id":"themes/gandalfr/node_modules/lodash.escape/index.js","hash":"5582280306cbb6851944f442ed3a37f3f1874333","modified":1454898280000},{"_id":"themes/gandalfr/node_modules/lodash.escape/package.json","hash":"648b250547882fb9ba0ab2bfadde8e539c44a5c7","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.isempty/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109607000},{"_id":"themes/gandalfr/node_modules/lodash.isempty/README.md","hash":"d996678c4464dc1f628b639e319e84b069e80bbb","modified":1471109641000},{"_id":"themes/gandalfr/node_modules/lodash.isempty/package.json","hash":"69d612ecf42afdb77d4e34a1715535a5889469c5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.isempty/index.js","hash":"5ab126c3624f2c30f1956f5a7d9e7447ffe60dcf","modified":1471109641000},{"_id":"themes/gandalfr/node_modules/lodash.isarray/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.isarray/README.md","hash":"c233a7fd0e92bc6c9ee373385e6415fe0b2a8c2d","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.isarray/index.js","hash":"af91ed670c6bd1ddb6f969d00807f184e5a7de1e","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.isarray/package.json","hash":"4d35272372bae384302a57f61178f007f513a67c","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.isstring/README.md","hash":"0b5105f785a1ae698ad8f90493078a93822822ba","modified":1454484262000},{"_id":"themes/gandalfr/node_modules/lodash.isstring/LICENSE","hash":"3a1d08be6b4b07a0ec877adc0a9d2e238ff711f5","modified":1454484262000},{"_id":"themes/gandalfr/node_modules/lodash.isstring/index.js","hash":"764624c3822aba9c8ed198944b01f562a19d807e","modified":1454484262000},{"_id":"themes/gandalfr/node_modules/lodash.isstring/package.json","hash":"242a9783b68f5921068e2f26cc0c8e9d2640eee4","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.isplainobject/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109571000},{"_id":"themes/gandalfr/node_modules/lodash.isplainobject/README.md","hash":"4327886851c8a1c60e40c1d67c451bedd1ec5cb9","modified":1471109577000},{"_id":"themes/gandalfr/node_modules/lodash.isplainobject/index.js","hash":"82aa8e21adb309dd1e138e2f26ad9b6f470d89b3","modified":1471109577000},{"_id":"themes/gandalfr/node_modules/lodash.mapvalues/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109624000},{"_id":"themes/gandalfr/node_modules/lodash.isplainobject/package.json","hash":"70705d63eb628519acaf8c320ee387138ee2ef23","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.mapvalues/README.md","hash":"cb99055de16397ff35fcd9b19ff45c788e085d79","modified":1471109677000},{"_id":"themes/gandalfr/node_modules/lodash.mapvalues/package.json","hash":"5dc9506e6587a750ff747926a277a95294a44adb","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.keys/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.keys/README.md","hash":"fc9276fe48f866bdab524b6d0a74c0ce4f9d4080","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.mapvalues/index.js","hash":"360977dbdc8be40c3fa1a9dab966a32b2d019108","modified":1471109677000},{"_id":"themes/gandalfr/node_modules/lodash.keys/index.js","hash":"84908ab47bcf3df8d22d1fcaa6703c8424768019","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.keys/package.json","hash":"cc953806608fa41163e5b5389b54f5786b7de516","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.restparam/LICENSE.txt","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1429199429000},{"_id":"themes/gandalfr/node_modules/lodash.restparam/README.md","hash":"8986fcfd9c2701126d0e18de58b1434b43004d77","modified":1429199429000},{"_id":"themes/gandalfr/node_modules/lodash.restparam/index.js","hash":"de322640946f46abd54c470cff7c0687fbcc204a","modified":1429199429000},{"_id":"themes/gandalfr/node_modules/lodash.restparam/package.json","hash":"4a46c6ed02c59642a5a9048fde1160f7524411e4","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.templatesettings/LICENSE","hash":"3a1d08be6b4b07a0ec877adc0a9d2e238ff711f5","modified":1452682155000},{"_id":"themes/gandalfr/node_modules/lodash.templatesettings/README.md","hash":"c79c36894c04dcfc65739e160fc3bfa724426127","modified":1452682155000},{"_id":"themes/gandalfr/node_modules/lodash.templatesettings/index.js","hash":"36eb43127cb21c4de5959264619041b9e53ce0f7","modified":1452682155000},{"_id":"themes/gandalfr/node_modules/lodash.templatesettings/package.json","hash":"38671a29760f9f87bb2bbdb97c8dc03a4ec3e40d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.pick/LICENSE","hash":"fc4de79d3e95696f11dbec64b0f99d421deadd30","modified":1471109607000},{"_id":"themes/gandalfr/node_modules/lodash.pick/README.md","hash":"64f1fe040b9d7e2d92c43abe3cb8049b00518719","modified":1471109641000},{"_id":"themes/gandalfr/node_modules/lodash.pick/package.json","hash":"0bdc57080482cea06273901e539f8307453288a5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lodash.pick/index.js","hash":"c0b09d3c86be8fded72ba766bd118a7ccf2eb075","modified":1471109641000},{"_id":"themes/gandalfr/node_modules/lodash.template/LICENSE","hash":"36c3ff463d0890f895498124f6ef3295fbb4a616","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.template/README.md","hash":"464d3522f72dede1ff769e88c6308b693a2976af","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.template/index.js","hash":"ace4ba03f991b368fcac82f2df3a778cb415b927","modified":1435677344000},{"_id":"themes/gandalfr/node_modules/lodash.template/package.json","hash":"24e020f116b20e0220dcd40b10f65aaab72c4782","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/lru-cache/.npmignore","hash":"cc16a69ea300506c49a0844bc69745bf8f34cf40","modified":1323392699000},{"_id":"themes/gandalfr/node_modules/lru-cache/.travis.yml","hash":"ac2b64b93ab810be473f67745bd9f7d4c3e8e0ff","modified":1433355858000},{"_id":"themes/gandalfr/node_modules/lru-cache/CONTRIBUTORS","hash":"6a6e5148568ff15b4756ee478f0da581ea97fc01","modified":1385053079000},{"_id":"themes/gandalfr/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999527000},{"_id":"themes/gandalfr/node_modules/lru-cache/README.md","hash":"129fd032ba2ac7580e57e0d9988a4d06f1b344fd","modified":1448474798000},{"_id":"themes/gandalfr/node_modules/lru-cache/package.json","hash":"e9e2c29f9d39ffc380be90b160fc8efee7e9f36c","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/map-cache/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1426671958000},{"_id":"themes/gandalfr/node_modules/map-cache/README.md","hash":"db3d4b5898f3ca81fc371e473090e1cd18f5b43b","modified":1462877451000},{"_id":"themes/gandalfr/node_modules/map-cache/index.js","hash":"86ba3ec947cca427705faf7fdbafabf946c5d79d","modified":1460377976000},{"_id":"themes/gandalfr/node_modules/map-cache/package.json","hash":"5e2b02627695d74520f354ea835b211922d77efe","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/map-obj/index.js","hash":"fa95683437abe12eed3217e281bddf5f4938d72b","modified":1430589609000},{"_id":"themes/gandalfr/node_modules/map-obj/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/map-obj/package.json","hash":"4e1d7819f4c38690d35449bfecb2a3a0b4eee098","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/map-obj/readme.md","hash":"fc853dc94647dc7096b79ce4fe6954c647f1cacb","modified":1430589743000},{"_id":"themes/gandalfr/node_modules/meow/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/meow/index.js","hash":"11f3c3145f07d3c3a80a6e9daae80bfa5f8a4ee3","modified":1451916886000},{"_id":"themes/gandalfr/node_modules/meow/package.json","hash":"19b2e1b79384ae679919c005bec65e3b08fde835","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/meow/readme.md","hash":"834c1565a5d866afd4a6f54e8c0bbeceab89a768","modified":1451916666000},{"_id":"themes/gandalfr/node_modules/micromatch/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1468602313000},{"_id":"themes/gandalfr/node_modules/micromatch/README.md","hash":"2dc079b248dcfeb9b6f677f43a0250dafa249adf","modified":1468602812000},{"_id":"themes/gandalfr/node_modules/micromatch/index.js","hash":"f679699eb8954133a5e6e9c329559ef261d12d53","modified":1468602313000},{"_id":"themes/gandalfr/node_modules/micromatch/package.json","hash":"fea39b6d067340acce195cdd9b703aa117b9e4b8","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/mime-db/HISTORY.md","hash":"71e6eb5ca8fe428219ef1c18392bca55d27d58dc","modified":1484453010000},{"_id":"themes/gandalfr/node_modules/mime-db/LICENSE","hash":"b559c45c8d07f2679620d9771e68696ee3d5964b","modified":1484451095000},{"_id":"themes/gandalfr/node_modules/mime-db/README.md","hash":"1018078c0d9fd0331ca23ac5d97ace15596bf46c","modified":1484451095000},{"_id":"themes/gandalfr/node_modules/mime-db/package.json","hash":"66ea8938832f306dbc6d81466f6d6f1cff4e2229","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/mime-types/HISTORY.md","hash":"5088d127a92cf820e353929c7b88a55f6deb88f7","modified":1484456823000},{"_id":"themes/gandalfr/node_modules/mime-db/index.js","hash":"31180f8d0ae079b1bee7ee03e77ea5323583eb06","modified":1484451095000},{"_id":"themes/gandalfr/node_modules/mime-types/LICENSE","hash":"f027af3e61af3880fd7f7b8ba9452a85dd215738","modified":1484451261000},{"_id":"themes/gandalfr/node_modules/mime-types/README.md","hash":"bdc1c75e9234d1d6fc56c819cec51f568be5c68b","modified":1484451261000},{"_id":"themes/gandalfr/node_modules/mime-types/index.js","hash":"dcc57b5b832f9d86cbc8d08bbeda09bb32a0d045","modified":1484456583000},{"_id":"themes/gandalfr/node_modules/mime-types/package.json","hash":"869a7a1c001c0a3068975fd3c4d670e59c3ba3e9","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/minimist/.travis.yml","hash":"6f47845eac101b08d34b0cfb4cb6d0614b69b4b2","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/package.json","hash":"dca0a4c4e47a77cdb9a3e109498bf8c5ab7b750e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/minimist/index.js","hash":"cfede1ccd2ee41f74022c002b5c6d05e65c482c0","modified":1440424576000},{"_id":"themes/gandalfr/node_modules/minimist/readme.markdown","hash":"067b8f01bd1fcf09a6418e3db4b323c8eb9ad479","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/gandalfr/node_modules/minimatch/README.md","hash":"fb5bec4ab02467cdb76cdb552613ff0547402439","modified":1407793656000},{"_id":"themes/gandalfr/node_modules/minimatch/browser.js","hash":"04c30625df185494a153c238296f5859aed9c963","modified":1437616294000},{"_id":"themes/gandalfr/node_modules/multipipe/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1410771763000},{"_id":"themes/gandalfr/node_modules/minimatch/package.json","hash":"442e5480e536140406ea190887ad1ede5897b793","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/minimatch/minimatch.js","hash":"16b28bcabd1eca778c2176d6c49330396907411e","modified":1437616284000},{"_id":"themes/gandalfr/node_modules/multipipe/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1410771763000},{"_id":"themes/gandalfr/node_modules/multipipe/History.md","hash":"74f0e36649e1c382ec2d1f1332ffe7509ab9e0c8","modified":1411971507000},{"_id":"themes/gandalfr/node_modules/multipipe/Makefile","hash":"2e317bae466164014d133e62d5b1cc1566875c8d","modified":1411971507000},{"_id":"themes/gandalfr/node_modules/multipipe/index.js","hash":"c819c462610c464620d33fca957f886bb7e00166","modified":1410775864000},{"_id":"themes/gandalfr/node_modules/multipipe/Readme.md","hash":"5b3dc046e96e337b7405afd3ea58068ad815d70b","modified":1410771814000},{"_id":"themes/gandalfr/node_modules/multipipe/package.json","hash":"7739701140dbe587bd325cd45345d9a915ee9fc1","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/natives/README.md","hash":"f783473a6088f3b0916dbf861ddb109a3f4b3258","modified":1472583627000},{"_id":"themes/gandalfr/node_modules/natives/index.js","hash":"af57bace597678672abeb627005e31e8937a0f48","modified":1472583513000},{"_id":"themes/gandalfr/node_modules/natives/package.json","hash":"ac2f6ed0712448d03eea284cbc90a8ae58fc36ed","modified":1486538208000},{"_id":"themes/gandalfr/node_modules/nan/LICENSE.md","hash":"6ad8ea6ae006e78aa0a64e93749f43ff9b2b5f73","modified":1485122597000},{"_id":"themes/gandalfr/node_modules/nan/CHANGELOG.md","hash":"7720add7f85b590282eee8844c6084eafae665af","modified":1485123291000},{"_id":"themes/gandalfr/node_modules/nan/include_dirs.js","hash":"cd38e47a4ea58e4b7b31355a1af480ccd04b568f","modified":1444241269000},{"_id":"themes/gandalfr/node_modules/nan/nan_callbacks.h","hash":"ea69bab70206cf8298d0b8d4668fb3aa0a964678","modified":1485122840000},{"_id":"themes/gandalfr/node_modules/nan/README.md","hash":"b4f2446f2029c317ca9789f32da3c3bfa237460e","modified":1485123291000},{"_id":"themes/gandalfr/node_modules/nan/nan_callbacks_12_inl.h","hash":"d87352f50c0826ed94833bc09daf63193cc5eecc","modified":1485122646000},{"_id":"themes/gandalfr/node_modules/nan/nan_converters.h","hash":"421c56fc80b782275ee41322d66c75161ceeeeb2","modified":1485122824000},{"_id":"themes/gandalfr/node_modules/nan/nan_converters_43_inl.h","hash":"447935a3fd22d063143126057f1a2b1e28944809","modified":1485122830000},{"_id":"themes/gandalfr/node_modules/nan/nan_callbacks_pre_12_inl.h","hash":"c8b5cc87ca30af357a53a404fac2d07cd876ced1","modified":1485122835000},{"_id":"themes/gandalfr/node_modules/nan/nan_converters_pre_43_inl.h","hash":"d2fe39be12c842e12999ca6e2941cd413b2deaca","modified":1485122818000},{"_id":"themes/gandalfr/node_modules/nan/nan_implementation_12_inl.h","hash":"457ee32ac6e6fbf8eb83a4c5011c75fbde4c8b27","modified":1485122708000},{"_id":"themes/gandalfr/node_modules/nan/nan_implementation_pre_12_inl.h","hash":"78bfe42520da0f1057f92b0619e020338016006a","modified":1485122715000},{"_id":"themes/gandalfr/node_modules/nan/nan_maybe_43_inl.h","hash":"9fafa13066e26c97bded98223e304ede1ee9c70a","modified":1485122721000},{"_id":"themes/gandalfr/node_modules/nan/nan_maybe_pre_43_inl.h","hash":"723595fa7748b959f970b196a91ce37253c3bdaa","modified":1485122727000},{"_id":"themes/gandalfr/node_modules/nan/nan_object_wrap.h","hash":"d5628be6465203a4f00448c218f024957e4f2876","modified":1485122742000},{"_id":"themes/gandalfr/node_modules/nan/nan_new.h","hash":"2b56fa1931ae234413e148da06920f357819f5bd","modified":1485122735000},{"_id":"themes/gandalfr/node_modules/nan/nan_persistent_12_inl.h","hash":"4120183453ae466e786534e8c9b8364e6b269c5d","modified":1485122752000},{"_id":"themes/gandalfr/node_modules/nan/nan_persistent_pre_12_inl.h","hash":"73eb43cfcb5c8ebcdaab2b4c84b8a6255ee1c4e3","modified":1485122767000},{"_id":"themes/gandalfr/node_modules/nan/nan_private.h","hash":"49d2eccb57e7bf9bdfe5775f39d62438c273b00f","modified":1485122774000},{"_id":"themes/gandalfr/node_modules/nan/nan_string_bytes.h","hash":"bdf8bfb9e779171768a04ec6e9d1e074c10874e1","modified":1444243260000},{"_id":"themes/gandalfr/node_modules/nan/nan_typedarray_contents.h","hash":"db8fd8d39f09b9234f9bb619ddec1bcf2f77cd4f","modified":1485122799000},{"_id":"themes/gandalfr/node_modules/nan/package.json","hash":"0cf109d44a1a24a6628950b84e70b8acaa8e1820","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/nan/nan_weak.h","hash":"ec6b184df163ca28319c015794ca296d6086834f","modified":1485122806000},{"_id":"themes/gandalfr/node_modules/loud-rejection/api.js","hash":"90ed1a0181577ec245b705fbc3648f46e9e327de","modified":1466073173000},{"_id":"themes/gandalfr/node_modules/loud-rejection/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1441258257000},{"_id":"themes/gandalfr/node_modules/loud-rejection/index.js","hash":"9c1b92950b54b984039615fd4ffb2919bb1881dc","modified":1467583208000},{"_id":"themes/gandalfr/node_modules/loud-rejection/package.json","hash":"54a44b5ae7aa7b6462fc57df6f48d41bd844c523","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/loud-rejection/readme.md","hash":"082bff7feffff24a952c773a5014ea17b943f6d0","modified":1467583208000},{"_id":"themes/gandalfr/node_modules/loud-rejection/register.js","hash":"ca2873afd81188174d7ecd077b3a58267f25bde0","modified":1466101728000},{"_id":"themes/gandalfr/node_modules/nopt/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1447359143000},{"_id":"themes/gandalfr/node_modules/nopt/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1447359143000},{"_id":"themes/gandalfr/node_modules/nopt/.travis.yml","hash":"f21fc484fc60c2a9504f37882653857441767fdd","modified":1447359143000},{"_id":"themes/gandalfr/node_modules/nopt/README.md","hash":"dd491d80a00af3ba8c01730825f011eaf91c001b","modified":1447363130000},{"_id":"themes/gandalfr/node_modules/nopt/package.json","hash":"270b8c6c343f113cadd05abeb77991538ca9255e","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/mkdirp/.travis.yml","hash":"6f47845eac101b08d34b0cfb4cb6d0614b69b4b2","modified":1431568866000},{"_id":"themes/gandalfr/node_modules/mkdirp/LICENSE","hash":"35d8442a9599f876c805b2c7d31178ecfa18c829","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/mkdirp/index.js","hash":"e4aca996fb54ff20c3dad61f1fa7807fcb44409f","modified":1431570694000},{"_id":"themes/gandalfr/node_modules/mkdirp/package.json","hash":"6d8d214b8ec555f1d81dae52963bec8f2a8763dd","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/mkdirp/readme.markdown","hash":"e4ffd1099773d1e612dc9ecea76dbb791ef355f5","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/node-gyp/.jshintrc","hash":"e5d7f84e7aea30920cae0a28d49f8b0684a4a6ed","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/.npmignore","hash":"4294259daadcf286671ee31713f1619f8b5dddfb","modified":1441775425000},{"_id":"themes/gandalfr/node_modules/node-gyp/0003-gyp-don-t-use-links-at-all-just-copy-the-files-inste.patch","hash":"ec41229eb4aa57e71fcb03779ac0b30347d784f4","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/0002-gyp-apply-https-codereview.chromium.org-11361103.patch","hash":"c9637e99148ea5a1acc3b92730a267b588cb5b91","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/0001-gyp-always-install-into-PRODUCT_DIR.patch","hash":"8876d5693f9408a389d1ab649da038b52edbaa3d","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/CHANGELOG.md","hash":"153435d204a9bf7204a8d235ba5a58b42888d3c0","modified":1484012059000},{"_id":"themes/gandalfr/node_modules/node-gyp/LICENSE","hash":"29e2ec2d24a38c009dfb6f3c1b8d1b57e3ec492b","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/addon.gypi","hash":"2e24227e7c6c013fe8f8dde21ec273e28685c340","modified":1467892209000},{"_id":"themes/gandalfr/node_modules/node-gyp/README.md","hash":"bd5b291c987d66296d3b31110ac40bd0ef301f09","modified":1478599690000},{"_id":"themes/gandalfr/node_modules/node-gyp/package.json","hash":"3b84dd89186429af88a2342182092cdc175154f2","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/.npmignore","hash":"ae4607005a13ef5aba5207eca8ea5b6e1eed011e","modified":1414472576000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/AUTHORS","hash":"425c58e20600fdfbe4e8670550ca16eec6d8d7be","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/README.md","hash":"77a89d3dd66ef25a9369b4c303e8874edb08e576","modified":1446503131000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/package.json","hash":"850744b8fa25cc5f72ee1bb517227e201674ec2d","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/LICENSE","hash":"7051653ea4b19d78c1f0b7928d88e55628c332e4","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-path/LICENSE","hash":"cce8f85bce93fb036bc1846f001ffea1b098108c","modified":1422062974000},{"_id":"themes/gandalfr/node_modules/normalize-path/index.js","hash":"1fa7549f17a96f788cb935c242c33d122f5bb005","modified":1447763472000},{"_id":"themes/gandalfr/node_modules/normalize-path/package.json","hash":"a57ece353de39a3c2fff38b263dfe81b87857c37","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/normalize-path/README.md","hash":"83f0d8c7ef174ff6b375a48765494088ba5c93a6","modified":1443938634000},{"_id":"themes/gandalfr/node_modules/num2fraction/.editorconfig","hash":"002fc0a2fabd097b1f5ecc19eff2734d83b334f6","modified":1422338584000},{"_id":"themes/gandalfr/node_modules/num2fraction/LICENSE","hash":"1afcb671f02a062b45500c5a351554834c03f716","modified":1420444293000},{"_id":"themes/gandalfr/node_modules/num2fraction/.npmignore","hash":"66efb57402a792a6070196a2893a69ecd4835414","modified":1420444293000},{"_id":"themes/gandalfr/node_modules/num2fraction/README.md","hash":"5b72a3420009757d8c8fc69c30e358dc03b38613","modified":1442195423000},{"_id":"themes/gandalfr/node_modules/num2fraction/index.js","hash":"ae1822dfe9fc833a83ec2d529e60e6846b4d8a74","modified":1442195361000},{"_id":"themes/gandalfr/node_modules/num2fraction/package.json","hash":"024a6f051a4089c4d604895626465f670768fd16","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/npmlog/CHANGELOG.md","hash":"bfc93471c90a6ce8d224063dda54d8d10a6ed810","modified":1481572015000},{"_id":"themes/gandalfr/node_modules/npmlog/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1446707615000},{"_id":"themes/gandalfr/node_modules/npmlog/README.md","hash":"f445a828ea5ae5cba850b910d938f10a783a7ed8","modified":1481572295000},{"_id":"themes/gandalfr/node_modules/npmlog/package.json","hash":"34b4c345e2ba1c349316d27bd4ce2eb535fdac54","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/npmlog/log.js","hash":"fe977658dc71953cf65da8c8f8a89c016a4bb314","modified":1481572015000},{"_id":"themes/gandalfr/node_modules/number-is-nan/index.js","hash":"f46fa63ddeeaf817837ade36c96a37045c36b5bf","modified":1432154213000},{"_id":"themes/gandalfr/node_modules/number-is-nan/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/number-is-nan/package.json","hash":"0653407d3fff6f40fa2f9d8320b08cafc4655c94","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/number-is-nan/readme.md","hash":"d579efeab4be85082383108869ebd212ba56ab5a","modified":1475212234000},{"_id":"themes/gandalfr/node_modules/oauth-sign/README.md","hash":"9f943ef5e4c1e530314bee287c8fd5b8addbc808","modified":1462396251000},{"_id":"themes/gandalfr/node_modules/oauth-sign/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1462396251000},{"_id":"themes/gandalfr/node_modules/oauth-sign/index.js","hash":"fb3d1f2193e77b18089fad077d3133143811f554","modified":1462396251000},{"_id":"themes/gandalfr/node_modules/oauth-sign/package.json","hash":"cb7dbc5ea4ddfe6572653d23a1c566ccd9e4cdb2","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/object-assign/index.js","hash":"5156750a8bdc0109eddfe098dc534e344afa263f","modified":1433426923000},{"_id":"themes/gandalfr/node_modules/object-assign/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/object-assign/package.json","hash":"201a45d57599337ae29de9f31e8d0f3d0e44a0b3","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/object-assign/readme.md","hash":"237462a8f598833f49e666f62c48a753fe647047","modified":1414015686000},{"_id":"themes/gandalfr/node_modules/object.omit/LICENSE","hash":"64fab20ef9c097beeb8f38596e9462b2d6cff0c2","modified":1428554275000},{"_id":"themes/gandalfr/node_modules/object.omit/README.md","hash":"deb11988389b37c0dc6d2c03167bc1cdc657e7e0","modified":1477549390000},{"_id":"themes/gandalfr/node_modules/object.omit/index.js","hash":"bc053e15f061801f5af77ba751300ee9e5794073","modified":1477549424000},{"_id":"themes/gandalfr/node_modules/object.omit/package.json","hash":"682ef811166ba7372059884ed3047fa082fd2862","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/once/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1430780985000},{"_id":"themes/gandalfr/node_modules/once/once.js","hash":"67e1e2cfe1a08a3cc9636382beab2e3cba80d9b6","modified":1448055900000},{"_id":"themes/gandalfr/node_modules/once/README.md","hash":"f980f2811a57fb0732e9fa9bc43c9e8a2d6b0011","modified":1382596021000},{"_id":"themes/gandalfr/node_modules/once/package.json","hash":"03bddfa36e8d7233a44ed368451619a37dc431b8","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/normalize-range/index.js","hash":"57355241f14b7b9e52dde6ab3ec2a4a15c2ccaf5","modified":1442039033000},{"_id":"themes/gandalfr/node_modules/normalize-range/license","hash":"76a1abf5ae34f3a0ccdeff35879f4b42c24c333e","modified":1442000580000},{"_id":"themes/gandalfr/node_modules/normalize-range/package.json","hash":"ff4b3fab3046ff976911fa37ad96029925834066","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/normalize-range/readme.md","hash":"69dc17485a48507b77a20cd1a6797d0aaca8d3c6","modified":1442039033000},{"_id":"themes/gandalfr/node_modules/ordered-read-streams/.npmignore","hash":"d06e18168f0ce33d18704bb8aa50ae9e82671e50","modified":1389874915000},{"_id":"themes/gandalfr/node_modules/ordered-read-streams/.travis.yml","hash":"8335647eddbeeab76f07be405e926c0406e2bfd1","modified":1404202736000},{"_id":"themes/gandalfr/node_modules/ordered-read-streams/LICENSE","hash":"fa8847ebcbd827fcc30527f752fe4f0e11b7d419","modified":1389774919000},{"_id":"themes/gandalfr/node_modules/ordered-read-streams/index.js","hash":"f6e941fadbed4b9ed53a6b7f8a9a87b091a2f1cf","modified":1412071217000},{"_id":"themes/gandalfr/node_modules/ordered-read-streams/README.md","hash":"44677fa7896e2bf2451ba46f94c8a34a9a3deeea","modified":1390035683000},{"_id":"themes/gandalfr/node_modules/ordered-read-streams/package.json","hash":"99ccba68847af22ab7b24bc34b37f1aa3aeb20ae","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/orchestrator/.npmignore","hash":"418e4c5c61174833703000790bb4c7bf46b43588","modified":1382380769000},{"_id":"themes/gandalfr/node_modules/orchestrator/LICENSE","hash":"ade17dc657a96aead0f3bd75c72972bc47464e99","modified":1381878647000},{"_id":"themes/gandalfr/node_modules/orchestrator/README.md","hash":"27873c4e2f09a27718442d2a0f3a9c9e79dc84a7","modified":1478375405000},{"_id":"themes/gandalfr/node_modules/orchestrator/package.json","hash":"87e8b28ac230afa5899bc3072d80f26836316956","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/orchestrator/index.js","hash":"790bb6a812911eb22469c0958b196b5bc187b2f8","modified":1404165314000},{"_id":"themes/gandalfr/node_modules/node-sass/.DS_Store","hash":"e93dc452f4ba18d8970dc0048796aa76b56f017b","modified":1488867680000},{"_id":"themes/gandalfr/node_modules/node-sass/CHANGELOG.md","hash":"5ff837355cada0418ca372cb7229d95355658bd1","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/LICENSE","hash":"1f4c36b94cee917743b935e1f0c35ee7b5b3eee1","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/README.md","hash":"7947bb218274f5b5498017739ee8a7f19e1092b5","modified":1481344776000},{"_id":"themes/gandalfr/node_modules/node-sass/binding.gyp","hash":"89f32608f22ac0a70d2df340edfe7023cc0e8704","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/package.json","hash":"302c99483c5b4c16908f92b02699fd41db889a62","modified":1486538261000},{"_id":"themes/gandalfr/node_modules/os-homedir/index.js","hash":"d4e4abbe8e2a8169d6a52907152c2c80ec884745","modified":1437434714000},{"_id":"themes/gandalfr/node_modules/os-homedir/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/os-homedir/package.json","hash":"1d84e9a33e1929a8f3dc8e9302496d53832e435b","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/os-homedir/readme.md","hash":"847929d396aeddb06d6333c384748c2df15ce13a","modified":1475211443000},{"_id":"themes/gandalfr/node_modules/parse-filepath/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1459218522000},{"_id":"themes/gandalfr/node_modules/parse-filepath/README.md","hash":"136e8866baa2ee7dd852d24e0d545b9ce1969b9c","modified":1459236873000},{"_id":"themes/gandalfr/node_modules/parse-filepath/index.js","hash":"bac859c81872b5d7369e9f1ce6b988e610f04ee8","modified":1459236863000},{"_id":"themes/gandalfr/node_modules/parse-filepath/package.json","hash":"944eae41ec1870f8ce714d7ff4ca772644299388","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/parse-glob/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1442931829000},{"_id":"themes/gandalfr/node_modules/parse-glob/README.md","hash":"b08c9fd27a7da80a2e0afb00003498384f3aabbb","modified":1442934996000},{"_id":"themes/gandalfr/node_modules/parse-glob/index.js","hash":"80de4342abc02723990d3849ef8f5710a3bfc2a0","modified":1442931829000},{"_id":"themes/gandalfr/node_modules/parse-glob/package.json","hash":"12228c3cf4a641ef1207e2951459bc01ae035c15","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/os-locale/index.js","hash":"b0aa01d61dede1b2f87d5ed56318f83787551a07","modified":1441692137000},{"_id":"themes/gandalfr/node_modules/os-locale/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/os-locale/package.json","hash":"27059e124090f6a0a4c047b6aa7c85a4625ae214","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/os-locale/readme.md","hash":"625c3415731f47406831239e3c2abf791df39d99","modified":1441692137000},{"_id":"themes/gandalfr/node_modules/osenv/.npmignore","hash":"47360b81ee1980d83d132e3abde7271d21de059a","modified":1425590976000},{"_id":"themes/gandalfr/node_modules/osenv/.travis.yml","hash":"f21fc484fc60c2a9504f37882653857441767fdd","modified":1433168710000},{"_id":"themes/gandalfr/node_modules/osenv/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432106120000},{"_id":"themes/gandalfr/node_modules/osenv/README.md","hash":"f62f968b504e2a53b9b089579ee7bbb55cfd4ba6","modified":1339980618000},{"_id":"themes/gandalfr/node_modules/osenv/osenv.js","hash":"9b8db8347dc3430dacf82cd3438c9acc88bf7c30","modified":1435618522000},{"_id":"themes/gandalfr/node_modules/osenv/package.json","hash":"612395c4c5c9880f85c637cbcc0fafb4ccee1206","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/osenv/x.tap","hash":"a46371dda39042e545cb911373563a0b5fbd9c09","modified":1433924692000},{"_id":"themes/gandalfr/node_modules/os-tmpdir/index.js","hash":"b1a22431f527e2927d04706f8468e255080e0bcf","modified":1475211097000},{"_id":"themes/gandalfr/node_modules/os-tmpdir/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/os-tmpdir/package.json","hash":"6f266db657592b4f22b4b14a598382aa90284bd8","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/os-tmpdir/readme.md","hash":"37cc522ae1365a1553c3f5eb4e6ff861dc9048e7","modified":1475211025000},{"_id":"themes/gandalfr/node_modules/path-exists/index.js","hash":"f7ee42ce332afb4364f3314f35a3220f486a1f0a","modified":1441090809000},{"_id":"themes/gandalfr/node_modules/path-exists/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/path-exists/package.json","hash":"0516656f381af1ced22cd49784f88716ad858a23","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/path-exists/readme.md","hash":"188afff0b81831022bb33b705591f6a8db457037","modified":1441091083000},{"_id":"themes/gandalfr/node_modules/parse-passwd/LICENSE","hash":"4b46a76a0997b639c10c5bad7d4a55c864651eb4","modified":1471487115000},{"_id":"themes/gandalfr/node_modules/parse-passwd/README.md","hash":"a1f43d7b6c36703236214e2c44be722ef495530c","modified":1476891950000},{"_id":"themes/gandalfr/node_modules/parse-passwd/index.js","hash":"4524b895a33b4e7fb54de182921e07cfe353f0af","modified":1476866578000},{"_id":"themes/gandalfr/node_modules/parse-passwd/package.json","hash":"302c187a23c219d9dad2fb1133ab03b072c7e763","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/path-root/LICENSE","hash":"d5885ada4599bfa2e2bab0665853babff900d21e","modified":1459233866000},{"_id":"themes/gandalfr/node_modules/path-root/README.md","hash":"b76c117b7c92930abf33cb96dc6b89f7dd7c5b76","modified":1459235634000},{"_id":"themes/gandalfr/node_modules/path-root/index.js","hash":"a27fa3221c60f1a7e22d4eb833c81856fe701e5e","modified":1459234416000},{"_id":"themes/gandalfr/node_modules/path-root/package.json","hash":"ebd9e2919dedf34258b350309b20e2ec66e5ead3","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/path-root-regex/LICENSE","hash":"d5885ada4599bfa2e2bab0665853babff900d21e","modified":1459233349000},{"_id":"themes/gandalfr/node_modules/path-root-regex/README.md","hash":"ad28d8ed2390f1e9c1eba937cdf1a9ad35a84570","modified":1459235129000},{"_id":"themes/gandalfr/node_modules/path-root-regex/index.js","hash":"7d70e1b2135e90630fca200af7ceadb928fb7937","modified":1459234650000},{"_id":"themes/gandalfr/node_modules/path-root-regex/package.json","hash":"0f21ac4d064c5c81bb937547faf85927e2e30143","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/path-type/index.js","hash":"a61f13374d2775c261b9701928c670451deb4126","modified":1441355632000},{"_id":"themes/gandalfr/node_modules/path-type/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/path-type/package.json","hash":"dfc51297075cf898008526139b2df6bf1bfb90a5","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/path-type/readme.md","hash":"84fc8c2a8b81b94ac48caf806760417f00259120","modified":1441355228000},{"_id":"themes/gandalfr/node_modules/path-is-absolute/index.js","hash":"6de38a82f68960de2bd07fd9114541f02bee2f62","modified":1475210370000},{"_id":"themes/gandalfr/node_modules/path-is-absolute/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/path-is-absolute/package.json","hash":"657ec2ea4331df8050a5adc0e4d10dd511f0a500","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/path-is-absolute/readme.md","hash":"b09eee74fdfb9195b8b81401654da2a403886d2d","modified":1475210477000},{"_id":"themes/gandalfr/node_modules/parse-json/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/parse-json/index.js","hash":"db6c92c06bcd198f70bb1ef100bfdb35eeb5931e","modified":1441038086000},{"_id":"themes/gandalfr/node_modules/parse-json/package.json","hash":"2be77adeed2fe5127d646b1cde6279ca22913c64","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/parse-json/readme.md","hash":"de54a7bbb55d02431c53a8d56c38a566d70cec09","modified":1441038086000},{"_id":"themes/gandalfr/node_modules/postcss/LICENSE","hash":"0b4be858ebd79c7ec4f7ba4fbda0406e3f3e821f","modified":1486329944000},{"_id":"themes/gandalfr/node_modules/postcss/CHANGELOG.md","hash":"6af6accace7a859b95ee44d6ee4b6d9a07b0d006","modified":1486329941000},{"_id":"themes/gandalfr/node_modules/postcss/README.md","hash":"31a801954ed1da8d1a5cc9c4d296a59a61343789","modified":1486329945000},{"_id":"themes/gandalfr/node_modules/postcss/package.json","hash":"e9f1c6a0dc9287cd9d10a9cf32ffebd972706493","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/pinkie/index.js","hash":"4ed6d8988b13d2c29cfa99c99cedb43fa6b51ee7","modified":1454324862000},{"_id":"themes/gandalfr/node_modules/pinkie/license","hash":"91c700b5dac5967632cf497f1f3316352b1b45ce","modified":1454217969000},{"_id":"themes/gandalfr/node_modules/pinkie/package.json","hash":"962b069bf939503684f595691ac402c117220429","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/pinkie/readme.md","hash":"1673aa52b8f81f6ebf1c2e5ca0184a6f63522f78","modified":1454322504000},{"_id":"themes/gandalfr/node_modules/pify/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/pify/index.js","hash":"6565dcfd1aebfb8d13eb74b2ee9d6536cd4bcda2","modified":1445864677000},{"_id":"themes/gandalfr/node_modules/pify/package.json","hash":"754d9399772dff15d87a08904584fcdcfc9d4ca1","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/pify/readme.md","hash":"0a3dc5be43c41633baff9964712cc816c857b03d","modified":1445864979000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/LICENSE","hash":"b48370d4e2ba2d4321e65f73f7afad13efcbd867","modified":1455811355000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/README.md","hash":"a0ceb62d80c40bff36d60c44e8bcf2fa69f8b9f4","modified":1455816959000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/package.json","hash":"515ed182e7b1463ebc0b6f5918668a8b6130c020","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/pinkie-promise/index.js","hash":"830ad9dad341dc74b12a7af106c9e97c07e44a02","modified":1460309821000},{"_id":"themes/gandalfr/node_modules/pinkie-promise/license","hash":"91c700b5dac5967632cf497f1f3316352b1b45ce","modified":1460309821000},{"_id":"themes/gandalfr/node_modules/pinkie-promise/package.json","hash":"e255ac18991e0e8f8fe5863529992fa708869068","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/pinkie-promise/readme.md","hash":"450859283a97df6ee0918789a485d26786329eb1","modified":1460309821000},{"_id":"themes/gandalfr/node_modules/pretty-hrtime/.jshintignore","hash":"c928227309ad5ebb9498c0b1bf36ad02e17e0e54","modified":1443539739000},{"_id":"themes/gandalfr/node_modules/pretty-hrtime/.npmignore","hash":"418e4c5c61174833703000790bb4c7bf46b43588","modified":1382380769000},{"_id":"themes/gandalfr/node_modules/pretty-hrtime/LICENSE","hash":"ade17dc657a96aead0f3bd75c72972bc47464e99","modified":1381878647000},{"_id":"themes/gandalfr/node_modules/pretty-hrtime/README.md","hash":"095d22f6322a5d467b44868edc313101d56674e2","modified":1399356296000},{"_id":"themes/gandalfr/node_modules/pretty-hrtime/index.js","hash":"44f105492f187b54df9325c9bdbebb0bd45c1a7c","modified":1453254611000},{"_id":"themes/gandalfr/node_modules/pretty-hrtime/package.json","hash":"f3a008d4d3638a212529451242ac708d364e37c5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/pseudomap/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1448659987000},{"_id":"themes/gandalfr/node_modules/pseudomap/README.md","hash":"93ca8dd88b562f1cd856143e500bdb679419e088","modified":1448749520000},{"_id":"themes/gandalfr/node_modules/pseudomap/map.js","hash":"f0d63208dec47fe1d9c69ab74fdf54298406dce4","modified":1451963009000},{"_id":"themes/gandalfr/node_modules/pseudomap/pseudomap.js","hash":"34cddc0bc6daaf6c7092d2659612969b8700d8fa","modified":1451963009000},{"_id":"themes/gandalfr/node_modules/pseudomap/package.json","hash":"133737d750ecd6334f0339d28903dd63bc06a151","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/punycode/LICENSE-MIT.txt","hash":"d7384cd3ed0c9614f87dde0f86568017f369814c","modified":1408532732000},{"_id":"themes/gandalfr/node_modules/punycode/README.md","hash":"c332a96ebde88c232159d794e4d417a6d834e1e1","modified":1424815497000},{"_id":"themes/gandalfr/node_modules/punycode/package.json","hash":"0fda526ccf7a51684f7511a31013c753fee913b6","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/qs/.eslintignore","hash":"7b8fdc232fc9b1a8050da3c419dea3d23b5da9c5","modified":1450856430000},{"_id":"themes/gandalfr/node_modules/punycode/punycode.js","hash":"cc7535a3f0235f4b3ad0030b16f418eb2abf454c","modified":1458437195000},{"_id":"themes/gandalfr/node_modules/qs/.eslintrc","hash":"76fe2506b4b0d497572d3a271e4c599de13984da","modified":1476635148000},{"_id":"themes/gandalfr/node_modules/qs/CONTRIBUTING.md","hash":"61998267d75f17fdd423c1c742edc20a1561c1e2","modified":1450856430000},{"_id":"themes/gandalfr/node_modules/qs/CHANGELOG.md","hash":"d62b8b8f9ac222c580c43366757805ac2b102214","modified":1476635320000},{"_id":"themes/gandalfr/node_modules/qs/LICENSE","hash":"ddf13f1b7345d730677237125bc2e46fbbfbbf32","modified":1450856430000},{"_id":"themes/gandalfr/node_modules/qs/README.md","hash":"c22baf1a6e81677418c2414112f1eedbc35abdc0","modified":1476510435000},{"_id":"themes/gandalfr/node_modules/qs/package.json","hash":"2088dfcd1e42552e796d5da5de5937cd0ae5a3a4","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/read-pkg/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/read-pkg/index.js","hash":"c3b08ea0ff9cb3008e88a67763b7979875a2fdf3","modified":1441446665000},{"_id":"themes/gandalfr/node_modules/read-pkg/package.json","hash":"fc4743f0fafb96226a276dd866184cdf3d445182","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/read-pkg/readme.md","hash":"07a97a6f379c3f8b2fda78f2654d83e46667b554","modified":1441256093000},{"_id":"themes/gandalfr/node_modules/read-pkg-up/index.js","hash":"af97811952cede51c92a3d38752bc37df9496222","modified":1441257916000},{"_id":"themes/gandalfr/node_modules/read-pkg-up/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/read-pkg-up/package.json","hash":"de6b15c57a21536f116869eaf0cb5b094b991e84","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/read-pkg-up/readme.md","hash":"f72451c180f747a98dfe5c774b4513152dd78410","modified":1441257728000},{"_id":"themes/gandalfr/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/readable-stream/README.md","hash":"c409783dc3fe9ee72cf5e36354daf9fe7b35b9eb","modified":1460562803000},{"_id":"themes/gandalfr/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/readable-stream/package.json","hash":"574f7e71b1904b79b3f4a8e909804c613280c2ee","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/readable-stream/float.patch","hash":"0ed071d69dc259955e754ae97bd937f1248ed9f3","modified":1460562803000},{"_id":"themes/gandalfr/node_modules/readable-stream/readable.js","hash":"4b0080b6aaa5994014dcda0ac055ed55e0e87a68","modified":1460563115000},{"_id":"themes/gandalfr/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/preserve/.gitattributes","hash":"514b6d54817ac3ab41bdaf1af9818c6520463df5","modified":1420891233000},{"_id":"themes/gandalfr/node_modules/preserve/.jshintrc","hash":"24dd712f1ac9b5343fca8e7fdaee27b7e1c0ba71","modified":1420891233000},{"_id":"themes/gandalfr/node_modules/preserve/.npmignore","hash":"026661455b3e8504461938da7cf22fa149113b65","modified":1420928777000},{"_id":"themes/gandalfr/node_modules/preserve/.travis.yml","hash":"ebe015d4e59b33c034c0140e91343f6a2a549a6d","modified":1420891233000},{"_id":"themes/gandalfr/node_modules/preserve/.verb.md","hash":"59da141744d54ce2c3eb50ca587eccc954257d5b","modified":1420892752000},{"_id":"themes/gandalfr/node_modules/preserve/LICENSE","hash":"d99d5158898474f25efb4c8790f9fcc4cf55b350","modified":1420928487000},{"_id":"themes/gandalfr/node_modules/preserve/README.md","hash":"daedd5d9696a86795f63b002cfd4537033d639ec","modified":1420928487000},{"_id":"themes/gandalfr/node_modules/preserve/index.js","hash":"1d37d615f1ea0e2469a6e1a8a64eb7c1c7b6f110","modified":1420928487000},{"_id":"themes/gandalfr/node_modules/preserve/package.json","hash":"e431d8383cd443ff698076ed9fb540a78063f99e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/preserve/test.js","hash":"3baac5a1e812bcc42443c2dc6a401c0a55d01f4c","modified":1420928674000},{"_id":"themes/gandalfr/node_modules/randomatic/LICENSE","hash":"d540639ee5039dff3211e30337de054accf2bc91","modified":1420215893000},{"_id":"themes/gandalfr/node_modules/randomatic/index.js","hash":"b3eab954771903c20e51724faafa84685dca1ccc","modified":1447157175000},{"_id":"themes/gandalfr/node_modules/randomatic/README.md","hash":"da2fb354b21efec7765a4999ed9237e8e026c93d","modified":1480022624000},{"_id":"themes/gandalfr/node_modules/randomatic/package.json","hash":"bc564e78d88a085118270688a3c5b8f09ec876b5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/regex-cache/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1423430290000},{"_id":"themes/gandalfr/node_modules/regex-cache/index.js","hash":"9bf12bc1f237ac9a2652806adde33f7be50ac66b","modified":1459536284000},{"_id":"themes/gandalfr/node_modules/regex-cache/README.md","hash":"e0165167497464ddd6b8032df84e547efefafafb","modified":1459536555000},{"_id":"themes/gandalfr/node_modules/regex-cache/package.json","hash":"5e736f9613496dba923043563a8db7dc2fc047ad","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/process-nextick-args/.travis.yml","hash":"f4a67b72445cea74c4c35acfd9bef7bb1f8276a4","modified":1456494267000},{"_id":"themes/gandalfr/node_modules/process-nextick-args/index.js","hash":"19704cf1716bd11b5fd95e20a35506b764aa541e","modified":1462394229000},{"_id":"themes/gandalfr/node_modules/process-nextick-args/license.md","hash":"9def7167175d2ac68505dd2ae0c7b8dd63bc4c3d","modified":1441824016000},{"_id":"themes/gandalfr/node_modules/process-nextick-args/package.json","hash":"c26434de707f5ba0bd8b6c9098dd9634819c6252","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/process-nextick-args/readme.md","hash":"3eba0a30f0a115fd767a0c8c9761d60d1dc768c0","modified":1441824016000},{"_id":"themes/gandalfr/node_modules/process-nextick-args/test.js","hash":"279a062028d86a4ee0ab2ab800ecf7ca29f4905e","modified":1441824185000},{"_id":"themes/gandalfr/node_modules/repeat-element/LICENSE","hash":"7e21c9f5aa0a1be61e943a935506095ea40bbafc","modified":1421019371000},{"_id":"themes/gandalfr/node_modules/repeat-element/README.md","hash":"230540131df8177d53f6ee1a57eec5d9413992ec","modified":1430968550000},{"_id":"themes/gandalfr/node_modules/repeat-element/index.js","hash":"33ee2f6ac8638233b7d7eb0a35b43249f05ee5c5","modified":1430968437000},{"_id":"themes/gandalfr/node_modules/repeat-element/package.json","hash":"96bea3cb999eda5417ef512c7162b6fb1f098dc6","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/repeat-string/LICENSE","hash":"3693ecd333cf832d150571c8cf7448da1434c8a6","modified":1456747640000},{"_id":"themes/gandalfr/node_modules/repeat-string/README.md","hash":"88a0cb55405a527ad650b0724ecffe4e31764e2b","modified":1477209631000},{"_id":"themes/gandalfr/node_modules/repeat-string/index.js","hash":"7e753d2760844344055f3ec63768780362d0f5f4","modified":1477240963000},{"_id":"themes/gandalfr/node_modules/repeat-string/package.json","hash":"2d9fb2812008028ec34593f8388e5fd0412a6931","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/repeating/index.js","hash":"9a5382a64c2d9f06fe2225a44fa56c8a5ce568e3","modified":1450718372000},{"_id":"themes/gandalfr/node_modules/repeating/package.json","hash":"0e9dc4d1c32f98e56161f33f95997a800f6a87b1","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/repeating/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/repeating/readme.md","hash":"c7496fb90e5f8e3e32d2faed3548ceec825df089","modified":1460395907000},{"_id":"themes/gandalfr/node_modules/replace-ext/.npmignore","hash":"79b4a373fe874f8320da91bb5ff7bfb1b0cb3404","modified":1393359475000},{"_id":"themes/gandalfr/node_modules/replace-ext/.travis.yml","hash":"e8e6656511594029f87feeaa1b12ac875b664be9","modified":1393363594000},{"_id":"themes/gandalfr/node_modules/replace-ext/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1393359475000},{"_id":"themes/gandalfr/node_modules/replace-ext/README.md","hash":"dcf34bd35139f4f43d48bb8c57a37fd5531fe6f8","modified":1393363952000},{"_id":"themes/gandalfr/node_modules/replace-ext/index.js","hash":"24a418fe5d76f4b5c5d1a942136bc7c3b7fff951","modified":1393363489000},{"_id":"themes/gandalfr/node_modules/replace-ext/package.json","hash":"eae4f8272f2f271f48ad576f4d55cc1b062c0d50","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/request/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1479487117000},{"_id":"themes/gandalfr/node_modules/request/CHANGELOG.md","hash":"55442d40102a94850e5669c0c466e668c2613c20","modified":1479489627000},{"_id":"themes/gandalfr/node_modules/request/index.js","hash":"7cbd627cdb3a012dbe8ede4a7ca3fee3a96bb0a2","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/request/README.md","hash":"15fa189b53a377c4f7f15eb7fa87303df4295bb1","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/request/package.json","hash":"5addbf806571c11ed8a4129bf09091f30006153b","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/rechoir/.npmignore","hash":"4e1243bd22c66e76c2ba9eddc1f91394e57f9f83","modified":1437567068000},{"_id":"themes/gandalfr/node_modules/rechoir/.travis.yml","hash":"1f17a4a94128c1a328862c50ad91300e78e00c0a","modified":1437567068000},{"_id":"themes/gandalfr/node_modules/rechoir/CHANGELOG","hash":"432fbc60af2b8734829ba3caeded57d297d8a649","modified":1437569684000},{"_id":"themes/gandalfr/node_modules/request/request.js","hash":"7df6c18bf5e8ab44d61aeb37d1fc03cff8165609","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/rechoir/LICENSE","hash":"5fffcfcf8973eb02ec996a531393c5be3ee7f860","modified":1437567068000},{"_id":"themes/gandalfr/node_modules/rechoir/README.md","hash":"710ac6d36458797c40c1fda9f87e7ac55f29b113","modified":1437567068000},{"_id":"themes/gandalfr/node_modules/rechoir/index.js","hash":"d21c03ef26f2bc8780b7ad4233d6f5643874872c","modified":1437569604000},{"_id":"themes/gandalfr/node_modules/rechoir/package.json","hash":"0687fcbab0af5a59311df41b986d60244e4bd52d","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/require-main-filename/.npmignore","hash":"fd1b772c5387c396492a5a50069caeb02c66f0b3","modified":1454305843000},{"_id":"themes/gandalfr/node_modules/require-main-filename/.travis.yml","hash":"2223b332cc21a817fb77dc07feec75284c06e2ab","modified":1454306249000},{"_id":"themes/gandalfr/node_modules/require-main-filename/LICENSE.txt","hash":"47edc4b4e929248ad6e423bf3a6736c320a3277c","modified":1454306249000},{"_id":"themes/gandalfr/node_modules/require-main-filename/README.md","hash":"4c883668f0d69fe13b1dfa520b32c00841452776","modified":1454304682000},{"_id":"themes/gandalfr/node_modules/require-main-filename/index.js","hash":"bbc8cdc333da54dd07a1fe984d85371d0ea10f4e","modified":1455687661000},{"_id":"themes/gandalfr/node_modules/require-main-filename/package.json","hash":"3adb08cf063570e2be010205d92bcde07d4fcba4","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/require-main-filename/test.js","hash":"8ec937b943d10b1992732f73dd6f748f8f2f2c06","modified":1455687578000},{"_id":"themes/gandalfr/node_modules/resolve-dir/LICENSE","hash":"6b6e43e748f05929750a1016160c9ade94e7e644","modified":1442870891000},{"_id":"themes/gandalfr/node_modules/resolve-dir/README.md","hash":"2c6d7a01629a8ec60107ed01d5681af51590e16b","modified":1469811526000},{"_id":"themes/gandalfr/node_modules/resolve-dir/index.js","hash":"c4bb3a47e23a9cf2d7811760f257f27d06dd509b","modified":1442870981000},{"_id":"themes/gandalfr/node_modules/require-directory/.jshintrc","hash":"c965799911431872cfd802d804aa6b0d686022ad","modified":1432801828000},{"_id":"themes/gandalfr/node_modules/resolve-dir/package.json","hash":"8ec526901c3d979792f2bfeaabdca9fe811c61dc","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/require-directory/.npmignore","hash":"cd1101363cddea4dba5e68ab66f78a5c7e0c4a7d","modified":1432801828000},{"_id":"themes/gandalfr/node_modules/require-directory/.travis.yml","hash":"35c3960038b3eb1390c0970d0713b4ca33a99c31","modified":1432801828000},{"_id":"themes/gandalfr/node_modules/require-directory/README.markdown","hash":"04157986113a2221dfe8596dc57f612d20161f24","modified":1432801828000},{"_id":"themes/gandalfr/node_modules/require-directory/LICENSE","hash":"556147a98d3ad8ca22444c3055d0c0bee79748b9","modified":1432801828000},{"_id":"themes/gandalfr/node_modules/require-directory/index.js","hash":"ebc66fbcfa0db7baa9eb1cf40c02d07c0f2e0645","modified":1432801828000},{"_id":"themes/gandalfr/node_modules/require-directory/package.json","hash":"b45ad4429742a476c1f273beb863f9de7c12d8e8","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/resolve/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1481666097000},{"_id":"themes/gandalfr/node_modules/resolve/.travis.yml","hash":"40a9f74ba5745bf6bda48e2e58f036b52b950847","modified":1481673199000},{"_id":"themes/gandalfr/node_modules/resolve/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/index.js","hash":"be810586bfc1a359d636dc6608b9840fb9bf04b2","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/package.json","hash":"6b18853f87cabf4b38d3c4c02ba69423339d357e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/rimraf/bin.js","hash":"366b465d5a8637f94cea9366f505a25fc78c8a83","modified":1447980323000},{"_id":"themes/gandalfr/node_modules/resolve/readme.markdown","hash":"fd48898a6ebc10bb407e79685b01206774718ed6","modified":1481666097000},{"_id":"themes/gandalfr/node_modules/rimraf/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999446000},{"_id":"themes/gandalfr/node_modules/rimraf/README.md","hash":"fec5cb034f99088fb8ceec58b6de8ac5f5fc04e7","modified":1450896185000},{"_id":"themes/gandalfr/node_modules/rimraf/package.json","hash":"b728cacf1120ad67cb7b5e60c5e53f621654d2b9","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/rimraf/rimraf.js","hash":"89b9c48d11c6e97026cbf5a496a760f438786cd6","modified":1469206915000},{"_id":"themes/gandalfr/node_modules/sass-graph/.DS_Store","hash":"40eb8703e24bfa8bb6987a8e526a7326d6eec3b4","modified":1488867680000},{"_id":"themes/gandalfr/node_modules/sass-graph/CHANGELOG.md","hash":"cbe9957635be170f4ee701b4be6e12522a388b76","modified":1465989779000},{"_id":"themes/gandalfr/node_modules/sass-graph/package.json","hash":"efa58a0a51e09cb3a2d343dbc0d5016551d3d9b7","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/sass-graph/parse-imports.js","hash":"53db9f3ba0cc5f3950c6b6624fc8fea8d6a20754","modified":1465989192000},{"_id":"themes/gandalfr/node_modules/sass-graph/readme.md","hash":"52fd34ebe52464f97698c7d19b6065ff8abd168e","modified":1465989192000},{"_id":"themes/gandalfr/node_modules/semver/.npmignore","hash":"813df6cd387f277bac3c7b84c9e508d472d072a8","modified":1433132148000},{"_id":"themes/gandalfr/node_modules/semver/.travis.yml","hash":"79213a95749ddb02aac8146f88c2e9ee705bec84","modified":1432938130000},{"_id":"themes/gandalfr/node_modules/sass-graph/sass-graph.js","hash":"809254f06dcb1c9b9fba79caa8428ab1edc528de","modified":1465989192000},{"_id":"themes/gandalfr/node_modules/semver/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1430799955000},{"_id":"themes/gandalfr/node_modules/semver/Makefile","hash":"e9b7280e7df59fe4a51e916cc7a19932df5f3b8c","modified":1410475074000},{"_id":"themes/gandalfr/node_modules/semver/foot.js.txt","hash":"a210931a10640cd3c4f9f3883fd42886c9f0fc6e","modified":1410475074000},{"_id":"themes/gandalfr/node_modules/semver/README.md","hash":"7c9938adb35b0fe903e4d7ca89af5a402b6a71c3","modified":1423771405000},{"_id":"themes/gandalfr/node_modules/semver/head.js.txt","hash":"ec4c757e2124b6d1afb89d1b65db9285fa20a197","modified":1410475074000},{"_id":"themes/gandalfr/node_modules/semver/package.json","hash":"c4546fc7f9c8584ace35c5e1fefb00899b71aad1","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/semver/semver.browser.js","hash":"53c7d0eee4b85f0c23f295303f93ba8c1e359c06","modified":1432938335000},{"_id":"themes/gandalfr/node_modules/semver/semver.browser.js.gz","hash":"5df122cc3a808b730e6817455109ee3582ef7bcf","modified":1432938336000},{"_id":"themes/gandalfr/node_modules/semver/semver.min.js","hash":"4fe500d8f0c2ce2b019c9631a1c8944128e718f8","modified":1432938336000},{"_id":"themes/gandalfr/node_modules/semver/semver.min.js.gz","hash":"20f0ecc934c59b62f27a54044e16aa53a462dda2","modified":1432938336000},{"_id":"themes/gandalfr/node_modules/redent/index.js","hash":"9cc8db3f85eb6d2bbae14fb596b320f4cb0262b9","modified":1443523229000},{"_id":"themes/gandalfr/node_modules/semver/semver.js","hash":"08f06ef90ff1b9c457a98cd199ae3493dcdb168e","modified":1432937893000},{"_id":"themes/gandalfr/node_modules/redent/package.json","hash":"44afa114f77b6e65cac9ca98253736ef108db32d","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/redent/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1441258257000},{"_id":"themes/gandalfr/node_modules/set-blocking/CHANGELOG.md","hash":"9a81dc600ceb7c49455c73a6a00c5aa7fd9b1e68","modified":1463525910000},{"_id":"themes/gandalfr/node_modules/redent/readme.md","hash":"94d53b271963b7a29c2638ae00f4a23d8a196578","modified":1443524028000},{"_id":"themes/gandalfr/node_modules/set-blocking/README.md","hash":"ef6f304599d1f60fe91f5197d5aa502325733b67","modified":1463525839000},{"_id":"themes/gandalfr/node_modules/set-blocking/index.js","hash":"1f4153febaba6617978eb38bafedfca5cecb9ee3","modified":1463525839000},{"_id":"themes/gandalfr/node_modules/set-blocking/LICENSE.txt","hash":"47edc4b4e929248ad6e423bf3a6736c320a3277c","modified":1463260030000},{"_id":"themes/gandalfr/node_modules/set-blocking/package.json","hash":"88d18a20ab84de9b2f2d8e37391d47090b10b34f","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/sequencify/.npmignore","hash":"8d28d31afc4b92498d8be67e229df80477f85600","modified":1387783026000},{"_id":"themes/gandalfr/node_modules/sequencify/.travis.yml","hash":"ed2a9b234e4ea2f3d1d597e023386f8fd2dbe025","modified":1387783026000},{"_id":"themes/gandalfr/node_modules/sequencify/LICENSE","hash":"ade17dc657a96aead0f3bd75c72972bc47464e99","modified":1387783026000},{"_id":"themes/gandalfr/node_modules/sequencify/README.md","hash":"bbd3575ed62ef70678141c76fc439c3ba32aa0d7","modified":1387783026000},{"_id":"themes/gandalfr/node_modules/sequencify/index.js","hash":"83d3fec92f6915b5c701c6542c2b9d92dcd2b651","modified":1387783026000},{"_id":"themes/gandalfr/node_modules/sequencify/package.json","hash":"df38ce7ebc98f306bc8612c7044a62c8e32d7cff","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/sigmund/README.md","hash":"6007650d6a1dc24c4dc57409e7611b6998d244aa","modified":1401638608000},{"_id":"themes/gandalfr/node_modules/sigmund/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1432106334000},{"_id":"themes/gandalfr/node_modules/sigmund/bench.js","hash":"7f512661bb09413fa3c814f89fdf58b157f08e63","modified":1344873467000},{"_id":"themes/gandalfr/node_modules/sigmund/package.json","hash":"1aa4e7ccf4093395d32c9051661cf467fbfa263f","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/sigmund/sigmund.js","hash":"7575ead5bf4fbb3eed15ead87c050cc8e306d446","modified":1344873467000},{"_id":"themes/gandalfr/node_modules/signal-exit/CHANGELOG.md","hash":"84fecbe3e1a39423c5992a6eef6e27e4d847f317","modified":1480713047000},{"_id":"themes/gandalfr/node_modules/signal-exit/LICENSE.txt","hash":"ffffda22e521943bc894935cfae5dd16aaf35897","modified":1480713047000},{"_id":"themes/gandalfr/node_modules/signal-exit/README.md","hash":"c34b15d11371d951320d5ad8518e69fcbd979639","modified":1480713047000},{"_id":"themes/gandalfr/node_modules/signal-exit/index.js","hash":"4c79d6ab52a7473a4e5e096142c619e4fbbac3a6","modified":1480821624000},{"_id":"themes/gandalfr/node_modules/signal-exit/package.json","hash":"095a43832d860ea79a6f2bb3edf17b1ee7f306cb","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/signal-exit/signals.js","hash":"6e1c2ff72044c1901590ffd119245461fb85a6bc","modified":1480713047000},{"_id":"themes/gandalfr/node_modules/sntp/.npmignore","hash":"ea5a6d3bfaa388a6dbf7be84ef42c1a51dd7c416","modified":1406958770000},{"_id":"themes/gandalfr/node_modules/sntp/.travis.yml","hash":"888093e360115d50a60614c9ed3a3db5b60b9059","modified":1406958770000},{"_id":"themes/gandalfr/node_modules/sntp/LICENSE","hash":"1583807686100eb3d8287b4e4627818f002aabaf","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/sntp/Makefile","hash":"23079c0b043b0fd2f037fa6272e36d2562425c6d","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/sntp/index.js","hash":"fbc929bb3b85e76c25fc52743d325d9f36fb3643","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/sntp/README.md","hash":"5b5b1348b73a5ba7293f5924937015c6b6350b6d","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/sntp/package.json","hash":"9ad224ffd85f1416caed907e52b06a205c168e9d","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/source-map/CHANGELOG.md","hash":"30497f61c3317cab69ac398e6a1bbb3ced8165f2","modified":1462209902000},{"_id":"themes/gandalfr/node_modules/source-map/LICENSE","hash":"914d42b13ad394be4aa75b4d93fde94b1e79cbbd","modified":1359745846000},{"_id":"themes/gandalfr/node_modules/source-map/package.json","hash":"c366bcf0e00e4defdb0072067a8784ece4b31aad","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/source-map/source-map.js","hash":"54dd50c132e3a298bcad252861389300ac0ce265","modified":1441897559000},{"_id":"themes/gandalfr/node_modules/source-map/README.md","hash":"86252b0a005c57552b9d36bf2329f53534c71611","modified":1461355030000},{"_id":"themes/gandalfr/node_modules/sparkles/LICENSE","hash":"de40e364b1016b13d3888c8a778cae31652bc20c","modified":1418089655000},{"_id":"themes/gandalfr/node_modules/sparkles/README.md","hash":"4a8831ffc453075948809e7cece0804eb3db9cfa","modified":1441670229000},{"_id":"themes/gandalfr/node_modules/sparkles/package.json","hash":"7b6ba71523aed268be259346c383facfc4b1c8e9","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/sparkles/index.js","hash":"d2c69a4e0796cdad292832ccc45829e6b980e129","modified":1441669482000},{"_id":"themes/gandalfr/node_modules/spdx-correct/LICENSE","hash":"4f40525bc84d44e0b6c9e05ce08c392a2c7dc6a9","modified":1445878498000},{"_id":"themes/gandalfr/node_modules/spdx-correct/README.md","hash":"9b2ea7f8291e2ca4dc5317fcaa4a59ff77c7a2a0","modified":1445878436000},{"_id":"themes/gandalfr/node_modules/spdx-correct/index.js","hash":"cf31002227253d14b73046d85a7376b3c75e4614","modified":1445878436000},{"_id":"themes/gandalfr/node_modules/spdx-correct/package.json","hash":"3bc08fcec8f9f727fc4730f23c73b9f11fe0c8a4","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/spdx-expression-parse/AUTHORS","hash":"cd889788f1a452eb7302470c4c114c21b9d23137","modified":1475692009000},{"_id":"themes/gandalfr/node_modules/spdx-expression-parse/LICENSE","hash":"a9293189ddfd959ffb54ef7805b1eab21979d700","modified":1475691722000},{"_id":"themes/gandalfr/node_modules/spdx-expression-parse/README.md","hash":"a29c45a03ecefbfb288a0cbdac3c7d2095534b23","modified":1475698206000},{"_id":"themes/gandalfr/node_modules/spdx-expression-parse/index.js","hash":"28e4eab9722fd2e594df0e71dc4899dd44a0dca5","modified":1475691754000},{"_id":"themes/gandalfr/node_modules/spdx-expression-parse/package.json","hash":"6d946185172c09cb3f00325193b13b167147ea4e","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/spdx-license-ids/LICENSE","hash":"ff007ce11f3ff7964f1a5b04202c4e95b5c82c85","modified":1439793376000},{"_id":"themes/gandalfr/node_modules/spdx-expression-parse/parser.js","hash":"e80d07f0774eec5d25307f36fc1bfede69fc29f5","modified":1475698360000},{"_id":"themes/gandalfr/node_modules/spdx-license-ids/README.md","hash":"71127f5c6b2e041dacede8c88ebfafb7bbb2ded5","modified":1439793376000},{"_id":"themes/gandalfr/node_modules/spdx-license-ids/package.json","hash":"e367375f86a4d32cec5db11c05d8d5a2833b56af","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/sshpk/.npmignore","hash":"695019f4a886543f630c962200d822a468757eb0","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/spdx-license-ids/spdx-license-ids.json","hash":"5bbaee29a0f14257330549446e90e6121e3787a3","modified":1469526062000},{"_id":"themes/gandalfr/node_modules/sshpk/LICENSE","hash":"10b8ac49ffb8f7cc8bdca9303209a1b3b2f3587d","modified":1442856017000},{"_id":"themes/gandalfr/node_modules/sshpk/.travis.yml","hash":"1cc0c8e1f34a6f75f2cd25a733c765ac6ea793d3","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/README.md","hash":"9bc448de7b7bc0bd4210db4d4f4e95df2c476cc1","modified":1476487202000},{"_id":"themes/gandalfr/node_modules/sshpk/package.json","hash":"610e2ec27869a79421a18a15ef48b9c2a9935f85","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/stream-consume/README.md","hash":"f67943616b0a8bdcea87eff159f1b1298d0543e6","modified":1405909560000},{"_id":"themes/gandalfr/node_modules/stream-consume/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1405911629000},{"_id":"themes/gandalfr/node_modules/stream-consume/index.js","hash":"f5c1698f0f3f924e2ac3b58a9a7b0b0f8a16489e","modified":1405910218000},{"_id":"themes/gandalfr/node_modules/stream-consume/package.json","hash":"ebe24fd8f65677568e32a5cd4cd8613e7cec022e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/string-width/index.js","hash":"488a7f558004cde30cd57c2eeac1aca4e2947a7a","modified":1471118229000},{"_id":"themes/gandalfr/node_modules/string-width/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/string-width/package.json","hash":"f0c709fe900bd6f80ddbea36ee1d63402331db1b","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/string-width/readme.md","hash":"31d4db706cd6186a3a8e4c69ec499663f3a97f23","modified":1471120248000},{"_id":"themes/gandalfr/node_modules/string_decoder/.npmignore","hash":"fc05bac99247f420fd3eee41f17afeb48f06a76e","modified":1392198673000},{"_id":"themes/gandalfr/node_modules/string_decoder/LICENSE","hash":"8344f8cf34d06153cd7ffc797c070e00d69eb442","modified":1390012773000},{"_id":"themes/gandalfr/node_modules/string_decoder/README.md","hash":"c8dac065c0a3043936a7c07ea1d698234c3ad159","modified":1390012773000},{"_id":"themes/gandalfr/node_modules/string_decoder/index.js","hash":"91f40da3177881cf70b87520444b755e1d9592ec","modified":1408767880000},{"_id":"themes/gandalfr/node_modules/string_decoder/package.json","hash":"cfbefdea80a8a065a75274d58964e58dc850e9eb","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/strip-ansi/index.js","hash":"fa7b64a04c5989a1c9b78e83768b90384ac9abcc","modified":1424597013000},{"_id":"themes/gandalfr/node_modules/strip-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1424597013000},{"_id":"themes/gandalfr/node_modules/strip-bom/cli.js","hash":"89d5f738b25054bb4c82e60ad90f0a6ee81c9e34","modified":1408712487000},{"_id":"themes/gandalfr/node_modules/strip-ansi/package.json","hash":"8bcf0f64a769ea5cd9d04f0370697c9ad4a357f7","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/strip-ansi/readme.md","hash":"ee19204de1797a46e3101e8b064a3cfd4741fd6c","modified":1456056884000},{"_id":"themes/gandalfr/node_modules/strip-indent/cli.js","hash":"aef33a307f851bb25b1bb7efbe24089df85cf7c8","modified":1407937346000},{"_id":"themes/gandalfr/node_modules/strip-bom/package.json","hash":"28195c2024441d379773f888097797f6b1417758","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/strip-bom/index.js","hash":"245294d16d567468201cdc654f5822cf691c8cab","modified":1408239708000},{"_id":"themes/gandalfr/node_modules/strip-bom/readme.md","hash":"acd13da40c7c166588abab091aa42ab51a664eed","modified":1408712564000},{"_id":"themes/gandalfr/node_modules/strip-indent/index.js","hash":"dc4f6ac692f8c755e3beb4672e43745c7f453bca","modified":1407937164000},{"_id":"themes/gandalfr/node_modules/strip-indent/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/strip-indent/package.json","hash":"8f9bccb3f10e86c25af6d371027c012ac44f9359","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/strip-indent/readme.md","hash":"1e953769e18b5a3315b916cc7bd4131539b99917","modified":1407937477000},{"_id":"themes/gandalfr/node_modules/supports-color/index.js","hash":"669e4e82e32796eacb16a314bb3db270fb1d8572","modified":1435362323000},{"_id":"themes/gandalfr/node_modules/supports-color/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/supports-color/package.json","hash":"f3cd3b4b62416f9ed91156466669b2b2720725dd","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/supports-color/readme.md","hash":"a0227e37af9ebe9e998782cf0a1eb75338d68f8e","modified":1435704929000},{"_id":"themes/gandalfr/node_modules/through2/.npmignore","hash":"42c7f4a86782b81be271b4a9f31bbd50de1d3474","modified":1407491422000},{"_id":"themes/gandalfr/node_modules/through2/LICENSE.html","hash":"82f08f3ab76dae6eb1b1cb08db225c007f19bf12","modified":1480373484000},{"_id":"themes/gandalfr/node_modules/through2/LICENSE.md","hash":"2088bce10d2f1edfd4531cf6ca97323dc54232b3","modified":1480373468000},{"_id":"themes/gandalfr/node_modules/through2/README.md","hash":"8781b17fffa3d4664f857070dce9308047c8ab2c","modified":1477625631000},{"_id":"themes/gandalfr/node_modules/through2/package.json","hash":"18fcf25bfa24945de08091e217aba24aa1e693a3","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/through2/through2.js","hash":"f1b43012d500dc93017f8fc933a0f79bcdb5825b","modified":1407797378000},{"_id":"themes/gandalfr/node_modules/stringstream/.npmignore","hash":"e31bf1a44ac82728f64fe63d5fc691f3111103e4","modified":1340414943000},{"_id":"themes/gandalfr/node_modules/stringstream/.travis.yml","hash":"994e65474ac75a6687de118e175526bc106cef57","modified":1340796033000},{"_id":"themes/gandalfr/node_modules/stringstream/LICENSE.txt","hash":"e957fbece098eddf6df809165d5e73c2c1b2e10a","modified":1445815621000},{"_id":"themes/gandalfr/node_modules/stringstream/README.md","hash":"33c7843dec1919a17daad5a5ae2fb06d54018b38","modified":1358765250000},{"_id":"themes/gandalfr/node_modules/stringstream/example.js","hash":"17a98e07a319edf8fbeeea49d83515304922b1b4","modified":1361939998000},{"_id":"themes/gandalfr/node_modules/stringstream/package.json","hash":"4b9d6268dd465d17eb004f99c67fc4cb381b8691","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/stringstream/stringstream.js","hash":"400fe756da898736fe0642a709c7f88e21fda352","modified":1363491475000},{"_id":"themes/gandalfr/node_modules/tar/.npmignore","hash":"f19e99dcce22204397cb6bc004257aac195af0d1","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/.travis.yml","hash":"cf940a5f03d954b69516c498e23fe30aabfee819","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/LICENSE","hash":"c9f8d7fc9275e87bc85f85317ff575f5e0080cfa","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/README.md","hash":"195deb7aea0e3da7c225cfad650c8bfb533e9d83","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/package.json","hash":"d0b1be7533faa2639a078fc99f423cb1ec320fdd","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/tar/tar.js","hash":"9c3fa4f5bbdad4447d71b65858c8a4fda101a04f","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tildify/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/tildify/index.js","hash":"6e5abcb30b314c0bc49bfbebc131f289570ee613","modified":1460446826000},{"_id":"themes/gandalfr/node_modules/tildify/package.json","hash":"3c8729b56333ade9f0286daa25d35b01ea2f96bb","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/tildify/readme.md","hash":"c1967c861257bd0e273b44301ecffa71b1c70565","modified":1460446976000},{"_id":"themes/gandalfr/node_modules/time-stamp/README.md","hash":"682f32afbeba615eb264c159ccc32d0b14a16480","modified":1460014030000},{"_id":"themes/gandalfr/node_modules/time-stamp/LICENSE","hash":"e3bbd0d3b6f13873dd8a31097d8043f090b565f4","modified":1429924803000},{"_id":"themes/gandalfr/node_modules/time-stamp/index.js","hash":"ea98a1f550737e1e7f6d27b9e1c13a3c19e6b0bb","modified":1449256133000},{"_id":"themes/gandalfr/node_modules/time-stamp/package.json","hash":"44d0d4238e7be0d26379aa85812cf4cbbdef6733","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/tough-cookie/LICENSE","hash":"d453b8d6be98bbb6cff7074794f5776ff3a17115","modified":1469134052000},{"_id":"themes/gandalfr/node_modules/tough-cookie/package.json","hash":"61bf07f8feecb44b6611889711036ccedfdbd0b7","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/tough-cookie/README.md","hash":"5be97dfa18bd1cf498c82bade098daadb755720a","modified":1477415147000},{"_id":"themes/gandalfr/node_modules/unc-path-regex/README.md","hash":"8add52ac17ee62e85ecb1fd22609a73efb18a956","modified":1460256628000},{"_id":"themes/gandalfr/node_modules/unc-path-regex/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1460256628000},{"_id":"themes/gandalfr/node_modules/unc-path-regex/index.js","hash":"a8eaad6f739b747519874b6f49e8d7ad004391c8","modified":1460256628000},{"_id":"themes/gandalfr/node_modules/unc-path-regex/package.json","hash":"29892b1beb92227abfbf1ad67a682c09df67abaf","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/trim-newlines/index.js","hash":"96a6d5ab5921b363425c3006f163b5e7c1febdd8","modified":1443517660000},{"_id":"themes/gandalfr/node_modules/trim-newlines/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1441258257000},{"_id":"themes/gandalfr/node_modules/trim-newlines/package.json","hash":"2bec13babf72cdce1ea3ff9ee0da1d44804f5b17","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/tunnel-agent/README.md","hash":"fab5bff0eba532373f36d827d9775105d64ff719","modified":1462396422000},{"_id":"themes/gandalfr/node_modules/trim-newlines/readme.md","hash":"b892a9a5efc16665a659e3dcc8a97b3f018ce22e","modified":1443518567000},{"_id":"themes/gandalfr/node_modules/tunnel-agent/LICENSE","hash":"05979f0750cf5c2a17bd3aa12450849c151d8b7c","modified":1462396422000},{"_id":"themes/gandalfr/node_modules/tunnel-agent/index.js","hash":"e9320bd906e55558d9ba2569f76e92899da8744f","modified":1462396422000},{"_id":"themes/gandalfr/node_modules/tunnel-agent/package.json","hash":"0f219fb11bf3071a57fe33be7112719edc17c6f8","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/tweetnacl/.npmignore","hash":"11c8e36af35ec98e1a2d7eddf45646dcb6653169","modified":1460742445000},{"_id":"themes/gandalfr/node_modules/tweetnacl/AUTHORS.md","hash":"f075e705a5f8e8ff0e7842de6a26ebf53e08f745","modified":1481623354000},{"_id":"themes/gandalfr/node_modules/tweetnacl/CHANGELOG.md","hash":"06dec0b7fb3130df4b0fdd1f8122bf2cd196e900","modified":1481626689000},{"_id":"themes/gandalfr/node_modules/tweetnacl/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1481623354000},{"_id":"themes/gandalfr/node_modules/tweetnacl/PULL_REQUEST_TEMPLATE.md","hash":"e88e8e670a11b57fc18bb19a15c1c0df04517a09","modified":1481623354000},{"_id":"themes/gandalfr/node_modules/tweetnacl/README.md","hash":"cf98261b2d1bc21a11ab1f28ee70cc2597205802","modified":1481627238000},{"_id":"themes/gandalfr/node_modules/tweetnacl/nacl-fast.js","hash":"b8caf62487ca1fcba5ed9e47571bdff0806b8fc1","modified":1460742445000},{"_id":"themes/gandalfr/node_modules/tweetnacl/nacl.d.ts","hash":"074079a1aca6756d5a4fec3f3fd4a9f6e9c00f66","modified":1481623733000},{"_id":"themes/gandalfr/node_modules/tweetnacl/nacl-fast.min.js","hash":"08db9a8b57304c3c117c2a5ba117e25a0d816b34","modified":1481623484000},{"_id":"themes/gandalfr/node_modules/user-home/cli.js","hash":"5df51f1f8552b61704a808793c129196b5efeb68","modified":1421171004000},{"_id":"themes/gandalfr/node_modules/tweetnacl/nacl.js","hash":"523fe36259524a0f35d056416a18de5ae96027a3","modified":1460742445000},{"_id":"themes/gandalfr/node_modules/tweetnacl/package.json","hash":"0ee114be05733ffefb1b916e495296f2275f4cd4","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/tweetnacl/nacl.min.js","hash":"ab05565ba3e2cf29401962ddcd94912e54d916f3","modified":1481623482000},{"_id":"themes/gandalfr/node_modules/user-home/index.js","hash":"b2a6d6a8ba1e694a9e90ac4b4fb75551ee36e9ae","modified":1421171068000},{"_id":"themes/gandalfr/node_modules/user-home/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/user-home/readme.md","hash":"28f7677b9f32e00be0f653f4d90d324f90abf8d6","modified":1421171092000},{"_id":"themes/gandalfr/node_modules/user-home/package.json","hash":"62b693c67273703393db7ae46aee0a4627de54c4","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/v8flags/.npmignore","hash":"251be89148de3375f6b8dcfb73f43d95d2d3f961","modified":1448883600000},{"_id":"themes/gandalfr/node_modules/v8flags/LICENSE","hash":"f97db42fabc463de43ea70847c67f856763aaeb7","modified":1448883600000},{"_id":"themes/gandalfr/node_modules/v8flags/index.js","hash":"09e5a5ffc0535b077bcf9193040372b3701f41d4","modified":1448941178000},{"_id":"themes/gandalfr/node_modules/v8flags/README.md","hash":"d35fc15f2e683b0d1ba5f51e857af1e5a911ce0d","modified":1450726885000},{"_id":"themes/gandalfr/node_modules/v8flags/package.json","hash":"3e53c4cadd6198c3097e0daba9dfdb0e0263259a","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/uuid/.npmignore","hash":"6bc117b5d075e5e60fc50c0796f30d83991badb3","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/AUTHORS","hash":"55ad68da17b6319a39a82d7c7f7a3ea1e951dee8","modified":1479446326000},{"_id":"themes/gandalfr/node_modules/uuid/.travis.yml","hash":"5b473c963dc4ad4acc4af49ae4b273dbfe2d5873","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/HISTORY.md","hash":"8712ebb194a7c7ff8906b62baaf633d1c65ca41b","modified":1480403880000},{"_id":"themes/gandalfr/node_modules/uuid/LICENSE.md","hash":"65e6555c3308c1d9538808d6c67e75924b8ad912","modified":1479449099000},{"_id":"themes/gandalfr/node_modules/uuid/README.md","hash":"f668e2ccb5397a5cd52d8cbeee1a8b941f0c2162","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/index.js","hash":"8e8abb1384d04d1ec5745c9824eee400f77536c0","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/package.json","hash":"0e0a2ec789d0e272ab6e0a68c28401ce7b4ef286","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/uuid/v1.js","hash":"dcc0964e3c05a2989950bc59c9b4b9405a5210c5","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/v4.js","hash":"4c9938092b98b9010c5d2e1ca4f36fe07b861483","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/validate-npm-package-license/LICENSE","hash":"2df421fdc1dfa2e8411f36e4067e80a88cdb880a","modified":1440372517000},{"_id":"themes/gandalfr/node_modules/validate-npm-package-license/README.md","hash":"50310cc432940ac01fbd9475ec530f9958cc4ebc","modified":1440372749000},{"_id":"themes/gandalfr/node_modules/validate-npm-package-license/index.js","hash":"13e84b8072f2208d449c441f75b4280301b6b135","modified":1440372893000},{"_id":"themes/gandalfr/node_modules/validate-npm-package-license/package.json","hash":"3c7d1d419631721b6ec9088a0f7553e9f9af29f8","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/util-deprecate/History.md","hash":"1fc5b9cf603a0b6abeb852b35bec607a411e5b9b","modified":1444243047000},{"_id":"themes/gandalfr/node_modules/util-deprecate/LICENSE","hash":"cbde92577cb69b3b45dd33f8dc600732cf9e14cb","modified":1416945941000},{"_id":"themes/gandalfr/node_modules/util-deprecate/README.md","hash":"8e590b24df7b037031e571b7b2b9600217b83ae0","modified":1416945941000},{"_id":"themes/gandalfr/node_modules/util-deprecate/browser.js","hash":"335965112d6117af8926dce4497a1fb9fca022eb","modified":1444242970000},{"_id":"themes/gandalfr/node_modules/util-deprecate/node.js","hash":"26bb9fcabaf57f0bb50e5e026c13de394bc0c478","modified":1416945941000},{"_id":"themes/gandalfr/node_modules/util-deprecate/package.json","hash":"317785caeb8f4baada8675d3e5ea09e83697acef","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/verror/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/LICENSE","hash":"772b18147b3bf826978f984f8e01562a9e3cc254","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/Makefile","hash":"89b6506d72bcdd045b63921d0b754227f824c4f1","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/README.md","hash":"94a2a13d3e722a3950176fa8ed55a1e7a7fd9d14","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/Makefile.targ","hash":"f66e38899fc918aac830c478ae402c66d8793bc7","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/jsl.node.conf","hash":"c9a618ebefdabda69fcf47f17406c254f7f07f9f","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/package.json","hash":"d24368abdd885578ee310f093cbdfb9dff2b4f5b","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/vinyl/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1405745814000},{"_id":"themes/gandalfr/node_modules/vinyl/README.md","hash":"d22c55dc5272505627e335eb4e92213dfb198272","modified":1441239496000},{"_id":"themes/gandalfr/node_modules/vinyl/index.js","hash":"3b73bc040e0af748d7a0ae44ca1a67b039b68053","modified":1441239391000},{"_id":"themes/gandalfr/node_modules/vinyl/package.json","hash":"e1454a2adf73dd38edfa99c48c3b38cbec79153e","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/unique-stream/.npmignore","hash":"3b37e94f94c4c7c5498c53588ffb349abf30c362","modified":1373608229000},{"_id":"themes/gandalfr/node_modules/unique-stream/.travis.yml","hash":"6d60dfed243c9731bf2dcd21b436a430e89d50e1","modified":1399980154000},{"_id":"themes/gandalfr/node_modules/unique-stream/README.md","hash":"1912b76f0633a158b35e03cc294b692b30ae0e4b","modified":1379342846000},{"_id":"themes/gandalfr/node_modules/unique-stream/LICENSE","hash":"aed8639d1e328e0c90c1b02ffa3aa200a6723941","modified":1399438031000},{"_id":"themes/gandalfr/node_modules/unique-stream/index.js","hash":"9f57f8825948f923b1af2da468f931ca508d1212","modified":1379343007000},{"_id":"themes/gandalfr/node_modules/unique-stream/package.json","hash":"85cffb69b76959ab580496094ac0bb1e25c69e77","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/LICENSE","hash":"f14951e10d8f80fec96ec6cdd092773eba2570bb","modified":1442714754000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/index.js","hash":"a0195a031d266279be036f41f381cb1d95c3ac7e","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/README.md","hash":"35411b005d5406978383599acf3bd3b678ab9e1a","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/package.json","hash":"ed546cf284bae49782cae10d7ea5964747267744","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/which/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1416911659000},{"_id":"themes/gandalfr/node_modules/which/CHANGELOG.md","hash":"f790ccce30ce23d456786b70ee16fc4e63ea8ff2","modified":1478902853000},{"_id":"themes/gandalfr/node_modules/which/README.md","hash":"6269a83ac37a211a4f54a0b6d00ca5dfc3e14eaa","modified":1444245523000},{"_id":"themes/gandalfr/node_modules/which/package.json","hash":"89cab864f17d943062dfee52980051779278ea56","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/which/which.js","hash":"61d19a144cbe06216aec47ec61c48a5d01806d13","modified":1478902829000},{"_id":"themes/gandalfr/node_modules/vinyl-sourcemaps-apply/.jshintrc","hash":"da34e4589e93f899c9519e6ff8b089ac9a9d6776","modified":1404310633000},{"_id":"themes/gandalfr/node_modules/vinyl-sourcemaps-apply/.npmignore","hash":"cf4e2dcaa760ff6f7520fd032ce44574e2970e54","modified":1404310633000},{"_id":"themes/gandalfr/node_modules/vinyl-sourcemaps-apply/README.md","hash":"783b1baa455da4a9577597ff6f9be5932ce8508d","modified":1404310633000},{"_id":"themes/gandalfr/node_modules/vinyl-sourcemaps-apply/index.js","hash":"bde4dfd6df28d3b58fc078452faff6f5b2180c9b","modified":1451238940000},{"_id":"themes/gandalfr/node_modules/vinyl-sourcemaps-apply/package.json","hash":"5d0221217e8199ee8c315a311e1561bf684fe1ff","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/wide-align/.npmignore","hash":"a74bbee6a9ad3a4652cf581d68b9fd1bcc11eb89","modified":1450219769000},{"_id":"themes/gandalfr/node_modules/wide-align/LICENSE","hash":"279f47bedbc7bb9520c5f26216b2323e8f0e728e","modified":1450219880000},{"_id":"themes/gandalfr/node_modules/wide-align/README.md","hash":"6b496aa0869b5459804407d01ecd0382fb561df1","modified":1450245427000},{"_id":"themes/gandalfr/node_modules/wide-align/align.js","hash":"eea4b4e96fe2438794a9ce2d851d77320c754403","modified":1452290312000},{"_id":"themes/gandalfr/node_modules/window-size/cli.js","hash":"3be15c787c4707cd700f50e9deae2840394e1822","modified":1447614663000},{"_id":"themes/gandalfr/node_modules/wide-align/package.json","hash":"f91ee9fe97032c707377b7512d290e9a459ef779","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/window-size/LICENSE","hash":"f6794e2167dc92e7ab5f2b00a15f0af45639a5a1","modified":1447615356000},{"_id":"themes/gandalfr/node_modules/window-size/README.md","hash":"c286863d0378b310abed728a9425b4d00f2027a1","modified":1447615597000},{"_id":"themes/gandalfr/node_modules/window-size/index.js","hash":"f0b176a59fb835b67cec0caeb313ca20376e8c1b","modified":1453849220000},{"_id":"themes/gandalfr/node_modules/window-size/package.json","hash":"b5c1dcdb48af7d089a7933be41162dbb8fb0d0bd","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/which-module/CHANGELOG.md","hash":"7ff482166eff6d8d18e6b6f178cc9cb4fc6604e0","modified":1465192410000},{"_id":"themes/gandalfr/node_modules/which-module/LICENSE","hash":"82368de7809f2afd54714ba6896d731dc2944e3c","modified":1465177822000},{"_id":"themes/gandalfr/node_modules/which-module/README.md","hash":"24af9d8e77bfee2573b4cb3f7c6e123c38c7936c","modified":1465192222000},{"_id":"themes/gandalfr/node_modules/which-module/index.js","hash":"89c774170a6fe63de263eed0a54874e202005800","modified":1465174258000},{"_id":"themes/gandalfr/node_modules/which-module/package.json","hash":"41a6e7b3d1f1ad73f476231717dbdaf5954c7833","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/wrap-ansi/index.js","hash":"1fb24d1dd78fdcf1e03dcf2f6466150bbe531bc0","modified":1480439662000},{"_id":"themes/gandalfr/node_modules/wrap-ansi/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477423219000},{"_id":"themes/gandalfr/node_modules/wrap-ansi/package.json","hash":"760a085288d189332e55894a64b286956343cefa","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/wrap-ansi/readme.md","hash":"9ed85c9c6f28fb7aba2079348700ceef7bddd62b","modified":1480439662000},{"_id":"themes/gandalfr/node_modules/wrappy/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1463526927000},{"_id":"themes/gandalfr/node_modules/wrappy/README.md","hash":"582d7139d169b0fc0b1014f2372a0aa26a52cfb8","modified":1463526927000},{"_id":"themes/gandalfr/node_modules/wrappy/package.json","hash":"7d0cd4746692baa91d6d89c27326a7753620b2e8","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/wrappy/wrappy.js","hash":"7d5c1c908664b3df4a9b72400a126652ba0dd905","modified":1463526927000},{"_id":"themes/gandalfr/node_modules/xtend/.jshintrc","hash":"da24cac8e0e7f15e3b4ee6944741e01d53f9056e","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/xtend/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/xtend/LICENCE","hash":"c563ca2a6d330b98c2ca9473a0299c4a689bf6b8","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/xtend/Makefile","hash":"bf249732a0985e13f60552c8a9d6c3894c8fbb44","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/xtend/README.md","hash":"d7d6f2f31071911d99fef109646867a0b325c8a3","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/xtend/immutable.js","hash":"3c1de57f8d038e3ebc9e1ab278fe2f683866079c","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/xtend/mutable.js","hash":"0b00bff9bc925c6c258ef4afb77e7f50640e6555","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/xtend/package.json","hash":"d7641d1427f27971e199e8ad39cafa24b81ca064","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/xtend/test.js","hash":"3b51ee9fb4c95c82be0bdde62dddb31f4c18e648","modified":1446502746000},{"_id":"themes/gandalfr/node_modules/y18n/README.md","hash":"27de96420d32db9e8a1ff0be8aa965761bce4c0b","modified":1458190892000},{"_id":"themes/gandalfr/node_modules/y18n/LICENSE","hash":"d1e0173a0697ade86e242be697a030918b770336","modified":1458190892000},{"_id":"themes/gandalfr/node_modules/y18n/index.js","hash":"abb180b94096f6824676f2d1ca30376f25451a49","modified":1458190892000},{"_id":"themes/gandalfr/node_modules/y18n/package.json","hash":"18535e3d9acb76ee799ef30fb9eed9b796a303e6","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/yallist/.npmignore","hash":"813df6cd387f277bac3c7b84c9e508d472d072a8","modified":1450425693000},{"_id":"themes/gandalfr/node_modules/yallist/.travis.yml","hash":"5ea83451ab4f7f1edca243cbe7dbcf14a9594d0b","modified":1450430717000},{"_id":"themes/gandalfr/node_modules/yallist/CONTRIBUTING.md","hash":"1ea00170c91f88b58f67fc747d452ff2a33db34a","modified":1450425693000},{"_id":"themes/gandalfr/node_modules/yallist/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1450425977000},{"_id":"themes/gandalfr/node_modules/yallist/README.md","hash":"930460a06c3414c2dceeeca378fbe0057779fab5","modified":1450554690000},{"_id":"themes/gandalfr/node_modules/yallist/package.json","hash":"1603e09bbada0d49168996e1a0e67504c8162cad","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/yallist/yallist.js","hash":"c8c1b4dff11391bb315acbed47e63e4c0968346c","modified":1450554767000},{"_id":"themes/gandalfr/node_modules/yargs-parser/CHANGELOG.md","hash":"ce711e7ceed67cdcedf16f553e629b4f0531cc42","modified":1468709438000},{"_id":"themes/gandalfr/node_modules/yargs-parser/README.md","hash":"d3bca9ad4105d580c484a12ad163303023392dfd","modified":1460343414000},{"_id":"themes/gandalfr/node_modules/yargs-parser/LICENSE.txt","hash":"47edc4b4e929248ad6e423bf3a6736c320a3277c","modified":1453582891000},{"_id":"themes/gandalfr/node_modules/yargs-parser/package.json","hash":"318dd418453d4b17da42740041c6df2e45edced3","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/yargs-parser/index.js","hash":"300b2123d1453c4bc11b35eb497977bc369935c4","modified":1468709296000},{"_id":"themes/gandalfr/node_modules/yargs/LICENSE","hash":"c4c74f60713e9765f16f8a016c1f997ca648f910","modified":1460319201000},{"_id":"themes/gandalfr/node_modules/yargs/CHANGELOG.md","hash":"11cf7d84f3da6bdb0c50c069cbbc5e4e77a73c7c","modified":1468710498000},{"_id":"themes/gandalfr/node_modules/yargs/completion.sh.hbs","hash":"c81e697002762a5158d9cfaee119251628598adf","modified":1459744271000},{"_id":"themes/gandalfr/node_modules/yargs/index.js","hash":"b17bc5fe04b7512499a26a665bda8ca6146f7dda","modified":1464758785000},{"_id":"themes/gandalfr/node_modules/yargs/README.md","hash":"f49a2b5e7aa2001f810217e92ccd297c879255a8","modified":1468710357000},{"_id":"themes/gandalfr/node_modules/yargs/package.json","hash":"4bf022ba26376569a85423f0546765c85db424a8","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/yargs/yargs.js","hash":"e25505de43fd82bdf27c057b66c9b3e3597495ce","modified":1468710357000},{"_id":"themes/gandalfr/node_modules/nan/nan.h","hash":"febc1c9d2ec4d17daa7e986a8ae21b0ece74fadd","modified":1485123291000},{"_id":"themes/gandalfr/.git/refs/heads/master","hash":"07169b0ec698cf789b38323d24762d74d5855d11","modified":1493622763000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.1","hash":"c5b2631f03423a4cfbc5d1cefc1f5c3e3d1af452","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.2","hash":"00431f519d6919b30827e73ac9148975bcf91211","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.3","hash":"165ffd673217c96531a834631ef5a7f2d20705df","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.7","hash":"e519df59539dd9cf717415bd2d001982215ad56d","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.4","hash":"96e8bdc0a51c7464a641548f3c2e2c2b8cdf9362","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.5","hash":"3372dcd15afb8e9005492202eebb7eab93cdd02b","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.6","hash":"38366c01cb9e67931b32120fb0a1473d75411307","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v0.0.8","hash":"834a6053152b81f0353d19722c593cc869916b2a","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v1.0.0","hash":"b5d8c0d310d4650e11fd7c15fad518d399064b36","modified":1493622653000},{"_id":"themes/gandalfr/.git/refs/tags/v1.0.2","hash":"07169b0ec698cf789b38323d24762d74d5855d11","modified":1493622751000},{"_id":"themes/gandalfr/.git/refs/tags/v1.0.1","hash":"6bcef924fe5b7d02ac0a1c749405001e18775062","modified":1493622653000},{"_id":"themes/gandalfr/.git/objects/03/a4daceda4a86c7290ee2d6676e5793e3caf612","hash":"f8931603e85e2e0ade5a4dab3d9a08826dcbeb91","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/00/197c67f9aef35e36c2e86972a484d98fc43d97","hash":"99c7da35c1b9843bbbcec18566319fabe56aa410","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/03/8ec1c729e2b8a5af0eadcff8d8475ebf5e68b9","hash":"59d710088541e9e6cac3d50659da9ade0c49bb08","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/01/59df202d865b528adfa01ddea6adefca95687b","hash":"d664257a9e2eae611111607986ca5dcd26c459e6","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/06/644bbfacb75a70895929f1f36042b2c5eab995","hash":"5751547afb4ba4cc0e416577eca4bf237ed8377f","modified":1486530715000},{"_id":"themes/gandalfr/.git/objects/08/8f9c40d3fc4143b03841c2b35a771d6fb050f6","hash":"8f442cf11ac6ce4682f79948343325380128c3ab","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/07/4534af8ec2edd564a8259b7bb8e7a21d7182c8","hash":"0f8bb864299b91796e293a8503f4ac57a9393c4c","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/08/da20094af1ab9db47c4ca6ab9773317c39d936","hash":"770c81b9e446d994028b2b7ac782b0d55b61bee0","modified":1490927712000},{"_id":"themes/gandalfr/.git/objects/0e/a4e93c89679ec5c3a32967d8c3daf732e46ae6","hash":"48dc9bf152e5cadeee21413020cb0061ad0f0dbd","modified":1493362959000},{"_id":"themes/gandalfr/.git/objects/09/eb6c94ab8f46ef4b68a677e637383eeda79bb8","hash":"c84d5b76393fb3ba621478d9513a042946d8f7e6","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/14/df3f78dc3e0bdfb0d4a3fa1262b08ead1de48a","hash":"a59facb5fab6c187f32afa8b6b49ec06ea354640","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/0a/4e485b4a4e5b2ef36a7303be72adeee5fa1c07","hash":"5668760f67ad7a5b09fa52ca8dcd0dd821cfd69e","modified":1493357621000},{"_id":"themes/gandalfr/.git/objects/14/11d4c1330973ce754b51fad125784580d77fa7","hash":"3a150506183c7bb707e3d4c1bde2e0e00f8a798b","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/14/419d0eacc69f94d4088cf997a2f56207868936","hash":"9102fb83e611935306160e28e0253b9587de99cf","modified":1486366447000},{"_id":"themes/gandalfr/.git/objects/17/487a4ea3da81213ebb3b97a29fa38740610bde","hash":"8cdfa41fa90970467bebb6fa4ce8b3af3b6ec9fb","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/15/6ce681303a3b7b547e3444fdb3a7342f908004","hash":"ed076ce60a6c4a151e4cde9b3ca7c30a07d3cd81","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/17/377efb8e0267265a6ff7fa87cd650d0bc0381e","hash":"6af21855b5ee959da67e74c00c86b8c758553b00","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/17/674b6c5301b6a4be2c0a40885551dc7bbd61d9","hash":"5c36a860d899073de049461bb5b452fc6c347eff","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/17/7c5fbcaca9fa33ba77c9e726c49bdde2af409e","hash":"ade633c471f352845defccdd563131137b703368","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/19/2c6caf3d2eb6c8a1f92d31515ac47fb475a8f6","hash":"b83fe1b4773a427955a941eea9030b57d4345921","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/18/c0319801d36df992d2c56fdedcacd778266e63","hash":"dc25912005c8b38b37780d30445734ff4baab0d0","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/19/f8f99f2cbe511ced3f0e625a32276c5ba397ee","hash":"5297ef138a3e86d24abb8d3ad2486548a90b1b38","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/1b/09a423fe4448cc6bb0f212c9314ffce54336ad","hash":"9a9a0cd33c797c752d5c9a9260b9236d1b63f236","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/1b/f2870d0340eebcfb6e13574a30aacd6c056234","hash":"d05c7dd7ebd075c553c59381aa2d312e75bb7240","modified":1490927712000},{"_id":"themes/gandalfr/.git/objects/04/9befabadf01bc51a48c0e6621a36ea69e143a3","hash":"0082f8a9376b1419d8d262dcb85292a623033371","modified":1486705896000},{"_id":"themes/gandalfr/.git/objects/1a/aecac29b23ab5a4083d789b681938c7d7e449b","hash":"5da547e1c89fd07f0b502dca5a23f2464454977b","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/04/e81d7b49bacc266947b692e9aed685ddc52ae1","hash":"faccb9ce17971fb008a88438c753b74ad5e85e47","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/1d/2849e2508460e467e941bb010133cd20725d69","hash":"6435d682dce3e34c5a0f0add3873a7dbd166628d","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/04/b555496409fcdfb2811140d639778f1f6ca299","hash":"07169acea577fb16ebc8b94c7b462e5f1ce2ecf8","modified":1490768350000},{"_id":"themes/gandalfr/.git/objects/1d/3b2bc28e24ae7590df9c07e716241b7e1fbd3f","hash":"fa1da1c49a7467af258cb83ebb596601bd7fd123","modified":1493362959000},{"_id":"themes/gandalfr/.git/objects/1a/42a820f9fb3f2cf3748df5b5a7a90270f22159","hash":"ce05d5f267deeb4b7f2813da0a5119df0ff01e19","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/1c/e3938a2e888c2563e4edeb3fb2a0523daaec6d","hash":"06b444edbd09ece6bd34d35a2a9a0f82dfe0ce5f","modified":1490768350000},{"_id":"themes/gandalfr/.git/objects/1d/c836b20346a9256448c07e165f13a29b6b9ef7","hash":"aac6dca0bca331515ca9699280cb2eaa85284f13","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/1e/476f07e4314a975d55016cead3cd79ee5460ea","hash":"380170ad02fa5bd7b3700c5a14fc4dc241a8d53b","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/1f/6b8d8928b86a5c73c2b2ea85a7ca8077059182","hash":"346bc43a9f5d14d17f0dacb9f17bd5bdbed6bac4","modified":1486705896000},{"_id":"themes/gandalfr/.git/objects/1f/cb7096c0f65993cb29fd96bd4a9f454ea846be","hash":"27ca6d259888eca45d60f938c4213f27a3573805","modified":1486530778000},{"_id":"themes/gandalfr/.git/objects/1f/5f30f3e8140cdc42782fc4deb9e8aa0926b90c","hash":"68f81269bdf4c100be3927502f4172551706359c","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/12/cfa675997cc896228da31f77a107b4581ab8a8","hash":"bcc0e67f539a9588a7f44e9fccd95cbf35a89f41","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/22/602ebfb158dc8369b4115aa6679e5cebdcf71c","hash":"75dc81c72b10733176e515ba9613456896122c82","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/26/77b22e7fc6a56ae411e0b1282cbe95aded19b5","hash":"3a78f6690259328eb5d301576ebc2fdba0156c3f","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/22/41852961d858172563a257543edddac950794d","hash":"d81019f0163110beea00aaf0173a15cbf6aebe19","modified":1486366441000},{"_id":"themes/gandalfr/.git/objects/24/97736c0727f87dc80e0071aa9b9605e78fd1d1","hash":"1ffc4cfdae32208361cb6686250895c0bf357860","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/25/876f6693a2d5a3babdc45f4f9586f5326a83cd","hash":"36fa1f5120ec3e42e5bf160f6e39790db3a60b02","modified":1493357621000},{"_id":"themes/gandalfr/.git/objects/29/48a375cd7470d6b0ce1f3951f06188db4b4800","hash":"394223ae26a5dbbaf70da914ceea6fa9ca723d71","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/28/1a7edcfb058c75411772c64154ee7214745578","hash":"240b661cc2e7074211c293e165949a801118c6c2","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/29/904d1e796c31df1b61e3aada997997ca77932d","hash":"50eeec392b57db1f7b1223c44fd0da7ecedeb0ab","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/28/5bcee34952967f526c1db0295d1426e1b0671a","hash":"7fab324567754fa54ea91d48a36bf53358f71310","modified":1493357621000},{"_id":"themes/gandalfr/.git/objects/2d/32fea0e9d6bb15bdf1ca0aa2b1f353091a427e","hash":"3b78647ee6f492d85f896dc81e784191dea40e1d","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/2e/7ab785bafe41c473f30d855183c2f9bcc33aa0","hash":"2b723a712cc91517d575bbcde5db2767d310ac85","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/2a/f68dcdddad4636af1dc8cd64bac84455233ac0","hash":"e0031a2113f72d5373fab336575f6fe7392f7a10","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/2e/509e9b23f2e19008843b4e9ecc17005a82162e","hash":"6037f2da65370f6bbed492ee9300004e4bf5d425","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/2e/314222ed39606b215b86a5b1a2e669fa6ed6d9","hash":"ea279b04e504188984e2de7493f7d962dc1f1d4e","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/27/49d15f0d89fbfc77b6fb524789d3d90f094a25","hash":"e76cdcc9f6d177e4143b4c78b12661cf79200267","modified":1486530554000},{"_id":"themes/gandalfr/.git/objects/2f/d439632379344783b1342a0835dc5abd114ee5","hash":"bb5161203ccd14357a074bcf40caf5258d6cff1b","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/2c/e476bbbe1e4d3803a57a1b5cdb05f67abc611b","hash":"18374edfc662d5e935d82513ab858906f5c64e05","modified":1490768294000},{"_id":"themes/gandalfr/.git/objects/31/6c0ef68ac90cbd09855599cfcb3a0c41350891","hash":"92a288811a8e16bde55d783df3e6e34a4f2c4353","modified":1486530768000},{"_id":"themes/gandalfr/.git/objects/34/fce3ad9a5c8fd6269326820593f046df6f4d28","hash":"fea9425ab261586ce8cbe468e88767301589a7ea","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/3c/9e694cf812af0265b787fc9880df848a7c2caf","hash":"b7d6ea7cf7d12d61ebf0e40005069cafc8edc377","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/3c/662db42a2ce3dbc3b1a193a2817f0452946a7e","hash":"d0088965990f90dd0c6ffe0155d455d71752183e","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/32/6ca8171fd0750ad2d5347e43a145b669f02c89","hash":"cd4fcb890c1818cdcba5595ee2da7f4324489775","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/3c/d66abf1ababc7d2516b4deee4831d174eb7a39","hash":"2da6ee74fd0188ec4feea4948fc49f61184e661e","modified":1493357621000},{"_id":"themes/gandalfr/.git/objects/3e/7af7d4c647d118a70ac9a8fe35c796051f15ab","hash":"57062988d9fe84487026f025ed6a40151a09d0dc","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/3e/19f5df36b6d3edde366f56ee87b518a034ae4b","hash":"52debaad1a2d6483285f61a9bbd567d518747853","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/3e/d1b5d6e3a710a1aab87ea992e4a57475b33365","hash":"f0605d1d3e3ad94e9f2365a9d464927a72859813","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/46/6b4ab52cb1714937c20dfa5bfce4b93a5dd6b9","hash":"f708aadb4bdb203df4d4904f841ed07da4bce1c7","modified":1486530717000},{"_id":"themes/gandalfr/.git/objects/44/efd5d1c7d0a248189c608b5390bab990ac795e","hash":"6ea2850127d35725844fb198169550c50638a12b","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/44/c98738d0a4dcd2c99a1c2be2cb3ff0f45f2229","hash":"d33a01036cf5f4006b549f5d6736718560a9a5d9","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/4c/515037a4492ff48cb92bbb0585579bf57dc1f4","hash":"a60d33d46f9e48be70cbd9e2aeb4cc3d38e98f26","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/4b/861463f27eebef3004f5bb37425d4dd0de96b4","hash":"a150feb72fc23f008777b638c7b0ac2d8968d431","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/4b/9e23506733a1139ca8d93d43b46cbc21b90078","hash":"260d1b9e70f68bca5fefeb214e4a764dda219530","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/43/41154002ed8d4075ee2ba2c3c0c540a6a94f81","hash":"c6185978443da7a444f5063d069bb4b21dd1f6f1","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/41/3250856bbaffc947b375254d430a95c378ab60","hash":"1fb36bcb7a1aa7a6e1a10c08a1a47dd9ee5a79df","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/4e/5c3e5508ebb91661430093677dc8779c38e856","hash":"3877e10733e40060acdf7136d28025c301a71346","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/50/b57c0e0d07379317a7ae3839fe7904cd9a76c4","hash":"db3adc5f9cccb5106f48c7d50731fbb4e7c6b258","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/41/c297472a41d477811c3294999d6bfa9312c4b6","hash":"f9eed3f5fed5426a3b9ba1984d9ec0c3203093fd","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/4f/eedc178fed7867454e0db2177e9f4eef8f5621","hash":"58ae085736f293a561df97334392323e043570e4","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/50/053eab51fd1e7e465da85dde69519c76573729","hash":"c0498daa9b72d930c1fd54b1de960661d7686ed9","modified":1490927836000},{"_id":"themes/gandalfr/.git/objects/50/d65d58d0440ff5b1d08b1ae6a731e918968d1e","hash":"e371afc12a618373e5144d9349862cd65ca0a2f1","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/5a/3a290b905e608f8d7bb5b76f017b09874e579c","hash":"fef548ef2d8b81201b41eb283704aa7e4412e3c5","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/56/f0dd9029fdb5e3f8e23ca68e74424429c7196e","hash":"ef7bde7e3208c53cd73a0d767008716788318ded","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/5c/fecae2c1cf43ea22015f9f6b24b843f1d1a202","hash":"1b549be4a1350f1846d4d842d4e809d0fe225bde","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/5a/b4dc26c35e37ff846ba3437a7c6c0abe1100c2","hash":"8c07b425aec42d2d89884ed38308050eb1bbdea4","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/5e/c3f4d904e17f07639b559d097c1c4952e679c6","hash":"e52cb71950d926f29684a5330e0977027705dd21","modified":1487745218000},{"_id":"themes/gandalfr/.git/objects/60/1b49a943d5936f5260888aa5dd25b6d082dc3b","hash":"43a548a9569032137506710b1660bee1ff4a9510","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/5c/3eda36b998a4c085819ff666c06acfee19ba41","hash":"22572c53a589851d78350859836aecc55269b813","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/60/222413730af11d98b1011a02b32a2386d8d2e1","hash":"c451d7a45b3fa465ecae9876254bbcbbdd9c9045","modified":1490768351000},{"_id":"themes/gandalfr/.git/objects/61/18bb4269c76d69304070b1aa27690fdbe3a180","hash":"53fad7ab892c229be04d61d483bb60338344f9e0","modified":1486705896000},{"_id":"themes/gandalfr/.git/objects/61/1ba1f983b514a110e1cf6a934b9d62dafe44d7","hash":"a85dfa42814f84b575d431ce3d0f4d1863ff7d1b","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/62/997475f672849e0d1495be2f91b532a851eec3","hash":"9e2cd8390df3d830ce2eca4dd99026ffe4a909d5","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/61/06a0a6b941f6ce64aac809853c7f370d7ab0fc","hash":"22dc13931c762778f49bd75e423e6e8940d11887","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/65/a90ac18cdc800c64d34e4f2e4d68e7887b7761","hash":"6a17f22a19a9e9dcdfcab79373f6417fd6fc64fa","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/66/67b989e1bebd693a7dfe4ed6737b8ddb6d61bf","hash":"663dfb1106b7187bcbbe5448138119985e1a0053","modified":1486530768000},{"_id":"themes/gandalfr/.git/objects/68/15a6d920406ead7e460779227c3e5c488205dc","hash":"a6ae601253055bce92ebb8bde3be07d63ff76060","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/66/40f954aa566092fbc3791a722ca8bc1525334e","hash":"ffe70ca71b4770161e15dcc7a5a3e99791e26c8c","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/68/de783ef45224c806a5b3ceadf763aa20e17ef0","hash":"c594928a31a687db55987135971d3365a6683953","modified":1487745218000},{"_id":"themes/gandalfr/.git/objects/6a/371586ac2ea661309a6cad29f0035189bdb272","hash":"2585e6e54bfd37f9e5aadba1d7db7959f45667a0","modified":1492333066000},{"_id":"themes/gandalfr/.git/objects/6e/6627f5c65552db1c9cebc0b123a6f3f6bdb260","hash":"9e03eefebc1611218151a8990b9eae6c30d25f97","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/67/da59d7293eb24fd4d78b199b7faff66cb83446","hash":"820d868d7af53d14148d9376930da1561020f356","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/66/aea775a9da43fec1645444ebcb59ebb7322378","hash":"a711d31edf3e2a15aa83a7c323810eff8a6f8242","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/6b/b899dd4fb0f5ecc06c8d7ec981cadfc2bcdc8d","hash":"b7a572ddb1215a2298aa13b8838796de1da288c5","modified":1486538461000},{"_id":"themes/gandalfr/.git/objects/66/ef09148c180972d41caf6060a0e3a7a0d5fd97","hash":"d032a3e6bd7c93cdb6306f4a929500095baa2579","modified":1490927836000},{"_id":"themes/gandalfr/.git/objects/6b/f1c4f9f2de7aa678ccde8481926f0cafcc78d7","hash":"ca2f1b80c48914f1978672444e1b2ef374af1226","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/70/d8a66db0dc6f64a580aef76e71c8d9c5b6b211","hash":"62f4e16d93bd8a1cb61750f735f566832c41297d","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/6b/fc2639e9999e7b3b9624471217c64045379886","hash":"fa1343817631eb616dec8d09272d0bc293e6cae9","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/73/db46311a079123671a08913e9a0468905704cf","hash":"86c7501c7db02137f10b4d5e94aeb08ef0890fd6","modified":1492333053000},{"_id":"themes/gandalfr/.git/objects/6f/59077099bfebbdff3d98424804bbb6cf85cd36","hash":"28813d0b3e1d8bcb521ea49d4bdc1add696680f0","modified":1487745218000},{"_id":"themes/gandalfr/.git/objects/72/1bc2bf854ab14881ee96137a8c72b6e731a634","hash":"25eee3e8f98b4f95ffebf5cb295a5b2e7defea8c","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/74/700d816b232cb1ff320825a4a1cf1deb40c72b","hash":"1882aa209fc138b9552dc1760ff9a34360f797c3","modified":1493362959000},{"_id":"themes/gandalfr/.git/objects/74/d2cd5bd9da5226098e2fec3924f4e28ff7ed87","hash":"1926aa161a71848134433650a8bb47008d48419d","modified":1486706093000},{"_id":"themes/gandalfr/.git/objects/76/d0c0a78efd26b92385435926ecc7d7594c0fe4","hash":"e208b4d06ea3b5b5412336d2d3a65c62a8804841","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/77/e63010b2223fca0c8588955de8351880da0ee6","hash":"8754481ac3997cfaf62b3bed162dfe867432bfe1","modified":1487745218000},{"_id":"themes/gandalfr/.git/objects/77/4a27bd275f061a0a367e16a02a54cf965b1bd7","hash":"0148a75745394dacd83193b1e810e94a29fb377d","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/7d/147175196406c80dc5104b51920ea81328478a","hash":"d43633413c7be78020802c5da274e7144ec8a099","modified":1490768294000},{"_id":"themes/gandalfr/.git/objects/7c/83c025ffdbe85fca9125406d923a056d65f782","hash":"01f0e48e2578b8e7e29853d22d44523ceafe7f36","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/7d/5fecd018a26510045f6f7e9f2780f8c0a5da9d","hash":"ede593eeea0424b4d1023be0dd051f814211830e","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/7e/0d9e56dbc5e0406430e5797367391ab1f1711a","hash":"b356f429bbff1c7d85a2db11b6a33bc708586822","modified":1490768351000},{"_id":"themes/gandalfr/.git/objects/7e/bd9714bedf3eace2679fac4bb4e2481355dace","hash":"065bcefb5b9ae3cbb9065a4fcc221a992c10b355","modified":1490768350000},{"_id":"themes/gandalfr/.git/objects/84/62330f03e259dd0ab33c5d2ebe39eda3f3cc35","hash":"a3ff60b46cba0f46d2d321c180df7f2e359236f5","modified":1486366432000},{"_id":"themes/gandalfr/.git/objects/84/93e3821f1085ec6bb9e01cf74100adb169aa99","hash":"d893af30776fd9b9487f0779259370ff7159daae","modified":1490927740000},{"_id":"themes/gandalfr/.git/objects/84/6ce4f57871f39bfa09a551419fcb93623531b7","hash":"cac53596c8357b7978ad221f55bbdc1d78d70f1d","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/86/a9a4573d885e1badac61820761e71880e7aeae","hash":"a5337b6cdf3f618d38b5ec2f8963db1edf09b16a","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/84/caf521a8287d7158b7e41b6e7d5aadd4b28330","hash":"292724e5d5704d07499492c1ba6656ac68d0c397","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/89/3cdd19415569659adfefad366d7b0a9452a66d","hash":"21287707be619267623b6302203e42fe61e487a0","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/8b/b0caecd5e4656105eb04a9c2cecef66a9425b5","hash":"100680190428aacf0235fd86feb32dd0c05579c3","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/87/d5facaa31378b7c3a9b7a527af7cad23e2b8a7","hash":"d5a00e60a14fe2ad7a6d8eb5a7b564a9c4d4e764","modified":1490768316000},{"_id":"themes/gandalfr/.git/objects/90/eae8e868840bf36dab1311feb49663a3670fb1","hash":"bd54362e03f6a8a56cc582386734058c1d23573f","modified":1490768267000},{"_id":"themes/gandalfr/.git/objects/87/efabf751a446d600c62d6c253d33135d0bef56","hash":"b632d7d61f787a24a2ce75b692ed451236c314ce","modified":1486705896000},{"_id":"themes/gandalfr/.git/objects/91/00c086840e74adae0d49dd58fe9b03e3a71cf7","hash":"444978ba41c76ff78fc8b402ada4c212e87531bc","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/92/d145e4c24373148ad39a4b89f04d14e8939995","hash":"382b944c17f122f3034641f58f1360c2c9c45dbe","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/96/6015d0067ea92ff587ffadfc27c836f602b716","hash":"04a69d05e85d1bec6396a209f3f31b4ddcba0721","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/98/a349d945249debf499d584e90b97beb0edc8be","hash":"8510b42b55b93602fdfcdfc6a49a99c3d042c394","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/98/1e2cbad39136c9f60e78a26d39b1641f0b015a","hash":"dac2e97b03d5d7334dcc0c82bc7cb15d1b5d8428","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/99/1232896c174957530a4790045db6376cf1bd01","hash":"0ab662d156eca68c49db20509df31fbb4f82c2e6","modified":1490927712000},{"_id":"themes/gandalfr/.git/objects/9d/89153b271df6538608c088c3b147d27640a291","hash":"463dd5ea269debc6eaef06e5e84d36409ba12487","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/99/80cd0ae49ebd6c084845e3349a0404a6132cbb","hash":"c986de6a58e3602be04512115a8df4fe5aae3664","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/9d/eb46ac143f2de2b2db89da337cf7bc2422c2e0","hash":"9ba3579f33bd9e06648fecc5e55201210c165ba4","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/a3/73a8c7da8949cf37b5bbabf75a8ab374e48aac","hash":"efd32c8ebb9205eefa5e05481e2a3b764f42a76b","modified":1492333047000},{"_id":"themes/gandalfr/.git/objects/a6/4855ce27347de08a26eb47186d1ae660698ead","hash":"48bc9ba754902f3cc7d3008ed244f958793f7d5b","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/a6/779dc122c80a7f5cbf07883b0519d25f23ba61","hash":"2827ac98af6bc75f918e9405f4f295f127c44014","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/a5/9e255bc67e5c77312e248151e47b048fc694b9","hash":"6062c800bbafaa53deca5a3f3bec0c58869753b9","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/a9/20367d3dde956db22a10b244d4484f961a72ca","hash":"1fb1bfd3c1b5972d8824ca2bd93a110bc998721d","modified":1490768350000},{"_id":"themes/gandalfr/.git/objects/aa/ad32c54ca0ac7cb9c1ff9269c01427fdecd19c","hash":"25f4c886f0764591be833978f7f32d3ce7453d89","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/ab/1259e4ebc0a1a707b951da8deefd548956e728","hash":"6b65d14d319f5811d0fb518123210e0a536a03db","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/a9/0fafb24c61a68e885f78d3c6ccf843a32fe807","hash":"c2a6b5ef784dbc17630489cbee81767592a948bc","modified":1486705896000},{"_id":"themes/gandalfr/.git/objects/aa/e3dd38232fc4f4c6f26bee6cdfa7b498127a1b","hash":"b3e7651350e7882b6adbf146ba5ea09740639d20","modified":1490927712000},{"_id":"themes/gandalfr/.git/objects/9b/9fffc492b908bcbce1352a3c104454b386dce8","hash":"a702442ecb40060181ce7d4c57f5692ff3f334d4","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/ac/10caf785ecc037a83f1918f840599120d91096","hash":"72d4d1c821e4bc0162f787eecbbe46187a80c151","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/af/424ab1db9e70d0bbc35ced4cb09556da9a1057","hash":"95490a278d6e18323704edf46156e30f33da9665","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/ac/1d341f5839b796d5eb93fbe56341950ef7e6a6","hash":"d7fd7a38c3c90f63d1d839d1d7c55be390b568f8","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/b0/a676a960354a7783463a6619f6462835f7933e","hash":"533e583843a3c1450dc36c094254df844039a889","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/af/96efa6a115b6e8d0e9274a00fcc00cd39ee52e","hash":"e98f6601077d5736e15f5d9109c073f27ffe0247","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/b2/a6928e166f6c1f03677448d80760c91a58e6e0","hash":"0bd6388c7c89dec89b3ca7ac9224100ebce6e02d","modified":1486530655000},{"_id":"themes/gandalfr/.git/objects/b5/4733bd911acd53ee188e3af09517bb27cfacc0","hash":"6e2dedf4409ec46edf5a28b5513b6e827350e7f1","modified":1486530647000},{"_id":"themes/gandalfr/.git/objects/b6/232d6361a777f15445c152b0babba6f052a617","hash":"c85d27f7650758a8db0bf6acf0e904050629272e","modified":1490927843000},{"_id":"themes/gandalfr/.git/objects/b6/0f0a1afd8224a3c2ba27928e5b22506fa79a01","hash":"b7ec513a51ee402fafee17d2385daf77f56b86b9","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/bb/1401063987de8ac8bf0919263b976253e7ed15","hash":"267b1197f87c9a7ee7b25dcbe3cd834b4b296c92","modified":1493357621000},{"_id":"themes/gandalfr/.git/objects/b7/474ff05cd74c04f17739a5dc8a765a245a0223","hash":"65d175b8b3838bf7adf0d3775fb39ae032b37c0a","modified":1490768351000},{"_id":"themes/gandalfr/.git/objects/bd/092d09fe89f65d794fe7f0ee0cec350e547d52","hash":"9b8f8562fa22c18e3c3692a8bc57217f41ff2e8f","modified":1493362558000},{"_id":"themes/gandalfr/.git/objects/ba/9e9264b5db905ac108c94c5f1058a814fc5990","hash":"2c4361cfd017c0d81753d9c1bab647450236d2b2","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/bc/99a6571c611e45f1ed6323e7a24c0e3168da53","hash":"0cc7d89f33cfc250dadfec01620f0f4b23a53049","modified":1490768355000},{"_id":"themes/gandalfr/.git/objects/c2/201d0bfce4f6ada770ca608ef9e61326783aac","hash":"fe17a009e4962f5f0680e1ecc77497717545c244","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/bc/6d9ef17efa8e943dac1d62ae8b442d4c2bc5f4","hash":"973e907a86519b253efe96f7cf98c2de226cdb2e","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/ca/b0c5cefa37e219b4f83c4ff54ec48d2fbc487a","hash":"c0b8e78c43314fd5c8b157acc336e7599182fe7b","modified":1486706093000},{"_id":"themes/gandalfr/.git/objects/bf/aeab574b349aefc2685bce4e7127947f50be9e","hash":"bedd2e62ad140135a753b1a4e17fcef500baf319","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/c2/44cee74526de9986e9b718c10aa0f01e504503","hash":"7b3259cc78e86e3a21a47ea2eacff5e33bb4d43e","modified":1486706093000},{"_id":"themes/gandalfr/.git/objects/cf/b1e2070b6b23448f9b9c3208b6b5e73eeb7745","hash":"6391ed1b80f43d0a5ac243219dc25f2a4df5c272","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/c2/30f0cc782cc9b96cd487aaf492c3ddac0cd57a","hash":"889b9cd35d2adb205cec2cd85ec5e909f96243a9","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/cd/9be3d673dd6d8b967c258751556f1a727623af","hash":"684794cbe04eb236ea9e73293764f0e14b099926","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/d1/b6879929de0f3202981c3450e2dae2c5de809c","hash":"7677c18f8ab8d71dd4e678ca0846b2efc3cbc8bf","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/ce/09ce5051e238808c05dee70d2b460f9c138b22","hash":"8a9656c028fe9c2ac24f5ac52e8d8aee6628cead","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/d2/1a1a499df3131247fb92ece66bbde15d42bc0f","hash":"c933b6e5f8652490670367ca5d85ada739eadfc8","modified":1490768350000},{"_id":"themes/gandalfr/.git/objects/d1/bd04db4ddbe7c31970950317cf39dc51ca12ec","hash":"66d9f1d2eec616fa2943d173ddbbab93af3be101","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/d3/b356c2c0c8ef4b4cc1a774cd0cb3eaceb75310","hash":"1c139e29c644e3488b82a23072ef2cae0031e9e9","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/d2/704ffa794c7db2902523736433f729981b3264","hash":"2adbba7e023730dd83d6f05abbfdf06099fbb48c","modified":1486366440000},{"_id":"themes/gandalfr/.git/objects/d2/91c3bfa6acfed46e14a531b936c60ec46de7dd","hash":"6d3e1e10ff978de3dad1644fdc1527c97aa96e24","modified":1493361950000},{"_id":"themes/gandalfr/.git/objects/d4/496a3fbd87404cdb8a0c2ca1db54ab7811c01d","hash":"252a788c756eaee47fe8a344fa83b104cb18dc7a","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/d6/7543d54ffe4a3072b73ad908fd1b087cae83d1","hash":"2ab8bc8ebe2eda964012715d3f831f03b0399e71","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/d6/56f51431afeedb1883e68c00e62c5ab582a386","hash":"5ccdcabc6b7dc37f53426b929b53227accd6b39b","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/d0/37947ea72c4b03e9eeb176157a291ff17e03ca","hash":"a97c1b3e522abd4087938700e79da9b7a65724fe","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/d6/ba3467ca07167162982c5bd21286f4484854ad","hash":"ae22ead91c6045ece7742ea137219b5a9e73ce79","modified":1490768351000},{"_id":"themes/gandalfr/.git/objects/c1/072c7e361e6a619d570dc95b40e27224e25105","hash":"1f5282b7ff2977f61b90273da59d8ca43f992cb6","modified":1490927836000},{"_id":"themes/gandalfr/.git/objects/db/237b2f70b4e148db4330c3836f9170ff03a479","hash":"9b936be1a20bc0617170b00010a9f05544bfb111","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/dc/1ffa7140c2870064b0a7436f0a02170579dd08","hash":"c3e5b3281aa25e7b1567554d0b16d138cb1c3696","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/d8/35d2a168f2b9145d61a9ed07f964ed8521756d","hash":"773ebe24a18dd13ecd146cca63c9f799af093506","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/d9/52bed919c4f3486de189e764ad1da6856f4e0e","hash":"f4c9a7a726f8c9c3dcd74beecfbfafc786e1167b","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/dd/a2f2cdc127dbfe2a834aafbccec6777d3cfcc3","hash":"5712bd60dc55234252d95010278360ee72638fcc","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/dd/4927d8df29e9ae4f044ea4aea85286dab842e1","hash":"5b15f6548e1a6d8d06e41e2074f19aaf2be94f7a","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/de/02385c6f97ba5bf99e3c92897babb00d2584be","hash":"92387e11cbdb467f44d93bf22aa3518044b896a1","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/dd/bca99f407d6a71dce4470faaab9c8d96144f2f","hash":"944841d8f696498c97e10e79da870d67424cbbb8","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/de/6a5cc8a5afdcb7d8ece9d33e1ec1c48ae1097b","hash":"fd0bac30de317d801894841ef1f062c2aaca5ce0","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/e4/28fe29fa0fd918d3b2155d134f94fbc80be893","hash":"85bb66daf9d1c3dc0e6c1960450f587680bb5432","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/e1/c2cff84b086adcbb2210516425fde9365c1786","hash":"6fdd0b218ef12815c212494a38cd4b54e7c4e0fb","modified":1490927719000},{"_id":"themes/gandalfr/.git/objects/e5/e1eb20830974413bfc462978a009ce235dca46","hash":"db14f2a2d94db7c263f4abf93fa6bd4ec5bf495d","modified":1493362974000},{"_id":"themes/gandalfr/.git/objects/e2/5ee2cff81921097f2da05570a1b74240bb87fb","hash":"d7da8006b2c2a033f1bf86ec596a930cb432aeb1","modified":1486538441000},{"_id":"themes/gandalfr/.git/objects/e3/8aca4a86784184e1121955f8c56cee79732bfe","hash":"1df4b37d5dfc1180658c96257cb572e3e82bb239","modified":1490768351000},{"_id":"themes/gandalfr/.git/objects/e4/99e36ed7c60948a8f2dcbc2eb2d17bae690a94","hash":"bee96097fcc44a3c6e4bc16e6680b59ca8b3bc20","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/e7/9fe4de96f80ace8d36d439f725ef6ac6e1eba5","hash":"b96f9caaf5f42572d4c89d986601eefbeedaa949","modified":1492333064000},{"_id":"themes/gandalfr/.git/objects/eb/2289aa875ae17095a40ee134c00c3527dc344f","hash":"68939cf43e09cfc615638f1ce03536667ee174b3","modified":1490768350000},{"_id":"themes/gandalfr/.git/objects/ec/bde803d0901e9715c431b4ea894335fbc87941","hash":"961cab79f39e87dedbd02799b6fcfce42a5111eb","modified":1493362959000},{"_id":"themes/gandalfr/.git/objects/eb/4b93742902d9347090efddb2588945af62fa48","hash":"b218feb237de05dd7683207abe2785ddb35a6b17","modified":1493362959000},{"_id":"themes/gandalfr/.git/objects/ec/07839676f64ddc223b1c75eaa8d18a073c1c6d","hash":"6f94d8f2ad1f8755892997def48ed944d53f840a","modified":1486706093000},{"_id":"themes/gandalfr/.git/objects/ec/ac82bd47707a9cb983b975ac7da7531072e78f","hash":"3cf3dad3b60d8b17a965033054a67fb1a929e13d","modified":1486530541000},{"_id":"themes/gandalfr/.git/objects/f1/91f672ef2b0ffaf1cc01a4fe3f21538078d6de","hash":"47ca043922d07917fff29e4961f981b8e113085f","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/ef/555095e4386f98b8275b7fc21aeaa9bea39ded","hash":"2a36b28345d5b81c5c098648becf4e349786d8ed","modified":1486357308000},{"_id":"themes/gandalfr/.git/objects/ef/88d79424a9fcf327ee8a648039f6ad4bbfe729","hash":"7f144455f88c4f61be80ed47baa0c71398669115","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/f4/8d1718b710696a7d84431c8f44256ee9954f60","hash":"4847b52a89bbb30696c44e82863950f961e4221d","modified":1486530649000},{"_id":"themes/gandalfr/.git/objects/f5/99871f9aa4ff632cb17b467e3b12ddc0f9616a","hash":"114a3881e142521102d7df3799622088d2e138d8","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/f7/51a99050666c6a590684f172756b43ff117f6c","hash":"45db86dae89ad0e16da764a7b10c1d4088fef311","modified":1493622652000},{"_id":"themes/gandalfr/.git/objects/f6/3b1de4e1ef9b70c211cc99c146ca085847677a","hash":"7900180e6e355a52210f32a4a139582fabc3ae69","modified":1486357309000},{"_id":"themes/gandalfr/.git/objects/f5/77036cf2ba7d638f197e188825a7d56adf5eeb","hash":"8bdcb5818c82b8096f4d015d96df57f2ed0c1c46","modified":1486366354000},{"_id":"themes/gandalfr/.git/objects/f6/d133ba8a0453830a129a6613048559350f0e67","hash":"d9cb87188649b2a82513bb583e4b4c3bad329892","modified":1486357309000},{"_id":"themes/gandalfr/.git/objects/fc/485208e299c2af130fb7f3c0e938efef5f0a44","hash":"2122b55fdd68a59a6780408649a216492079477d","modified":1490927738000},{"_id":"themes/gandalfr/.git/objects/f9/53dc19879a039c6d63032a364033aae751236c","hash":"4e21a342308e76a4d7297fb80744875f10153fa5","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/fd/c5b747b4fb0373629073295f419111ef57197f","hash":"d7197a3d7c972c0a6b316d52655bb365f61785a0","modified":1493362469000},{"_id":"themes/gandalfr/.git/objects/f9/80b722984a789a165c5bd11c5e5e70e3f2a3ed","hash":"2add5f5a80180aa97a171ddca8f60d38c30ccd36","modified":1492333030000},{"_id":"themes/gandalfr/.git/objects/f8/324da6e893ab7da30ae457061a2719d1b43b43","hash":"f1f230ddf0f401f299b7e6a1358fcf2364c233d0","modified":1486537503000},{"_id":"themes/gandalfr/.git/objects/pack/pack-45a21a80109c48dff7a583ed686467a5aa8e7c15.idx","hash":"264aab8e71a9a6b6b2a8fa1e91952f52ca5d6958","modified":1486357309000},{"_id":"themes/gandalfr/.git/objects/fd/5caea37c9ad9c26f91f746e70d4783288d0ab9","hash":"77cb4e7f2b29253454ba9fcedfda993a2e5701bf","modified":1487745218000},{"_id":"themes/gandalfr/source/scss/_partial/base.scss","hash":"a5ab28018f7f524a6c024af2f5bb54637a0a0d1a","modified":1493622763000},{"_id":"themes/gandalfr/.git/objects/fe/2ff03cebe6b4a93e1de3e5559825efeb09aa50","hash":"2ed4859f91af6759cdfd1c0b61b9911c28c921b7","modified":1487745048000},{"_id":"themes/gandalfr/.git/objects/fe/4e0b9e06ac8a4a4d5d09a949234bfb25ae3d5b","hash":"eb99d1a63acf20871bd4ca6edb2e2a2f82e999e9","modified":1492333047000},{"_id":"themes/gandalfr/source/scss/_partial/footer.scss","hash":"24ae3c27ed43ada59403526dc8c4ff26c166a43f","modified":1493622763000},{"_id":"themes/gandalfr/source/scss/_partial/archive-post-list.scss","hash":"b173328f07795f64769fe552b5c2749f4159d050","modified":1486529518000},{"_id":"themes/gandalfr/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1486357309000},{"_id":"themes/gandalfr/source/scss/_partial/header.scss","hash":"0491d194e0f3bd927869f0a6b190624d5ff16c92","modified":1492333064000},{"_id":"themes/gandalfr/source/scss/_partial/home-post-list.scss","hash":"0021e88b04c51aca45627272bc7e3584ba2480b9","modified":1486537504000},{"_id":"themes/gandalfr/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1486357309000},{"_id":"themes/gandalfr/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1486357309000},{"_id":"themes/gandalfr/source/scss/_partial/mq.scss","hash":"b38f564dc87b4edac54b0569c69ff302a6c9c17f","modified":1490927565000},{"_id":"themes/gandalfr/node_modules/archy/examples/multi_line.js","hash":"2baa09f9f176e625247f9894ac770fb9c6e1c24c","modified":1331245206000},{"_id":"themes/gandalfr/node_modules/archy/examples/beep.js","hash":"8435f1fda19336c06418aea99d1836bbcf362ce8","modified":1331245333000},{"_id":"themes/gandalfr/node_modules/archy/test/beep.js","hash":"1bb3df7693cf4dbd198bd3fc91e0c6e3dd82083c","modified":1355733808000},{"_id":"themes/gandalfr/node_modules/archy/test/multi_line.js","hash":"6892fde2a90917b678e035caec80443460a18973","modified":1355733816000},{"_id":"themes/gandalfr/node_modules/archy/test/non_unicode.js","hash":"b19a7e7ace40af5c5b4c8ff3508c7fdc642e3c2c","modified":1355733824000},{"_id":"themes/gandalfr/node_modules/async-foreach/dist/ba-foreach.min.js","hash":"249c5cd52beeeeebb2e91497c7afb72cd1f45599","modified":1326250238000},{"_id":"themes/gandalfr/node_modules/async-foreach/dist/ba-foreach.js","hash":"d63fdab80cc8ce5dbe79ce75a47252e2139abac2","modified":1326250238000},{"_id":"themes/gandalfr/node_modules/async-foreach/lib/foreach.js","hash":"2e647d5ff5498f33fd8c220f9999a00cd9d1d7b3","modified":1326249886000},{"_id":"themes/gandalfr/node_modules/async-foreach/test/foreach_test.js","hash":"25fd2fe3d214384f8bd683717c2e51f6d25f73fa","modified":1321548462000},{"_id":"themes/gandalfr/node_modules/asn1/lib/index.js","hash":"cbff145d47fb41eb1262f012a7024e7b0e527d6c","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/abort.js","hash":"440629b13ff27be58720005cb549f38903d80737","modified":1465585654000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/async.js","hash":"c5d0ae608872e8fcc47a465d51564b6576c49401","modified":1463755306000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/defer.js","hash":"751e8dd7ef7b877d05e66eb8782f95ae78351c4b","modified":1463755276000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/iterate.js","hash":"219e4942b78515ab728825d33473715c246fd081","modified":1465585679000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/readable_asynckit.js","hash":"6a883852b3639a6c4a7e7e4fdefa2bd08c6ecedf","modified":1465752133000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/readable_parallel.js","hash":"55538262a65702eb61a29e2ea3a20637490f96d9","modified":1465716911000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/readable_serial.js","hash":"05bbc69be79b76f58faeb2805697ea9469c60d89","modified":1465715271000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/readable_serial_ordered.js","hash":"bf2240383cb36d9a191d5ed87abb5d8674ddd8d4","modified":1465859663000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/state.js","hash":"fa825d1971532d33a039d634de8aed494c09c08a","modified":1465664364000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/terminator.js","hash":"1f8a78f42a386e65c9fb5cf621a90a2792dbb63c","modified":1465665521000},{"_id":"themes/gandalfr/node_modules/asynckit/lib/streamify.js","hash":"cad24d3ac61e7d9ad281c5190c5cc4e4ba8e6f3b","modified":1465693502000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/test/tracker.js","hash":"dc823d6be26c54f325e1254726a4a537b751105f","modified":1454114609000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/test/trackergroup.js","hash":"06f75844e51431a987de704b98b8664ca71915d2","modified":1458083474000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/test/trackerstream.js","hash":"ac0f104f1043d861f66e97c7d65b8fb90b93e6bb","modified":1454113947000},{"_id":"themes/gandalfr/node_modules/autoprefixer/data/prefixes.js","hash":"74c2242cfcaf99b0e70ef6bfd7bcf93e6f9bb00a","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/autoprefixer.js","hash":"207928138d079b90f0cd74a58eb0a0fb15dbf346","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/at-rule.js","hash":"240918aa36f47b12b5de5378ee8ed498c9899e65","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/brackets.js","hash":"462b8cfaf85866c83e0c127a11b081dfa75b0b71","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/browsers.js","hash":"617e28dbf2f774370dc632dc7892cd74d1beb3b2","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/info.js","hash":"018b0ead3564279e17fcb8f6688596b9fc74e9fc","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/declaration.js","hash":"efdf3bfbc0e739009e6ce418b3f78a41ec4d71e3","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/old-selector.js","hash":"3512a4a58c60d1d43d75292b33731c3f6b6fef95","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/old-value.js","hash":"083920f2c684482632eb07af6a2b901081d55668","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/prefixer.js","hash":"21e61e6d2f30a3e5ec12a9e59e4e49efaaf8c031","modified":1485878783000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/prefixes.js","hash":"63950dbe93652666e36709247fddff85649137f2","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/processor.js","hash":"e1daa5dee300f97b47f29a00b9c91167fd516797","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/resolution.js","hash":"e640d6cd8c1669b84d028e02e969a85e82a56833","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/selector.js","hash":"788dde55f1fdae606be9fec7634fa6a6c031088e","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/supports.js","hash":"0504704a6a22626f3db589ec30c18a959231f4bf","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/transition.js","hash":"4305cf08241ac7916e43dfc9c96dae85fc43f9c6","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/utils.js","hash":"bb951ef447097663525f941dc69f3adb0279320a","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/value.js","hash":"013e5c1535b2a8029790799ab93cf9b5ddaf4043","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/boom/images/boom.png","hash":"126fe71d237c4939338507417d5f5e172773be3e","modified":1407506005000},{"_id":"themes/gandalfr/node_modules/boom/test/index.js","hash":"62d76a920212e160acf6894f1ee3e981e6aaa8b1","modified":1446232305000},{"_id":"themes/gandalfr/node_modules/boom/lib/index.js","hash":"a894f6f39fc0bf0f8a82a420d8a2a5018e9dcdbe","modified":1446232305000},{"_id":"themes/gandalfr/node_modules/combined-stream/lib/combined_stream.js","hash":"5d3a85a28a463dc2949fbb974919598e00183d24","modified":1434294512000},{"_id":"themes/gandalfr/node_modules/concat-map/example/map.js","hash":"022a614b8d9f5ccb67b6ce1f478b1efd7aff298e","modified":1339124034000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AD.json","hash":"85903656e83adb2ee487524cffe3b2d9548d11ca","modified":1486015744000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AF.json","hash":"d15ae8fccfaaf10c0d6cda0d115a42839217efde","modified":1486015634000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AI.json","hash":"03da2b68dfb3f18738d7fd0c48abdd6f56ed71f2","modified":1486015788000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AG.json","hash":"219ca002f33e21587f223f7ec00058c2ece27b9e","modified":1486015810000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AE.json","hash":"11086fb235225c2a02e1e9c13805bd76a0c1ea88","modified":1486016808000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AL.json","hash":"88eacffe20d883fc0397f95d235e31ddabfd82b1","modified":1486015678000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AM.json","hash":"ab1cd2c9b807e710ceb950ac56e566dcb46ab529","modified":1486015852000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AO.json","hash":"c1d9ac4e8a2ae884f155c56f820464554b2cd588","modified":1486015766000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AN.json","hash":"41aff227cce33ab1b35001289c7ba41f67b88b3c","modified":1486446959000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AS.json","hash":"42a4fc51ce66ce401550222bc6e545bcea0bd53b","modified":1486015722000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AR.json","hash":"1c2e884f69dc1ee5f5d6b3487fed559c857bfcc8","modified":1486015832000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AT.json","hash":"29f62606ee3db5ddf42cf0885b13aa1d90bf9b51","modified":1486015896000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AU.json","hash":"f440a519cc1f1c49c82e088a2ff2ca6d1e23e791","modified":1486015326000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AW.json","hash":"68c30968cb3524addc9e1c6b802f540fa3505180","modified":1486015874000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AX.json","hash":"c35212825ba38a9724e2e10b87768ebc58367a13","modified":1486015656000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/AZ.json","hash":"be722977a3342baa060385944ffe4f121493f2df","modified":1486015918000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BA.json","hash":"2e04c7a71f5426b56af53dd589e028638dfbb3b4","modified":1486016160000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BB.json","hash":"6d4646c973096330faf8290a1a5cee3743f43d8d","modified":1486016004000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BD.json","hash":"2af3bd41b1f00117d96484c914807e0a3643a789","modified":1486015984000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BE.json","hash":"efd871fc4f19ba3d9e70ee527b3de92e5a21f5c7","modified":1486015554000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BF.json","hash":"ea8e067a7b89c3af8ebd65e3b9dee5165bd21733","modified":1486016292000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BG.json","hash":"47542cb805c19c6f8f601a0e266baa2333497870","modified":1486016270000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BH.json","hash":"3b65de124fb7366a22ef1365375d52e90421387c","modified":1486015962000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BI.json","hash":"31015574a08e149d819dacb79b0255f28a944c4f","modified":1486016314000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BJ.json","hash":"abaedde1c8c5782dd8338f54af08834043c60459","modified":1486016072000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BM.json","hash":"4b73b05f07e220da9d4cd70e164290f4a1d0e020","modified":1486016094000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BN.json","hash":"378b96dcb3f5e68c1fe70a06483afbc4fc394634","modified":1486016248000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BO.json","hash":"6d7474b95ebf68b5fe42dbdac90d4dae7dace55f","modified":1486016138000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BR.json","hash":"b5d899203c983d5efdf60dacce640ac21b717917","modified":1486016204000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BW.json","hash":"9b5ecd4ade1645efb243e45df9171c5849193b7e","modified":1486016182000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BT.json","hash":"da442fefbc03cfadb2a05e390a9bc51b218c3ea2","modified":1486016116000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BS.json","hash":"1fb508c3028dbaff865fcc8dac2471c679814788","modified":1486015940000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BY.json","hash":"050f54d8ea9620dec39301762e64a9b2e29fbd58","modified":1486016028000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CA.json","hash":"46f0fc54602ae918babc854f573042beb68c795a","modified":1486016014000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CD.json","hash":"62fa5b01c760a157bd35f8591a9e5b0d199e62a1","modified":1486016558000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/BZ.json","hash":"89654b51b99399419961a33a3bd6093e5a04a3f5","modified":1486016050000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CH.json","hash":"57a9a9abe70c7769773e4530076d42f0884ecd30","modified":1486017222000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CG.json","hash":"8b04ca9c98e35a8c30deb378968ff15d002308a7","modified":1486016578000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CF.json","hash":"d23567fa445c3393f74ef3a8e8504fd305dcea13","modified":1486016424000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CI.json","hash":"e527d133c62c4595b376acb342f861f68e5e753b","modified":1486016646000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CN.json","hash":"4b78f4f5d0db6c0d63d9378dfd0d44d3e60da46b","modified":1486015322000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CK.json","hash":"b37a935d44b91399e163d70b4d2671b0ce176924","modified":1486016602000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CM.json","hash":"152f466b739811e8d02dbd247fa1c0ce46a82fa9","modified":1486016358000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CL.json","hash":"f762d88a428ae5b971692b4d3e565182840b7b1c","modified":1486016468000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CO.json","hash":"56d53734e861fa465d8ae3d1faf93d72b3eae341","modified":1486016512000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CR.json","hash":"4c31dce85040508042cfe44c3f0ebb3c0a69a063","modified":1486016624000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CY.json","hash":"7c2d301f9f03aa4ee7d1487030703a5f0aeffd0b","modified":1486016712000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CU.json","hash":"9ea453d8f6cde8dc6374b8dedba45b34eeb26b06","modified":1486016690000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CV.json","hash":"b04ec0d65c81920627cc4729cf0abfbd982c1bb6","modified":1486016380000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CX.json","hash":"cee436485c48c230463a00705d590b47af6dba15","modified":1486016490000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/CZ.json","hash":"af1cd8b5d272f0b7675e9d7ea3f1169454fc1798","modified":1486016734000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/DJ.json","hash":"18e4836239de7db3acb1bc29ff03dd5cf3f0f9d2","modified":1486016756000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/DE.json","hash":"20c1a14e6f371a78d593b63753f4d0188e202195","modified":1486015410000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/DK.json","hash":"66ecdb89f745d7ea31936fc5310aa1f3ecd98d89","modified":1486015750000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/DM.json","hash":"8851b4744b3badfc2cb549291dfe0f40fd0783f5","modified":1486016778000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/DO.json","hash":"daa198d4e05e5b907c0347169f7c0d2b4b816fa2","modified":1486016800000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/DZ.json","hash":"099a8fba8d13acc1d64decabb063a91b26a92f0c","modified":1486015700000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/EC.json","hash":"e5b11e7d36d0565101f67147a25a4a38bcd21ab7","modified":1486015976000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/EE.json","hash":"ec82918db73c9c5cb66a229146e164f999097561","modified":1486016910000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/EG.json","hash":"dac52406dc3ba0166579a14e9f99e660a8097203","modified":1486016822000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ER.json","hash":"8acc0aace16d965fb0ad5e4b8262669bfe2a8fef","modified":1486016888000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ES.json","hash":"9eca93f0b0dc73a57b3f3d6c880e20dca75734f3","modified":1486015632000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ET.json","hash":"ed80cb6975908fbb7ddf66a9e976f747345f4179","modified":1486016932000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/FI.json","hash":"ad7c8c3bffa7fa29986ecd079641ab242ad64bd8","modified":1486017020000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/FJ.json","hash":"99791db3376cac6abbeadb63333a3f68016fbf7c","modified":1486016998000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/FK.json","hash":"edec0c8fc0dc18759a753fe69bcf8c496180dbc1","modified":1486016976000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/FO.json","hash":"453fd58bded5a21815ea643986e059fa4c36085e","modified":1486016954000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/FM.json","hash":"ef7ddb190d6515fff96e2914e3b544f177910f98","modified":1486018280000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/FR.json","hash":"7b314c2b0e9601326e91eaf6d65a117cddcf5d10","modified":1486015292000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GA.json","hash":"8e1d985b732dc084d5daa4ffedccc507e0ccd683","modified":1486017088000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GB.json","hash":"2ffb53c50e3447488fceea5384b22c73fb4fb32f","modified":1486018940000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GD.json","hash":"c9f9db670ef09ca097a42cf43c7a3ccb3bf7107e","modified":1486017220000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GF.json","hash":"89c657d89c6a4e50e005576823afed6da5f6a217","modified":1486017042000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GE.json","hash":"f24ca68c0d1b358e9de258fc8a22d2be4b68a795","modified":1486017132000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GH.json","hash":"7cf3967fa3f4c97fd031006106909776e718e741","modified":1486017154000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GG.json","hash":"44ac59cb9481bacda07c6f3a70e2dd3e28f6a90b","modified":1486017308000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GI.json","hash":"bac8a9364392c7020f93fd0263a261c11d73b060","modified":1486017176000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GL.json","hash":"aaf8d1b7c5ee2698d6ea4d7f9618ee21b5d6d7d2","modified":1486017198000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GM.json","hash":"4e1dd2489946c3587d8056a4adea61e2fbdb0467","modified":1486017110000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GR.json","hash":"dc96e0ee79bf0a1b8577526743b6e777b458478c","modified":1486015768000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GP.json","hash":"c3a26dbd71ffc8da399bc7325965b6b601c9974f","modified":1486017242000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GN.json","hash":"69b5a2e385f4f8912308d0f01ef2b12a2c4cf976","modified":1486017330000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GQ.json","hash":"b2ccc1126ba294163be2675c6f8aa703b23c0766","modified":1486016866000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GU.json","hash":"feb179727650e04f84a0fa6ca17ad7a93a0a3c72","modified":1486017264000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GT.json","hash":"484c796f9b0649dbfb32d29059e15a6154199423","modified":1486017286000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GW.json","hash":"aae399f171b13396dd92f1ede34bb124fdaf0b60","modified":1486017352000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/HK.json","hash":"ce0ddfb3ee67cb8d68967e94064de689a33638ac","modified":1486015908000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/GY.json","hash":"181089424ebcfe8222b4d638a09315e6dd0d07f6","modified":1486017374000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/HR.json","hash":"0b79020aefbb51afe10b154ac9338256c9c789f3","modified":1486016668000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/HN.json","hash":"af4503d729c3ebde6248c851dc15dc1b2e44cd88","modified":1486017442000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/HU.json","hash":"aa3428fba4a37f751543acc8177ed8318ca96fe9","modified":1486017006000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/HT.json","hash":"872ae5b65601a9a405514752beef4101747e0ad0","modified":1486017398000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ID.json","hash":"84f2d202bfd2cedfe8bce670c3cb0ad7058a8fec","modified":1486017486000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IE.json","hash":"f6634cf8cb8b5673c8dfd79944f4544795cb5ab2","modified":1486017552000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IL.json","hash":"7dfa18e9bb226bdfe82f15c07ead76250407b862","modified":1486017596000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IM.json","hash":"29e95f758289a07eff7cc98e78dca574c82e8eda","modified":1486017574000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IN.json","hash":"2d22f942083551a4aa8d8510b81c0cd37c4914a3","modified":1486015184000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IQ.json","hash":"a8e819c6626808cf1e17999c79ba9c5807d7c07b","modified":1486017530000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IR.json","hash":"001c4b0903eab976dba123b3b2a83ef1da1288b9","modified":1486017508000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IT.json","hash":"918d97f311965d0a2afa35fced9ec9ca55162a60","modified":1486017618000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/IS.json","hash":"01a4f0e58029d46a3fbe205c2b14d4d27a66df02","modified":1486017464000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/JM.json","hash":"c58eeede286eedf9eb0647c4d4d85149d5b4bf1b","modified":1486017640000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/JE.json","hash":"6313b85809528873b07c78678665a4f64739ad7f","modified":1486017662000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/JO.json","hash":"c708990a7734fd315e1014ab24315c7f088ba4d8","modified":1486017684000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/JP.json","hash":"b5080a6a815cec873c7c4ce9f922f03ab4411f89","modified":1486015096000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KE.json","hash":"c147d9eac51bd32faf30d719799195f2e1a5e7fa","modified":1486017706000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KG.json","hash":"bdebc5ae02aefb6ae9eef39db6fb6b58ddffc4a5","modified":1486016514000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KI.json","hash":"2fe7493dc171688b25a0f2f2a115b853af38c252","modified":1486017728000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KH.json","hash":"a7d7dcecd3a2f90ea8db27b2c173d3ef302daf21","modified":1486016336000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KM.json","hash":"a6fead39a6608b3046e2c9292d1eaf1c84e36fdc","modified":1486016536000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KN.json","hash":"145aa8ca23be2005e0d960715ffac20ff218c098","modified":1486019090000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KR.json","hash":"df1793e2f296c32ec00c1c6585cd1b75769cd84f","modified":1486017306000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KW.json","hash":"40de7a7fb6706e4b370cfa0aeb0f0f12e576c537","modified":1486017772000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KY.json","hash":"721770897e90af3e153b2ee9227557b470f2c06d","modified":1486016402000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KP.json","hash":"540bf053250f53d4d2f170af10ac5617bb4f757c","modified":1486017750000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/KZ.json","hash":"fda256c4c5a53428ac47cbc720a57912da49a412","modified":1486016576000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LB.json","hash":"773c9975018cf924d326eb931f8219ce21e3791b","modified":1486017838000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LA.json","hash":"92b5f374354046602b97f96c4dc2661badf49bd1","modified":1486017794000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LC.json","hash":"3fb0095143cd3e1641e55b7f4208800c3d1bbf6b","modified":1486019116000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LI.json","hash":"cb3965d26e96205f218fe3b4357e3963402d3987","modified":1486017926000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LR.json","hash":"5e95e10f11b2819005088930193ef3ec8223b4b9","modified":1486017882000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LK.json","hash":"dbdd9f61b4848f4bca6afc75ced0fbaa4f34eb85","modified":1486017526000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LS.json","hash":"9e9e12f0b759fb07688c6fd0392e2da3f19d959d","modified":1486017860000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LT.json","hash":"7552d9cfb0932e7cdff689da4500e34c6ad52ded","modified":1486017948000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LU.json","hash":"710cecd12253955972a8813dbec5305b0864f7dc","modified":1486017970000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LV.json","hash":"cba231eeb16d114ae6cedc0e031b04fc0d590149","modified":1486017816000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/LY.json","hash":"f479c8bdab60986346cd6acf3288fdc8cf8302e2","modified":1486017904000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MC.json","hash":"1d3cd5e4d92ed84c94bbd12601cc758a514e5dc4","modified":1486018324000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MA.json","hash":"ea23c520e6e01b4b13314b3e56333249fd9dd225","modified":1486018412000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MD.json","hash":"8375729b16bae53fbe3797714798aa0880e782ae","modified":1486018302000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ME.json","hash":"55557380d523b07f9a7e109e329575fe9dc4629b","modified":1486018368000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MG.json","hash":"106a78af89742e83140ad2155203be10f7130cb2","modified":1486018036000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ML.json","hash":"50761b5cd2f8863ebbd755cb48cf279ecc8e22bd","modified":1486018126000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MK.json","hash":"402ae32713c9d50cfc784439053e0e6e863fc9fa","modified":1486018014000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MH.json","hash":"a6d9e8477cfd41ad23797d48c532334c17138350","modified":1486018170000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MM.json","hash":"f6938436d30aabf54400b9859dff797a62f90ef1","modified":1486018456000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MN.json","hash":"a49900db6775f0544194bc0efb2f1d35878be13d","modified":1486018346000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MO.json","hash":"9435b8d2c00cb157fa8b5010c32225f157edf0b4","modified":1486017992000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MP.json","hash":"8e8c8f543a13daf7e125787083a515e0974b7c01","modified":1486018688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MS.json","hash":"82c877347b60921aaab035d700b02ba040bc23a5","modified":1486018390000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MR.json","hash":"afcfa743555820ee457e7328cc828ea6ec550fbe","modified":1486018214000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MQ.json","hash":"95ffb5cef7d224d6af56dad28e607f1830c1459b","modified":1486018192000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MT.json","hash":"0e55f95c6953142fbb64a89dcd1ead9863ea1ac3","modified":1486018148000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MU.json","hash":"f40fa661e649ae7ced72e0e1e6e9ddef56bb430e","modified":1486018236000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MV.json","hash":"ebfbf23e37d47d78485b25b3c604fe1458395539","modified":1486018104000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MW.json","hash":"9bde0ae4182dfe0c65b8dd1fedd7e21e63d8309c","modified":1486018058000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MY.json","hash":"b9866dfe77e795ae2840765953d453fef31b5fff","modified":1486018080000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MZ.json","hash":"5fd28ae983792c1cc5e0457ceae5a38d30a6375a","modified":1486018434000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/MX.json","hash":"fc231d7bdb7528fcd30df8c8c4b6e263c62bdb9d","modified":1486017938000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NA.json","hash":"7c474e38b7378ec7263fd71e2109e24a632b3faa","modified":1486018478000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NC.json","hash":"441ad433ad49090d8a68b135512b926da2130372","modified":1486018556000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NF.json","hash":"44d9fcea93037611cabe7891bacbd1cf7807fcf1","modified":1486018666000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NE.json","hash":"381c1d079ea5e5634c9e410bec35d7735bd70232","modified":1486018600000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NG.json","hash":"c6215f090e6feb30ef1997fc82603edb14b9f4e1","modified":1486018622000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NI.json","hash":"fabb07f80a2c8174b198d360d0aeaaa602b42bf9","modified":1486018578000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NL.json","hash":"3df7d6d83a3b811bbd1bc339932032b6287e1914","modified":1486017520000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NP.json","hash":"3756d85f09e6569052d3b200c63d524711ee1272","modified":1486018522000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NR.json","hash":"7fb21e824e9e5ace3b2f62feb693ff657e0062f4","modified":1486018500000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NO.json","hash":"b12dc5d7f34a2a353bb0e2902ab8cd1c8c7cd30a","modified":1486018712000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NU.json","hash":"0ea744594bc0cd2ace80a303da73dbc852a70fbc","modified":1486018644000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/OM.json","hash":"81257e7ba38343f402c51aeb964f06b1b232ff13","modified":1486018734000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/NZ.json","hash":"1bbb9b954e32cfadf2e404cfb9dde5ca35a69ae3","modified":1486016384000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PA.json","hash":"0547e08fc633fdb6f91f5301bae308e913d9f132","modified":1486018800000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PG.json","hash":"f24d656e540a7a25adbac477eb182612c931e1af","modified":1486018822000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PF.json","hash":"fa69f4b627c42ed9273cc27be0079bb7589232c2","modified":1486017064000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PE.json","hash":"28ad4daef90e49faf736058c7b7d8a14bee3e97c","modified":1486018866000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PH.json","hash":"b8c7329a15e6491908a754be770b2c583909eff7","modified":1486018888000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PM.json","hash":"4a474281076d6c4726fed27e44d2bc96c2e85a2b","modified":1486019138000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PK.json","hash":"859aedf38b77991679f51db6da91bbbce616e105","modified":1486016166000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PL.json","hash":"5174525d91fbb86d7e07eae994ef7b062cd7762e","modified":1486016184000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PN.json","hash":"5bdb60f635416b9b3fb961f82e9da2b817d2ca29","modified":1486018910000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PR.json","hash":"cbf1388bffb334fabff7a23ba5591a1cdc8de41b","modified":1486018958000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PS.json","hash":"4699bb5cd430af9a2eceb82b1e5b90047ac6eae8","modified":1486018778000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PT.json","hash":"b908d6ba59117651cc72c959dafd8f8ef3e2d65a","modified":1486018934000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PY.json","hash":"c5aceba3319964bb2eb909a61c0102608a39dde3","modified":1486018844000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/PW.json","hash":"9e1891b37ddb14dccfb98106c0aff47d6f644c44","modified":1486018756000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/RE.json","hash":"b091ef712987230b1f8415a4c8109ac1ff44c30f","modified":1486019002000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/QA.json","hash":"da1b5b0b3fb4e1b5302ec3e14b78e96981dc440a","modified":1486018980000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/RU.json","hash":"0833523c4698c8d3e5f5bde5708d6f1bd3866318","modified":1486015162000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/RS.json","hash":"dec432e2116ea9b30ba41ce2324c92937ced25c4","modified":1486019292000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/RO.json","hash":"0b49c56795d9c13d2bb75f5d5b896bdc3d1d7394","modified":1486019024000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/RW.json","hash":"b711ad6c0ebd7e4d6a74ae2d8f82b1a3c18fcd8c","modified":1486019046000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SB.json","hash":"12414e464b4a41bfa382cbd7097209124aed4f05","modified":1486019402000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SA.json","hash":"4db9bfae906ce4fcce7a8be57bf59f7ab29c3e5c","modified":1486019248000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SC.json","hash":"cfcc9e9bdfb5c8f1d4863785b5c80507a58a1eb1","modified":1486019314000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SD.json","hash":"069bc8e47e98e5436961beedfc0173dc81ae8e89","modified":1486019456000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SE.json","hash":"12733b4d646ef3042ad2ebf328fb952609fbcacb","modified":1486015502000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SH.json","hash":"b628afc0f03643c2e33426d02e1cd8ec785cefa9","modified":1486019068000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SG.json","hash":"164aa06d17ff7226ac1d480d93a28e5948396ab1","modified":1486019034000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SI.json","hash":"c25087e793f73b1d8ff32b8550428ccadea3fdea","modified":1486019380000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SK.json","hash":"9302652568d8e94579eeeb43feb0fb611e99dfb8","modified":1486019358000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SM.json","hash":"964e8c986873ea545b576949d1c21010e2e54e1d","modified":1486019204000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SN.json","hash":"e8ae36b4b7da75bd335e98e513577ff1a9c1319c","modified":1486019270000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SL.json","hash":"b43d5960b7feeb778719d2a404f4ff214fb9499a","modified":1486019336000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ST.json","hash":"52ea412ac99e54f0a49a2ee6a289ff7fa37a1d18","modified":1486019226000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SO.json","hash":"476d6ac75e600aec2b4b4fb18ced5effaaf68516","modified":1486019424000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SV.json","hash":"0addfe16d01f839798adf0b92aa906b5790dcd12","modified":1486016844000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SR.json","hash":"056f63ab5f6eb1a7bf260dc57eb60884712a2b61","modified":1486019478000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SY.json","hash":"77da06eb2f72c63cb6b2303e1da376a2c4d0c218","modified":1486019522000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TD.json","hash":"fa60966562c9a3559e786a637a367c01a0dce9aa","modified":1486016446000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TC.json","hash":"5e7f7de02bb9735a8941c9103f71fb64b0bd5db7","modified":1486019766000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/SZ.json","hash":"7cad17c57bae91c5d58ca5173810a716e3fc3e06","modified":1486019500000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TG.json","hash":"82924cd1ae78eebd1ab92c95e1ab9cd40b620da7","modified":1486019610000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TH.json","hash":"53213039aa69b52a4cc31b1f712bf3359d7c26ce","modified":1486017562000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TJ.json","hash":"be35967f1e98a2ccfe30c34ab94ee3df1ae64a94","modified":1486019544000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TK.json","hash":"71d21b35afeb9aab655907aef7b199e945f6aa9a","modified":1486019632000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TM.json","hash":"363c9a1af15ad427dae9b56a4c47ccc720a5786b","modified":1486019744000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TN.json","hash":"136c49a497c0f20cd4402cad67641a075bae4a97","modified":1486019698000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TL.json","hash":"defdccdd608ae2f708512a9813c25b385e1cad9b","modified":1486019588000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TO.json","hash":"34e6bfc98748c625aace71909c736a0c732c007b","modified":1486019654000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TT.json","hash":"b146dbf5f344bfc1f88ffb97c61f69ce7f1335c9","modified":1486019676000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TR.json","hash":"25d5c045b748129ef06f4025d3c567a46a22b600","modified":1486019720000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TW.json","hash":"a6803723c675ef73c42df6ffcf77906311b53f4d","modified":1486015734000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TV.json","hash":"0207d18a64cfdeb9cfac7c3a51c9a854ea20c509","modified":1486019788000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/UA.json","hash":"3af21e4127da71c09d4817b84785e3b15e0ca412","modified":1486016932000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/UG.json","hash":"327e89198f743bfd9ddb7d52e90a3c0857910c9f","modified":1486019810000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/US.json","hash":"add503f614e1f5778caa7f211390d66abe341440","modified":1486015496000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/TZ.json","hash":"38a64f4a404877122aaab01e17129c5b9da4c742","modified":1486019566000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/VA.json","hash":"535a250020a2886b4418603c1d20667ca33203c6","modified":1486017420000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/VC.json","hash":"03637f2ccc330eb19042f559b812b445322d914a","modified":1486019160000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/UZ.json","hash":"31482ceb3576b610c74b71e558f17f9fcbccbc9b","modified":1486016130000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/UY.json","hash":"f530109f2182764c6b2d137f2d3638d718ff950e","modified":1486019832000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/VE.json","hash":"0d7baafb4a2cec167a6682245a14760b9098e054","modified":1486015078000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/VG.json","hash":"41571750ee86205bbbbca64eec86eaf2961b553a","modified":1486016226000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/VI.json","hash":"17cf6eb742f8065c1e0317d39f041713ae8bf286","modified":1486019898000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/VN.json","hash":"78100d3690532e66025d9d054bbce53d7c975fee","modified":1486019876000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/VU.json","hash":"4354eb346d8798daeda70ec4a47152b5bbd0337e","modified":1486019854000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/WS.json","hash":"3558053c4dcb894987c8fdf214a92100f71cce16","modified":1486019182000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/WF.json","hash":"4a83a95f983d179b0e772771139f624546f8af56","modified":1486019920000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/YE.json","hash":"4208b21fe863c7096d0fc64e78a717fc5b5c2902","modified":1486019952000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/YT.json","hash":"00eb5a37f48889fa7333bf6e97ac01e101ebea37","modified":1486018258000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ZA.json","hash":"2590ffa395b79f4fa643c9c77bf6dd59aee7a789","modified":1486015226000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ZW.json","hash":"cdb09ab5f256badfd161113aae8374811c78f036","modified":1486019996000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/ZM.json","hash":"42c134a9b9859e9d6ad8848300789e7e6a20856f","modified":1486019974000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-an.json","hash":"6636c5ba4efc6e6f599969a4687d5e91c7401184","modified":1486020058000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-af.json","hash":"fb673bef7cd5a98831ca402981288454fbdc7312","modified":1486020036000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-as.json","hash":"8318e23f4bf53b8d68307016dd0a1409a8e87947","modified":1486016932000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-eu.json","hash":"18cf4577244f97aefdd990df5eedc978fb171936","modified":1486020080000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-na.json","hash":"bed4a2c22bf3d06ffa9509899e86c3f5ca032f02","modified":1486020100000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-oc.json","hash":"f22112904acfd8270689a068cfe29a435472f1a3","modified":1486020120000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-sa.json","hash":"404a9cdc964d0920d8f04a93d41f3e7de02d5a53","modified":1486020142000},{"_id":"themes/gandalfr/node_modules/caniuse-db/region-usage-json/alt-ww.json","hash":"606f31f30b5149c4708d2358266660d50c3272d5","modified":1486020014000},{"_id":"themes/gandalfr/node_modules/concat-map/test/map.js","hash":"162cce32c23628192cef64924a1ce768af399a4b","modified":1354099176000},{"_id":"themes/gandalfr/node_modules/core-util-is/lib/util.js","hash":"7d34435928ee9228995c04eaa7bdcef875c41e65","modified":1447979840000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/aac.json","hash":"d06d742c6b26a0793670573ace651acfe410a8b1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/addeventlistener.json","hash":"81daee62a9799697943b1441c438fdd6d72c40e7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ac3-ec3.json","hash":"89ccbb2d0f380e35c309559f7e3cef8ce78da6ea","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/alternate-stylesheet.json","hash":"9a8ea2f6ebb05df0da80cd0c5f3bf0e158a78184","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ambient-light.json","hash":"4b226c4b74012d3fe0efc06bab843d6b5b73feb7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/arrow-functions.json","hash":"7ae5ae0003a966e66fbe36d494a4f0041b233d16","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/apng.json","hash":"7359e43c199b7bf432a9d49bdf904f8f794bded4","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/asmjs.json","hash":"079b0e2429ac2384066c0c9a918d1871cc18b69f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/async-functions.json","hash":"777330e8629e03ca551522c9218883177a821c34","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/atob-btoa.json","hash":"c3b402c69b1f1d07c11c479cfa11b6791d540165","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/audio.json","hash":"6d23e26d1a641d35a1939365007f5bad5d7d56fa","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/audio-api.json","hash":"f7d0d08f42e642c9a6b72e7650c07d253498ef1a","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/audiotracks.json","hash":"468fe0244d9b8e967968e51abcd253409fa8ce4a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/autofocus.json","hash":"1496dddb0544b6e1391e8e7e644941d17cde9536","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/background-attachment.json","hash":"c8ea90f67418b532f1f8b4cb176569eb44a52102","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/background-img-opts.json","hash":"6fad96260e3a1b0277032e206bf3a35497a2bb2e","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/background-position-x-y.json","hash":"0b0089115fd803c2ff72129d5b94b8474d4116b3","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/battery-status.json","hash":"0619e7c170cd5b8702523b331a545e17f1dde4c6","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/beacon.json","hash":"1d972c2347117c13ec59932f8327f58a28e18378","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/beforeafterprint.json","hash":"5287f3cbd7b644d318f291659838b0c91073a4d1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/blobbuilder.json","hash":"1ba467240e9929129292fa93d5519e4e23399362","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/bloburls.json","hash":"a792b397dfa547238e799b919ae648df8275e106","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/border-image.json","hash":"15210180baf6f294065d0693f88b612a1b187aed","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/border-radius.json","hash":"792eb267c579b195cc6b49902d1e86b01b4413d6","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/broadcastchannel.json","hash":"c601cd350607ef89b4821b5559c1f731893072f7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/brotli.json","hash":"364ba34df762d4ad2fc6c15bb627137110bdb55e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/calc.json","hash":"c5033139cb7a7f4c1ce033df94120e5e08f9095e","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/canvas-text.json","hash":"7454786f28d10ecd7331d5a3d1fadc120281b45e","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/canvas-blending.json","hash":"3b336486b8847909a00ccc4ec71cee39779559f1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/canvas.json","hash":"5feb7a2a87f4c541f38779280b9ee84784c76863","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ch-unit.json","hash":"6d5c93da257aa89fdef8b063e61053040502b4f6","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/channel-messaging.json","hash":"dea14b175e21c13198081a194daf8f08c5708d99","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/chacha20-poly1305.json","hash":"2c3cd2b6951ee4fb3c3829b870c9012938af6aff","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/childnode-remove.json","hash":"1c15e35ea4a549b69f3cd3cd22cb60da8e0e2785","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/classlist.json","hash":"0248dd208cf00e786681e22f026831a8d4d0f8ff","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/client-hints-dpr-width-viewport.json","hash":"dab57113d54598a45da8d254e505f6d6910843fa","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/clipboard.json","hash":"c343e98348b1a4a19b0c54e0b33d8448bab04d75","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/comparedocumentposition.json","hash":"c3e9f7b97acde757919a54e9a236fc8fe6f28160","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/console-basic.json","hash":"c3f2628165dfba11b8bf1bfa35c63a354b9e4601","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/const.json","hash":"6d11e5ab6cb38124844e078fdfbb85fa0dc21a2d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/contentsecuritypolicy2.json","hash":"d937d2998626d8f69892cb5da86f0b800b3414df","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/contenteditable.json","hash":"20e02c6096150a765a5644321947d84212b6e2a7","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/contentsecuritypolicy.json","hash":"6163b52dbe16adc7a77d670204e265d031dd9c1f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/cors.json","hash":"f37fc9ea25c74236be785d26411b0cff2b99a816","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/credential-management.json","hash":"4db28e068607a1360d58b8b525ebde1f8b42b405","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/cryptography.json","hash":"bbc1ffe7f773afe2476f75ac2fb96eef8dd7744c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-animation.json","hash":"2a92198d7c2dbea3e8b9501c196cbfff3719bd58","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-any-link.json","hash":"78422118cf495f13f9115183e4de1f93ba1215df","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-all.json","hash":"d51541bf9c40224ad689ea0d3cb01fafd06cce8e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-appearance.json","hash":"342fc8095fb3ddbed80a80fc5fa1f88d7a6e300c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-at-counter-style.json","hash":"8ee2a3a68b833441937fd4271b82bce41d433710","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-background-offsets.json","hash":"641978a924f905922752c6386d9784725872e688","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-backdrop-filter.json","hash":"8ae50a3c43d2b35a88ef0f6db98d8ad198de733d","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-backgroundblendmode.json","hash":"65da5a573b586274e0d2cd196dad042903f5b9d1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-boxshadow.json","hash":"57503cdd4e6100ba96a7266bf2a2b9203174964f","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-boxdecorationbreak.json","hash":"d873e329cfedda734dba73946faed29f9a04d4e9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-canvas.json","hash":"ea07612c5ecb58fb35d18201f13af51a3c84b400","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-case-insensitive.json","hash":"c5dea5ef5b7cd7315af1e98ef42479ff2447ae34","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-clip-path.json","hash":"86d7cb6487c618adcbf9d0e722ddf4a6f105f723","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-crisp-edges.json","hash":"396f0b2a1382012b833ff78e68a01d637badc7e2","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-containment.json","hash":"58b32e0b49d1934958ed6c6cb1b74d48b2577dd8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-counters.json","hash":"27ad9368bd104f8f3a16973fc99691915b087725","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-cross-fade.json","hash":"d10e79b144033d856f8f06e111eee2c5c4cda880","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-deviceadaptation.json","hash":"a833d3a8cd35855c8043253f0850d715397fb85e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-default-pseudo.json","hash":"141293f495e1076fa19d9fc92f63282bd5062576","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-descendant-gtgt.json","hash":"4b81d0ca9e2acce38918137068e82a2c5c1ca88b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-dir-pseudo.json","hash":"d3c6bfb3bcde6cf16e2205d48b71eb8a67cf59bd","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-element-function.json","hash":"533c05618f46c1fec11a0677c8fe3c3b6d46e5e9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-exclusions.json","hash":"19ce1c79e94d3833fe1f0f5fce900ef12e4233c7","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-featurequeries.json","hash":"1704eaebd70e59ce8c33966857df12e8f44dc548","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-filter-function.json","hash":"c53cb2347566f1203454ac2b899c38ceefe9b0d3","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-filters.json","hash":"3d4ef6d7658b71104b7a4c1da6e58e59c1312002","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-first-line.json","hash":"4d1940234c14b338570d3f4ce4d854e16f69504f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-fixed.json","hash":"263f05f7bf97f5c0cc4f4c4ae860c41b8472f2a4","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-first-letter.json","hash":"28f6aade327a2d3e31bf08b8306084a03b4752d0","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-focus-within.json","hash":"717ed21762f53e6eb54bad454b85626bd5685a61","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-font-rendering-controls.json","hash":"cc9033abdad423ec4b38323060f435a70269d350","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-font-stretch.json","hash":"fa2e997bc1efb7ee06666992460879304a468eb9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-gradients.json","hash":"a5e41cee136e646a671416d35646e4a2895d8fc3","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-gencontent.json","hash":"b905c0ca366aa857231a7d3c5e7211efa1d7c5fd","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-grid.json","hash":"694a0abde3cfe9f6aaf05ac6c88f8e3987c79099","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-has.json","hash":"b8c9b92ac601162c516a59a237fa51765f59e12b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-hyphens.json","hash":"c5956df39cb6e09fe43b24511ebb18c59bc86331","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-image-orientation.json","hash":"8a0bb0458c6cef023c364098eb37fddd3998efe6","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-image-set.json","hash":"079e7a5d66aaf6a49f0912555f22cacacd50297d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-in-out-of-range.json","hash":"0f67a2e3e3295ffa67ad565373d1e21c79354f80","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-initial-letter.json","hash":"dab768b00f7434cc89334c0c8ff2e4c198fafc3b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-indeterminate-pseudo.json","hash":"5cba4f0bc0eca139936014d31d97a45918b35654","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-letter-spacing.json","hash":"18e71b8e605184bdebd3f744e5db9495a594012c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-initial-value.json","hash":"627fda31ce51893312511a3bb9a2e1889b9edcac","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-line-clamp.json","hash":"49bfba005c0c73095677315ea272d6fe92ef7add","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-logical-props.json","hash":"76cf76d2406f439df096d2ceb4d1c29b9c630bf6","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-marker-pseudo.json","hash":"2345fe0d24eb9f639c5a0bec33387b88c0ec6a00","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-masks.json","hash":"8fe011bcf9ddee6e3420fa865a98911057ba8983","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-matches-pseudo.json","hash":"0635de2e04e22bfb316906ee04e7f01bd288fd5a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-media-interaction.json","hash":"16bf96d6e9c5bda25a397f6c55cc2d8e277df6ff","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-media-resolution.json","hash":"01f8ad121eb84fe2c610e31748733bd94f63199b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-media-scripting.json","hash":"332666565502f790540010719b4db70c395ca578","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-mediaqueries.json","hash":"cf3e361453951341fc845bf4203d4a8e9b7fbe74","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-mixblendmode.json","hash":"b17a0e99c0a7bc3853bceb9aa6dff0de12842450","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-motion-paths.json","hash":"02e6300178b1180919792a7a2b8232abfe0a0da2","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-nth-child-of.json","hash":"0cde11a5f6967a1981da44d6812578910ccd3cf8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-not-sel-list.json","hash":"952b94cee66147b619fda41eacf9f43e3cd4c039","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-opacity.json","hash":"ffdb9d950bf24a2733616f78c7ddb5ca50921896","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-optional-pseudo.json","hash":"546ef3235371fed36f0c490cbb25f45d41b52ae8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-page-break.json","hash":"cf8d2a54ad7e05b8c283c0b46e6ab3274f97924c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-paged-media.json","hash":"be39c6351bcb130ea3cee7379bb80fb0baa496c3","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-placeholder-shown.json","hash":"d11f182e509d20031172a0300ea59891144b0fef","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-placeholder.json","hash":"7e9adc0b91dcd09f8f9ec2cd36b036bb2da898ad","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-read-only-write.json","hash":"61f4d554e18e05cc5167aeb6e5342f84dbb339ee","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-regions.json","hash":"9f6192e9b24a163026b4f02fcd452fe8f918750c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-reflections.json","hash":"73eb2530918be13d5d48f3c50e02d433db6bfeee","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-repeating-gradients.json","hash":"c6a6a191bd0c25c57005c937802b4857ce8ab9a6","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-resize.json","hash":"d1db577ede5a43bcb5d0b1866f850cafe019672d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-revert-value.json","hash":"c24f24477fef6073d734b94c716e14020f507342","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-rrggbbaa.json","hash":"1e7dc40c7d55ee1d206206fdeecd690bfbc585f1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-scroll-behavior.json","hash":"6ea328a64cbb7c986964113f54ae047334fe67bd","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-scrollbar.json","hash":"5ba8f2b2bea456ed4eccf03bab820c0b529736fd","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-sel2.json","hash":"0cc9daa87d10b68e9a71f73a80603346a86355a9","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-sel3.json","hash":"c50650f192f60cb0c2d936b4cc9ef0da1b33e53c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-selection.json","hash":"0181343d0de8ecee1e30b06588c6367afe540d1f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-shapes.json","hash":"f58c20b4a5695b4cbcb93b33ad252bb782127cf1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-snappoints.json","hash":"1fd3ef3a635cd13a4f51a0b4825ef4432ed8fd12","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-sticky.json","hash":"60a0950fd81820531a3f5b273e4644d73daba724","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-supports-api.json","hash":"c9bc7a422adf1b8f753267bef073eb0cc07acaeb","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-table.json","hash":"0a94cbbb671ef6286f4976d244463c4ee7a58587","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-text-align-last.json","hash":"18cacd7e0cc02f43ac9e85ca8969861b646d3884","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-text-indent.json","hash":"c56374325a7238a649e454ba0dbd2b63db837b26","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-text-justify.json","hash":"e21a2cd88a690e353bdbb4bf8d6e9e35b62e4785","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-text-spacing.json","hash":"60d10b455fbf84221a8c82a2d81ac7cec22545f9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-textshadow.json","hash":"1b1dfd036d45cecf3a011dcd0a197fbbf1f7bfc9","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-touch-action-2.json","hash":"48b9d6151f3c1f55d6ffdbedf21d4b43f359a393","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-touch-action.json","hash":"56b794b8893c5ae0cbd05ecb6b875723bbf4e856","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-transitions.json","hash":"cd355e051a7e919a9e82b36c285ed0a295c2470f","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-unset-value.json","hash":"88792f2cf2429157ba3a8ba49e089a718a81cf89","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-variables.json","hash":"29e1058c1d6c4928925b1b9165b5202639235e5d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-widows-orphans.json","hash":"c6799cee6c958c4eb70234269f935b7e79ef86e7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-writing-mode.json","hash":"663ee062e63b144645002a04e722b0eaf39d09d7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css-zoom.json","hash":"0a1f054b266f998285ddaa93245719e9714f9af4","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css3-attr.json","hash":"d8dfce12f72903f8c3e6e72736626955362b2c70","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css3-boxsizing.json","hash":"46bab52ad024130a6431919b7ae646f9617d7363","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css3-colors.json","hash":"9b16d28226112592c7309578493a58a5dcf6615c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css3-cursors-grab.json","hash":"56bcd23c9237387b14936c742daf7db8b0cd9c30","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css3-cursors-newer.json","hash":"6197db2d6960cb2881c0ee336cf9dcb20f04d1df","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css3-tabsize.json","hash":"b2adc6b9e74c4367ed2ea422982d57e982c3f812","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/css3-cursors.json","hash":"4f43a9df68e3d22fd6edac4c4de51dc644c21c72","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/currentcolor.json","hash":"1e71217c83865ffdbdd06aefd988e0001c58e0a5","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/custom-elements.json","hash":"c8b243ace33171096c2998f57f8c989b94fa118d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/custom-elementsv1.json","hash":"0ff4692a78ddefd6a0537b96bacdcf8746fdf07b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/customevent.json","hash":"6d29334444ac898682293b84a89a1c05b730ab55","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/datalist.json","hash":"ba7e66694ddc7e974ea62126a9b23ebf7248cf29","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/dataset.json","hash":"025cb94773e0d1a432de5574ce285eefc32bd8b5","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/datauri.json","hash":"1ce89095482e9bf113f605bc5dd3f72af0892b30","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/details.json","hash":"aa9fcfaf0376bc2eecd126c521d4a2c77d8c94de","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/deviceorientation.json","hash":"caa1fb984e02d3efd450e047c9d3a53ed2b807ed","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/devicepixelratio.json","hash":"a4986b2190cbf320a01bd86b404ff01e81d1e52c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/dispatchevent.json","hash":"0c51801be066a97e64fc817f05b4b90d189fd181","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/dialog.json","hash":"d13656229c0a7f9c893e0420b0ad01e76dadb025","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/document-currentscript.json","hash":"0655c97c675f957f5755a036917f8259925688ff","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/document-execcommand.json","hash":"e436412e14bf420e7c3b6720577ba1b25a8173d0","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/documenthead.json","hash":"1af6cdcaa68f7c0028a4d173f4ac5f1d285123d2","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/dom-range.json","hash":"c6019fa8126f56d2568dc7d70cc70e0599435879","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/dom-manip-convenience.json","hash":"a4978f355cc3de9b30b4f6cb09536b07dd615571","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/domcontentloaded.json","hash":"1690b82fd9b78f4d23427b7ee6fa6c4a6577408d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/domfocusin-domfocusout-events.json","hash":"ea6fb67ad31b29a550eab8376707a7b12e83edc8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/dommatrix.json","hash":"815adee73b6b4461a6000d1a980bd422e8e665b0","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/download.json","hash":"0d336194d48b2aec5f39286a90530301d0ba610f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/element-closest.json","hash":"0fc239f3d4f7bc9f7ed17f989ab9d2e7991a029b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/dragndrop.json","hash":"f8d3618a2ddb4860967f41f9f93f04f44658bb47","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/element-from-point.json","hash":"7a62cab8517c75c4d4c81a55077ccd0e43e9c387","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/es5.json","hash":"2b96a9a448b497eb2365e79f79aa439384186919","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/eot.json","hash":"381e17e5d95eb5f8e551e7789a4faa67f8f82d5c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/es6-class.json","hash":"2e0b4f0f4ee5fc9a9be2e6581655c122b20aa2c9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/es6-module.json","hash":"974e573768eadbad0e11ae78a7e0303a31d24635","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/es6-number.json","hash":"fd3423418b0f77cc40f40cd9319969c619d40e10","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/eventsource.json","hash":"5228bba5983428173816d9d807e8c8493f9fdbb1","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/fetch.json","hash":"77254335c46a5cff2ab84258dd8382c51c4c1d17","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/fieldset-disabled.json","hash":"c63cc869078206a9fba388fbcd02af5310bc6b06","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/filereader.json","hash":"3db12891a06b2e5fe5895139e7d81ce60dcdb192","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/fileapi.json","hash":"2e1dda0d30ac0acf05ce968e9483995b91bef0b1","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/filereadersync.json","hash":"c7efaf5dc8d23e86d3ecb21c13a004da142cc3e8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/filesystem.json","hash":"3adb3b7525ab998e9250be71dd83d8d6504e6083","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/flac.json","hash":"d13fdadc926f7710bf32339acec04ccb05a4aabd","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/flow-root.json","hash":"73bea61bd3eefd305a22a55273b671fae3fad0d7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/flexbox.json","hash":"4f434d246204423021c003f515ba6065e2d1c141","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/focusin-focusout-events.json","hash":"8b870c763dbb861262dc8f955aa5fec047d3b96c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/font-feature.json","hash":"2d2dda143ce6b5eddc725a0f4e8143baf4a7e4d5","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/font-kerning.json","hash":"b8562461fa44894298468aaea8868455b3513e54","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/font-size-adjust.json","hash":"8e011e764c67a2119b8762cc6a483ec031e23e0d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/font-loading.json","hash":"16a2bf8f8d8cb91f13e63a4afa5a59206280d500","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/font-smooth.json","hash":"c0634b3080e49c84483b6f82982aee6a1bbe684d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/font-unicode-range.json","hash":"6165e5dbe047aaa96ba2b0cf80736e8d104a244a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/font-variant-alternates.json","hash":"8e6318b7de76fd008f09643cf1c138f27d0e5903","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/fontface.json","hash":"d72998133c087017d5954392426940acdc058acb","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/form-attribute.json","hash":"a68dc4142fa7fd7bb0c9979ebc7b859457bab7c5","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/form-submit-attributes.json","hash":"c78564ea843ebb6123f3f654d4a30ee882b45b68","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/form-validation.json","hash":"e3fe1fa1aebfb5d43c9bfecb3fea92db667dcb46","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/forms.json","hash":"ba717464938a0a20ab2bc40d2113faa323462568","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/fullscreen.json","hash":"edabd8111205d1a461deca82795c80d3d9c2e512","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/geolocation.json","hash":"cb229825df0a7b4f5139c43a5cdd57b34508fe11","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/gamepad.json","hash":"ca9b512d5059db1c87ecea040f0323accd62b8b1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/getboundingclientrect.json","hash":"e2a027069e8831bb9028eef882d43d0c3ab1f988","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/getcomputedstyle.json","hash":"073768d50534ecdf4c789a736b66de78cf301977","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/getrandomvalues.json","hash":"febb1a605e306ddd45e2dfc0b0338ef5c7e27912","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/getelementsbyclassname.json","hash":"fbde91fcdcfe83da79bcd285b663ad9cbace4989","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/hashchange.json","hash":"43768a2b1b5de7e1fd3a8f3b198478710b95e173","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/hidden.json","hash":"1b9c7e7a5f129264a463971a3a750d7154e72050","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/high-resolution-time.json","hash":"59ee2d4b134679ffc96719accce0bfd39bb1fd1c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/history.json","hash":"5ecbac3d113321a3e28f00f1127cde34f84736c8","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/html-media-capture.json","hash":"6d0ab53fd91440a6ea44734287fe74af80573933","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/html5semantic.json","hash":"4c12fe9fd6c1486ee8a3c039c5827f1bfd07eefe","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/http-live-streaming.json","hash":"5407c7a89625c8884fde92e34c7b9c0b4543f83c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/http2.json","hash":"0c64e78395726e13e31aa922e67f15447b2f154a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/iframe-sandbox.json","hash":"1fb44fdd937b9ddef3d3f422d5b97c037dea1b7f","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/iframe-srcdoc.json","hash":"e439096376934d466ccc812de6dfc29c6abfda04","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/iframe-seamless.json","hash":"e0f8af5380c3fc322391f988c92e2e3a52484624","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ime.json","hash":"6b81793af170834c1a96d1759129354832cce574","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/imagecapture.json","hash":"fe89828a8a0e1de543309e01df38db92cdea3c83","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/img-naturalwidth-naturalheight.json","hash":"21c230fb560fae0bf47629eafdfa63cd7cfaff14","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/imports.json","hash":"616e286436406e8051b8a431e5001314fb5ef7ee","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/indeterminate-checkbox.json","hash":"71a621b4bb2fbb6fbe1115b98a1f3f8a99e21893","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/indexeddb.json","hash":"dcc60242071497abe00678c11f397a2dca01d5d8","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/inline-block.json","hash":"aea3d1adbbb8880bee1879c9aad9ceda2e0d58b5","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/innertext.json","hash":"e36ed2602817ee07ac66517a103d1b7d079609a8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-autocomplete-onoff.json","hash":"de57f615ef2c6be1dd0f838385719977d4150b8d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-color.json","hash":"80193b3c0e4c7cc8dde95a82a6352d7e5b94ce6c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-datetime.json","hash":"0d4b31edd3fa5f68251280aa37eaa508c4451287","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-email-tel-url.json","hash":"273f61c767d253e3ff53449374aeb7d12fac0ca2","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-event.json","hash":"b1c679d0e47fb2f7ecf7da0917b6d784315e1d88","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-file-accept.json","hash":"b8ae3dbb737952e45c5b70042224ae032323738e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-file-multiple.json","hash":"67d6b488453d50158410ede9d80715383d076e98","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-inputmode.json","hash":"cb4c89fa362063b5f7877236b2088c94eb3fb7b5","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-minlength.json","hash":"ddd47fcc44b144264607f79d93d99be9fdccbbe2","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-number.json","hash":"4f8450f98cdda690e390c254c2d4022ef69baa81","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-pattern.json","hash":"6c392b4e90d6c392898927a218eeafae7acc67aa","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-placeholder.json","hash":"e0c7533ae99f285c92d437db2ab75f2fa51e1a07","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-range.json","hash":"7b64075f21dc3da7c504363ec355312b0e1e9fd1","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/insert-adjacent.json","hash":"76aa794b7196860c7cd3eae0e1de11c52cd60522","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/input-search.json","hash":"a6272867922f787a84c8a5e7ca69541cfa647423","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/internationalization.json","hash":"772ddc220a8bdbc49ec5e05b62011fde68298c37","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/insertadjacenthtml.json","hash":"d4bd7f10e4fb08b5897040c9818ff209c3eead9e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/intersectionobserver.json","hash":"02ba5cbd82e337ef54375f0f78189085ed9c4ddd","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/intrinsic-width.json","hash":"4699233cb0cfaaf1571a2b1f6b405a0dd46b748c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/jpeg2000.json","hash":"e91f3ba1a928b3c12bf9118f50c44aa99df821f7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/jpegxr.json","hash":"c42d96da14705159799da33c0f65607da725e389","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/json.json","hash":"3a5e0e8f83bcfe6881a04dc496567163b6bcad98","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/kerning-pairs-ligatures.json","hash":"cb0eafb24e268ba14d1be5a04249d80f639ea1e7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/keyboardevent-charcode.json","hash":"db2222da628b35916aa199837cd3f737bf275a3b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/keyboardevent-code.json","hash":"89de171351ab0c5eec4575fc906b86374dc6457a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/keyboardevent-getmodifierstate.json","hash":"742cefad221020f623834ca43ad71bbb23e0e696","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/keyboardevent-key.json","hash":"9326f2a4355c51fa8615d54df34cb06230733c15","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/keyboardevent-which.json","hash":"b4c0983662ad3fb8757fd17d571f5d22bb6ca374","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/keyboardevent-location.json","hash":"a4211162dfa39c97a745ff278cb724e3b6b91352","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/lazyload.json","hash":"be4163aa809c2fbd7b5d68f925408f6fc16109e4","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/let.json","hash":"6af27ae26487d2da9b915527c02482c4385df8ad","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/link-icon-png.json","hash":"55f980a11e0c2146481acce8b00cfbbe8bfb89f9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/link-icon-svg.json","hash":"4e5daeaaec47b835e418bb0f216a9ffa44f95212","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/link-rel-dns-prefetch.json","hash":"af3ebc7e59e9349b2e174795c6d0b7625e47fc15","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/link-rel-preconnect.json","hash":"db0930dfa5dbf7e1008325592a269223931b6f30","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/link-rel-prefetch.json","hash":"38a38a50b5218ff729a08a5274e8738a769791de","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/link-rel-preload.json","hash":"3f6afb5bd99051c275160c112a5130ee50496f8f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/link-rel-prerender.json","hash":"64e7ef176d3b8f875642f14aac9e12fd7a1034b3","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/matchesselector.json","hash":"c6536405faff0662cc6bd8898419bf667b83ede9","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/matchmedia.json","hash":"5a7eeaaa1b6d6e2d6865e982cab07a700d9cd4a9","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/mathml.json","hash":"5f719da44c9536e501f35800f5f9825b3a874a14","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/maxlength.json","hash":"0c5607a5872285b5c316d009bc446db536cbc219","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/media-attribute.json","hash":"b0a7c4aa86f16fc902f2d9b8ed2f024dd760db4a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/mediarecorder.json","hash":"50693f73542c1f796131b18567ba44012fd3f733","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/mediasource.json","hash":"f61262ddea36a4d94e64bd0c45e5ee3798f8162d","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/menu.json","hash":"6125450b793d17631037d6d7e028ebc3e844c8c0","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/meter.json","hash":"9cc9f6716d5d48ef3f222bdbaa5169d3c6f4d1d1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/midi.json","hash":"149cd7ce1ca200f1b49521b2855ae8f93c5ec31b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/mp3.json","hash":"5e59791e317a1b9a5a51e32ff4acb9a563f70bf0","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/mpeg4.json","hash":"aa9a274f9f5d5cce69f3779ac4ea59b0595a749c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/minmaxwh.json","hash":"95d48778f81371aa72ed5b4409ca598f77ebd139","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/multibackgrounds.json","hash":"d63ca6d3e34ba949f7e0eace6244624b9f56293e","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/mutation-events.json","hash":"f7d2186175b275ae885d7447e12a72b07515b858","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/multicolumn.json","hash":"9185c0fad7a6188a7d9dd441fd415b95cfcc3611","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/mutationobserver.json","hash":"906068dac3c456548cfa76a2f85731a367a17aac","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/namevalue-storage.json","hash":"e2fe50fa453670531eb8b81b79f20167fe9b690d","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/nav-timing.json","hash":"133d97be6434e6aacf4116213c211fa6f805e57a","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/node-contains.json","hash":"83dacdc5144eb6a42c495f053d4f394da286ea0b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/netinfo.json","hash":"a42e2c2c8d73984fad04807583f3fa3f5929d32e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/node-parentelement.json","hash":"0ee252e673a28909f8fe750b6dcc62b7a9c2447a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/notifications.json","hash":"2cfc4883ec55c053af9f51a3b6203927aaebbe1c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/object-fit.json","hash":"90d1eef05eb65c19955a2c76fade3b4be0a42958","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/object-observe.json","hash":"6f6a5766ba1f0dd3f5b8e78b72b5013173e35133","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/objectrtc.json","hash":"5c96294f2c94153bc3c81cbccdcce8444ff4b4a5","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/offline-apps.json","hash":"e2a28632af0f4b44ca198239755d32ed69581744","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ogg-vorbis.json","hash":"c6dade645cb0de1df9f50237fa72b27320941bfb","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ogv.json","hash":"c7ec246714298c88a330b738eb3704b667d51186","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ol-reversed.json","hash":"842a6fa802d297e4cfb65e72899033e3c44f0cad","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/once-event-listener.json","hash":"2169b85c06d24de9d723b4919b682bc60f7daabd","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/online-status.json","hash":"cef97f1bf6a33a17e4b27241e3132e3f40dad879","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/opus.json","hash":"0a3a1ae89493542c81ec0bde7727557f67b43199","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/outline.json","hash":"e04a55c3ca234e5f680189913341c87a8a786a4f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/pad-start-end.json","hash":"c2e5cb1bdbbfdbae2faa2e894bf436e5e7bbf15f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/page-transition-events.json","hash":"9ee7f723ed0d35c6af9776e5070b4084b55ad905","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/pagevisibility.json","hash":"5b1978c24ba3ed28611574bce748edd4664fc61a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/passive-event-listener.json","hash":"9796c70798b71856a9f351dd657b0284962056e7","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/payment-request.json","hash":"d2a904318a83b8757375630820a8ccc9f43fa60a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/permissions-api.json","hash":"e68626e5d38f9ca71caf5015b134c9398605273c","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/picture.json","hash":"f0c328c2d7a29cd46837e3d95198e168dc91cff3","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ping.json","hash":"784b9767bdfc43dff5465df7003e8efe803f949e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/png-alpha.json","hash":"32762318bd1c34986442e320d2f7e799a2bfccc8","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/pointer-events.json","hash":"57f314522acc66591066914b2cf4054d6adc9bc4","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/progress.json","hash":"e1f3eb168dd96eeaa84e0cea7735182f67422576","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/pointer.json","hash":"7519ba2cfb3d61017dc8269e95fbd59eae6845de","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/pointerlock.json","hash":"abb921668c8e372e9de01d9f84282ce65620fe9b","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/promises.json","hash":"266c50b8e1eba76200064f9c22dea5c1eabc1340","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/proximity.json","hash":"8b17423329624713043ce6032c2d965a12a463d5","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/proxy.json","hash":"316fbe179d2bea1bdc6810d8b905bcf986d69f06","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/publickeypinning.json","hash":"7aa65c1c95d6302ea76c8e97a6042624768aa187","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/push-api.json","hash":"6a04b44d3243bd0ff9a5d277050e9f4c732c622a","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/queryselector.json","hash":"4bf1c0b037f0e1e9752ea3765ce62273ab775edd","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/readonly-attr.json","hash":"f4c80d204f1c6843bac271b7898a5b25355d9ab1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/registerprotocolhandler.json","hash":"d09cb586ff70d42a3d360666362439c5d5f4ce8e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/referrer-policy.json","hash":"6170533aeb900c2b9d9f0c21ec7b4231ad4e9207","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/rel-noopener.json","hash":"bbc44824871b37a1e741d848706ce1d43e1186a8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/rellist.json","hash":"eed131b7b003c0857e0f795d17e0c17ab3ba9db3","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/rem.json","hash":"4e64088e6350d7e105cf5e59b332ebb1f3ef66f9","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/requestanimationframe.json","hash":"30fda28dc2a51f39857e75754b5faea2fbf3fcff","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/resource-timing.json","hash":"f35449f9ea728f5f7f499ea6612a5e65e2cb9ca1","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/requestidlecallback.json","hash":"3a0b60a01d90687897b87040ff9e75b06c7804c0","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/rest-parameters.json","hash":"5852eb7034d8942abecdd79f78219d3b26b8e0ee","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/rtcpeerconnection.json","hash":"bad2ce64fa8b844844068d5ca74ee208419ced43","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/same-site-cookie-attribute.json","hash":"b5bf9b3429db38dee509fc089a24380629dc2799","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ruby.json","hash":"7374fda6f104e908daf21d5c3fdf645140ba63aa","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/screen-orientation.json","hash":"9e9d0f237c4093e1dc2294d8f68664f04ac08f8e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/script-async.json","hash":"58813d8835d26884c4a98bb4e77cf6f8fca00821","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/script-defer.json","hash":"c7ac7a0a756a918769c390dbd1409a59dda8cf4d","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/scrollintoview.json","hash":"fe99405405a3007c8cffa9ac35403351d539f1a4","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/sdch.json","hash":"04cb7b26523312bbe5e6e373063e0347822fa6da","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/scrollintoviewifneeded.json","hash":"fd36a63dd201d25d9140e949a6315390176f1ced","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/selection-api.json","hash":"68889b9196ca172cc2e93733c8dcd614e4230001","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/serviceworkers.json","hash":"1dccb9bec121463296c0ceaffda4028bac1dd2bf","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/setimmediate.json","hash":"6a1c4e56c519c82df184d2e9dee6f9dc3129ca6d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/sha-2.json","hash":"2c27aa12b9d9eb996b72c77c4bcbdf03c67349c9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/shadowdom.json","hash":"511e64f46e2e09fbb1557b16392c920aa2be0ba9","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/shadowdomv1.json","hash":"afab2dfdc22d5bd4bb1107f272172db418550b22","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/sharedworkers.json","hash":"764c31b0b0e65cc3022a80b9f571d8fc88f4985b","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/sni.json","hash":"b1a622ccc628ca51001f6dc9bd33c865843d092f","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/spdy.json","hash":"9a5e438797d86c83a5d194a0988b14140d72f4f2","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/speech-recognition.json","hash":"2b01c75a86908530e338b75e97c2b640642ae5e8","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/speech-synthesis.json","hash":"ab0699d6507557208f6b2518e67aa2b5508121af","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/spellcheck-attribute.json","hash":"c5422727cf4c58b21e8648030157af7805c78241","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/sql-storage.json","hash":"088cf0d06fb90d850ca413e66b2819341dd9fbc6","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/srcset.json","hash":"d430e6a90afba035415b394bd7c1529726f293fc","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/stream.json","hash":"8768315db21ee89b40c6478388c468bcd954e0eb","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/stricttransportsecurity.json","hash":"fac090eae0eb1d9ecad710b03432bba8ac4dbe5e","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/stopimmediatepropagation.json","hash":"58e09063d55a376675455edfe6ddf1a70aaea4a9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/style-scoped.json","hash":"1bd9d952bbf1365e7cef39746df5920920a48a52","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/subresource-integrity.json","hash":"10ef59309a70f518dd07d7b3f4da9cb436f29e0d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-css.json","hash":"02ea3a02b85c0c1b070b0985defae7ab98fee4b8","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-filters.json","hash":"1f8ac1ab881b71679bb33356114242701f22fd51","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-fonts.json","hash":"dfa40527c564514771b5d6547bbd0ab075219bad","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-fragment.json","hash":"8e80564819e23613fc921a5f4bf52b3bed9f32e4","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-html.json","hash":"b66fd5ce7b6deef27f9f2e1daba5411f62761f31","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-html5.json","hash":"447be19a5eb3e7264fdf2ba72093a0d479dbe3fb","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-img.json","hash":"2f2d73987f9dd3b8743af7a260011b705c335ebf","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg-smil.json","hash":"23990e32ddeb90b21dee791efa5d6676c9bb357f","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/svg.json","hash":"fd5c7a83da5a62b12a5041a8ffbe1a45d24c61cc","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/tabindex-attr.json","hash":"e999c688dad32afce27743f6d137e8a25cdacf65","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/template.json","hash":"a9ba9ae44f9d303f9cbb45ee483d72a3db62fdbc","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/testfeat.json","hash":"44baede8f126d6f35b1ac04fe5342202bd1517b6","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/text-decoration.json","hash":"c5359a48cf880d7c7132c911988f2742b9485d5d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/text-emphasis.json","hash":"01611cf50eac92d0069c598a714bb35d86a7858d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/text-overflow.json","hash":"1527f2bdedafc9dd38c1111e5f5829c03eea1542","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/text-size-adjust.json","hash":"ebec0f1bf66a9f17a74e37de50d5452ea7bd0fb4","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/text-stroke.json","hash":"98a16f78a152ca353c0b00321c00293b088eed4e","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/textcontent.json","hash":"825b9cab32e6dbe27335c1a10dd6a6cc1b0bb6fe","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/textencoder.json","hash":"155f938aec2469232da375fe076447eef6ebe277","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/tls1-1.json","hash":"5077dd80c711f5bb2d7c9fb0a68ff90a8c6b7630","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/tls1-2.json","hash":"fc0a8225f96ef5762cf195a6de66b10fc95c188b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/tls1-3.json","hash":"6cdeefa7d917e70d984a4323ad3f5f07fe3f6998","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/touch.json","hash":"595fd17ae66f103fada87f18716b6d831a07fd6d","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/transforms2d.json","hash":"e042fa845adc1a815ddd9c96b6539d2b8cfebf79","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/transforms3d.json","hash":"77f7e83d485cf34081526efdfe6dd7c24a81a6ee","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/typedarrays.json","hash":"5d529e473f141deb5ce053860fc4913bb4ec20e0","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/ttf.json","hash":"a080f660017824c816e0f6cdabaaa8cb2bb152bd","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/upgradeinsecurerequests.json","hash":"8b8eae45e1663eba73681dc99d0bf5b0fdafaa37","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/urlsearchparams.json","hash":"d389381c36bfcc8b4a0173b46b9b184884d5836d","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/u2f.json","hash":"b7518be59aca85cee0bbce6dd515c9991962ab9f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/url.json","hash":"8dd4a124b949348437b90931adf2c33a7c2398c4","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/user-select-none.json","hash":"e12427631fb6f4ff87450cb90fd4956a0a815dbe","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/use-strict.json","hash":"a298fe9426b631218190ea9946af4790f74e2e42","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/user-timing.json","hash":"17e3cccc3a2c775b78fbccd394a4374ccac90687","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/vibration.json","hash":"730ffc414b693d9a0df4d30fa8f6e1293de8de0b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/video.json","hash":"49fd22ef84c3f8e03a0294c5ed20db4af48c0c64","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/videotracks.json","hash":"f2cc4231488143cf9d3acb0af0b7be239949399f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/viewport-units.json","hash":"df2343372a2f6995d207f646279215aba26cee18","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/wai-aria.json","hash":"081cf81859e6dad0bbe362afc81bb2a42cc1941a","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/wasm.json","hash":"6abf783ac49c9b1ecf44f0378ff22d9ec77102f6","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/wav.json","hash":"434c967fb20b7e29954182ff5943c8ebcdd0d28e","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/web-bluetooth.json","hash":"2bba61556b6457a7b49abe265356cc4533fd489b","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/wbr-element.json","hash":"5f890ca0037757c9708edbccce168db800b29a85","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/web-animation.json","hash":"74a3d3e11f66a8b1d8840ca71b2de3604621fac9","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/web-app-manifest.json","hash":"f5bd318f30412e2be587fc0e517d75b1af31600f","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/webgl.json","hash":"27f144a9edfe898027772ba35e7846c26522e87c","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/webgl2.json","hash":"26ad5e30a9df7908985ab175129eb8fe332035ae","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/webm.json","hash":"282a87ec22ed88e538a6031f30e4bea6d16319a4","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/webp.json","hash":"63f84749c5a5ff2cb7225ffc41fa8663f3124f47","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/websockets.json","hash":"3d516784fc29bdd2f8a52ea8a7359147bc8d44de","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/webvr.json","hash":"3780f43631693c13cdceb670c9b3cf9c4a062d45","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/webvtt.json","hash":"2a7af91518de3616436a286cc8099dc03d0e6c74","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/webworkers.json","hash":"9c4c00b04b936e0c214550a273762896a1c5f242","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/will-change.json","hash":"5e0c91a108eb42b9b4601b1d7483a59e4e915dd4","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/word-break.json","hash":"b65958ea9e3af9e98e4be5ef880380846a090bb0","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/woff.json","hash":"8701a2f47504893b9a21af47c1e39bdf7f9007a4","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/woff2.json","hash":"6a00cd11898c7664b97f0c2773140fdccb0187e4","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/wordwrap.json","hash":"81e4d5b038cdc387bd01c2b53e7dd0451c5b1f04","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/x-doc-messaging.json","hash":"784a9dd67f698d6a1b2bd6958ca2a04513c0de0d","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/xhr2.json","hash":"69fa92156d38a7504cdc132fde22bef4151eda11","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/x-frame-options.json","hash":"efd8ed2b9fcd4a62ea34c185f8d87da0d397a257","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/xhtml.json","hash":"cb29c8996dc421d1cac472bc3caf28d3a14092b1","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/xhtmlsmil.json","hash":"83270a30d03542befc79c1cdd307e1ccfb9fa199","modified":1486446686000},{"_id":"themes/gandalfr/node_modules/caniuse-db/features-json/xml-serializer.json","hash":"8afaeaac99e308e0424201195d5761e1e9918501","modified":1486446688000},{"_id":"themes/gandalfr/node_modules/dashdash/lib/dashdash.js","hash":"bcac2fce732aa9b1084e924d9ea49189d20cf60c","modified":1464847153000},{"_id":"themes/gandalfr/node_modules/dashdash/etc/dashdash.bash_completion.in","hash":"749ea2069b183cd2ef4e83f496ca754eef30c3fd","modified":1479854012000},{"_id":"themes/gandalfr/node_modules/cross-spawn/lib/enoent.js","hash":"6318a907092ab4ff4ff31305e4a272f5fd877a9e","modified":1463577802000},{"_id":"themes/gandalfr/node_modules/cross-spawn/lib/parse.js","hash":"09b00a1570ff6306b17f50febd0cc1ad9bf2cb2d","modified":1463577802000},{"_id":"themes/gandalfr/node_modules/cross-spawn/lib/resolveCommand.js","hash":"2d7efa07faaa5429bd7ac215ec720fcc3d0657e9","modified":1463607148000},{"_id":"themes/gandalfr/node_modules/cryptiles/lib/index.js","hash":"e5c479d1d0966b82298d86669aaa5ed4bcee4fb7","modified":1441778892000},{"_id":"themes/gandalfr/node_modules/cryptiles/test/index.js","hash":"c4d4151097d486ade0ee21bfd91297dafda16e88","modified":1441778892000},{"_id":"themes/gandalfr/node_modules/delayed-stream/lib/delayed_stream.js","hash":"097ab12e3837896d11d3f1d2c7a891d177b493c4","modified":1430160544000},{"_id":"themes/gandalfr/node_modules/dateformat/lib/dateformat.js","hash":"2dc621400a74d68b3d76d433e2a562a82178f1b0","modified":1468365741000},{"_id":"themes/gandalfr/node_modules/delegates/test/index.js","hash":"f1c8ec4cfea947c03d8dd7c2ce43e7e878794284","modified":1450122923000},{"_id":"themes/gandalfr/node_modules/deprecated/test/method.js","hash":"3ed58f8b49f0bfff2895fc14cf198d5c0e340e3e","modified":1390538713000},{"_id":"themes/gandalfr/node_modules/deprecated/test/field.js","hash":"499b43fec46cfd33a5e7e6594296643224c324af","modified":1390539005000},{"_id":"themes/gandalfr/node_modules/duplexer2/test/tests.js","hash":"a5c00419a5e228b8e09691f40d13c3a25cf00c9f","modified":1398042537000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/lib/LICENSE-jsbn","hash":"4f94910918b5e57f3e55c7387f43b0d6293a4319","modified":1394075812000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/lib/ec.js","hash":"d9a60c831fe91bd2c62ff3e3c9675b0379ef504c","modified":1448288163000},{"_id":"themes/gandalfr/node_modules/ecc-jsbn/lib/sec.js","hash":"b1632526290dfddc063f05ac6ed29cc40bd9e221","modified":1448288300000},{"_id":"themes/gandalfr/node_modules/extsprintf/lib/extsprintf.js","hash":"cfe80b99a5d428a0f357ae11e0a067c46ebdbb2c","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/extsprintf/examples/simple.js","hash":"5e7b4892b3625f689d9dcb5fd2e43140f21d66a4","modified":1360175237000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/lib/reorder.js","hash":"2def067b12e5529f98344938921b9df6cb2bcb10","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/lib/respawn.js","hash":"818951b6fd0569ea5bf82acefa9b505deaa15604","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/test/index.js","hash":"b142e964c2eab417572e2680649354cf9832ad7e","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/fstream/examples/filter-pipe.js","hash":"a5b494a4fe5738f5b2c7a3df3d3e7c9685e8cafb","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/fstream/examples/pipe.js","hash":"ff0ea1e9b09953cd0e96420f419e65a9fe3f598b","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/fstream/examples/reader.js","hash":"9d828670e866e34dc8212c564403f78c98558c80","modified":1423521976000},{"_id":"themes/gandalfr/node_modules/fstream/examples/symlink-write.js","hash":"a795df07387ef7c89d4d5afb33722f11b68dcdfd","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/fstream/lib/abstract.js","hash":"237e8d46b8a6087e7b9b46fd14537cf6f26b79ce","modified":1463086097000},{"_id":"themes/gandalfr/node_modules/fstream/lib/collect.js","hash":"c6cb9a24c52f32b6d115234f44124999dd413b84","modified":1466188318000},{"_id":"themes/gandalfr/node_modules/fstream/lib/dir-reader.js","hash":"72161bd3e3576549f5f9dc7970aaaa09bc764737","modified":1466188318000},{"_id":"themes/gandalfr/node_modules/fstream/lib/dir-writer.js","hash":"3746846974dbbdf325f8d15ea8ca0d012fa5dcc2","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/fstream/lib/file-reader.js","hash":"2b6f5039d467b080fb92abb57a673ec97877e9c7","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/fstream/lib/file-writer.js","hash":"f4e66be6242777e3c38564125ab626edbca1f3a3","modified":1431108280000},{"_id":"themes/gandalfr/node_modules/fstream/lib/link-reader.js","hash":"e9f6cc283c032c5c21768d76ff48651f8169b530","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/fstream/lib/get-type.js","hash":"ef95fa07f3c5af2226d74feb0f66fb87df5e288c","modified":1423521976000},{"_id":"themes/gandalfr/node_modules/fstream/lib/link-writer.js","hash":"74b0816529379a9ffa93c1ab866d7399c63eb136","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/fstream/lib/proxy-reader.js","hash":"1b24a353bd457db6a84dfde4feecf0a9367f15d9","modified":1425739630000},{"_id":"themes/gandalfr/node_modules/fstream/lib/proxy-writer.js","hash":"ba51acb8e3b5277c510cf9f97fb3d07f0567f3a4","modified":1425739630000},{"_id":"themes/gandalfr/node_modules/fstream/lib/reader.js","hash":"323979daecbf47fba50278e908c2f77c3eef52bc","modified":1463086095000},{"_id":"themes/gandalfr/node_modules/fstream/lib/socket-reader.js","hash":"11296e436392e54d4b2018c524c580f794b00486","modified":1425739630000},{"_id":"themes/gandalfr/node_modules/fstream/lib/writer.js","hash":"580eff911f66640c7caed30bcfa224ac91c9496d","modified":1434695855000},{"_id":"themes/gandalfr/node_modules/gaze/lib/helper.js","hash":"0acbbb5e935285414eb1fc27b7d3e7a9810fa6eb","modified":1444075561000},{"_id":"themes/gandalfr/node_modules/form-data/lib/browser.js","hash":"0ae55bb7ee9e39bd3dda8d9b6e6d6bff3855d121","modified":1478555747000},{"_id":"themes/gandalfr/node_modules/gaze/lib/gaze.js","hash":"6d876f2962c16afe6fd951263b67dd710bb5d594","modified":1444075943000},{"_id":"themes/gandalfr/node_modules/form-data/lib/form_data.js","hash":"133019013ecf8befeebd3af8739e0003753f665b","modified":1474781177000},{"_id":"themes/gandalfr/node_modules/form-data/lib/populate.js","hash":"1808bbf4f1478a79ea4f00b38bf46983e48c0ff3","modified":1472196493000},{"_id":"themes/gandalfr/node_modules/getpass/lib/index.js","hash":"3e1d47c5742292c6964267fe3b1ef54a5918f419","modified":1461907053000},{"_id":"themes/gandalfr/node_modules/glob-watcher/test/main.js","hash":"5b53a8ee5ccf9edacf55025a523722dae8021f81","modified":1397537692000},{"_id":"themes/gandalfr/node_modules/globule/lib/globule.js","hash":"618ff718047feb15254e5cf24ce5af4fd6dc1812","modified":1365709870000},{"_id":"themes/gandalfr/node_modules/globule/test/globule_test.js","hash":"4564e9adeb6bb1e1e67da9dc664a574d282de006","modified":1365707547000},{"_id":"themes/gandalfr/node_modules/graceful-fs/test/max-open.js","hash":"52fbbb9ea8562970586fbf626f93605be18adcc8","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/graceful-fs/test/open.js","hash":"0b8ee05d1a18c3ad4440a7ee0086874b0f1feabc","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/graceful-fs/test/readdir-sort.js","hash":"5b03b7247f028d2af427b4f2a9cd8447c72b8aa5","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/graceful-fs/test/write-then-read.js","hash":"61aad474142557853ed11fc10bece0f9625f8e41","modified":1471758970000},{"_id":"themes/gandalfr/node_modules/gulp/bin/gulp.js","hash":"6febf2868b92a817f55f40172cc25b742da27e5e","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/completion/README.md","hash":"62a12a981d8835b4479ef84dc44d756306595e85","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/completion/bash","hash":"8df2671db648b408b7df9bab678012580d31fc32","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/completion/fish","hash":"8135f5476a88fffc0dfb8923ec75948145044953","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/completion/powershell","hash":"a9c154397cd0a2a704118ad38c8fd9c3d9096934","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/completion/zsh","hash":"d485e8a1b831c5086d28bb75909a220d019d1621","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/lib/completion.js","hash":"9fbbb6da615c65fd887c6e8134496d15bc6f3078","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp/lib/taskTree.js","hash":"f7eed3da988aede6c53aa9183dee7d541140748e","modified":1454273747000},{"_id":"themes/gandalfr/node_modules/gulp-sass/dest/test.css","hash":"d7f99c417864208c44950b7815f831a7dbf0b3b1","modified":1462883791000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/PluginError.js","hash":"b09ef348b7db6c5c018038593c41a6501dec44c6","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/buffer.js","hash":"ec8db5cdded403af89dd6b0079f310ccdd168d13","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/combine.js","hash":"50bc26edf62345096a7d672ea00787e0ec90af2f","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/env.js","hash":"d0dcb852c1c28a46a706a826519c4c85f36e28a5","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/isBuffer.js","hash":"fb914232a9ca134b8b6522c33c894b843db29941","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/isStream.js","hash":"b745b237603da7529c86cfe508e516329f83c396","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/isNull.js","hash":"9af85a81bcaf79ffd0ed2de0b5586991a7651ccd","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/log.js","hash":"b6ac2e9706245d5c2bde51400d8a8b97c13c0293","modified":1445310390000},{"_id":"themes/gandalfr/node_modules/har-validator/bin/har-validator","hash":"702b45900cba1bd2ee74c4df1a5b51db0aeab0d7","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/noop.js","hash":"bba61e09e07b7ae3bc2bc8fb5dfbdf3bd7c334fd","modified":1440739656000},{"_id":"themes/gandalfr/node_modules/gulp-util/lib/template.js","hash":"fc11b01b78971821c651e8033fd48082697a9be4","modified":1441922306000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/async.js","hash":"864f1787c6e6521d6495d337d7894d844dba24b6","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/error.js","hash":"e08730fe6ce867fea7b32e8e7c6f9266b7fce592","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/index.js","hash":"099021ac86914964d97afb35a9594e29c136bd0e","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/runner.js","hash":"c0c49bddac013682d52bfff6065cceae67474fb2","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/hawk/dist/client.js","hash":"78e967c19bffde7606b06c595c41e83cde6c0d53","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/example/usage.js","hash":"9c61ce5a46828c4c26b93e06141dbee8679c33a2","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hoek/images/hoek.png","hash":"61fce871b635b32957b3c8c4e3c523eb2b2ac58f","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/lib/escape.js","hash":"5ccf43b55ca0fbbc307a91235127af5601bd1187","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/lib/index.js","hash":"cfd3b556015082fc786d83c3e85ade81f448aafb","modified":1442857232000},{"_id":"themes/gandalfr/node_modules/hoek/test/escaper.js","hash":"206886beb62a1d9d907b3838b20eb2037826167a","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hawk/lib/crypto.js","hash":"06d65d9f325d49f11a0bf223dc683648f6fac977","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/lib/browser.js","hash":"d4f08ffcfa0012fdb1a304d0fdda5586cf959af3","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/lib/client.js","hash":"781eb260241b46515df2f2f009969a772aa9dbcc","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/lib/index.js","hash":"64f1cfdf834d8d679d020071124865b83a6cae72","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/images/hawk.png","hash":"756c85c7133e66dc5c119c47081f7f890d046f77","modified":1447968927000},{"_id":"themes/gandalfr/node_modules/hawk/lib/utils.js","hash":"befb760ea6a14654fcce187b2b790f8292b404b2","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/lib/server.js","hash":"ecde371bb849aa221cd138ba993f5fb19fff160e","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/crypto.js","hash":"222fe636eb910e343a0dd0db76224fac92a47647","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/client.js","hash":"fabb1388ee6f94ffe25870f2152d1a46c480dde3","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/browser.js","hash":"fda1c8242cc48078540c30464da1d36a64d223a6","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/index.js","hash":"9e790c1104e148298687c0ed87fd48ee14a943a4","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/readme.js","hash":"e8743507f0a6c8d261e1d037e8aadc11cda3ac82","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/utils.js","hash":"042ec97613b298b257e409d54eeca7a84ef3f84b","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/server.js","hash":"45a0a16ecee59114ad2765a73af25443125278ba","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/hawk/test/uri.js","hash":"a7037450a234ee97c7bce23dc5c2f295fcddbd47","modified":1453400406000},{"_id":"themes/gandalfr/node_modules/http-signature/lib/index.js","hash":"996c8efa1d7896034c980e498bec866824662d52","modified":1444858648000},{"_id":"themes/gandalfr/node_modules/http-signature/lib/parser.js","hash":"c47fbe5cb6f1be3c5a5d62f9085273f3403ff401","modified":1444858648000},{"_id":"themes/gandalfr/node_modules/http-signature/lib/signer.js","hash":"5e312acbe0c57117dad754fa369a36dca4569bbd","modified":1453759272000},{"_id":"themes/gandalfr/node_modules/http-signature/lib/utils.js","hash":"dce96d033869c424854178ae71991fe39b7c58b5","modified":1444858648000},{"_id":"themes/gandalfr/node_modules/http-signature/lib/verify.js","hash":"f0603457d003b72d484d608b266566e771644438","modified":1447890069000},{"_id":"themes/gandalfr/node_modules/in-publish/test/package.json","hash":"996f7f8067d63a5e7e797d0ad2cb53abdbdb4469","modified":1436295395000},{"_id":"themes/gandalfr/node_modules/is-buffer/test/basic.js","hash":"f81e7bac65c3be81f6d8d0ff5940cf82b58ef61f","modified":1470266184000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema.js","hash":"c5ef8e3da495a6ca1c7cc9dd0cb8d8c415dcc245","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/misc.js","hash":"069bbb43b5b8b9406bf412b5dfdedc4ee49b5338","modified":1474298216000},{"_id":"themes/gandalfr/node_modules/isarray/build/build.js","hash":"711567b86256a86ed22bd637c35786d13e0f73b3","modified":1369676297000},{"_id":"themes/gandalfr/node_modules/isexe/test/basic.js","hash":"bbcbe17965674921369eb7036d112a99763d2c79","modified":1454133595000},{"_id":"themes/gandalfr/node_modules/jodid25519/lib/curve255.js","hash":"fdc3f9501dbda3945b6478cecaab0b0e1ecd2d63","modified":1446502968000},{"_id":"themes/gandalfr/node_modules/jodid25519/lib/core.js","hash":"55894ff0a71a08de470029f7689b3967c2ce9233","modified":1446502968000},{"_id":"themes/gandalfr/node_modules/jodid25519/lib/dh.js","hash":"e9a0561e419e956f953570d7121e65c84fa72488","modified":1446502968000},{"_id":"themes/gandalfr/node_modules/jodid25519/lib/eddsa.js","hash":"bacec5f12e7d5303cee9b0493e22b3743a19ef1e","modified":1446502968000},{"_id":"themes/gandalfr/node_modules/jodid25519/lib/utils.js","hash":"5b4e9a60c9f4758bf714e52f9064df0d33fd019a","modified":1446502968000},{"_id":"themes/gandalfr/node_modules/js-base64/test/dankogai.js","hash":"c29521d5d34be7d49de6538100369395a1d8dab6","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/old/base64-1.7.js","hash":"add7fa2249d35907c1a563c69e988d67f4f31191","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/test/es5.js","hash":"e59341bd3ad5a7bd14b9fa9e07de3c2ae3594643","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/test/index.html","hash":"15bad528a03c8bedfc0d3e639e182cf928da27c4","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/test/large.js","hash":"7ef172dfca5f7b5e338d11107c806e4dfa086e95","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/js-base64/test/yoshinoya.js","hash":"ccf15415070404cdabd7e5d0afd701ded1b1fd6e","modified":1365425592000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-01/hyper-schema","hash":"51802f7884c813fe2a002776aa97a440c7442d9a","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-01/json-ref","hash":"2132a5a9319f8bf190040b49150e005e0916ed22","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-01/links","hash":"09b2131c15d754a61a1baf1158a8e6c73644287f","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-01/schema","hash":"10942d74811e1e16425e6219b0ba808b493321ab","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-00/hyper-schema","hash":"a5972bcc99abc4936ff350f116a69390f8ac99e8","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-00/json-ref","hash":"b5f7e93c3edc2eb501e913441ddfdeef0c04386a","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-00/links","hash":"490c91fb104a16a76290377797a5411d21379614","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-00/schema","hash":"253c4fcfccaf49023c10a1a92d81cc3d21344e8a","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-02/links","hash":"f8a835ea08959ceca9682cf1c30df6d5cf9ff033","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-02/hyper-schema","hash":"117eb70efaa120edeb97caa6ca7e53eae8f761e2","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-02/json-ref","hash":"31b76b211e24e56b0ff5ae3ba739835039cd96b8","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-02/schema","hash":"ba84a3e7e9332328db986a1123084f2a6dba57f7","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/hyper-schema","hash":"552aaa9921cbeb19c2c9b485e64965f7a98e22fc","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/json-ref","hash":"9f121cedcda14cbdd55e2fd80a96e289d9a1f2f9","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-04/hyper-schema","hash":"362194bf4c6690db17b848c1a796ef747bf7a6c1","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/schema","hash":"4b500e66b7c4a36bc4d3ff6da089d6228c54f94c","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-04/links","hash":"92cd269ccdfe3f3bc673205133cb9940afa465c4","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/links","hash":"5f1601142843a6028beb35cef8b851413a4dfa91","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-04/schema","hash":"7a6839ef21cf49fd6bdc687be7dbfbb92c97ac7c","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/test/stringify_test.js","hash":"4760401b04513ae7eb79fff0e1239a9947a8af78","modified":1431999690000},{"_id":"themes/gandalfr/node_modules/json-stringify-safe/test/mocha.opts","hash":"98216b4fbc2e0c1c17ee946b02272a26fcc1f4c1","modified":1431999690000},{"_id":"themes/gandalfr/node_modules/json-schema/test/tests.js","hash":"f3f322d2cec777f57df41b071818a05e97d35f2a","modified":1472871200000},{"_id":"themes/gandalfr/node_modules/json-schema/lib/links.js","hash":"bc70a0d21a6639c78017ad1ab1254d8e1516bc75","modified":1472878014000},{"_id":"themes/gandalfr/node_modules/json-schema/lib/validate.js","hash":"c336cd87629b485336a56636cd36144220281161","modified":1472877970000},{"_id":"themes/gandalfr/node_modules/jsprim/lib/jsprim.js","hash":"4c80b47c4ea9b0c9997ed3c9bf020d3e05b1b4a9","modified":1466638425000},{"_id":"themes/gandalfr/node_modules/liftoff/lib/build_config_name.js","hash":"3283cf779e3ad756b710a2c617273ee0508ba850","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/lib/file_search.js","hash":"c6ea43a5d84183d36c0fd40f622e96ed00319dae","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/lib/find_config.js","hash":"0d676969eeb307616a43cce750906ee40d41ffec","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/lib/find_cwd.js","hash":"6b801187337e161c0679c49aec6bd82772d23650","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/lib/parse_options.js","hash":"6d6d65bbd16f1adbcd880367301b4c3f878f7f09","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/liftoff/lib/register_loader.js","hash":"f461909b31f0b07030f47cdda6392998c5fa9d80","modified":1469478786000},{"_id":"themes/gandalfr/node_modules/liftoff/lib/silent_require.js","hash":"b6384ce85576382e6b7c38be5a570607abe4977d","modified":1442870676000},{"_id":"themes/gandalfr/node_modules/lodash/dist/lodash.compat.min.js","hash":"c13a20ea314c9ac4ad3e1777e2e28005aad0b092","modified":1427729433000},{"_id":"themes/gandalfr/node_modules/lodash/dist/lodash.min.js","hash":"3400d1295b3f94d65c3dd30f338298c22f50b817","modified":1427729433000},{"_id":"themes/gandalfr/node_modules/lodash/dist/lodash.underscore.min.js","hash":"27c1f9f657ba13277ef48b5cb425c75ea69ff20b","modified":1427729433000},{"_id":"themes/gandalfr/node_modules/lru-cache/lib/lru-cache.js","hash":"d4091806568fef3089f4522f09d5976d91912dd4","modified":1448475000000},{"_id":"themes/gandalfr/node_modules/lru-cache/test/basic.js","hash":"caffd5539b398fb1f369ed259c14dc4d00eda244","modified":1448474452000},{"_id":"themes/gandalfr/node_modules/lru-cache/test/foreach.js","hash":"5493ce987892f9c740837c36acd5240d9cf93644","modified":1448413217000},{"_id":"themes/gandalfr/node_modules/lru-cache/test/memory-leak.js","hash":"5b5690f4e32c4d2fc501e7f408fdcfd25f8b4e3a","modified":1435688444000},{"_id":"themes/gandalfr/node_modules/lru-cache/test/serialize.js","hash":"6383a06c3f56cce6eb364b66f2301eea00db5828","modified":1448474452000},{"_id":"themes/gandalfr/node_modules/micromatch/lib/chars.js","hash":"10dede99931a8786b6c738b202ac8bda153ea112","modified":1468602313000},{"_id":"themes/gandalfr/node_modules/micromatch/lib/expand.js","hash":"f2b3efa8497d24116fc595b73f94a4e7cff15dc2","modified":1468602380000},{"_id":"themes/gandalfr/node_modules/micromatch/lib/glob.js","hash":"100291bc1b0e543fa2d491f9d157aa06c11aa496","modified":1468602313000},{"_id":"themes/gandalfr/node_modules/micromatch/lib/utils.js","hash":"fceb374ebf62334dcf0f221b0eee463ea1d4134f","modified":1468602313000},{"_id":"themes/gandalfr/node_modules/minimist/example/parse.js","hash":"7684d952ceaa32a8c9e3cd21ba26a62e7ee14387","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/mime-db/db.json","hash":"0bef149a7294316c9e639c33f1762fa2f2702da8","modified":1484452499000},{"_id":"themes/gandalfr/node_modules/minimist/test/all_bool.js","hash":"d5f1721995050d6d9de35c56222e578d6a2a8b5e","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/bool.js","hash":"a0ef26a085e4d5530ea59880049cf7aeeaf9bead","modified":1438902415000},{"_id":"themes/gandalfr/node_modules/minimist/test/dash.js","hash":"0fe20783b683b525cb3ff6872474ac6fd89a8b63","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/default_bool.js","hash":"71da47b49e90b77c88caccb077c1bcfb555399f1","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/dotted.js","hash":"edbda6ea34cff9e7dc3fe1953b72eca2f955cda9","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/kv_short.js","hash":"e87208f3f2695b7de0c27e234bc4810cd6d49b8e","modified":1440424577000},{"_id":"themes/gandalfr/node_modules/minimist/test/long.js","hash":"f0ccd5d55358f78efbc928753264e4a32f7724fc","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/num.js","hash":"6a52983a855113284f2aa9633876c1adf3710463","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/parse.js","hash":"a9672d89e1623b05aed85a4b4afcfec7fbaa359c","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/parse_modified.js","hash":"310215056f588e8c04e92f0cf6337ca28a8e0d78","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/short.js","hash":"2ce00fdfe4906fc504286974c143c4ced6a11b12","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/stop_early.js","hash":"dc728f383a53ce9e44c9c1c21360bb7ad71d6205","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/unknown.js","hash":"b55d1e1d6ff269730e4578a108f4c340e70da262","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/minimist/test/whitespace.js","hash":"ea3a87137fa34c00a7d84a4d0350770e8d85ed9c","modified":1438902274000},{"_id":"themes/gandalfr/node_modules/multipipe/test/multipipe.js","hash":"c531b074f8cbeac2d4e8cc85f7d26864dba314bc","modified":1411971507000},{"_id":"themes/gandalfr/node_modules/nan/doc/asyncworker.md","hash":"806361eda8b0aaf1c39ba0039b84ef84c1798024","modified":1482344545000},{"_id":"themes/gandalfr/node_modules/nan/doc/buffers.md","hash":"379d606e2e03de0cbe5ca3f28d6267b59da7986e","modified":1444248499000},{"_id":"themes/gandalfr/node_modules/nan/doc/converters.md","hash":"87a44ab8436a0a2c5ca5878fb0e3b40d067c3d9c","modified":1444243260000},{"_id":"themes/gandalfr/node_modules/nan/doc/callback.md","hash":"41329b853d35253d8ec5fe4826532dc5478fc704","modified":1468157226000},{"_id":"themes/gandalfr/node_modules/nan/doc/errors.md","hash":"1eacf4e82465545bdc5b7def1cf0ab27b003b03d","modified":1444243260000},{"_id":"themes/gandalfr/node_modules/nan/doc/maybe_types.md","hash":"49bd3a6b0d240f887318125109c9f042b0e9898f","modified":1482343678000},{"_id":"themes/gandalfr/node_modules/nan/doc/new.md","hash":"342778da9fdf2393a7de91a922e8d89d1baf7568","modified":1444248499000},{"_id":"themes/gandalfr/node_modules/nan/doc/methods.md","hash":"08222596e281f48bdb3ab54aaafe88baa9b611bb","modified":1461766575000},{"_id":"themes/gandalfr/node_modules/nan/doc/node_misc.md","hash":"a6e668fb8cb18a5a2d2f32b6b2db2a7284d614f7","modified":1452349051000},{"_id":"themes/gandalfr/node_modules/nan/doc/object_wrappers.md","hash":"f995f94bef02876a5ce3abafe2c458bb293922ee","modified":1482343644000},{"_id":"themes/gandalfr/node_modules/nan/doc/scopes.md","hash":"c464a8127d5edc3b9e192c70e3e7e1a6154311cc","modified":1482344149000},{"_id":"themes/gandalfr/node_modules/nan/doc/persistent.md","hash":"43a25f5b31914f9fc6e8ecaa15b8064790f96e9f","modified":1444248499000},{"_id":"themes/gandalfr/node_modules/nan/doc/script.md","hash":"5b150c97506b154aa270e8ba2fd4c01a8f631236","modified":1444243260000},{"_id":"themes/gandalfr/node_modules/nan/doc/string_bytes.md","hash":"f2d9b8259c38fc4fe88f1f1324273481ac0d328e","modified":1444243260000},{"_id":"themes/gandalfr/node_modules/nan/doc/v8_internals.md","hash":"186d6bb7abeac78560386e07548810530cf758c4","modified":1481222141000},{"_id":"themes/gandalfr/node_modules/nan/doc/v8_misc.md","hash":"a31716bd78f1fac323a714e3108ddf6be1a32d44","modified":1452349051000},{"_id":"themes/gandalfr/node_modules/nan/tools/1to2.js","hash":"dd90dede5a1f75f29a1b54f27dbdbe5e7d0f30bb","modified":1485122892000},{"_id":"themes/gandalfr/node_modules/nan/tools/README.md","hash":"a5103d8b2150ba5fd2736fbb6fd2a2a819596244","modified":1444243260000},{"_id":"themes/gandalfr/node_modules/nan/tools/package.json","hash":"c8b6de0212f33be85f01aea1581791bd14aa2a73","modified":1444243260000},{"_id":"themes/gandalfr/node_modules/nopt/bin/nopt.js","hash":"f2a561712df0e004c712bfd6c9b0fdc70cc26e8e","modified":1447359143000},{"_id":"themes/gandalfr/node_modules/mkdirp/bin/cmd.js","hash":"0dbed17e23d62e8dc9893f9459768531b300c95c","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/nopt/examples/my-program.js","hash":"de3d4a6a7f350fd6846d3ae06334d1fafffc7054","modified":1447359143000},{"_id":"themes/gandalfr/node_modules/nopt/lib/nopt.js","hash":"d3dcdbce19312c5473deb7e38672a2d5e034af79","modified":1447364058000},{"_id":"themes/gandalfr/node_modules/nopt/test/basic.js","hash":"83220640df8cb4211523fca22cdbf9d1094d07ee","modified":1447364293000},{"_id":"themes/gandalfr/node_modules/mkdirp/bin/usage.txt","hash":"682ca66d4def0ba4af814be4e6363eff5fcede0d","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/mkdirp/examples/pow.js","hash":"6d34dfc0f5f17a971dee0f5ba40eba5219bdd803","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/chmod.js","hash":"ee02690748279a5bad6179dd3feeb66a48d330c8","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/clobber.js","hash":"4d00dc55c23f21600adbceb6760587b3ca861626","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/mkdirp.js","hash":"628f2dbd4137f64e69454708ba513870b85af4c8","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/opts_fs.js","hash":"8dd756971f7443eb340b846acee0c17cbadbcb87","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/opts_fs_sync.js","hash":"0f949a29099c6206e617d6e9e39cb3a41d0daab4","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/perm.js","hash":"11382491d90f70fce17e9d183765c343c7870c3c","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/race.js","hash":"237f49a5262bc2c668653897e8cc1af8eaa5bd89","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/perm_sync.js","hash":"1759536f89220a608a3987a3038cbaaa0e7458ac","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/rel.js","hash":"2488c0b77bc0419a4646c7d0bcfaaef5651995a5","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/return.js","hash":"dc2bf5dd5eff2e6a914fc1f731f50ac887ef9d31","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/root.js","hash":"b034b5fdf0da3932263437d9d52b53642a2b40ad","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/return_sync.js","hash":"ef9a789aeb65bafbbb7bceb048dc33ec24a41e3b","modified":1419626841000},{"_id":"themes/gandalfr/node_modules/node-gyp/bin/node-gyp.js","hash":"fc5a671da8fdc83c6bcd515cfcfdfcdc785db2d7","modified":1484011833000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/sync.js","hash":"22a3775a59d8994c368e5574ba8ffbe19c8b8648","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/umask.js","hash":"d08a2f100ddc37e563e548fd9f7730599009824c","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/mkdirp/test/umask_sync.js","hash":"917a95e95427eecd9a0cb7807e0ab6ab3c653fcc","modified":1431568795000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/.npmignore","hash":"b0acf915c54d2c6ef53be580ed2045225a3b02d8","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/AUTHORS","hash":"d0e5a4b44624f46f39d260c8dba38fa7c92616a6","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/DEPS","hash":"41ce810363b73010fad61b2aa1a3ee26f75da966","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/LICENSE","hash":"bf937839a52f92d28bffa571afddea9457590135","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/OWNERS","hash":"b462aee1c6c401b3c709a746e9400677c2ffbeb2","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/PRESUBMIT.py","hash":"581507692ebe13106e1dc8ffe09d8da0aac58183","modified":1447559398000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/codereview.settings","hash":"4ba57626280b6695ced1cffac8cebe51e6783bb5","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/gyp","hash":"eedffc4ec86c7a01539fd6487780f1fbffdbfdee","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/gyp.bat","hash":"2aba80f0187605b8eaca0015060d5cb06a50cf31","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/gyp_main.py","hash":"6e523092ba3228c46f6a1ef9596e2b87ccb96e8f","modified":1447559398000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/setup.py","hash":"d9ba6706d23bd3748a604c4be0e471db0ed783a9","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/gyptest.py","hash":"8898e88a69354cbc4f7bc36c6fc4b16ceeb88314","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/src/win_delay_load_hook.cc","hash":"eee98774ead44b06db4e11e2014d83d159485ba8","modified":1465986700000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/build.js","hash":"b1e7af0cfd1cd9737ef934bbc830d08184ad0290","modified":1484011833000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/clean.js","hash":"4a7840810ff55e27ac57da4c932afeb052b64f9f","modified":1484011833000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/configure.js","hash":"31c973b8484fa5bf9f957c3c0b4b9c00016bf32a","modified":1484011833000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/find-node-directory.js","hash":"d6940ee990578ed9dd0e1e0f60e6c37e0fefc4f3","modified":1455245358000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/list.js","hash":"544e50b19ff85499b8ae920ee7c577a47162c13e","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/install.js","hash":"1f792afb4392f667222b43d8cc2c5b61db24edee","modified":1455245446000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/node-gyp.js","hash":"5df631ce9f6095933b79fbfa48ec6a6a12241b1e","modified":1484011833000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/process-release.js","hash":"3d9a35b23df38e739ab05364131e6a9a927a1620","modified":1455598576000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/rebuild.js","hash":"f63b682adfde4636ddf1d78bd44a5b6d00d3be11","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/lib/remove.js","hash":"ec59ef23b3e76c1c5328ba9d921e3cf5d4619b0b","modified":1440549825000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/lib/extract_description.js","hash":"1461754e50fbc41a07c9901c0134dd0fcd5d23c5","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/lib/fixer.js","hash":"2af9dc00857295406683526e96bf38429006c693","modified":1446503165000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/lib/make_warning.js","hash":"05365fa27673c928d41ddc3bc829dde8d3596aac","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/lib/normalize.js","hash":"3b6f9fc8cdae8bf70a958c23c19ff90f744a66ed","modified":1446502955000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/lib/safe_format.js","hash":"8de801866f2130d179c58a80859de373d0902efb","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/lib/typos.json","hash":"ac98f675a2997b8e9aa20d2c4fbd0b463559b27d","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/lib/warning_messages.json","hash":"7de7cefb0162febf4b6d90f620f7d76a481cc3bd","modified":1446502955000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/docker.sh","hash":"597cf702514e1a4dbce50cf23fa1bf874fefd778","modified":1455598576000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-addon.js","hash":"810db98847aedc2b288529b2aa419f6f034ec41b","modified":1484011833000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/simple-proxy.js","hash":"5c92660c944841ab4e6e0d45e86d913fff9bebc5","modified":1441625895000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-configure-python.js","hash":"001de1be6378e8338b509028f4738047cbc37aab","modified":1478599690000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-find-accessible-sync.js","hash":"85db1d004944f5eec40e4eb7ba97e3ac7938d071","modified":1467168771000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-download.js","hash":"d2b1ac7a25f9e356445e7f4d36329d2705d9d91a","modified":1455245404000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-find-node-directory.js","hash":"8379c36994141a24aafb7ff67c7735f9856ab3be","modified":1455245358000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-find-python.js","hash":"3d19b3fdbf95fecaf72f4f92a26d294d802246d2","modified":1478599691000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-options.js","hash":"88780f4f2e3b825f3bdcf63fa4a2c21787ee1ebd","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/basic.js","hash":"8367f23d974a7a4f1dd03fa22a141ce4ade51590","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/test-process-release.js","hash":"4bd47d24f745633c91d9fcdfe539d0b203b1ac28","modified":1455598576000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/dependencies.js","hash":"4134afc1df993ec221f41505a8e0c73d123045e8","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/consistency.js","hash":"fc1f758f59c05d4ec43c43a74f3a084feb1e7ab0","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/github-urls.js","hash":"481bb4a3511d5212568e98746d11cff569217574","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/mixedcase-names.js","hash":"9c5f50310cec52a4de1df83bfb65c3a4e7968316","modified":1446502955000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/normalize.js","hash":"98f92b75714b5baea6fa1c541b52f07c7d58d9da","modified":1446503172000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/normalize.js~","hash":"d4f3c2b546298e8cf44b82c038e49387a3246d17","modified":1446061759000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/scoped.js","hash":"1aaeba84eba166e0f79728d7210c8341816768dc","modified":1446503165000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/scripts.js","hash":"8594ad3aa2dc1856b4fb3c71181816d834a85600","modified":1446502955000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/strict.js","hash":"e39e97d200df0b9c1259a81c961b3b83fbba8f69","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/typo.js","hash":"2e8459e57ddf199b9f8317991943a66d535a364c","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/ordered-read-streams/test/main.js","hash":"6e33a77658db30fdcca90c688a857fe3c95d74b3","modified":1390065149000},{"_id":"themes/gandalfr/node_modules/node-sass/bin/node-sass","hash":"5d8f9cf25b83be5ca2ce3d6bf720116075566ad5","modified":1481344776000},{"_id":"themes/gandalfr/node_modules/orchestrator/lib/runTask.js","hash":"a3c07195ca6364ad143d57c11afbff8c81f97804","modified":1478375346000},{"_id":"themes/gandalfr/node_modules/node-sass/lib/binding.js","hash":"a2ad3eef1a890b83a19a0b71e2d5c8a68cca8275","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/lib/errors.js","hash":"7d9232a4ac59f2595be9d1312eb4eead82f0b7e6","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/lib/extensions.js","hash":"bccc2baa5cac1ba51fb2ae42cffc400c558d7faf","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/lib/index.js","hash":"7b6c63239e7cc14f890e4a0a2856a26f2c5177fc","modified":1481344776000},{"_id":"themes/gandalfr/node_modules/node-sass/lib/render.js","hash":"a674f256b57e6e95835f2a59ca4458eec4e08f27","modified":1478510543000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/.DS_Store","hash":"f1622f9192d84de7b7298d0b9806c533105c213a","modified":1488867640000},{"_id":"themes/gandalfr/node_modules/node-sass/src/binding.cpp","hash":"fde76bc5a41b6f49ca31df0e1dba56ef2f020719","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/create_string.cpp","hash":"9578220d13449a66f49b267417c7fe15ca49f9a7","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/callback_bridge.h","hash":"4567b75fd96dffb7a60d5252abe8769a87d6f212","modified":1462188706000},{"_id":"themes/gandalfr/node_modules/node-sass/src/create_string.h","hash":"a3360fda6250570ce49895da9f74f64025fc7b03","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/custom_function_bridge.cpp","hash":"2cb9c9b8ae24c5bf8d883c6a62ca686c4867a541","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/custom_importer_bridge.cpp","hash":"2ac2f61e4a71be348e3bf368a121ef07310922ac","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/custom_function_bridge.h","hash":"fb9c783ff54334da2b15f8304b9e7d38cceb3a79","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/custom_importer_bridge.h","hash":"93af40feb85f2ad004cdbd471017246d4b00538f","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass.gyp","hash":"8bdfcbaf85ec7b2e204d40987e4faefbd8b47500","modified":1481350260000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_context_wrapper.cpp","hash":"43f0bae87ba1c508d1b806402868cbf7e3093821","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_context_wrapper.h","hash":"b842131bf82e83047a8bfb5859affcaece08422a","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/scripts/build.js","hash":"c1e890ca611f4223dc78d27da1a583d768edad83","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/scripts/coverage.js","hash":"ed6029f22e306de66c2e2c965aaa11854f537ee0","modified":1478170909000},{"_id":"themes/gandalfr/node_modules/node-sass/scripts/install.js","hash":"d628edb95adccde928802bfff59cf276f44b76c3","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/scripts/prepublish.js","hash":"6f3b43bee212d0c835525876bda5c2ec50cf14cc","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/.eslintrc","hash":"fab2c62ea27ead3a21414082be68afa90b51cbb2","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/binding.js","hash":"8988ff5509cb2e745277de04d99b81e65cf3b4a4","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/test/downloadoptions.js","hash":"2069fa98e5b645bab9b8e06f33da46ec3d43d743","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/test/errors.js","hash":"aa89e367d3c79aece95f331f17456ad5ce4d9217","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/api.js","hash":"6a41ff9c03c509af2a7a00ab8cd7a3ac3399fd56","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/test/cli.js","hash":"6d64dc5a60db55a416447c4f7eb7f39e85c0991f","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/lowlevel.js","hash":"0acdc329e34c2491d3911d1df23a5fd62a6d943b","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/spec.js","hash":"e9da58a04db969cd327ebe807764f528c1f91fc9","modified":1481350260000},{"_id":"themes/gandalfr/node_modules/node-sass/test/runtime.js","hash":"053bca7e96280c97d8811f211baabe3eb4dfe937","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/test/useragent.js","hash":"4fb45aef9383210fead111828f7ed82802d8b96f","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/osenv/test/unix.js","hash":"c89b7f1352a5e50a051ab51dcbe30a0f5726b935","modified":1481655835000},{"_id":"themes/gandalfr/node_modules/osenv/test/windows.js","hash":"dd4d9181342cc461fb89cebdcc09309d208b717a","modified":1433168737000},{"_id":"themes/gandalfr/node_modules/parse-json/vendor/parse.js","hash":"b7f1be3c267dfd856fe8b3877cca1621c14bca27","modified":1440511563000},{"_id":"themes/gandalfr/node_modules/parse-json/vendor/unicode.js","hash":"4cb780a918311cbc4d1c7ab08b1611b29c51b4a7","modified":1423609182000},{"_id":"themes/gandalfr/node_modules/postcss/docs/source-maps.md","hash":"06e03fbd846e88f35fb1678b23c076d509c78802","modified":1486329945000},{"_id":"themes/gandalfr/node_modules/postcss/docs/syntax.md","hash":"a2e4be458420008fe424d1b9e3ddcb327eb2ccfc","modified":1486329945000},{"_id":"themes/gandalfr/node_modules/postcss/lib/at-rule.js","hash":"0c736d5c29c7410d5c0e13522c1ea30f67e62b8f","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/comment.js","hash":"cf3374033f4f7ee8b04ef3f4152e743ace271e9b","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/css-syntax-error.js","hash":"17b82b352fe9ee31233a28b65b0443556ea153c8","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/declaration.js","hash":"b1cb25ae697a5993b37470245ae04def68014bff","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/input.js","hash":"1aa7e51fbde0ec61e753497abc591d7354cd5b6c","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/lazy-result.js","hash":"c9f7e527b8b3734ce97d665797793281a70f6650","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/list.js","hash":"a68e7c54bcdd1239ab685fcb69ad80cc4e4530dd","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/map-generator.js","hash":"5bcee88c54c80199967b40608f3c27c07563c094","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/parse.js","hash":"6b56513b1f43af62cccf6a6e00956efecfc62911","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/node.js","hash":"f889706501d96568bacb8f0b146befe7e0e44ea6","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/parser.js","hash":"f5b98374b03dab1f947937a71565c4d668e2ecff","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/postcss.js","hash":"6ccb7c061d272c94b00708c917938b206a177d1a","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/previous-map.js","hash":"e47b0bd8f9e4e33910a1a7df6a4baea25f047b09","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/postcss.d.ts","hash":"c43fb883697225b0037887171f2a43f538561b0e","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/processor.js","hash":"66b63dac940a7e56f03617b67cac68c9f050ee04","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/result.js","hash":"1e10cc99aa93067cc056e0c88a99ac37c6ed161d","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/root.js","hash":"13853cdfc477d5bc7ad26fa1be941a2224ca49bb","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/rule.js","hash":"3237fc4184540bf46563639300018161f34b2621","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/stringify.js","hash":"9e3588be832c673e4fe2571a3ea72a4c2f3f3dfd","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/stringifier.js","hash":"f4f0a3653b770986f41f43fe3b610d9ff6efa82f","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/terminal-highlight.js","hash":"485eac4a31e3df518afdd1d29e2cfb9e4418b659","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/tokenize.js","hash":"25ba672aa4e918a64b91bc3f80885aecb276a6b3","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/vendor.js","hash":"746447d5bcc871446ecd17b49d1bfd0b06db3f7b","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/warn-once.js","hash":"d52b653708c14efce129a2e576afd4b7d4b742e0","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss/lib/warning.js","hash":"0c96468d7697e46bff3b858b2665fda3b9c1d47a","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/lib/index.js","hash":"ea2f7855b5b2b45fa6452cad4f042d337d37cecd","modified":1455811986000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/lib/parse.js","hash":"49fc5e45e9ca4166c628ddac669739e008e44f87","modified":1455812326000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/lib/stringify.js","hash":"d8b4df451f47c5ea91a6533abace58f48c7965ab","modified":1455816959000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/lib/unit.js","hash":"7d7cfd699ba6337c1db202ae44088f02bbc8983e","modified":1455812555000},{"_id":"themes/gandalfr/node_modules/postcss-value-parser/lib/walk.js","hash":"202c62eb04975af57a492e25543d9945257dfd4e","modified":1455811355000},{"_id":"themes/gandalfr/node_modules/pseudomap/test/basic.js","hash":"dccd686c9c0f397d56318e99c89fa29fe4db84c2","modified":1448663157000},{"_id":"themes/gandalfr/node_modules/qs/lib/index.js","hash":"9039aef43bebb9c999e4711d367211cc97b710d3","modified":1476510435000},{"_id":"themes/gandalfr/node_modules/qs/dist/qs.js","hash":"9518c21d093fcc8f4cb4bb9c664817c263f3e392","modified":1476663987000},{"_id":"themes/gandalfr/node_modules/qs/lib/formats.js","hash":"268fd11b0d3295eb9e87943e70ef9f1834d573ac","modified":1476511353000},{"_id":"themes/gandalfr/node_modules/qs/lib/parse.js","hash":"f867cfdff9c70a3006c6ed4bf531c667994f6a8f","modified":1476510444000},{"_id":"themes/gandalfr/node_modules/qs/lib/utils.js","hash":"669e7cdcdf69142f5ec6195b537dd46ee9be6198","modified":1476510444000},{"_id":"themes/gandalfr/node_modules/qs/test/.eslintrc","hash":"4a5b110372cf88f75ef19205eab3676d2594e69f","modified":1476635148000},{"_id":"themes/gandalfr/node_modules/qs/test/index.js","hash":"597801d7cbacf7a83f59b0615ec53af28dd5ab2c","modified":1476635148000},{"_id":"themes/gandalfr/node_modules/qs/lib/stringify.js","hash":"614f7d8f66c3ff089642cf9f231e10cd373a30b2","modified":1476510435000},{"_id":"themes/gandalfr/node_modules/qs/test/stringify.js","hash":"bb97e6f44e4600ce76fa8102f788beab3bb8be07","modified":1476635148000},{"_id":"themes/gandalfr/node_modules/qs/test/utils.js","hash":"d6fbb52cffe3906fb1e8c068b684021801e35c8e","modified":1476510444000},{"_id":"themes/gandalfr/node_modules/qs/test/parse.js","hash":"b448cade99ba5de4c0b0a51b9296af5e1cbaac79","modified":1476635148000},{"_id":"themes/gandalfr/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df4c4045d53e722a0a88aec73ebec447c5ca9069","modified":1460562803000},{"_id":"themes/gandalfr/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bf779af0486ff730f3946ca90a8ca93cc6c6a963","modified":1460562803000},{"_id":"themes/gandalfr/node_modules/readable-stream/lib/_stream_transform.js","hash":"1a99f4c8363c8703aec10d9bcff0586d64be7fe5","modified":1460562803000},{"_id":"themes/gandalfr/node_modules/readable-stream/lib/_stream_readable.js","hash":"d8753b22761edd53c7e36c6f79704e747fe77d20","modified":1460562803000},{"_id":"themes/gandalfr/node_modules/readable-stream/lib/_stream_writable.js","hash":"916ef7a43bcabf95090be69b0231a10ec67f6921","modified":1460562803000},{"_id":"themes/gandalfr/node_modules/replace-ext/test/main.js","hash":"c2a1bb4a9e9d6972268d50adea27170c56156da0","modified":1393363682000},{"_id":"themes/gandalfr/node_modules/request/lib/auth.js","hash":"e4f433aebf537a8e2d12b0a48dc54ff615da3aa9","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/request/lib/cookies.js","hash":"0b2a641d706209af1f92176a507f382e06b44379","modified":1479487117000},{"_id":"themes/gandalfr/node_modules/request/lib/getProxyFromURI.js","hash":"2e7c16e357f885401208174ad1f341b084965253","modified":1479487117000},{"_id":"themes/gandalfr/node_modules/request/lib/har.js","hash":"a4b894d836e3bd947a5d8afffec04128bf934fe5","modified":1479487117000},{"_id":"themes/gandalfr/node_modules/request/lib/multipart.js","hash":"dfefcc262e0105828c06c2d0f9989957f92d9550","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/request/lib/helpers.js","hash":"bbb898bb162e80e492859087b83eba85877a818b","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/request/lib/oauth.js","hash":"e168a773f0527de97278dafe7b43bcfd54482b02","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/request/lib/querystring.js","hash":"b78be4d88327f11499fbf86610d0612d803b1ff4","modified":1479487117000},{"_id":"themes/gandalfr/node_modules/request/lib/redirect.js","hash":"89fb9abd4fa5f9066407ecf2ae71413e0cca7304","modified":1479489062000},{"_id":"themes/gandalfr/node_modules/request/lib/tunnel.js","hash":"97336f00dd29c7fdad5550e9ae4daf57d587d034","modified":1479487117000},{"_id":"themes/gandalfr/node_modules/rechoir/lib/extension.js","hash":"6391f6545abbe4366b151bd1ed04d7920d303697","modified":1437567224000},{"_id":"themes/gandalfr/node_modules/rechoir/lib/normalize.js","hash":"8d8d46c6e77c6f08136bed31b1d88971341fc841","modified":1437567068000},{"_id":"themes/gandalfr/node_modules/rechoir/lib/register.js","hash":"ba2fb2759ab7c5d8a5cfcc042f53440fbf36e6f3","modified":1437567068000},{"_id":"themes/gandalfr/node_modules/resolve/example/async.js","hash":"81b7d65bc2d3329697cf4847822849f4590915af","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/example/sync.js","hash":"a81c28a9a2473e0f63d7feed93029349f7a447b9","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/lib/async.js","hash":"f70038c2d7e807bbaac8e1dc3101c428b24ab023","modified":1481666267000},{"_id":"themes/gandalfr/node_modules/resolve/lib/caller.js","hash":"18d495659a2e6c4b36bbaa1b4d2bbcd89867117a","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/lib/core.js","hash":"65c454c77840f481129fb7c56eefbdf9ad22d9d4","modified":1481666097000},{"_id":"themes/gandalfr/node_modules/resolve/lib/core.json","hash":"c8314eb880b8edb9a7ae862dd00e18182a744c44","modified":1481666097000},{"_id":"themes/gandalfr/node_modules/resolve/lib/sync.js","hash":"da1c32adca8a734023514c380d3001b8b22ef7d1","modified":1481666097000},{"_id":"themes/gandalfr/node_modules/resolve/lib/node-modules-paths.js","hash":"e21592de851ebe7f26fbadab1a35f868a2c63965","modified":1481652593000},{"_id":"themes/gandalfr/node_modules/resolve/test/core.js","hash":"3cf6b2f5adeac2b258d5db5f2e5c3d5e79c37bbe","modified":1481666097000},{"_id":"themes/gandalfr/node_modules/resolve/test/dotdot.js","hash":"20900f96fdfaa2a8845f376560e0aca4b07bb80e","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/faulty_basedir.js","hash":"1dad49c92585795bc49796a3a19616d0a7cdc4f6","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/filter.js","hash":"d6094902c110b029e3b3a8b5a711e2e5d14a6546","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/mock.js","hash":"f07cae76fe6144ebce0534734f688dda0f8644bc","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/filter_sync.js","hash":"a1c927d406a881f499e830e894bcd887e0bdd4a9","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/mock_sync.js","hash":"56676bf99dd20c33751d537741487f18116e1f16","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/module_dir.js","hash":"7b5651424e6b17dc983d97dbb5e6f84944a2297a","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/node_path.js","hash":"418200a128045517eb7d5161341443ef26d29822","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/nonstring.js","hash":"c1920b5d3e4d206e92cfaece68057d926a59fb78","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/pathfilter.js","hash":"a7147df39d5fe8daf77095e11210780822705f89","modified":1481666267000},{"_id":"themes/gandalfr/node_modules/resolve/test/precedence.js","hash":"367a49e4b83e4b0a2f66647cebc7a1a9a2763626","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/sass-graph/bin/sassgraph","hash":"983e1581a6c68c99ccca85cb709081aa9a79c01c","modified":1465989192000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver.js","hash":"4a258684a3ef76be9096159b0ade6581fba7748a","modified":1481666267000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver_sync.js","hash":"b26d55f328e26e10b7f0707b9070d8edf2992b39","modified":1481666097000},{"_id":"themes/gandalfr/node_modules/resolve/test/subdirs.js","hash":"f3c7f34593422d07cd1a31d0ef8eb2292cb13de7","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/.DS_Store","hash":"a869eb648131ea2474756fa7f0a90fa00bfa5991","modified":1488867640000},{"_id":"themes/gandalfr/node_modules/semver/bin/semver","hash":"95e0a5fdac7ea5824aff144c4416ca4a31b2ea6f","modified":1413420141000},{"_id":"themes/gandalfr/node_modules/semver/test/amd.js","hash":"ccad9d5517ed6d00ca48b4bc8771ec6760b3a4c9","modified":1371509390000},{"_id":"themes/gandalfr/node_modules/semver/test/big-numbers.js","hash":"872ac0774f3f343ccfd02ca284c07fa075cdce62","modified":1427475356000},{"_id":"themes/gandalfr/node_modules/semver/test/clean.js","hash":"7a88bbd0388d1e2eede4a8dd9a9ba6210d7a39e9","modified":1412103158000},{"_id":"themes/gandalfr/node_modules/semver/test/gtr.js","hash":"7359784e6c5e19855b9e32a2ef93f4df3a6d9d17","modified":1412119384000},{"_id":"themes/gandalfr/node_modules/semver/test/ltr.js","hash":"69d7e8e5a76df2dd0928837fb929093bafe2fd1f","modified":1432937866000},{"_id":"themes/gandalfr/node_modules/semver/test/major-minor-patch.js","hash":"c0f36d7d593f43792b7e0bea967ee138168300e6","modified":1423771405000},{"_id":"themes/gandalfr/node_modules/semver/test/index.js","hash":"cea38436e24a1bc57347b06eda0d761dba49f732","modified":1432937866000},{"_id":"themes/gandalfr/node_modules/semver/test/no-module.js","hash":"c542818ea235b00c16f83f88924a6ffacee07d9d","modified":1410475074000},{"_id":"themes/gandalfr/node_modules/sigmund/test/basic.js","hash":"6424a3fd17afb57e34890c0c330ead99ceb5af25","modified":1344873467000},{"_id":"themes/gandalfr/node_modules/sntp/examples/offset.js","hash":"5b78885677fd2f0eae4c2fb6c04c2d6e2f39bf49","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/sntp/examples/time.js","hash":"9a7e69f5ee15afc381ce433cfa867bff405ca81d","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/sntp/lib/index.js","hash":"eeed7222493e633069fe267f915f7d13b12df094","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/sntp/test/index.js","hash":"bc5aae767cff3fcd90a9a4b2d6ec0e6fea66988f","modified":1409946595000},{"_id":"themes/gandalfr/node_modules/source-map/lib/array-set.js","hash":"cb57fcb56562fafa47bdd0a9531d6eb2e0ca0119","modified":1461698974000},{"_id":"themes/gandalfr/node_modules/source-map/lib/base64-vlq.js","hash":"493d3d895198dfaefe88d2b066c272552ea35889","modified":1461602647000},{"_id":"themes/gandalfr/node_modules/source-map/lib/base64.js","hash":"269e8e4dcb82db12f6e2a6187e7be46bee604ab0","modified":1461602647000},{"_id":"themes/gandalfr/node_modules/source-map/lib/binary-search.js","hash":"b4333085d02fb4c091361de85d5cb368a3ce7632","modified":1461602647000},{"_id":"themes/gandalfr/node_modules/source-map/lib/mapping-list.js","hash":"68a9ed5c0a48a384f64efaec04444a464952509d","modified":1461602647000},{"_id":"themes/gandalfr/node_modules/source-map/lib/quick-sort.js","hash":"e4adf67561f701e7563d7db979e5c9ff8d60267b","modified":1461602647000},{"_id":"themes/gandalfr/node_modules/source-map/lib/source-map-consumer.js","hash":"bf1d511c205859d7f157c1e89fd71492fd61ad4b","modified":1462209639000},{"_id":"themes/gandalfr/node_modules/source-map/lib/source-map-generator.js","hash":"30ce2a46cc82c1a1ccb115c64cee9556469b491c","modified":1462209639000},{"_id":"themes/gandalfr/node_modules/source-map/lib/source-node.js","hash":"8da910cdb46f59e6ead89b9cc1772e25504f096d","modified":1461602647000},{"_id":"themes/gandalfr/node_modules/source-map/lib/util.js","hash":"91079da4160ce05a7760b1e2bdc5f3d2cca955b0","modified":1462209639000},{"_id":"themes/gandalfr/node_modules/source-map/dist/source-map.min.js","hash":"b5fdf8027fe81b461195b0f1e8937dfcd9691a6a","modified":1462209639000},{"_id":"themes/gandalfr/node_modules/sshpk/bin/sshpk-conv","hash":"83421a52e1420251e70586af88d6e2e34f3a7fed","modified":1472499521000},{"_id":"themes/gandalfr/node_modules/sshpk/bin/sshpk-sign","hash":"75271a4b0392b5549555f50085b991e8d9a3bd0c","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/bin/sshpk-verify","hash":"a74dd8749820e0a9e9d334bd09665d6e3e4885f2","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/algs.js","hash":"95cac832aaaa1d70d2a18bd42559a147dafbf11b","modified":1461968288000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/certificate.js","hash":"a7ee2dd2d823ba690daec72568713b289d8bb9b1","modified":1469729278000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/dhe.js","hash":"de6f67e80ebce95a5272c75afcf05ea84ac45b3b","modified":1461968288000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/ed-compat.js","hash":"a05999a5907f0027ba834b8ee4e819380a5108ea","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/errors.js","hash":"b1492a5f7867af3b22be7135c44764a6e9176d3c","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/fingerprint.js","hash":"c8d3a671de8f36554c65f02d417069ae8fc706ab","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/index.js","hash":"1faf8e3e0c1771d6877244794b2bde68a4ab3cdb","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/identity.js","hash":"8e8349277d7933c154d853d214db23a200c14960","modified":1484356089000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/key.js","hash":"b431b3bcbb007734c8488e095f2dc30c3cbb8074","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/private-key.js","hash":"80fe709755a54c117f2b58ce231f37e255744189","modified":1469147808000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/ssh-buffer.js","hash":"2054816cb78235b88544615978878386c76ace84","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/signature.js","hash":"2220920ed48ef04f86bf5ab129c3baefbf1ba317","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/utils.js","hash":"c9663ff056d49ed9c8a3488cc33ade1ccb9292e3","modified":1472499521000},{"_id":"themes/gandalfr/node_modules/stream-consume/test/tests.js","hash":"29526367d73a53fc7b16fbba3a160ffe75726a75","modified":1405911548000},{"_id":"themes/gandalfr/node_modules/tar/examples/extracter.js","hash":"5d8e2fc93644c2ca104784eeaf20ace3beaefbe2","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/examples/packer.js","hash":"0ac22b0e315bab4f3f2868dfb042284f1e2ddcbe","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/examples/reader.js","hash":"cfad58596007c29f55e81c3f2ef0cbeb36fe405d","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/buffer-entry.js","hash":"b35d31f896a337c570f9c190eeb47ec9856363e5","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/entry-writer.js","hash":"f9b75bb753e430b2230368ed08eb72593974cb01","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/entry.js","hash":"c2bd4992c618912cd4f97a24ad2a08abb3cb1c2b","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/extended-header-writer.js","hash":"b0de18dcef271e4155ce5ea54fe338d2ea30454f","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/extract.js","hash":"e129e091bf774bd55306c83b236fc6a88439bad5","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/extended-header.js","hash":"2c7ddebe2574be81d74108f93eeb82bba51b6ce5","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/global-header-writer.js","hash":"290abcd884f307f01b5976f64513ada8123d369e","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/header.js","hash":"df2b7d40396b1196c12ac98f5edd71dfc82f0784","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/pack.js","hash":"a947d14daaeb9da1200effbbae8e1dd546bcafbb","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/lib/parse.js","hash":"2b111ca0c4d1cc9b3774de8b173c780992f06481","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/00-setup-fixtures.js","hash":"478d75b7e2f9f7e1ff2f67de28bc200dfec2f954","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/cb-never-called-1.0.1.tgz","hash":"905212798798b872f044c27b121a89f9dc6acc36","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/dir-normalization.js","hash":"69f737fb6122594c3ece01ed496bf1993b8bb1aa","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/dir-normalization.tar","hash":"a639e5983c0f19acf71640690805db289c615f0a","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/extract-move.js","hash":"671800188ee6ae088149cf3d397baba1ac7922bf","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/error-on-broken.js","hash":"f25a0ce92dae3c121813eeb92c030a89f4c7ac25","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/extract.js","hash":"17def7f8737eb5c57e01c216cd8e0dca06ce5d7e","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/fixtures.tgz","hash":"da2704914886317b2cb3d72f320ce260d9cab255","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/header.js","hash":"12629717346691f14ad95ac6eee7e6ce77b54f12","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/pack-no-proprietary.js","hash":"c36cb44365b2464abf06e7544e1c8c24aca83165","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/pack.js","hash":"88dcf40d91cde99fd8fff61da7afa64bddca0125","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/parse-discard.js","hash":"8a179a875af81c7591861cdb84421fad4a4bbf8b","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/zz-cleanup.js","hash":"1974a7ab552f18e6b80a0b49e54d11ce79c48793","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tar/test/parse.js","hash":"6308611e1f2a1c0e5861e880a6933e3df3a166b5","modified":1441849626000},{"_id":"themes/gandalfr/node_modules/tough-cookie/lib/memstore.js","hash":"ecd6269063fe718d5b46d4127ff9d12065660a90","modified":1469134052000},{"_id":"themes/gandalfr/node_modules/tough-cookie/lib/cookie.js","hash":"bccee47eb4f388666a8ee1c9139cbc99fcb75f50","modified":1477414969000},{"_id":"themes/gandalfr/node_modules/tough-cookie/lib/pathMatch.js","hash":"3d403b8aad536db9e97eef4915eb01ef53405323","modified":1469134052000},{"_id":"themes/gandalfr/node_modules/tough-cookie/lib/permuteDomain.js","hash":"700be205b7d0d3b4c4f442b7dc1b3299d47bf55d","modified":1469134052000},{"_id":"themes/gandalfr/node_modules/uuid/bin/uuid","hash":"cc4874ec4258ffff8b743227a3619f895941b563","modified":1479445477000},{"_id":"themes/gandalfr/node_modules/tough-cookie/lib/store.js","hash":"bcce2205e56bb588b4e6cfcd48a34610a5eccf82","modified":1469134052000},{"_id":"themes/gandalfr/node_modules/uuid/lib/bytesToUuid.js","hash":"1f0db10afcd07bfa32c7848a3e8b15c6b41e5b13","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/lib/rng-browser.js","hash":"a03998a26a85f72a34b71871c72716748cb4e1c2","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/lib/rng.js","hash":"c520402cd8b5f82ce83c641de241a2b733cbc3a9","modified":1480403821000},{"_id":"themes/gandalfr/node_modules/uuid/test/mocha.opts","hash":"aa309f274eb6145d696ab59c6da3974b0572c039","modified":1479446609000},{"_id":"themes/gandalfr/node_modules/uuid/test/test.js","hash":"9a8a17c0c8e1fe442766ae66d2d370204228f700","modified":1479448185000},{"_id":"themes/gandalfr/node_modules/verror/lib/verror.js","hash":"def5538e73a39e2d14388970751c55e55f9b06fd","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/tests/tst.inherit.js","hash":"298dabcdd9eff7081ee06a2b87e1118651190c9c","modified":1360175394000},{"_id":"themes/gandalfr/node_modules/verror/tests/tst.verror.js","hash":"947c77e0a31ea025d156d9323d8a7283bf87871a","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/tests/tst.werror.js","hash":"6b4007d450a8dfb9311ad86f44e3a7817fdeca53","modified":1360175420000},{"_id":"themes/gandalfr/node_modules/verror/examples/levels-verror.js","hash":"f8e7f3d3dbce6e61b53ea2a49a63111d156cf18e","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/examples/levels-werror.js","hash":"e6d95f8c3af86fe246ef883197c28df6b4884eb6","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/examples/varargs.js","hash":"67c7570a5aa82ca71690b558a3f3d1d321a7508c","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/examples/verror.js","hash":"8513abb6a724947494c7513adfa27d76931488d6","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/verror/examples/werror.js","hash":"10e842ef7ad2e6901398304c963c6ef1f44efcca","modified":1360175300000},{"_id":"themes/gandalfr/node_modules/vinyl/lib/isBuffer.js","hash":"aefbbd2bd806d061500533727e9867be7e2b861b","modified":1438723554000},{"_id":"themes/gandalfr/node_modules/vinyl/lib/cloneBuffer.js","hash":"434a91be54da878952c3128a9b47cf6521268426","modified":1409296013000},{"_id":"themes/gandalfr/node_modules/vinyl/lib/inspectStream.js","hash":"7ee432c397a0d55d6a7ec0c60550819f016652cb","modified":1409296013000},{"_id":"themes/gandalfr/node_modules/vinyl/lib/isStream.js","hash":"fe040abc25abf6b00173ebc661da4c52960b5e69","modified":1387591573000},{"_id":"themes/gandalfr/node_modules/vinyl/lib/isNull.js","hash":"9af85a81bcaf79ffd0ed2de0b5586991a7651ccd","modified":1409296013000},{"_id":"themes/gandalfr/node_modules/unique-stream/test/index.js","hash":"76236d024585134039fe5a66e381a0bc9e3eaa31","modified":1379343519000},{"_id":"themes/gandalfr/node_modules/which/bin/which","hash":"5b6b3e1838316fb3f1b3b4194cdf49db0674eb17","modified":1462408202000},{"_id":"themes/gandalfr/node_modules/wide-align/test/align.js","hash":"c79138eb305db2b9fe6a7aa878c7520ac3d30daa","modified":1451544525000},{"_id":"themes/gandalfr/node_modules/yallist/test/basic.js","hash":"2a5fec5750c0e572b0766b765630c84c7d0e38bc","modified":1450554731000},{"_id":"themes/gandalfr/node_modules/yargs-parser/lib/tokenize-arg-string.js","hash":"ac5cae0fdb56f1bfecb43e3adab4b7f4f27ec8d0","modified":1453482659000},{"_id":"themes/gandalfr/node_modules/yargs/lib/command.js","hash":"01bc005abd9c64f443be57d0c08838fb653593de","modified":1468710357000},{"_id":"themes/gandalfr/node_modules/yargs/lib/obj-filter.js","hash":"c462414d19d69bc70c7cb4a1bd2324969925aebe","modified":1464758785000},{"_id":"themes/gandalfr/node_modules/yargs/lib/completion.js","hash":"f4300bb3800596da280da13b4bcee5cd3b6064d0","modified":1464758785000},{"_id":"themes/gandalfr/node_modules/yargs/lib/usage.js","hash":"660d370e0d4f3fd4307ec7957e80fa50808bfd43","modified":1464759424000},{"_id":"themes/gandalfr/node_modules/yargs/lib/validation.js","hash":"44c5176a0577a11ab3113fb41512116524dbb3a5","modified":1468710357000},{"_id":"themes/gandalfr/node_modules/yargs/locales/de.json","hash":"84141a95e205b714d207557453f4c35c561c234d","modified":1457071840000},{"_id":"themes/gandalfr/node_modules/yargs/locales/en.json","hash":"bcaeed40c958cd5ed4b1123dcf99a2f872895382","modified":1459744271000},{"_id":"themes/gandalfr/node_modules/yargs/locales/es.json","hash":"ffd0a1c430c70c4cbbd20d1fdd4aae467b8a7e00","modified":1457820410000},{"_id":"themes/gandalfr/node_modules/yargs/locales/fr.json","hash":"f015e2b7fb55f5a67a8c41a2794158eb3e90e6dc","modified":1458765701000},{"_id":"themes/gandalfr/node_modules/yargs/locales/id.json","hash":"c85bc495b03ce9f80ff8201028468128adc72787","modified":1459316625000},{"_id":"themes/gandalfr/node_modules/yargs/locales/ja.json","hash":"e91706314cbc5ab9bcb05da9adb10e067b6ad881","modified":1458765701000},{"_id":"themes/gandalfr/node_modules/yargs/locales/it.json","hash":"46216313725b2c8843a0ed1a7abbab9cf8e1646e","modified":1459744271000},{"_id":"themes/gandalfr/node_modules/yargs/locales/ko.json","hash":"290bb851a69cd7b578804a1cd4be2c5e98a7c074","modified":1457817732000},{"_id":"themes/gandalfr/node_modules/yargs/locales/nb.json","hash":"584081cb4e3c9ed5ad591895307b6a6705b330fa","modified":1459316625000},{"_id":"themes/gandalfr/node_modules/yargs/locales/pl.json","hash":"dec689ed823a5dd4e1c390188fdf242682a396d5","modified":1457071840000},{"_id":"themes/gandalfr/node_modules/yargs/locales/pirate.json","hash":"36c58937b254ae548d9c5bde0b686f5b51e7eccc","modified":1439528555000},{"_id":"themes/gandalfr/node_modules/yargs/locales/pt.json","hash":"6032932b63594b3ce18abf1837b3a2da1f16ed83","modified":1458765701000},{"_id":"themes/gandalfr/node_modules/yargs/locales/pt_BR.json","hash":"167530d0b950f8b4097437541ca175a415ef65f6","modified":1458188028000},{"_id":"themes/gandalfr/node_modules/yargs/locales/tr.json","hash":"9b03d920c6ef3ef11296d79b25d0a8dc2607744b","modified":1457817732000},{"_id":"themes/gandalfr/node_modules/yargs/locales/zh.json","hash":"eb7667c1c4a95e14c258d2e35f3317c5b9903472","modified":1464758825000},{"_id":"themes/gandalfr/node_modules/yargs/locales/zh_CN.json","hash":"eb7667c1c4a95e14c258d2e35f3317c5b9903472","modified":1468710357000},{"_id":"themes/gandalfr/node_modules/hoek/test/modules/ignore.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/test/index.js","hash":"f9112be27168572ac86d62b7abfdfbf94661c8b6","modified":1442857555000},{"_id":"themes/gandalfr/node_modules/hawk/images/logo.png","hash":"7b9844914960e180d2f243d74a50f2b4fa23fbdb","modified":1447968927000},{"_id":"themes/gandalfr/node_modules/postcss/lib/container.js","hash":"b401fc86ef45a6f73c147128782233ca095e371b","modified":1486329946000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/mug.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/mug.coffee","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/source-map/dist/source-map.js","hash":"72532f0633ff1b53ad18fcd4e6b94aa2e71a7058","modified":1462209639000},{"_id":"themes/gandalfr/.git/logs/refs/heads/master","hash":"a7730d5b4b4ca2ca75afe8c68be52eac92f270ef","modified":1493622763000},{"_id":"themes/gandalfr/.git/refs/remotes/origin/master","hash":"07169b0ec698cf789b38323d24762d74d5855d11","modified":1493622653000},{"_id":"themes/gandalfr/node_modules/asn1/lib/ber/errors.js","hash":"556bbb1b810ede9292493a70ad9a8644e5c4fb7a","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asn1/lib/ber/index.js","hash":"1ab39535ed24903d0f9e2a4bf74333702842080b","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asn1/lib/ber/reader.js","hash":"3cfcdc9225bb43dd8413dc3f1f05d4fcd32d0b30","modified":1443646115000},{"_id":"themes/gandalfr/node_modules/asn1/lib/ber/types.js","hash":"8a41886747dc1f7cde7e4e5cb60e1a3b8a4c813c","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asn1/lib/ber/writer.js","hash":"bdad4a0bb12fb5f91b789329fc4e4a45ecf87e64","modified":1443646115000},{"_id":"themes/gandalfr/node_modules/asn1/tst/ber/reader.test.js","hash":"de84b2d7317393c6e6a0cdef04bfbff82ba78237","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/asn1/tst/ber/writer.test.js","hash":"59892680384339812688163b346d12cc05e979fd","modified":1401981220000},{"_id":"themes/gandalfr/node_modules/are-we-there-yet/test/lib/test-event.js","hash":"789f7de8bbd4c357d114287391de03ae2c572ebb","modified":1454113848000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/align-content.js","hash":"ff4ed2d1b4be6162e4590b6cb11a83c93519c057","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/align-self.js","hash":"4c99d3713fc7feaefd961a789f94f1bd8d6c55c1","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/align-items.js","hash":"2cafebfb941352f6cf8e70e83e41051962456fc3","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/background-size.js","hash":"1ae587b05d7f0b2910933545b51f549df927a982","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/block-logical.js","hash":"bfa60779fd5e75cc5ccb7b2a464e5c0c1a94d99d","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/border-image.js","hash":"c6e74838cfa4985b232ef3af928ed44c0ca488fe","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/border-radius.js","hash":"2361907705fcd4dfaa45722abb6d6a4f66c0bcb6","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/break-props.js","hash":"7496f21d0a03ab7bf257f2ff9a372e72fd720723","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/cross-fade.js","hash":"a64eef61934b3d410f9cd50582b1a0c44f83c00e","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/display-flex.js","hash":"d28333be85b4dc29cf9e533011cc8c0f9c1e29a6","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/display-grid.js","hash":"d80d431744da51a17ea7bf3c2a359b31bc921df8","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/fill.js","hash":"e6d606549ec68f2c0b0edab4bb2bb9e33496256f","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/filter.js","hash":"68f5c4dd1ef028f69ef0b6849f7af839310e6224","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-basis.js","hash":"ce1c0cfa6b3415bf6d7130207fe078227c142918","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/filter-value.js","hash":"89446f819d34412d657b3ebb6bea630417d024c8","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-direction.js","hash":"4c8eed27603236644d94ab92c234d4fbe988caca","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-shrink.js","hash":"d1b71073d7b061237e3ccfde36cc440651e19d84","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-flow.js","hash":"a3a69349175aafc5231ea72ff1a37b11144292f3","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-grow.js","hash":"103b5436087a553bd5e104148729862e8b1a5c04","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-spec.js","hash":"bf77b28d6f8662b72f4ff6c50b3e8805203e291e","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex.js","hash":"365eb8b5a65bed801e3e1bd46dd4b0931ae2891a","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-values.js","hash":"2efd89cd3591fe58121dbffd63d0cefd497a66ac","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/flex-wrap.js","hash":"49f0426d45f7a2e61f558c56c9459a861ef39246","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/fullscreen.js","hash":"b9a8054f1ec83be10e2cfc57b83ae3e5f68fb26e","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/grid-start.js","hash":"7dfbb40a2ce7d9285196f870e5e195d788e8d4d8","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/gradient.js","hash":"47f9df7fb727c2c474a7715d5e4a518d3533eda9","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/grid-end.js","hash":"695dcea4da5badd52070142d2e77dcbe0b95ef6b","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/grid-row-align.js","hash":"fdbf835ddf820656a450e99d7eb562800c21fd38","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/image-rendering.js","hash":"dd8bf38bd3d4bb1b061d0f77bda49bc2eda4f73c","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/image-set.js","hash":"07629dab22579d7ad5ca5f0f2c4d065f86b2171a","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/grid-template.js","hash":"a9b2e9fac9d19be42fc22bfc89b399ec519c9194","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/inline-logical.js","hash":"0e537ab50ae67a4e97c7d257324cbd89260d8d23","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/justify-content.js","hash":"5d0a690a0f1f422a6c15d1d2c342253f7e5cabc1","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/justify-items.js","hash":"2de11575745374791fcf8593624e1ad9a9e12d2b","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/order.js","hash":"87f02851da7fcced7664423dcb70424ebaf73066","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/mask-border.js","hash":"4efb207a473c4f5d8a72f65e7817393c69fd7fc0","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/pixelated.js","hash":"3d31a57459362f49d8d1f49fb98de1981b1cc296","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/transform-decl.js","hash":"8147b17b8ec03131a837dcc476698768771dae83","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/placeholder.js","hash":"7c887ec2b7f41581eb2895d5b35006aafc722411","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/text-emphasis-position.js","hash":"b708b1c745b2eedf37418eb9b3937e8d8fb387d8","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/autoprefixer/lib/hacks/writing-mode.js","hash":"ad4d59cb106a7d3a70441533e162192e6797ece3","modified":1485878784000},{"_id":"themes/gandalfr/node_modules/dashdash/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1453918488000},{"_id":"themes/gandalfr/node_modules/dashdash/node_modules/assert-plus/CHANGES.md","hash":"b27cef2253f8ff8a83584bf1a55cec9d4dfbf517","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/dashdash/node_modules/assert-plus/README.md","hash":"d6771de291034391f0ec79175fff3428ed6d82b8","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/dashdash/node_modules/assert-plus/assert.js","hash":"8103ced007b61b3e45a420607de576faf7e1e0e4","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/dashdash/node_modules/assert-plus/package.json","hash":"4fc3769cddb0f422c672295e81088cb228415335","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/cross-spawn/node_modules/lru-cache/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999527000},{"_id":"themes/gandalfr/node_modules/cross-spawn/node_modules/lru-cache/README.md","hash":"d977bae4b6994f0a930d7e8727b099b8db4572f5","modified":1475279068000},{"_id":"themes/gandalfr/node_modules/cross-spawn/node_modules/lru-cache/package.json","hash":"efd279cf4ab8bd2b59fbd409bf851ed4883192a1","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/test/bin/exit_code.js","hash":"40624af9ab6a9a649fab3b0fb76e14b55cb64883","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/test/bin/signal.js","hash":"ee3b900f9cf7f6b62b0cf71cbeab36418438979c","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/flagged-respawn/test/bin/respawner.js","hash":"de8526198782c05f5b0aa039f4682f678c44297e","modified":1458636135000},{"_id":"themes/gandalfr/node_modules/fstream/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/fstream/node_modules/graceful-fs/README.md","hash":"649ce10ecea3a470be5c2d07ddeae45c7e7b3482","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/fstream/node_modules/graceful-fs/fs.js","hash":"8b8116f2fc0e6393cfed3b1076810ce5d02e0f01","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/fstream/node_modules/graceful-fs/graceful-fs.js","hash":"2daf54f71514b35a9b2724bc789b6dbb138a8e76","modified":1475530452000},{"_id":"themes/gandalfr/node_modules/fstream/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/fstream/node_modules/graceful-fs/package.json","hash":"c88d6cdaca44e9476fac52090244a794b78ed505","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/fstream/node_modules/graceful-fs/polyfills.js","hash":"431e3500426fc6640fed22993b07a602c47b002a","modified":1479843014000},{"_id":"themes/gandalfr/node_modules/getpass/node_modules/assert-plus/CHANGES.md","hash":"b27cef2253f8ff8a83584bf1a55cec9d4dfbf517","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/getpass/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1453918488000},{"_id":"themes/gandalfr/node_modules/getpass/node_modules/assert-plus/README.md","hash":"d6771de291034391f0ec79175fff3428ed6d82b8","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/getpass/node_modules/assert-plus/assert.js","hash":"8103ced007b61b3e45a420607de576faf7e1e0e4","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/getpass/node_modules/assert-plus/package.json","hash":"df5f9a260e8c18c70fe98f35e00a2e538017dc68","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/gauge/node_modules/object-assign/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477421624000},{"_id":"themes/gandalfr/node_modules/gauge/node_modules/object-assign/index.js","hash":"519ffd5a4c91b67302cc9947b794966d629860cd","modified":1484580833000},{"_id":"themes/gandalfr/node_modules/gauge/node_modules/object-assign/package.json","hash":"9dce6b13fa11925ff6d9edc0560490bd0f0579d0","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/gauge/node_modules/object-assign/readme.md","hash":"572b4503897c85bbef9ba7d01839242a507acf7b","modified":1478225968000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/README.md","hash":"3ecce92efae230a3f6debb25a8ce965b25c14072","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/package.json","hash":"35f66a8cd7a6202d9cc8893e747b845ed3f727d8","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/readable.js","hash":"52cc9c29efd6791d36b86828a49b4196b20d5857","modified":1460562257000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/through2/.npmignore","hash":"42c7f4a86782b81be271b4a9f31bbd50de1d3474","modified":1428599741000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/through2/LICENSE","hash":"9111ee4142f0ea90481a6805bfdf840f6e5213d9","modified":1428599741000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/through2/README.md","hash":"dfcdcd7261144b54eb808605602d2b11256b9fc5","modified":1428601273000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/through2/package.json","hash":"4a8083f43a740ffb03e5d94655385b453a09bd40","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/through2/through2.js","hash":"f1b43012d500dc93017f8fc933a0f79bcdb5825b","modified":1428599741000},{"_id":"themes/gandalfr/node_modules/glob-watcher/test/fixtures/test.coffee","hash":"abedc47a5ede3fab13390898c5160ec9afbb6ec3","modified":1397537692000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/.npmignore","hash":"df0230e54e04f0f4739f4cdf671570dced4a1223","modified":1350315195000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/.travis.yml","hash":"b0e08ffb1a32bb17941785759a4154f995139ae8","modified":1344299893000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/LICENSE","hash":"a042a6c4248c82d810b9b617958f222c0de0f6c2","modified":1343093261000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/README.md","hash":"d44c73a135f6fbbc73c54586e74aa35cf802c1b7","modified":1344287108000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/package.json","hash":"8662cc2088f833c545c286e2d8dbd27bbd566473","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/glob.js","hash":"f3efbd66544514b81ffc5f7e9e44da191cf015aa","modified":1361809438000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/graceful-fs/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1322520827000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/graceful-fs/LICENSE","hash":"a042a6c4248c82d810b9b617958f222c0de0f6c2","modified":1369627536000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/graceful-fs/README.md","hash":"c29647b03fe278f98effd353b3df894557b04b52","modified":1367341461000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/graceful-fs/package.json","hash":"714fb59a3251b41f9579c45db398f3070b5c19db","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/inherits/LICENSE","hash":"3b0e8d58a362b1787ef3504fba4f593b22f3cee4","modified":1440704194000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/graceful-fs/graceful-fs.js","hash":"4d221ed85a222893cd9b37f07d78ecad306c6b10","modified":1373442338000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/inherits/README.md","hash":"baafb44348cace2d60b31a3663f43e856a7ba282","modified":1302136514000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/inherits/inherits.js","hash":"0e8b7c5a1e8020e3a93191c12bb0bd529dacfb6e","modified":1302136514000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/inherits/package.json","hash":"a48cadc8b5d87e028c77e2cf74cb14d02e0d0012","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1372866257000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/LICENSE","hash":"4a1927e74796f06ac7e7a687ca6b44d39c65d8f4","modified":1311966493000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/README.md","hash":"32a95bf2d3d1c5463542d236af28b5ffb12b7d2d","modified":1387173103000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/minimatch.js","hash":"66de40ad270165fabe16e5af02fae0ce2d558b7f","modified":1387223424000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/package.json","hash":"965917211d2f83dff3e7b665f291d174faa2d2d5","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/cache.json","hash":"24dd76d544e1c3c4be343e1a88e9ffad19705021","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/cacheEntry.json","hash":"abb6d0b052b7f624f2e9efd5508c0614c4831b36","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/cookie.json","hash":"fc6b61b7f65667ebd270e2daadfc21e6b6aec452","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/content.json","hash":"896c9f34e3f38c5687255edcec798bedc98221a0","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/creator.json","hash":"b0096cca448769435a9a1dfc8835bc560957fa97","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/entry.json","hash":"161d6c3ab62b4fc423c5aa1d3ee1f67d98c008ca","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/har.json","hash":"9b5debe33b9aa8c6055bb950ca5f19b1a1d82a42","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/index.js","hash":"1bab9e9eb0c54be915c5303ee23cba4faaff0194","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/log.json","hash":"9c72f7600e6fad2818459e76de0140ed9cb67422","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/page.json","hash":"d3ca0cf8dbcc30f33b91b8e8db85982b01cc5986","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/postData.json","hash":"123d9c6853b0e1a33147e2c04404aa33cf53a1ff","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/pageTimings.json","hash":"2661f2488c8bfaec68b30b4e9dee25089277e448","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/record.json","hash":"23a2f8245bfef93b6b87696af51c1e9d4a0302df","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/request.json","hash":"ecdaba295ca01aeaa9f3f9779d1c94a051af5578","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/response.json","hash":"e01a380eeb0b3c87c37f936ebf4888eae55dc3b1","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/hoek/test/modules/test1.js","hash":"32aceae0ba03e9116b108f41d74bea7d163bb56f","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/har-validator/lib/schemas/timings.json","hash":"4879ffeb448af68307aa46910bd2d3ac2fde9246","modified":1448373288000},{"_id":"themes/gandalfr/node_modules/hoek/test/modules/test2.js","hash":"31071671a8bdb854825c1cd90e29c30e9203b9fc","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/hoek/test/modules/test3.js","hash":"4b695a807655475e7d89966828af28b7dee15ec5","modified":1441988248000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/fixtures/cosmic.js","hash":"94a2af635cae7d0491fce9767a67d06f651e0244","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/additionalItems.json","hash":"75644b309367675ce21d8b35b9baee049a58e159","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/additionalProperties.json","hash":"34478026a586b1ff8b96dbe54efdf7515099da7d","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/allOf.json","hash":"e98aea1d36d932870561f0c32c32fc5858f251f9","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/anyOf.json","hash":"8081feb305d328878b37a7cc3b296eb5544c239d","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/bignum.json","hash":"32b70fb2c2156c979702eec5c18a86c1fe6d0bd7","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/default.json","hash":"17c051cc94a9fb40ad627b04a41d7dce9150e3b5","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/definitions.json","hash":"0963ac4f014a0faf6ad37554c9af03f63dad9b02","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/dependencies.json","hash":"d239f1bb8cfffb7487335c73e02c6cda10d4ef5b","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/enum.json","hash":"4b96cc24245950f9fad0916113a5056d9f51c2e5","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/format.json","hash":"3d60bdb3fbb2d47da991e99e51bb9ab241703c44","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/items.json","hash":"873828cf8ad5d2701022650e99367cb0a89624b0","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/maxItems.json","hash":"580cdb7c89cd07b45f3fdadb2279bb13108b79b4","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/maxLength.json","hash":"3f6273e86c31605607384559df5ee9c92201c5bc","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/maxProperties.json","hash":"1703d6ef976a74eae8ea6cd21c131853c6ca5f6c","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/maximum.json","hash":"c205edb4c5bd171c9e1f4955f5cc3b94ca78cb0c","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/minItems.json","hash":"176fedc074768c6ec5c7ceb979f23a6a4bd0be58","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/minLength.json","hash":"99eb79755bf43df641900a01e8ac9ff5becec8d5","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/minProperties.json","hash":"b61b2829899d8a5f6bbc8bde2b694b69bb35d38a","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/minimum.json","hash":"1a849968c80db05a9ad0a92481edd93dee567804","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/multipleOf.json","hash":"e8c9555c09db80f5398d2d73840358a0aec80529","modified":1456180252000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/not.json","hash":"5b9567e8409e28b256f3704ca83447f0d0abb707","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/nullAndFormat.json","hash":"8682b818844ecab9f69642d3f121eea59877f6e0","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/oneOf.json","hash":"6772cacb066e5458a7fca9a47cfee27b56110d6b","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/nullAndObject.json","hash":"dc0ff1a9b5740271c3e92436a697a50ee8168046","modified":1437940209000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/pattern.json","hash":"5b09d287b8d5170ba4442429bf5309eae1f3cec8","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/patternProperties.json","hash":"e0080348b213f1d004af7d5c43c2f3f29375224b","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/properties.json","hash":"1aacdf890a9b844c7275f6ad2f3acc2f9100219c","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/ref.json","hash":"a9dd881b0a9d5272897be0cc8550c5a64841fc8c","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/refRemote.json","hash":"ef0c43623cad9a3ceb7b407272062ca55c1c9c7e","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/required.json","hash":"35b980ec46ea56c7c7c38afc63c84a863d4b3132","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/uniqueItems.json","hash":"8c9909ffd2abf8f625f81c18a43c789efa369e34","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/is-my-json-valid/test/json-schema-draft4/type.json","hash":"e2e4371fb68d01ecbc7a5022348c0ffd05d1fd9b","modified":1434031383000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/package.json","hash":"b375da02e3d36e87e3ef8145a077f79106b16e58","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/isobject/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/examples/calendar","hash":"3e53cb296ba1799f39c5a00bc4627fa10e26e165","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/examples/address","hash":"b6e70440f5faf725b978da4e92f6f39100377674","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/examples/card","hash":"c1405e471f81bbb4eea94c2ef85fa07195a8ad80","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/examples/geo","hash":"74d8c66f1ba74c6cd330b8acd5948efb5f2879e4","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/json-schema/draft-03/examples/interfaces","hash":"9666b12a3d05e526886aa2650f0439d32b25f0dd","modified":1289526444000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/graceful-fs/README.md","hash":"649ce10ecea3a470be5c2d07ddeae45c7e7b3482","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/graceful-fs/fs.js","hash":"8b8116f2fc0e6393cfed3b1076810ce5d02e0f01","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/graceful-fs/graceful-fs.js","hash":"2daf54f71514b35a9b2724bc789b6dbb138a8e76","modified":1475530452000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/graceful-fs/package.json","hash":"ea29fc8987c103692d047752b0c7a574a5402925","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/strip-bom/index.js","hash":"a51c5fa1cdfa6534d6a2873b5f2f0994574af6f7","modified":1435582949000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/strip-bom/package.json","hash":"0dc51f328be0c9bbe9e842850faa29db8f592cc0","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/graceful-fs/polyfills.js","hash":"431e3500426fc6640fed22993b07a602c47b002a","modified":1479843014000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/strip-bom/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/load-json-file/node_modules/strip-bom/readme.md","hash":"f7fe88ef200b48769bcbf27e47eec8968f62ff74","modified":1435583499000},{"_id":"themes/gandalfr/node_modules/lodash/dist/lodash.compat.js","hash":"41eb73dd63d0732df32e1a8483976c3abd973b29","modified":1427729642000},{"_id":"themes/gandalfr/node_modules/lodash/dist/lodash.js","hash":"864d4955dce02ae26b48f8c0846e5c62d8c9bdb1","modified":1427729525000},{"_id":"themes/gandalfr/node_modules/lodash/dist/lodash.underscore.js","hash":"61d3db53b8b711131d87f5d74c2bdf4754e0e933","modified":1427729433000},{"_id":"themes/gandalfr/node_modules/meow/node_modules/object-assign/index.js","hash":"519ffd5a4c91b67302cc9947b794966d629860cd","modified":1484580833000},{"_id":"themes/gandalfr/node_modules/meow/node_modules/object-assign/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1477421624000},{"_id":"themes/gandalfr/node_modules/meow/node_modules/object-assign/package.json","hash":"132ca27d6d6d400978a56534b050cfb74e8a617a","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/meow/node_modules/object-assign/readme.md","hash":"572b4503897c85bbef9ba7d01839242a507acf7b","modified":1478225968000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1372148119000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/LICENSE","hash":"b2e68ce937c1f851926f7e10280cc93221d4f53c","modified":1372145420000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/index.js","hash":"c69b3860fa8b40337db188fdfb201077df93ef5b","modified":1392957961000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/package.json","hash":"ff964d72fbadc5ff95adbf4fa870b35355c57b67","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/readme.markdown","hash":"b037b8453fa008383cf7495b3736aa7cc217deb1","modified":1372148196000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/buildbot/buildbot_run.py","hash":"bfbddd25c931004ee1d0d6e84f319f50e219e501","modified":1447559391000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/graphviz.py","hash":"8bf80a564b3356ed63a9a00ca88ba9eea36cb507","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/buildbot/aosp_manifest.xml","hash":"5edca3606f96a1ccd4e25bb5a1695298e83a53f6","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/README","hash":"3d71e7c0f5b5640a28f98b87a98650be9d552b44","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/pretty_gyp.py","hash":"17c7d785d9ce21155f8e7a8da66222e95d353dbb","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/pretty_sln.py","hash":"d08b00a60c9cb153af76994808b0036cb49fc04e","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/pretty_vcproj.py","hash":"7de1d8e61efa649e9add8247d61bc3220317e915","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/glob/changelog.md","hash":"97bfa68176e50777c07a7ba58f98ff7a1730ac00","modified":1455171806000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/glob/README.md","hash":"449f1592c9cf2d32a0d74bead66d7267218f2c4f","modified":1474396065000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/glob/common.js","hash":"2f948b495467f2a7ac0afbb1008af557ab040143","modified":1475183978000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/glob/glob.js","hash":"66bfebbe52ff9e865cdc3bfafc082ef3ec8c25a2","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/glob/package.json","hash":"e902c88eb0277b9cac8d321cc5bd15adf4360f63","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/glob/sync.js","hash":"7482bc56682b97175655976b07044afcb65b0cc9","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/graceful-fs/README.md","hash":"649ce10ecea3a470be5c2d07ddeae45c7e7b3482","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/graceful-fs/fs.js","hash":"8b8116f2fc0e6393cfed3b1076810ce5d02e0f01","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/graceful-fs/graceful-fs.js","hash":"2daf54f71514b35a9b2724bc789b6dbb138a8e76","modified":1475530452000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/graceful-fs/package.json","hash":"6aa3f5fb218120d757656e4427eb4c166f168fb6","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/graceful-fs/polyfills.js","hash":"431e3500426fc6640fed22993b07a602c47b002a","modified":1479843014000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/minimatch/README.md","hash":"c5acb4041ec3730165d4d6ce835a6bd801c8ccec","modified":1456006221000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/minimatch/minimatch.js","hash":"c2ee9ea234b053f5177e703334036d505eaa0978","modified":1470677899000},{"_id":"themes/gandalfr/node_modules/node-gyp/node_modules/minimatch/package.json","hash":"2e782d982286d2716b60ed700b6b8f222fafc3f1","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/samples/samples","hash":"202610ceea0a2751bf0991f8973e946f83aee07f","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/samples/samples.bat","hash":"56cd7150b96bf610ca6cef96162947296b0d4e7a","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/fixtures/ca-bundle.crt","hash":"e1f19bad76cea36a513f21f871966edcfada9eb4","modified":1455245408000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/fixtures/ca.crt","hash":"c1d5b151e9f1134da227f4078ac07b745175de71","modified":1455245408000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/fixtures/server.crt","hash":"51286420df35083c964caa4f7889d1c58a253a52","modified":1455245408000},{"_id":"themes/gandalfr/node_modules/node-gyp/test/fixtures/server.key","hash":"0025a18fd8a9f784493f3e32a7e85aaf5901573e","modified":1455245408000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/async.json","hash":"43258320fc1abc9bd1bdbf56e9e470c5372524c7","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/coffee-script.json","hash":"05206f3be670938bff37ba9f9b6b1e1534da5dd9","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/bcrypt.json","hash":"08b39f6311a79be8729d7bf1d049f5b3d882abee","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/badscripts.json","hash":"a3970c05ac4c9cfc7d1db09fe3ada39ef5aa72a0","modified":1446502955000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/http-server.json","hash":"3f0b992a97488ff99992412e6be68dcded84e02c","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/movefile.json","hash":"ad2b7c87841807ed5057b6aa01442d269f6b2638","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/no-description.json","hash":"2be46cd21e813c15f5facfe0c042c4ec68427e15","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/node-module_exist.json","hash":"42e9cc594ead5217935ccdf30760f57f0b8a76a5","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/read-package-json.json","hash":"676d95086ba35ae3aed64cc4ca0e483f39b76419","modified":1446152527000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/request.json","hash":"4f436def8d797fc254686d621766800266d527d1","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/npm.json","hash":"cc2230d04260e633b93da4cfd18142259a658b54","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/normalize-package-data/test/fixtures/underscore.json","hash":"e3d6bdd0eb77167e4cfccce19f01e4b5f25e3e4d","modified":1414473106000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/gaze/LICENSE-MIT","hash":"2dd5e3e2f24ba776477bf690f41339a1131916b7","modified":1455680258000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/gaze/README.md","hash":"0f1d97fc5ac242dd440dffeaf64e004a890f8851","modified":1475004642000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/gaze/package.json","hash":"7e9c201b603161ba02f4d1bccc1394b8eca6d39c","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/globule/LICENSE","hash":"1757ae6f66234f429514faf74d6aab06841a9bbf","modified":1460330934000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/globule/package.json","hash":"252e4d1927c3cb8b9c5e37456edf0ce533f3b7d7","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/globule/README.md","hash":"212c9acde4e3073b6d332c43830d0cec87a08818","modified":1477268935000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/glob/README.md","hash":"449f1592c9cf2d32a0d74bead66d7267218f2c4f","modified":1474396065000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/glob/changelog.md","hash":"97bfa68176e50777c07a7ba58f98ff7a1730ac00","modified":1455171806000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/glob/common.js","hash":"2f948b495467f2a7ac0afbb1008af557ab040143","modified":1475183978000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/glob/glob.js","hash":"66bfebbe52ff9e865cdc3bfafc082ef3ec8c25a2","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/glob/package.json","hash":"9cb9f07246b354b5305999110151a0843f3065a9","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/glob/sync.js","hash":"7482bc56682b97175655976b07044afcb65b0cc9","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/minimatch/README.md","hash":"c5acb4041ec3730165d4d6ce835a6bd801c8ccec","modified":1456006221000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/minimatch/minimatch.js","hash":"c2ee9ea234b053f5177e703334036d505eaa0978","modified":1470677899000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/minimatch/package.json","hash":"e5dbf8ac02c929f79315edbc5e1eb3927e44c4d1","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/.editorconfig","hash":"ac92cae9a4a59561bff06e67385cfbb6567aaa71","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/.gitattributes","hash":"ba3dfe345280bdcc5e817bb02cf49b8b8d8e1c4c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/.npmignore","hash":"3b5ae321a2eb074f31d15762ae51b853971032c3","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/COPYING","hash":"dc6b6d4b9ae804ab0dd95d46d148ee533bec260f","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/.travis.yml","hash":"38d38f80c7353fd29b14dba43d0826e60e3911ca","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/GNUmakefile.am","hash":"890032ca57255bb904054fad70b03165aafc26fe","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/LICENSE","hash":"4d640cc322117dec7f97632e6ed4319131a16ad2","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/INSTALL","hash":"43b8a3cf953a0e27840c87cd40c512044aca3840","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/Makefile.conf","hash":"2d0929fdd3e87182431043e729c637afca655216","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/Makefile","hash":"55ab1d190f25107841b4f4a69452fe8a4e966029","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/Readme.md","hash":"3c284eca3855e6c1cbe1b57ea0d4a410c6954197","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/appveyor.yml","hash":"2089dbe4cade8737e61dbc95322ae64ebe483a02","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/SECURITY.md","hash":"7682df2633d251afee93920d5501403c06041b07","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/configure.ac","hash":"f32fa8727a9b14f5809b5b1cd3716747a7ef7396","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/extconf.rb","hash":"01e601be6ed04b017afe76da2828a011be4f61f0","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/version.sh","hash":"14f9f6a82a7c494d9442330ecbad6617792ead06","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/boolean.cpp","hash":"c17b85328e9c35bdfb647edc178c48044b4c715f","modified":1462188706000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/boolean.h","hash":"526f4edb56a5033f6044d63a35c3b517314b99ce","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/color.cpp","hash":"44f41a755bd42ee2f0e6a60ad38ab24ce5140ec4","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/color.h","hash":"8f5fa0a605981e005f70ec85a59a35700ead43c9","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/error.cpp","hash":"7704eb4e51ac5da80936e437e13849a3ab36c1ef","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/error.h","hash":"b351552e285a215b7172ad5ba82457478c9d4dfd","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/factory.cpp","hash":"eaa99ef8edfc448c4b991f582a5365173563ceee","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/factory.h","hash":"add2b90d01eb6aa0740b68c605877d8cea026dd1","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/list.cpp","hash":"331ec7990a7af29a327364326e25184a3398bd6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/list.h","hash":"9e6efc8c3812aa91f4e84c999f6090d05d42b19d","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/map.cpp","hash":"00f569d01d07fe4b7d07c9c66e307e5d9caa2bbd","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/null.cpp","hash":"733c282d019a60c035f308ade79077be873050bb","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/number.cpp","hash":"c3da7f3c8b37b1e847888375243085d520fbefef","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/null.h","hash":"50fe83074196b49237932020fdf9287393cda649","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/map.h","hash":"06f6a1140d9caca0ad61403b468c31abe12bfb87","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/number.h","hash":"1b9061e61e2bec387f3ed80d9ecfd1cfe312a72c","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/sass_value_wrapper.h","hash":"9c60d15e33fafa21beb6982ca5a536ab1146176a","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/string.cpp","hash":"1925a5c9aa6977ab562b85f33955d3752d70ab53","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/string.h","hash":"ce6da5545d143c4db595f10ae06860d3525975b5","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/sass_types/value.h","hash":"4969fbd34dff7054df7a529ad2dc7302c4b51064","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/scripts/util/downloadoptions.js","hash":"7d528d587d3986386b1186ba247b8df5cf622a35","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/scripts/util/proxy.js","hash":"04c16bea62f87f7a2f31414cfd65d2cb2111fde4","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/scripts/util/useragent.js","hash":"212cef33a7664f9f31d366f85ce4afe86ad1a980","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/path-type/node_modules/graceful-fs/LICENSE","hash":"6560c016f1644ce652d83d039d8ba9e64795fd49","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/path-type/node_modules/graceful-fs/README.md","hash":"649ce10ecea3a470be5c2d07ddeae45c7e7b3482","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/path-type/node_modules/graceful-fs/graceful-fs.js","hash":"2daf54f71514b35a9b2724bc789b6dbb138a8e76","modified":1475530452000},{"_id":"themes/gandalfr/node_modules/path-type/node_modules/graceful-fs/fs.js","hash":"8b8116f2fc0e6393cfed3b1076810ce5d02e0f01","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/path-type/node_modules/graceful-fs/legacy-streams.js","hash":"f4a3583d4c3e8b0c407ab8406bdafb02b4055b7f","modified":1474925868000},{"_id":"themes/gandalfr/node_modules/path-type/node_modules/graceful-fs/package.json","hash":"f2f00a61913d63b3c88621d0209bcbd11727f09d","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/path-type/node_modules/graceful-fs/polyfills.js","hash":"431e3500426fc6640fed22993b07a602c47b002a","modified":1479843014000},{"_id":"themes/gandalfr/node_modules/postcss/docs/guidelines/plugin.md","hash":"52f266c8b3a5d772486a94ed7b9f11a0d205e7cb","modified":1486329945000},{"_id":"themes/gandalfr/node_modules/postcss/docs/guidelines/runner.md","hash":"8bb1b496659808242e3c42909c3b9a50ba4c0d5c","modified":1486329945000},{"_id":"themes/gandalfr/node_modules/postcss/node_modules/supports-color/browser.js","hash":"2a31b5297e62e95536bf59191d31d7342051d2c2","modified":1484523947000},{"_id":"themes/gandalfr/node_modules/postcss/node_modules/supports-color/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1484523947000},{"_id":"themes/gandalfr/node_modules/postcss/node_modules/supports-color/index.js","hash":"e45b7c258058af81103415dd7478128629717b90","modified":1484526321000},{"_id":"themes/gandalfr/node_modules/postcss/node_modules/supports-color/package.json","hash":"a93790684ef7092893d0a3e478281000e8ec64f6","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/postcss/node_modules/supports-color/readme.md","hash":"112d6af03cea5f26256e3f2198f883c4cb86a428","modified":1484523947000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/README.md","hash":"581ce174d63a648b1252538e8c56005989a22c30","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/LICENSE","hash":"4aa67fb8f8b16d40701f21a8089a410a7d178ede","modified":1476891700000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_DataView.js","hash":"f5780de8f4171ced0e5f4c52aba30e58660070e4","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_Hash.js","hash":"572ffd33bbac9360f2d2591f7b44f72077d52297","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_ListCache.js","hash":"6df951af4fe1c2e428720e3fea6f7be3e6c64edc","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_LazyWrapper.js","hash":"9fc0cec80e680d4fe00cf4e33672e7f06d4b9b79","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_LodashWrapper.js","hash":"d1b595bd38e7764539f2cf99d2374f5c5aa72d70","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_Map.js","hash":"d58862090ce31a3295cb1dae73e44dcdba9b70bc","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_MapCache.js","hash":"afed02775f092be6e7328f19b6991a419baac9c7","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_Promise.js","hash":"7c7b81e303018a3045ca269b1be551224b607790","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_Set.js","hash":"d55df157d59851d181aae5086ac2b703f41e422d","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_SetCache.js","hash":"20a1a687b681a839dec78ee9b1c07e0fcee4cdda","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_Symbol.js","hash":"1d38c59f19e1b038981b4f0093d5b504d647c694","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_Uint8Array.js","hash":"9aca80cbc7c3b25813dbeb9561324d3d6ff7700a","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_Stack.js","hash":"581507149d88de85ca4bed49ea0c22467d4e65e6","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_WeakMap.js","hash":"f384e74a27955f5ab92345281a5fcb7d95111b58","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_addMapEntry.js","hash":"6f6dce49749e84c982596243a51d25804306d451","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_addSetEntry.js","hash":"10afab70d7d03d4141a90c4559594ac1b8fbd503","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayAggregator.js","hash":"4c46ec909fd72aca86fbba95f8042b39875a2fc2","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_apply.js","hash":"cf8c13531bb2ebaaa912ed42cd51d35749780b49","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayEach.js","hash":"904f07de69303a57591f6f012ae390d37af3f595","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayEachRight.js","hash":"d9c9880639a791b9b7a50fa4b9d95987a9adb530","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayFilter.js","hash":"de05ba1636ccd6f97f5527aaaa7bcd355ef96a3b","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayEvery.js","hash":"1c52b5548127fec0d8e876e6612bc7579b64c88b","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayIncludes.js","hash":"c1211511564c2074c24cd0a45e2fc63b94017d42","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayIncludesWith.js","hash":"ae055079baa36a646be539921afb899598b99ade","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayLikeKeys.js","hash":"3e0338e1cbbfb9c9f1b00adf873e176478b985c2","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayMap.js","hash":"50a635afd8bfba130f5ec9cc693c06eb0ed57690","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayPush.js","hash":"8b9d6d4bcd8f6661ee23634aecda75d5395db2cc","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayReduce.js","hash":"87b47db2e2ffbf2d671e1a974eec644d16424412","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayReduceRight.js","hash":"59ee39e14d1be368c9de8d06b8a62ba7a57f9c18","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arraySample.js","hash":"8b9ade97c8c183d58e1bcfbdcdf4b77b44c38245","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arrayShuffle.js","hash":"7023c88e8b1fd408755327bf70fe8d58c9496607","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arraySampleSize.js","hash":"cfe8e3d04b52e678f1475ed3df969bc5eedea859","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_arraySome.js","hash":"b3e385ef53a7d44b49f705315ae30efc4b81d5b9","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_asciiToArray.js","hash":"4331bba9d396c601f9ac9e676283bc3ac25ccf8d","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_asciiSize.js","hash":"befe650097f784878651dd1881da7efb3c0d0e73","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_asciiWords.js","hash":"164db22da4ac8a77d75ff57a1d63d0c4b9e48388","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_assignInDefaults.js","hash":"1e57537dff4aeb61f423c8e03e79fec425c4eb61","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_assignMergeValue.js","hash":"7fd48396b2393692858a13cd1d9fee4f9f56c034","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_assignValue.js","hash":"8889cd8e010ef1ab8259b9401f1ace23164a676a","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_assocIndexOf.js","hash":"b557d0550d466f2e0a20697d953061c8198bc3f2","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseAggregator.js","hash":"a0f27fd540785f2f3d54913950fcd555ca789b4f","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseAssignValue.js","hash":"c09bc3ff6aa7082144eef5b7583f795f7d16ac19","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseAssign.js","hash":"b12b76d29619f0fadf5c75c2b1f4d9c5a140af4d","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseAt.js","hash":"f3845e4c2378450b3322d6a9874abc34d503cbd0","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseClamp.js","hash":"ce109abcb1e12c30e97c79917e51520aa544db9a","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseClone.js","hash":"1de75721e6d3f262a8d279dd5b95d07d33f27d64","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseConforms.js","hash":"f518eceb5bf9e6dc4c9cf811e07c3ff8469c902b","modified":1477982317000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseConformsTo.js","hash":"f2f1431ffc02fb8ab64d86abecdcfe2685d2eb4b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseCreate.js","hash":"202aced68f2ce65d35a3d9e7ee56e373de463233","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseDelay.js","hash":"2a9133e727e4b0a6a9ec776addec9c791c812a4f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseDifference.js","hash":"b3dc957d88a325a9c4e11645134bc92eb807dec8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseEach.js","hash":"8df288083999c6711cdddc83d3f62ee092e0bd35","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseEachRight.js","hash":"f8f31ce8197c50e01ffe073be5e329bb95c5dd7f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseEvery.js","hash":"6e445241a2ceb58e400c619247c7f1d5a9ad76da","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseExtremum.js","hash":"931adb7b69f0e4683324797c8522f4f6c9ad6321","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseFill.js","hash":"474427d0d470b473ac37456e9ba151a966b2ade7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseFilter.js","hash":"aa90047b0a1231f770807422c67a36a4c3524365","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseFindIndex.js","hash":"a6811f11035fd20ebedd10b014566614f1fee155","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseFindKey.js","hash":"dc99c1f56a9a4559ae3fc9f3dbd7f8cfac677949","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseFlatten.js","hash":"045ce95760998450c806995fd49db7ce8fd96982","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseForOwn.js","hash":"8977ba022a8d144093f35c729822e6161d5fd291","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseFor.js","hash":"6d4e2744c99f75df073ca2e005317feea00533f6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseForOwnRight.js","hash":"29a6ce1c8ff0893a7a5021a5b54d3303dc7e9ef5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseForRight.js","hash":"2d3155596f8e8420da54564a69dadfadbd84cd67","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseFunctions.js","hash":"17d2e75a62a380223a943a07c0726c2d101c59ff","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseGet.js","hash":"82e0efada374e6932fbf5db37d81fc91fa2222b0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseGetAllKeys.js","hash":"f7c042fc3a0e1f89ee6f0ab2765615983796b303","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseGetTag.js","hash":"0b31cced2023204c0688aa59bb6d216d147dacb2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseGt.js","hash":"7368ca132e9b25b5f2ae74cfc01d619f284e84d3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseHas.js","hash":"0643a432e7d64d10615b4cd7092f2483c317cda7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseHasIn.js","hash":"e11103f369bb4fef0cbd193622c7126c70e0fc8c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseInRange.js","hash":"5186220a6519de4a9b0882ccbe565b74caea68cf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIndexOf.js","hash":"554c47e0383ef62d126d9d66aeb416e8e75ebf3b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIndexOfWith.js","hash":"bf10b85520bfc5add8a38c341e95a985e1ab3626","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIntersection.js","hash":"deed35c6297d406b8f5e0672a4cc99cbc95fd0b1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseInverter.js","hash":"84de1267be8b3b1973a696826a66247ff88e7c25","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsArguments.js","hash":"6c428b2e543a752140ee6b1223a659f45025a71c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseInvoke.js","hash":"58c6df1a241f9a6b5b8354ab34680bdfebaa8eda","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsArrayBuffer.js","hash":"f154818234664296ec6c8496be8cbe77c6909c8e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsEqual.js","hash":"07b896ef2b99ed354b6e5bed8bcb86f3927a24fc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsDate.js","hash":"c21fd699a4d3d38d28770746f33992778c3e2e94","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsEqualDeep.js","hash":"a2c4f3a6d73cc4f74155439ef4eebf2730b21b17","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsMap.js","hash":"b28a7248f4a44300ecc8080ad259944d4bb9a356","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsMatch.js","hash":"754996110340cd1f80a518a3259a6d4bde7f3f13","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsNative.js","hash":"1f36b939f5e5b0dc5f28ba7c47206d717b966c7e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsNaN.js","hash":"01512b16931316dc87e670d11c3b3d7c354366a9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsRegExp.js","hash":"663e2101fd6aa3086bddedb08f0d2e7bbc30c0f9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsSet.js","hash":"52795ae38cc0426dca2468342cf28dc2f78775f2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIsTypedArray.js","hash":"291f63ba52ab97764a33305efd699a2e394b2517","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseIteratee.js","hash":"032e8e56ae36205075f11cef6a7e91890a8425bd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseKeys.js","hash":"29d99b03db5dad4affa41a388470c89595e44991","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseKeysIn.js","hash":"eb88d9e4d4f429c250f3ee2f22312b885ce7a75d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseLodash.js","hash":"dfebf25a399f77aa4b416e1a92ba11ca59c2a8e9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseLt.js","hash":"92e621a7798bec567f79b006e1608a434b18d22c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseMap.js","hash":"e4d4a4031106e999c0f44a81dd62afc0f84f3fe0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseMatches.js","hash":"bb2332567191ebdf1e2414efb7279d989fa223ed","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseMean.js","hash":"0e536b0da31875ca4a97989a76d851b5589cc867","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseMatchesProperty.js","hash":"8b10c45edd35c80af82aea01c53e25a949fa482e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseMerge.js","hash":"98522fc0af55b07d81dc373b90c34f20406c45b6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseMergeDeep.js","hash":"945714c53207b62762cf4e7be64eff1fce7ad7e2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseNth.js","hash":"7afabca34c7963943eab1dc70a433231283cc8c5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseOrderBy.js","hash":"c76b0438a27df64a71220d2e819d9baa79d9641f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_basePick.js","hash":"33c6a636fd741b07bf1a4abf7644e936eb08ac13","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_basePickBy.js","hash":"57a1d3f67452b19bfeaf038926df1d51e7a4044f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseProperty.js","hash":"31d8d961f7383f581a360947b0b752e95d35cd14","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_basePropertyDeep.js","hash":"b9329f5af409f1578f2fb9fd34ccbdf8cbe54070","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_basePullAll.js","hash":"a140d4775d1ee69b9d6d434d5729f82b7e55bc8e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_basePropertyOf.js","hash":"33b60f71f3cbf5f26607a2b7356070f8f6953223","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_basePullAt.js","hash":"e6b8fcda3e17f1ca57449151290b4a25e2157767","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseRandom.js","hash":"86fe0bbec2bf3b242a8d861abd894f9281c2408a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseRange.js","hash":"8816c954f5f5c9c100a51ae5be416a4661e418ed","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseReduce.js","hash":"96e87d251b7bbf30707b39b529243e5d3a7f5c2f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseRepeat.js","hash":"e5acd9c33e9026b8848de16db87d9ee1dfe293db","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSample.js","hash":"bf50189b8b304ff4bafec174b108a7fe25a6a003","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseRest.js","hash":"e31a38bffa598aef97317e7b1970a212a4d44d00","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSampleSize.js","hash":"b05eb913d80f60e274e00632d5499319bd0204f2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSet.js","hash":"59de363502fbca30075e9c5df19f29fcb806bff3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSetToString.js","hash":"4fa840e62be63264b265b19fff3dbad4540a376b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSetData.js","hash":"fa3ddde4d03be0d225fb7e96d1b5f86f0e321453","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseShuffle.js","hash":"62b58e90df1ca7ee5d44cd923fd531f1964f37a7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSlice.js","hash":"959756556fea236343ff752adb6b869bcac82e4b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSortBy.js","hash":"77483347d5381f336bed3174c5b301f40dfc7a24","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSome.js","hash":"4be43bfa949a8292f8f780eeeb83bb5da00f58b7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSortedIndex.js","hash":"6a353c6feb19a86665f9ea37ae0ff7f5ff5a1d9b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSortedIndexBy.js","hash":"23b9368bcfe7afb35249a3a2bf880a170cc72ccb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSortedUniq.js","hash":"c2ad97df99636c7977b6374e44cb61dedd64aece","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseSum.js","hash":"e96a801668916a3027558a8795a4957e11c791f1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseTimes.js","hash":"7f3edc2bfd65d843b592ff123759c9d616ce3a64","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseToNumber.js","hash":"1d6f1a52fdbddf557ef5d870c3ad6fecb7089af9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseToPairs.js","hash":"d6ad1c204c16fee82d17a5b4febca922a78cda47","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseToString.js","hash":"f2a75bd83872d649b56a1c0fe7b785ee13ac3cf5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseUnary.js","hash":"5dbba7edab4fb0d361906358fa2d49dc35c1e603","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseUniq.js","hash":"ae7942f5facf5430171081eb0d2ee341f69c9fd2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseUnset.js","hash":"8000651b23d8b20ce4636616a76ee9ee4cb0971e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseUpdate.js","hash":"12682de8a3a7f8d6e89f4872bbc2bf1c2b66f8b0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseValues.js","hash":"a8cfeda4f95c958cb46ac71f77a631e57617c1f7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseWhile.js","hash":"4fb4c4f09282c0e560a1bb289caaac7d58d64a10","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseWrapperValue.js","hash":"1b1d0a42b03e95693fc88d6a24e4a3473d15392c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseXor.js","hash":"0077b838e654fac3f5ebcc99ab1dafbd158e4e71","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_baseZipObject.js","hash":"7995093c8f43666bf1f2dc15cc1d752dacc55e35","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_castArrayLikeObject.js","hash":"0a049ad2b5e466bb2173738787645d6aa97b9e03","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cacheHas.js","hash":"d676b44402e7e4ff04011e54a086f7efe819ef81","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_castFunction.js","hash":"af88042305fb1cc58dde3bca997c206dd0359bf7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_castPath.js","hash":"4f84d8c347abdf2a4c332e833bd4ce827acfa3e0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_castRest.js","hash":"82020a1342ba8656765ac9141410d1af2b7730f0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_castSlice.js","hash":"9b963fc73a75bdb6cde5c38b2ab1fac07835a800","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_charsEndIndex.js","hash":"4164a27a922efe0dfb1dc15496d199152fd96599","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_charsStartIndex.js","hash":"c4db2a95b12b0a442f73d3ad3d27c0048193b216","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneArrayBuffer.js","hash":"ffbada38bb191bc5290fc3ae51f6c01c3f8f6d7f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneDataView.js","hash":"c8e9d1cd47aab00655a7ad7d3103cdddf2fd92a6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneBuffer.js","hash":"f0b54438e44d83118f342434cabe99dc438d19c3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneRegExp.js","hash":"d0318f8d44ff0e8720cf498982e3183e23579919","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneMap.js","hash":"a9eb977737c9ba392a21f1ab41d27ce8c98a5f39","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneSet.js","hash":"d2d8f10dc69cdc13205e970610f30fb3455675ce","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneSymbol.js","hash":"8b27dca2415595e97e38d9fa7fb3f854c4051048","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_cloneTypedArray.js","hash":"b50a151594d841fdb56e8cf04619529fed4891f7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_compareAscending.js","hash":"456fc00f7549c8ea36a3d2f3b818b50bfcf016e6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_compareMultiple.js","hash":"798b323506b11fa866904e39771daf98df260bca","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_composeArgs.js","hash":"18e0c7dbd15ff30fb10ccaa4ef651751eea88ff7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_composeArgsRight.js","hash":"b826dac099cb5bdc350361b3fb6df6a3c743b49d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_copyArray.js","hash":"cec6a29544aa38261f7cfc1bf123f3289d22c377","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_coreJsData.js","hash":"15e60e7a6363ae6df943c85e4b9e1078457b06e6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_copyObject.js","hash":"3bfeeec32b43433683d931621a2bf53dbc3db3d0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_countHolders.js","hash":"9ff8f78133806ffbcc60d281c0152897aa7640bf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_copySymbols.js","hash":"1323222e86b2a4965da70863cc990255323f76c3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createAssigner.js","hash":"0125f6e53a2b16619993e408f3511862079717e5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createBaseEach.js","hash":"ade31f23b8e144e8588af940219fc4c8bda2ce53","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createBaseFor.js","hash":"77c64903d26461aaff6bb22d3e2739a5ac9a5e0e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createAggregator.js","hash":"261d83069fe95d76ef0dcf16aecf4d21af132baf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createBind.js","hash":"a337e4ba3cc88339b1da79afd5402147f14edded","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createCompounder.js","hash":"195c16455366a158b8b855547fafdc602f0be9e9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createCaseFirst.js","hash":"4eda4cc9710593950268262489e79a507679356f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createCtor.js","hash":"12be272e2dcd00624119d859d78459c9dae1baa0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createFlow.js","hash":"add66ac95406180367c6e95485188b6d300735c5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createFind.js","hash":"3eb3975cd88173810656e3ab17de9c210773a1f4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createHybrid.js","hash":"f3a2edac4b098feabab8dbf1c64a6922ba330791","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createCurry.js","hash":"30c237eecdcbbf00b48be6b716264799e0f32c1e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createInverter.js","hash":"3b149fffb0fb7fe82cf00dbd794973ddc33f33e4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createPadding.js","hash":"0597ae4997016438b3d7629560c03d260f2b51a0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createMathOperation.js","hash":"d02710cbdbf76e2b2001750b355238b9a0e951c9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createOver.js","hash":"ba8f63fcb4755dc9023793118e5f8180e86c4c64","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createPartial.js","hash":"fe6136cc767bb59454f85df7a97f9bb9d612a4af","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createRange.js","hash":"1c65b8adbfe1a38fb5827f584a454bc8218050ac","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createRecurry.js","hash":"16ae8b7451f6bdf27d14f87af7f60660f6d3dc0a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createRelationalOperation.js","hash":"428d4535498e0c63f8a998bca3403d36ddbf8004","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createRound.js","hash":"c2332657fe5882729e1d08d88cc2a43ad4758cda","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createSet.js","hash":"c213de450f86338c23b81de1c99f8136a7538ba3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createToPairs.js","hash":"b16382972bd68fefa26ec9672c3935cfc1af1b7c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_createWrap.js","hash":"81cad1637781589824f2b3a27612e002089cef2e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_deburrLetter.js","hash":"65de6e749f5e37659ce5798a558a9aa1b50bec5c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_defineProperty.js","hash":"308f9b9c0f8822351b71d5801be25a8326bc5584","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_equalArrays.js","hash":"1e74fae0e17ddf01e05fe5588075b9e539e41c1d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_equalByTag.js","hash":"a77aa4d30c1c58dbc9b03e3b16c79ff702e23851","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_equalObjects.js","hash":"a8775fe76dc9683db96db70c3ce82562ef79f9cc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_escapeStringChar.js","hash":"d011ca793a93e44d7e6928cced2055ea47f6c39e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_escapeHtmlChar.js","hash":"d1da9dd2828cdd0071b82ffea56eab694bafbe37","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_flatRest.js","hash":"1a96086a9a21bff7890036498a1e161fe7955194","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getAllKeys.js","hash":"9fcb354c326cd308df841e6846d506165842f9a3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getAllKeysIn.js","hash":"4c08d556179109df462c2ffdecef2d6486315062","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_freeGlobal.js","hash":"df0709e144040efc52114c69b7977ab04f3a799d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getData.js","hash":"2fea3c244fa4625b978cea63124835c16aefe660","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getFuncName.js","hash":"dd42afbc814c94e5bdd2fbef652efb7801403f6e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getHolder.js","hash":"86951aac23219e1a51267bf5fd7a38da110c877b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getMapData.js","hash":"f8986a4db2b55203a3237e5472a4620816306331","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getMatchData.js","hash":"221908980050132b19c79c53c1b7d78ef5b93d59","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getPrototype.js","hash":"150397078aa95ac1ace14e9547b7c28eba508353","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getNative.js","hash":"a3c1a7f525a79c6216c2bd72810ccb1d8afefd9a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getSymbols.js","hash":"d2600112d87fa8bbe51dc686c6a38eecdf6949a3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getRawTag.js","hash":"08573f8b464cf110d0873d475890f499a9620d80","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getSymbolsIn.js","hash":"f9682ef3b02bb14d7f5701ba71bbbcda7f04a027","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getTag.js","hash":"e74c13874eca982f0fd30b1e35dd05e0664c6af3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getView.js","hash":"3a642a1adfccdac302261e31fadd3918e623d6f6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getValue.js","hash":"aaeaa4d7600367187650a1ef2d6949e2f788cf76","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_getWrapDetails.js","hash":"ab6c90ec5be32187a6cfe2c9e798e7d298263dd4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hasPath.js","hash":"2a097d6e7b4b6637a28f79fc045e2dda5009c87c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hasUnicode.js","hash":"4a2db5fc02b64ef0e8c1b45db1ceccc71e446d8a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hasUnicodeWord.js","hash":"254386bb9e3c37c9f53d068c485b3f41348dd56b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hashClear.js","hash":"7a6f43944d3ff13552dcbe9ceb972ae5a83e8b1b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hashDelete.js","hash":"5b552f18bab9b54a3192e193d44188e1656556d8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hashGet.js","hash":"5645b9091466891d4c892c6b3bd220ebbd3a3d00","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hashHas.js","hash":"52d51efa69f86d9e797aff70210cb73fb6874b2e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_hashSet.js","hash":"13d89d46c86111ca9941d0c35c29a84b2fb97a87","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_initCloneArray.js","hash":"ea7dc2be272c42decf2d28b9e87861ed83aa196d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_initCloneByTag.js","hash":"8969b78bdee7f1b47064aec690b0d61956210c59","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_initCloneObject.js","hash":"f2ee8035eaa7751ff081de5681c6603da177f8f6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_insertWrapDetails.js","hash":"07c0c750900d12cf01ff9d99e429c6be76790f4b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isFlattenable.js","hash":"f2cfab82055d2ca693f33a874c57d8250467fc04","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isIterateeCall.js","hash":"8116de0f8e735fb8c0a9d263a369be4b74f5f09c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isIndex.js","hash":"058615b9d859c6bbd682a9e64e9d5156d93a15ba","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isKey.js","hash":"e68a3f3cc1d7942c51ce0e8d927c0eb1896bc46e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isMaskable.js","hash":"54963a24b696b2c57b2e8d2a873ed7db9abe6b11","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isLaziable.js","hash":"857a630edb35c21d76e6e2fd6daed3f3b51ea6a9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isKeyable.js","hash":"89389f3a2f157c03608bcce01baf751018f25fa8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isMasked.js","hash":"c001b1b4f9d3f7ece2e7263350f081da707804a5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isPrototype.js","hash":"6ebbd7e2661dbf8b6e35f36d680b7117fcc6b2c0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_isStrictComparable.js","hash":"1db231f38b860e0a94e052c232829f8e8d31eb74","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_iteratorToArray.js","hash":"0512af6634544643fd2dacfb328aa8fca1770d72","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_lazyReverse.js","hash":"a16d79ce7d467ebd00332162dafae250f726fe17","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_lazyClone.js","hash":"528f2c4e0ddaadd246d07757608fafc02842508b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_lazyValue.js","hash":"09f17b5524617d2558c05794577b7cdee1f313e4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_listCacheClear.js","hash":"cab24e3a5aa064726b71f761bac42e765a21517b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_listCacheDelete.js","hash":"1421610bad35fbee226a1a6bf8e7edb8958a4d6e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_listCacheGet.js","hash":"266ac036effbb03c4a20397401900068f25ee510","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_listCacheHas.js","hash":"2070fe4515274fd0445b01ccbdad8acbc6b7c9a3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_listCacheSet.js","hash":"cf902d42ba5e57849d08b0c03d2003c56bbc0dde","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mapCacheDelete.js","hash":"830ab65244dcd7c5a00fec9be355e9f713e6ea3f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mapCacheClear.js","hash":"0eff5c92ebddbff48603ec60a32720c48fcdfd2a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mapCacheGet.js","hash":"2f580dedb6aa86e87c9931a6bb2275df8fe8608a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mapCacheHas.js","hash":"a0104808ea49ff57061f2b4a6ec4ef5f28e20601","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mapCacheSet.js","hash":"745d2c8aab1a63cd28192eea4ac7bd86d5050b02","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_matchesStrictComparable.js","hash":"886455dc09cdf350cadc57a4bb14cf8d700db358","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mapToArray.js","hash":"ba760ad87c596f8a038240cdb8eb21c8f441a288","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_memoizeCapped.js","hash":"6e577b3ba7b897f8a8e6277cee2a9c0d296608d9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mergeData.js","hash":"ffc3efde7d90bd02bcfde2f6065a2a00872a2442","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_mergeDefaults.js","hash":"9a37dfc9288ae2cf029da1edd56d75dc6d2f9d20","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_metaMap.js","hash":"6fe08e4a7c81c515eb34e464db1fe31d20bc8ff6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_nativeCreate.js","hash":"d77d487728a34b77fe91c07ed4a2ca41a7265b43","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_nativeKeys.js","hash":"9cddc8c7f8efeffa319763be371897c861027d65","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_nodeUtil.js","hash":"9cdb0c1c201e272663b83cc60a436c9cb68168f9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_nativeKeysIn.js","hash":"d11eee972281d8eb8c93724d6a9088faf33e9679","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_objectToString.js","hash":"c489ccc8b47254177546b747476ca6b4a339437c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_overArg.js","hash":"1fd1876980219dfd22c7ad86a49994f6ad1ffb0d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_overRest.js","hash":"7020d98e117801d3a38b53367295588fe9574282","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_parent.js","hash":"96c1e1e1a0a62224fe816f9e72c8786266ff7e93","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_reEvaluate.js","hash":"01062fe9dad608255c7e341c6d3e145c9ae6912b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_reEscape.js","hash":"1956c226d87ffb9bfb9d0b443e5e7c6665e222a9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_realNames.js","hash":"1d70870e01638a3ba3e742bf871a5618ba866480","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_reInterpolate.js","hash":"1f30c7932ca224ade79f3b50991da604fdc93c0f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_reorder.js","hash":"f9ebaaf8bddda0f54270363ed88d8eeb4b0acf95","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_setCacheAdd.js","hash":"3e8d192f136058af7953acb255f3452e25f9dbd5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_replaceHolders.js","hash":"c24095b10ee93a2b1c4eabe187a37eb54a74b47c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_root.js","hash":"da38a7e1c62b9dec425d3354b1ae5b2f1473ed41","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_setCacheHas.js","hash":"6b635d8cd68ddaf51b359bd7e89532dbbd5d259d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_setData.js","hash":"27ba08bcf3045df1eb5bc20514f6532d51049445","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_setToArray.js","hash":"8aa29aac79d989a3642638ba90120860d6e7cfd0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_setToPairs.js","hash":"8f144b728d7afc8059364769d27708f6f30f1bc9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_setToString.js","hash":"525d4e7a92d2f5de834b7199c926bf05e5863e02","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_shortOut.js","hash":"2b821fd23499f0583817e801c9ec1aa7fabac0b5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_setWrapToString.js","hash":"e1129dc30bd9fe222dc11cf9d319f2d16cf02f82","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_shuffleSelf.js","hash":"d384018a208bad370c0fa749fe1a7abdcf7d1550","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stackClear.js","hash":"f10a4d85636bf0a0495cb7222575c139c2963466","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stackDelete.js","hash":"0035fcf868dd14e85188c010466ead0b44caddc4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stackHas.js","hash":"2c66efa2be2222610dae4edfe711b8b0d9a55a60","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stackGet.js","hash":"edd10aa8b1688c112def671585164abd168f7dc7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stackSet.js","hash":"54d1b0f6e92c9327efb7142d082bea43f49521a4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_strictLastIndexOf.js","hash":"541978faa200571da921f5cee0c141cca0436237","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_strictIndexOf.js","hash":"4d373aae516f6097b486413f2e0815c73aa37bdb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stringSize.js","hash":"2c19f863e40752a52b8d3347e8b05c8afb61a4d6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stringToArray.js","hash":"051613c1b18c5156a676b197586fb0e2c1acd0ec","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_toKey.js","hash":"e24143e8602a9acd35301e6462b03c6ef0d94bc9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_stringToPath.js","hash":"2ea973407fea23d822a19f53c39fd01034196031","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_toSource.js","hash":"12282cc7f18c3c7446129f547741c3998b6caf18","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_unescapeHtmlChar.js","hash":"345300e6aa36d8b10133adfc3672efc630f77822","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_unicodeSize.js","hash":"5cbd6e937974f3a630a7cda092ac5aca6758f3f1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_unicodeToArray.js","hash":"5d86d7434ad32cfde5e14ced763fd482c89257db","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_unicodeWords.js","hash":"1d241f5544b5e799407fc31e8d07834da03c8d7c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_updateWrapDetails.js","hash":"f63822c72247363560c30fa1056c226e4ffe9605","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/_wrapperClone.js","hash":"c54b050119a2a1ad75146508a03ed4a78ab9b5fb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/add.js","hash":"69ccfa17792261411f27bd7166a6760e3e6e653d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/array.js","hash":"ac9338e3493fec2bb6d7a1dcef45ef9819b20649","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/after.js","hash":"4d65d6ae8537ba01400d74e3540b52b463dc86eb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/assignIn.js","hash":"166da8ae436b3ede129a5842457d68d6fdc9616a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/ary.js","hash":"23e4e7c3d9ff58d2b2012058415213f297f5b9cf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/assign.js","hash":"c80789cd7fd35c7190290526e466eed28caafa80","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/assignInWith.js","hash":"7e951bb44bd108e1024ea5c691d9bf9449c112fc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/assignWith.js","hash":"98f683f41fd043bead258cfc6e61bd6765eea779","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/at.js","hash":"f93c33b95d2c71536a3af577c3fc400ca9904ace","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/attempt.js","hash":"6b981c1f3ff53c572ebd08babf8799c8f118f6f6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/before.js","hash":"bc0b86f3e03b7056b39193a03c5d39ee4fef4023","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/bind.js","hash":"c1c125f1b9eabc7b24f1fc917e46ad951bcd0a0c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/bindAll.js","hash":"cfd017286d7a7497547755272e1a55d39dc4beef","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/bindKey.js","hash":"25f846cdbe26955302ba30a91e0caf741418defb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/camelCase.js","hash":"1db1aa1a3c7a3a703a33c660526ef141c0bd3b94","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/capitalize.js","hash":"cf956ec612dfed45fdab26ab30cac6f46d738119","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/castArray.js","hash":"8dd901032216d00cf43986adaf961ad7422a64bd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/ceil.js","hash":"13eff7a830076aeea2ffabd36b8d0d3254849953","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/chain.js","hash":"e51b12d085b20c8676bf3297d9d0a8acb3871e4f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/chunk.js","hash":"8e0f7e51303031640b539758ed6fa3e48e761783","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/clamp.js","hash":"0c356936d91c87fe7938faa3e1bb61b8334e7f0b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/cloneDeep.js","hash":"282a1f90ca1b370c8a99345f58b09f497e4a8beb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/clone.js","hash":"4c1fdd1165a97ab8c80199ae7e586a8a90bd8b6c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/cloneDeepWith.js","hash":"f40b2ec99477d2e4590b2f55b1bce95b54da6400","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/cloneWith.js","hash":"49153df58e892a26cf9217e1a49f4485a2992e8d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/collection.js","hash":"235db0c51d2fbba77c1c0ab2f25617e3c02d9e5d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/commit.js","hash":"f2962f416c4427b7d5fd2fe8f752c41a8e6ee53f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/concat.js","hash":"16777de6eeb0cb2828722e48c32e900256c21bd0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/compact.js","hash":"f747cf703e5627de69652da7ef01299274cf48e7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/cond.js","hash":"3df6aa9c3966438f382511f0b5ab7647ef5da87c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/conforms.js","hash":"c3388c985741e3796b13ecd99ef282ce92e56963","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/conformsTo.js","hash":"db8ff09750867c73d76ad1275a5cd8c2bc93b873","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/constant.js","hash":"0227ab051a5a8ca5e0fc7934bcea54ec25f90292","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/core.min.js","hash":"b166c7b45aea539f80d1f6f2b64e27d33ab80d96","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/countBy.js","hash":"048867f03021430a606b699403133e2e234777a4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/create.js","hash":"41e8f34b4e9429b4b7ab26264bc570214164a5b4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/curry.js","hash":"5114ffa1bbe9154022639c20c9257cc402c7fd99","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/curryRight.js","hash":"3cc4f4ab95aca21207f718506ccd30b2ddf20758","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/date.js","hash":"6466f5749384af915c2b6a449e74e14e320f4e11","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/debounce.js","hash":"e60ae7b90dbe302b4b221475f637f1ec33e8819e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/deburr.js","hash":"85462a037627b5d1e20f84197c75ad145f854c8d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/defaults.js","hash":"1a2bc9d7be82e8faae63dbd7b226c0be39d1b1e4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/defaultTo.js","hash":"07e0f352f98a791be53a0a6eb43dedd756acbfbf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/defaultsDeep.js","hash":"110a983c057e2bb781dc50c904308a6c250d7ef1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/defer.js","hash":"471017a76ca3f3f71a111ccf7b487f89a50327db","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/delay.js","hash":"d7b8c52b90e17f9e42413ac7ea16d39a8e96bd4d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/difference.js","hash":"7a2a5465430dd730ff198a6ffcd5a3de8660c7b3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/differenceBy.js","hash":"ff88a7541ee0b628ea3bbd923077facde3dbab36","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/differenceWith.js","hash":"0f2a92e973c183bdcff6395d840f683f318c3424","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/divide.js","hash":"b21dc4cea11b1da27812a545fa75aa0d6b9a834c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/drop.js","hash":"6e25554b3f395b8e55d6b291451e7cac2149c7af","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/dropRight.js","hash":"e77c7613539baf9a222fcc57142d5a808263688e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/dropRightWhile.js","hash":"f9ccd85e2dc3364b0fdfbc824632e9f792b5a11d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/dropWhile.js","hash":"f710aa52d7e2a9b128e647ec58b24e3c37660790","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/endsWith.js","hash":"0d8fd73985ee8c845b0c851704c8700f1055863d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/eq.js","hash":"bc3769b5b5cb8262834ac0a28cc4cbe71257ce94","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/escapeRegExp.js","hash":"91892447637ec6b53595e90a9817241b536f5fbe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/escape.js","hash":"60bec78e2fd63cbd52dc8f4f5f5b242bfc9449a5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/every.js","hash":"6da415b41c0bae9c96fd40df253df2de7d965f4c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fill.js","hash":"bb9b5af63b9b43626fc4db976072b045976ea77a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/filter.js","hash":"5e630c86a2bd2a83a887241037b6d714401502d8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/find.js","hash":"bb6c19af408438f6a0e19998a230880354afd814","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/findIndex.js","hash":"2fc5db1562e58221e0aafbbd317240704eb29985","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/findKey.js","hash":"eecde37bba06739228e5f93eac97aeaab4a91d4f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/findLast.js","hash":"1f3be6d3e3eb97733c9a648872b4b3366d590257","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/findLastIndex.js","hash":"05743b963c7370d830ce76ddc5da4d85ba687935","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/findLastKey.js","hash":"9ba6afda847da380659ae98f0cb575566a0dc85c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flatMap.js","hash":"78f9ce2566f143366b0998ef02dd8dc89e004133","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flatMapDeep.js","hash":"76d3ae49d148850472922956935d294957f6f04f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flatMapDepth.js","hash":"fb4c4fc58c11b646dfdac83443e7495829da8f45","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flatten.js","hash":"72364918453483de6a71137a9a8003973c141fad","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flattenDeep.js","hash":"422f037a6379f0db6258b9337261c1a9cc719faa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flattenDepth.js","hash":"537a4e7196561ecae367985622872417cb19eabf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flip.js","hash":"58e96c9d06468c7d218671f26be953e4787cafe5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flow.js","hash":"7d9e4b712b68551d5b932bd4ed88d15b4aa1722f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/flowRight.js","hash":"3e028361a9b090f8e4166d89fba374d65d52711f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/floor.js","hash":"dcc9365721002de964aa2439793b7a10419d3dad","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/forEach.js","hash":"0f3074268fefe6db115334ca5dd1b89eb56a8a3d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/forEachRight.js","hash":"654c60d4bb9737aa9fa3a7ac55e889f3dc2b50e3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/forInRight.js","hash":"6a060f1b26a6be2a99c48eb56d104c4684b9bb30","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/forIn.js","hash":"61f83e8b63f97c099842046983acd61ac1b31ff2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/forOwn.js","hash":"3e351a24c7fdf0593c116f361f59739cfb447950","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/forOwnRight.js","hash":"91e99b73af52bd6155bef7a259aa2e763aa4b885","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp.js","hash":"15a13940a645e776e00a229a7bec48f6af716505","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fromPairs.js","hash":"9a5f37cb42d2839c2637ca1792fcc1cd4333c56d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/function.js","hash":"23850ac10d90d3b9eee8723beaa3af727330323e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/functions.js","hash":"0ef50ad30d371a2b7ecf4363fd7862b5417130af","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/functionsIn.js","hash":"29e78c6d69d36b48c62e4374c6cd1c02da73da40","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/get.js","hash":"fd2860fd39bfc6e8c44bae101e133effe6373734","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/groupBy.js","hash":"18d1063f6af8b9cb6901c5ad3257db49027ab77b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/gt.js","hash":"8446ef3704d57dd44214e6513a6889f4d9db658a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/gte.js","hash":"ec5d91c1d30601111dd6a41af35d55c2c27498ce","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/has.js","hash":"c3c35131b701a60eb1f6bf9e530c78d123268cf9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/hasIn.js","hash":"8a4bf01f81a8d508b322441659f9c74f38998c3b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/head.js","hash":"374b879fa821ee60e31efa35f0b847ac5ba770af","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/inRange.js","hash":"38cdcc3285d54fcce6a7b362642c8c93305782f4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/identity.js","hash":"af8a8f8af76663a408cf9f29e5723d05f79eb236","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/includes.js","hash":"b5d81439dbbb9b6558c9148e37bf5db918a42d1e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/index.js","hash":"14d8b25e9e35c7f1b551d732fb814c982fc5301e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/indexOf.js","hash":"eec5a54dc7285759af46028f7a7c1ec3479993f4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/initial.js","hash":"c366df8c3c272bbc5fded392830b438d30d8c4a0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/intersection.js","hash":"b51e7675e09c00ab99a632cdf1fac769f1a874ff","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/intersectionBy.js","hash":"969e82efd3befe0749085336f9568eb81f55d7b5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/intersectionWith.js","hash":"1e1c0b6cf9c37aa60ea316a1540245bbff6f7a8a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/invert.js","hash":"8416527db2867dd6bb9645374268924b6ab5988f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/invertBy.js","hash":"1e71c68fc7be2d1999d0c0a18c2db4910fc057c5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/invoke.js","hash":"5bdfcbcf073fddbf4f00903e4a8db0f1b868c8e8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isArguments.js","hash":"b9214a907e11a8e2321e6adf907ecde99b9920d8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/invokeMap.js","hash":"004403112e1b62f36d3af16ed38e2b5cd8ac122f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isArrayBuffer.js","hash":"b682ff167ce2b34539afe73df93f2abe81b8aac5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isArray.js","hash":"c6d5635dc764c9acf7395abde2230c43121641a0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isArrayLike.js","hash":"88d7cd3fc8a6075777cef6c16e1cc4931734159a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isArrayLikeObject.js","hash":"300effec49e91a13bfaf9b6a9dda4ea2c4d45d92","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isBuffer.js","hash":"246d03a17c274bdcf3acb909f2337c695c9aea45","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isBoolean.js","hash":"ace779f61262f820f5f4ed39695bddaa7ebd08a3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isDate.js","hash":"3a7813e7ff48c9ac6ce3bbbc8584b1ce22c4ea1c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isElement.js","hash":"652c3967fe6b11419aaa8652a8d8d6e35f15a76e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isEmpty.js","hash":"935d1e74c2b8a3deb928af20d4440894368ccacb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isEqual.js","hash":"e173745ef7b1e7f1aaea58a90404d99fe7613257","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isError.js","hash":"b184db78799044db3af29c3f6224d8e2213c9985","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isEqualWith.js","hash":"819c6fbeddac356f3263ded637ab46b62b71f4f3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isFinite.js","hash":"388faf4e73347a1c0d77c98a3ac92be8902c5f36","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isFunction.js","hash":"6cb0b30f9e48fc93016a3f34d124224af7901908","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isInteger.js","hash":"ac93647df1dbe92f6358a992b1d5e7039cf85514","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isLength.js","hash":"45606d651b8071d8ef73beb03d31d6073ade0df4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isMap.js","hash":"d19970b50ffa3f5e8345e84c635dc7b553bca992","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isMatch.js","hash":"29b9682a150068960adbf9ffa6b1da7f2a45477b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isNaN.js","hash":"711cb119497d074148b07dda40eef0fa7519de8d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isMatchWith.js","hash":"60bf9f292afffa501f83381428457dc7567ee4cf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isNative.js","hash":"0f25383e33d23f019d405fe8f9af948e1a727904","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isNull.js","hash":"bd68451baaba662307893e3216b99ed20cf8a0d2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isNil.js","hash":"5780b6ca6e7dee6c2599a9ac77eb302812a373ca","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isNumber.js","hash":"75152f3218ff6f88b1ad22a258b16c85ebbf9408","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isObject.js","hash":"38f00e3e4772d23d56550ef75959d10f92448e3f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isObjectLike.js","hash":"7213913d764526ff2189c115d354bb940470bfde","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isPlainObject.js","hash":"104adb7c6dc9854cb91ac5995b17969c44614262","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isRegExp.js","hash":"af11b03682761c1292525e290f0312da974c02c9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isSafeInteger.js","hash":"18473b31325225abe68ccaa69aa84635ab02b651","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isString.js","hash":"7eb7706298dea12e813be37db6cdc8ea92177630","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isSet.js","hash":"8753a0c0f5a73feb22942035f87351120db0f402","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isSymbol.js","hash":"aaa0f4e5003e5d33ed7d67b8a274a9a14c3cd64f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isTypedArray.js","hash":"d92eaa92fa13419d2df184ff11f270c266590f66","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isWeakMap.js","hash":"d88fd7f6dab0bc1a14c8b7b9f5adabf3d5430ef6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isUndefined.js","hash":"4e087abc1b0997f71bbf33e2065b40d438511e2e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/iteratee.js","hash":"a418052e478006c68e23ff0a6eb408aa9dfa2473","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/isWeakSet.js","hash":"2582214ba7a25b23bebf2ef4ad8a799248a5e5f8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/join.js","hash":"236f8abe4dfa446351d07525089fabee2e2d3f0b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/kebabCase.js","hash":"ed770da5a2e3ada160f9dcd625a94d16ffa8fef0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/keyBy.js","hash":"96e32f75404ee87c0fe8bf2d8b7a2c69cee308a7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/keys.js","hash":"84fe8dcc57c7b368d5fbd3ccf0c194cde0c78515","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lang.js","hash":"2e1998c6fa6bd4a5c691edd1eb1fffaea2a35b85","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/keysIn.js","hash":"e444c4b265f9f39968467a82c09935bfa1be501a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lastIndexOf.js","hash":"64b8f7981a889c14b785738da32da89ea7b06519","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/last.js","hash":"dcdc5c04379818603815dfc64e96bd5e2626fd29","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lowerCase.js","hash":"6280f901a37fb21a9acc5df8678661c1dd47d425","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lt.js","hash":"244011c8209227a5d714f5843106b13de0f5fc15","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lowerFirst.js","hash":"6b7a190cd8d1f01254d0556b7725ed8ad3ee9cb3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lte.js","hash":"02b0d1b5d68ff6e8cabda05c1e5a4c9675b10479","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/mapKeys.js","hash":"6c2885c6249ff8dbd5c18910338240ddcd441e48","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/map.js","hash":"484de2e64aa6e9cadbac92703bf79be5dbd53942","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/matches.js","hash":"81353e8e3436c6b77bb24c7bc150cc84ce7e2187","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/mapValues.js","hash":"7d273ea92cb971d298e84137f49b89c5d7249336","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/matchesProperty.js","hash":"60c973a77e6ea789db056d9117ccf722657df4c8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/math.js","hash":"09b7cdb94b0829a362572cd9eb490c6b86471f35","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/max.js","hash":"2c5910535b9bc06c066c57f71b5b02965b894cfe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/maxBy.js","hash":"85f841238f0c60a3496eecb25a3bf7aec5fc36fc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/mean.js","hash":"17efb674e29e2456f3b1e595210a9929480e14a3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/meanBy.js","hash":"5a9d6be568a698c6ef430a07f3431c11bbba3dcb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/memoize.js","hash":"507cd3e0ae52967b105d0452fd0f93fbbc69bfc9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/merge.js","hash":"20f06dc73414778002395627c8d4316699ff947b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/mergeWith.js","hash":"18a5592394d4cf1a0772e6ff38bacb9b547105f6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/method.js","hash":"6dedac7c45efb248890558a8d42a2656623ce0a5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/methodOf.js","hash":"6af752f45f4152f036fb378075d72f6ab82573ea","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/min.js","hash":"0ca11cbe1894931dd09246e001badc22eb734887","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/minBy.js","hash":"8fa3de3c1efcc246ee906a281757f905cb13507e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/mixin.js","hash":"813b628b7fe94024fa308fbc6d06d1883dee9325","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/multiply.js","hash":"47e4d5d6014da46305a0be1082d66d2f41928e82","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/negate.js","hash":"a01d8c228ce6992ec79ee4146677e52dcc487254","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/next.js","hash":"8504ac753cf6e3e19d811038503ee000b7829e8a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/now.js","hash":"ddba13c834824d9467e379769e67f414a6179d15","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/noop.js","hash":"35300b7ebb741e7a54fe528a8a718b26c35bf698","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/nth.js","hash":"4c0c437715ed4fb0942b8dee7273b9d0dc5f62e0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/nthArg.js","hash":"47191997e9ebf3b2b8dd667ee362e48d381217fb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/number.js","hash":"8c2564ca466fcb7f4f0decd5eb79f803f39983f9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/object.js","hash":"4b9c99e1cb054bfcb6777077f59a2a53a4759490","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/omit.js","hash":"78dd113be82f7e15a4b7be131b6c4523018b46c0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/once.js","hash":"5bb536b8c7f08f94ccc9019a51601cc97d9b24d3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/omitBy.js","hash":"4216fc454388cdba0292cc5199b2d28d7484ac7b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/over.js","hash":"e28a6b283217955bd749ce30edeba3e6b977273f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/orderBy.js","hash":"7665eee9891d204d48cdd799992dbd6a9678125a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/overArgs.js","hash":"e60acc78f35d412319457c41a3bcecc898f9653e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/overEvery.js","hash":"03c5153a4c43d913a9162032f5041cc1f982250d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/overSome.js","hash":"153452d7a4349ee32447e45f59e975f929de5c19","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/package.json","hash":"e07a6c9df5b09985a3fdccc941b8821c211fc1a5","modified":1486538261000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/padEnd.js","hash":"5973017726462db292d41c2f28b53b8a4a24c507","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pad.js","hash":"b6a0479a2ce0289d29214e8f7ff83a0074406d25","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/padStart.js","hash":"d6ea6887328ca596d505af7b181edcad862865f4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/parseInt.js","hash":"786b6be24ff93b68962925663708aca1236f2cc8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/partial.js","hash":"2d3c9e064ada81e72fc7f466fa6a638ae71150ca","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/partialRight.js","hash":"e82e9a51016e5f7aa72c8ce34defccdb84461900","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/partition.js","hash":"36957b0323cbd50f5ec8e4be3b5cf571241407da","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pickBy.js","hash":"e7254b1024e13cf552aaae06908beb2951c21f2d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pick.js","hash":"92f29ba1d84cc2627822154f8011dfc5f5dae8c2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/plant.js","hash":"2b370614388e8fc4a0e12d2eaa644c25622de026","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/property.js","hash":"276a7afddaacbac4fa184f0096a92f32ee517ced","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pull.js","hash":"e40207e049af5517cc5cfd59ffd23b1c3a1406dc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/propertyOf.js","hash":"d23f88041fae20fcd9b92740fffd39016a6715ff","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pullAllBy.js","hash":"5dc628f7fe0c8e71edf931bebecdaeb0e30d6f2e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pullAll.js","hash":"1bb4ac35a97475e16cfa8a10abfc5d911c58d743","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pullAt.js","hash":"176790538e4f38124826d06462d089f8acfe1b0e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/pullAllWith.js","hash":"f205f46a35a1b3d40f86c92dd9488e25c59cf5b9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/random.js","hash":"d64df688329131b297c269ce8e10b44cabe52e66","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/range.js","hash":"6bc797b60a5f0b1fe8e93c0c4c41361c7f8f1189","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/rangeRight.js","hash":"6640704aba8af652f6f8d13758946125dc324e08","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/rearg.js","hash":"5b8915094a77df06d6a44047047fe3bc8f723f63","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/reduce.js","hash":"a6da684222d6a2179aa409e3728758572961152f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/reduceRight.js","hash":"8c8897c831800592470dc2fec9f1f575f844b2fe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/reject.js","hash":"6b18138c39a26986320b80d9748bf5385c2b0c71","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/remove.js","hash":"a91465f281fb69fc2cf3a9fa751acfe89c5d95fb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/repeat.js","hash":"8a5c222ac1514d5732374f165d8df9dc0274bd71","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/replace.js","hash":"a35231e4112316c03e6c65162affe9effee35922","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/rest.js","hash":"61b930cc021a8f03bb466ac833596d6d37416714","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/result.js","hash":"f7d4270da0cb84dc9d696538b8c32d97fb49ae5f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/reverse.js","hash":"09f86bfe19d080bb52606967a9df5f017333e963","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sample.js","hash":"b861fdd759aa14bb6747b0e333df66b8995300b2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/round.js","hash":"629b46fafec63f591a3c6b02ee03529ef43a8acf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sampleSize.js","hash":"7a14f0d38676fcf8ed64a12ac379c8203eda1e4a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/seq.js","hash":"e8dae0be3b8ece53ea5d6594d0b45d221f643576","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/set.js","hash":"bd5aefade6c00bbf37fd21dcd79e0ffd085a6084","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/setWith.js","hash":"012090d3598aeb4e36cadb5fb3ee7ecd9d184211","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/shuffle.js","hash":"1d035fe3d9776decf38cab2e19e2b2da99aa5dfe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/size.js","hash":"baeb54345201e06c8c096f9a4f62192c8584f982","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/slice.js","hash":"fffe0c44921ec28dd2fc1512493b912411d06628","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/snakeCase.js","hash":"b95290beac2d4eb4436d72bde0b191a8db147970","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/some.js","hash":"b6d44fdefb9894407b8d48ff379c6288fec935ee","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedIndex.js","hash":"e31955eb8a9dcf9868e2df8f112a8ef873709970","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortBy.js","hash":"5f928288640eec63d9ce82e3c16750b4952f5aa1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedIndexBy.js","hash":"785066b03fae1e7fa508b7380f95727d02284d7f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedIndexOf.js","hash":"21e71189ed17c2769fcd2c91625af1a65b84591b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedLastIndexBy.js","hash":"4bf9117b8f1d0161a8369f127220b897819cd6a9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedLastIndex.js","hash":"b886560112d50f2aef5f1acdcc5cd9296ff6f8b7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedLastIndexOf.js","hash":"f4a56782a4a913c330d832d80000e0340093e020","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedUniq.js","hash":"612a221cb2088447b6510930f35f7140ecf41d1f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sortedUniqBy.js","hash":"e9ee6345a66fbef43ac161edd568feb2f197a2ce","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/split.js","hash":"f33b9e68923d6bd511a37658a794104452f1bacd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/startCase.js","hash":"5cae4afa2846579e8173a62ae27253a75fb57119","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/spread.js","hash":"2c22df2507f3f315a9fac805dfa216d38d08b745","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/startsWith.js","hash":"943cae707f18385fb548ca736db714a9aea78642","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/string.js","hash":"9da506e6420a685f56f77ccdcdd4dfe0ffe552b0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/stubArray.js","hash":"bdc0e5ed494f2924ffd64e91620fbcd8161f7223","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/stubFalse.js","hash":"e5b35ac8e1872e9c87f126c972891005c94e7d19","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/stubObject.js","hash":"dc710610031cb2255019c0bd8465df0d6db0111e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/stubString.js","hash":"053b1bf13c37041494b3afed57eea26d24b46c59","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/stubTrue.js","hash":"35d765e8ae55e010a1b5eda7aa6596a14a052ef6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/subtract.js","hash":"6927a0ddb3037e644d7d49f7aadd99f45ac2226d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sumBy.js","hash":"9a28d421380fb4347c651dd4935461c69a465251","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/sum.js","hash":"b468caad43dbd33443e584c510697155ec12a71c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/tail.js","hash":"9f994bae44d6e96a75142cfdbfb362f1f8190d8b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/take.js","hash":"07615e176130761c61262b882598a6aab8bbbd48","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/takeRight.js","hash":"aecb30e9e3d49c9194b57e4c7988a11b4e911170","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/takeRightWhile.js","hash":"b4562aaf5ce999f9c4b68b1bb5296da5799e4e37","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/tap.js","hash":"a1f5e1966c3620b69def36154a27a8d9893d87f1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/takeWhile.js","hash":"424bf4b4abab1b23597a55ba7aa36dceadc7157e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/throttle.js","hash":"dc6c20077c14d5b184f3471924032e242c9ec3b9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/templateSettings.js","hash":"3646fa4b27c19d376be193ca5c106ca2ce5c4493","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/template.js","hash":"196016f0cc62dd1d4fc4e8a3e79545daa49b2928","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/thru.js","hash":"d006fad2ab19f7bc90e0ec69eb5037f081d99bee","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/times.js","hash":"ee9fd905cf9b189471102ac6b4a75b745085ce48","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toArray.js","hash":"5cde4e05caa391716f89e179755c861677498c0c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toFinite.js","hash":"44b15d3279c2f94ac2098503c427e1e0eb34c3f4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toInteger.js","hash":"06e857ac41a5b7056f7b522db601b4679f04f5ee","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toIterator.js","hash":"f8fc807ff29125bb2dab968633ad964ec94194b0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toJSON.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toLength.js","hash":"9a0a62cbf4f795ff3efba1fd3b1a84cd5ec94ee1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toLower.js","hash":"3cf1e67f3e193b9f982b8814fec29cdf99b6b038","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toPairs.js","hash":"48dbccab7f479c713471fa2378d5ffa402745f77","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toNumber.js","hash":"2b6f75e579b5ec0e84426be3ce1fd0d3a1abec18","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toPairsIn.js","hash":"ddc2a974ba685da424c9de9e2f7949b662844273","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toPath.js","hash":"0cb7d3ea3ac92f0249565e7c8e94ce659edca852","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toPlainObject.js","hash":"4e96ce3252e389b1633a2c73fc9d68031a12df29","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toSafeInteger.js","hash":"bdcb42db6346215868a98694d7988c0fc7a8e2a8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toString.js","hash":"6c4365360e107172a439c756d9be5db5470b1142","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/toUpper.js","hash":"5e6fa81c32735a5c142884a1da0b1d88b780d05d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/transform.js","hash":"2cb75bbd3d23239daa2681abefea716e5f7e0bfe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/trimEnd.js","hash":"c18ce828f8e810a17d423d75705261ff77b34462","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/trim.js","hash":"de870b0426ce1ef6506652312b8298aa7caa16fc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/trimStart.js","hash":"fdf32db72208d65d988d3a7672d2d22a2bce89b3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/truncate.js","hash":"24f4a9506442f2cafc20a024b9d79fb6e5df3326","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/unary.js","hash":"079326455dbdd90b20704f1a3abf73cfab59d088","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/unescape.js","hash":"89bc8a104147bab3b23f5e6f1f1c3819c6168293","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/union.js","hash":"2cd89b9ad0a574cfddd5daa4c5c95ad71db6b4ee","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/unionBy.js","hash":"0d110e48caa5b130f45e00bb7d65dcebe66e275c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/unionWith.js","hash":"16881474335022100f41832178f2109f7525061d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/uniq.js","hash":"2b735c46c626dba6b45907c8c70f17475366016f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/uniqBy.js","hash":"5591128502a52624cfadfc2d4c7b20db4011267b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/uniqueId.js","hash":"0809eace58255a033eb37e73ce581e2cc6fe26d1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/uniqWith.js","hash":"0a37f6a99454364d2683df713e678bc9669d6684","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/unset.js","hash":"5f2a9664870f21d2b7dcf0255f50ad9b37a6c850","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/unzip.js","hash":"9adc3e8903f6134c27951f3a558286a7667656d9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/update.js","hash":"abae1fa2fd4b937bb1cf1f4a0fb4a73eb9d4aaab","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/unzipWith.js","hash":"13255720f48e23ba96205aa49fe5bb538b3c640c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/updateWith.js","hash":"dd63e7b716f897c2bc9f7d39884e0282ba81bccf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/upperCase.js","hash":"4ce59b5839e848688ed76fc99d62f35168f9f46c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/upperFirst.js","hash":"091005e45cf8b9ce4f51e1b2ff2da30558b40714","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/value.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/util.js","hash":"9e3bd39fa03689fa7d9897be9c2387e19646662f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/valueOf.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/values.js","hash":"6304ca5a2c8a30cb1eef8cfb80aed716e29d3495","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/without.js","hash":"979bbb5dc3e1e17ea311c4d85a47b5b8b5c9c58a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/valuesIn.js","hash":"5d6cd8fa3358eafef39b236579720c3d6c4450c0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/words.js","hash":"74ebd3c81508567ca14f57f717488d4cf337101f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/wrap.js","hash":"956d1896e8a55677cef08f879674d4de21d45184","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/wrapperChain.js","hash":"0b6afa60d6fedd5ae935c2127562ba2a590b5b14","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/wrapperAt.js","hash":"3e477cedddecd3e1e993efcfea355d45236cd6bc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/wrapperReverse.js","hash":"2318334d83fc88acd2b7fa81c1a709b957719f4a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/wrapperLodash.js","hash":"57e66f46a5e74e646e763a1b4a5a291a18c25225","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/wrapperValue.js","hash":"dcf31c73fbacb8ab409179125d9ffe51e1ec8696","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/xor.js","hash":"77e7c70d299ec7430efd31d411e46bac4dd0450d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/xorWith.js","hash":"ceb3b359ce93812b82f622e0c117585ba83b2996","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/xorBy.js","hash":"5e7d74900860098de29d83658deb9eccc1f7b840","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/zip.js","hash":"2df2c5d391c0c7fb710357e33d6a9f16425d66fa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/zipObject.js","hash":"fa1c2ef419f663fe0b552effed4b64428cb52f15","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/zipWith.js","hash":"8cb8637b0b2b1174922ef35138408a777911267a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/zipObjectDeep.js","hash":"a4cd8a063e87152a2229d1493af4fdd0419d3ff0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/minimatch/README.md","hash":"c5acb4041ec3730165d4d6ce835a6bd801c8ccec","modified":1456006221000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/minimatch/package.json","hash":"0474fe855e198617e4b3c08ac04c91c464b39c88","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/minimatch/minimatch.js","hash":"c2ee9ea234b053f5177e703334036d505eaa0978","modified":1470677899000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/glob/README.md","hash":"449f1592c9cf2d32a0d74bead66d7267218f2c4f","modified":1474396065000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/glob/changelog.md","hash":"97bfa68176e50777c07a7ba58f98ff7a1730ac00","modified":1455171806000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/glob/common.js","hash":"2f948b495467f2a7ac0afbb1008af557ab040143","modified":1475183978000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/glob/package.json","hash":"f8be669aae3a126a34fd797309a80b2bcf686ae6","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/glob/glob.js","hash":"66bfebbe52ff9e865cdc3bfafc082ef3ec8c25a2","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/rimraf/node_modules/glob/sync.js","hash":"7482bc56682b97175655976b07044afcb65b0cc9","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/resolve/test/dotdot/index.js","hash":"5b0128a5e56ba3ad6252d85edecfb1cbcc58543d","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/precedence/aaa.js","hash":"9c2d3ffdc41f1567d64612167fc763c4a4390eef","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/precedence/bbb.js","hash":"185c1241b941fc83f8849e4fdaf5567ffb2a203d","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/foo.js","hash":"db311f33466c97593aa59411fcfd87e8489d8f50","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/cup.coffee","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/minimatch/README.md","hash":"c5acb4041ec3730165d4d6ce835a6bd801c8ccec","modified":1456006221000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/minimatch/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1431999466000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/minimatch/package.json","hash":"77715d117540038f631bd63a30ce46d422e5cdc7","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/minimatch/minimatch.js","hash":"c2ee9ea234b053f5177e703334036d505eaa0978","modified":1470677899000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/glob/LICENSE","hash":"bb408e929caeb1731945b2ba54bc337edb87cc66","modified":1406583065000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/glob/changelog.md","hash":"97bfa68176e50777c07a7ba58f98ff7a1730ac00","modified":1455171806000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/glob/README.md","hash":"449f1592c9cf2d32a0d74bead66d7267218f2c4f","modified":1474396065000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/glob/common.js","hash":"2f948b495467f2a7ac0afbb1008af557ab040143","modified":1475183978000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/glob/package.json","hash":"9c2f882d790095679d2ea053ba8b741c59f840f2","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/glob/glob.js","hash":"66bfebbe52ff9e865cdc3bfafc082ef3ec8c25a2","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/glob/sync.js","hash":"7482bc56682b97175655976b07044afcb65b0cc9","modified":1475876969000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/auto.js","hash":"44019767fd8da9cca9b5d7bb2672146d251f4250","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/openssh-cert.js","hash":"33261822f3d7e5cca5d57d5f9a32e7d451a3e34e","modified":1469729278000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/pem.js","hash":"3da0a05900226dc684bbea56c7d13f634fe27203","modified":1472499521000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/pkcs1.js","hash":"c38b86621e2fbf889b493c0a40021e2a5eb9a812","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/pkcs8.js","hash":"53e41ef5cfd8c1638c077ef52e1174689ec9bb62","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/rfc4253.js","hash":"ce8c2994eea00a91b50360e42b7dd81d69256ae0","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/ssh-private.js","hash":"b68dda2db2355335c8c12365a75104a762f815ad","modified":1472499521000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/ssh.js","hash":"bb5e99a71b2bb69fdb7324a46a32cf2a959d3740","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/x509-pem.js","hash":"3766e5cf45574a710fe2b3db72ab428b7ad22e52","modified":1469644074000},{"_id":"themes/gandalfr/node_modules/sshpk/lib/formats/x509.js","hash":"9048820664815de3c146f1132636bc6059f2c5a7","modified":1469841630000},{"_id":"themes/gandalfr/node_modules/sshpk/man/man1/sshpk-conv.1","hash":"a64a4769ca648e2047d255bf5237ce051f6af15a","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/man/man1/sshpk-sign.1","hash":"742f5bb2986ad635eb081bad695573cd6826c96b","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/man/man1/sshpk-verify.1","hash":"a5c70f82de5313ee103ba9bf3cfb9774465de370","modified":1461968371000},{"_id":"themes/gandalfr/node_modules/sshpk/node_modules/assert-plus/AUTHORS","hash":"d1d14de8fc8c21f9f86c2231df2531381f6a9194","modified":1453918488000},{"_id":"themes/gandalfr/node_modules/sshpk/node_modules/assert-plus/CHANGES.md","hash":"b27cef2253f8ff8a83584bf1a55cec9d4dfbf517","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/sshpk/node_modules/assert-plus/README.md","hash":"d6771de291034391f0ec79175fff3428ed6d82b8","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/sshpk/node_modules/assert-plus/assert.js","hash":"8103ced007b61b3e45a420607de576faf7e1e0e4","modified":1453920717000},{"_id":"themes/gandalfr/node_modules/sshpk/node_modules/assert-plus/package.json","hash":"027b5da56d80c3285134c1f7a4032bd42986407b","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/.npmignore","hash":"8b894ec0b3bbc33011392ad9bafeb1df2634db45","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/.travis.yml","hash":"a88152a7be9167603b19549ff75cd80d22501731","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/Makefile","hash":"6ab383baa5dc5f695793d66f5b30f0c271e15807","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/README.md","hash":"b4a604915101db16bb5aebc51cb5385b40c709b6","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/component.json","hash":"88615028e91d7872104932a02b78a75f04df8465","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/index.js","hash":"5c3d1f3ad38be1bded1ec4e065f9463c9bbe359d","modified":1449741881000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/test.js","hash":"d822e1a795c5658736d31abdaed0608e01d25183","modified":1449741845000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/isarray/package.json","hash":"4d9fa19dadd1b4696ee56eb1ed0e9481171cedfe","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/.travis.yml","hash":"b5a980a0b2e5681fe9a9510d3fde8a35ffb1ec0f","modified":1470671688000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/.npmignore","hash":"46398f3dd6657358268b41015dee0ba3f8b0c828","modified":1478724381000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/README.md","hash":"15767d217276654af996728910947192e03b7dd1","modified":1478724381000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/package.json","hash":"822e661681ee3b3ce676d3b7e255cdc486fb13f7","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/readable.js","hash":"343555ce6bb91b32c8547c5fe0444474906ee764","modified":1461929923000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/LICENSE","hash":"4aa67fb8f8b16d40701f21a8089a410a7d178ede","modified":1476891700000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/README.md","hash":"f071cb346532cb24b5e4424c23bb370165e0658a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_Hash.js","hash":"572ffd33bbac9360f2d2591f7b44f72077d52297","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_DataView.js","hash":"f5780de8f4171ced0e5f4c52aba30e58660070e4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_LazyWrapper.js","hash":"9fc0cec80e680d4fe00cf4e33672e7f06d4b9b79","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_LodashWrapper.js","hash":"d1b595bd38e7764539f2cf99d2374f5c5aa72d70","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_ListCache.js","hash":"6df951af4fe1c2e428720e3fea6f7be3e6c64edc","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_Map.js","hash":"d58862090ce31a3295cb1dae73e44dcdba9b70bc","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_Promise.js","hash":"7c7b81e303018a3045ca269b1be551224b607790","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_MapCache.js","hash":"afed02775f092be6e7328f19b6991a419baac9c7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_Set.js","hash":"d55df157d59851d181aae5086ac2b703f41e422d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_SetCache.js","hash":"20a1a687b681a839dec78ee9b1c07e0fcee4cdda","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_Stack.js","hash":"581507149d88de85ca4bed49ea0c22467d4e65e6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_Symbol.js","hash":"1d38c59f19e1b038981b4f0093d5b504d647c694","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_Uint8Array.js","hash":"9aca80cbc7c3b25813dbeb9561324d3d6ff7700a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_WeakMap.js","hash":"f384e74a27955f5ab92345281a5fcb7d95111b58","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_addMapEntry.js","hash":"6f6dce49749e84c982596243a51d25804306d451","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_addSetEntry.js","hash":"10afab70d7d03d4141a90c4559594ac1b8fbd503","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_apply.js","hash":"cf8c13531bb2ebaaa912ed42cd51d35749780b49","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayAggregator.js","hash":"4c46ec909fd72aca86fbba95f8042b39875a2fc2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayEach.js","hash":"904f07de69303a57591f6f012ae390d37af3f595","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayEachRight.js","hash":"d9c9880639a791b9b7a50fa4b9d95987a9adb530","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayEvery.js","hash":"1c52b5548127fec0d8e876e6612bc7579b64c88b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayFilter.js","hash":"de05ba1636ccd6f97f5527aaaa7bcd355ef96a3b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayIncludes.js","hash":"c1211511564c2074c24cd0a45e2fc63b94017d42","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayIncludesWith.js","hash":"ae055079baa36a646be539921afb899598b99ade","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayLikeKeys.js","hash":"3e0338e1cbbfb9c9f1b00adf873e176478b985c2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayMap.js","hash":"50a635afd8bfba130f5ec9cc693c06eb0ed57690","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayPush.js","hash":"8b9d6d4bcd8f6661ee23634aecda75d5395db2cc","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayReduce.js","hash":"87b47db2e2ffbf2d671e1a974eec644d16424412","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayReduceRight.js","hash":"59ee39e14d1be368c9de8d06b8a62ba7a57f9c18","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arraySample.js","hash":"8b9ade97c8c183d58e1bcfbdcdf4b77b44c38245","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arraySampleSize.js","hash":"cfe8e3d04b52e678f1475ed3df969bc5eedea859","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arrayShuffle.js","hash":"7023c88e8b1fd408755327bf70fe8d58c9496607","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_arraySome.js","hash":"b3e385ef53a7d44b49f705315ae30efc4b81d5b9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_asciiSize.js","hash":"befe650097f784878651dd1881da7efb3c0d0e73","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_asciiToArray.js","hash":"4331bba9d396c601f9ac9e676283bc3ac25ccf8d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_asciiWords.js","hash":"164db22da4ac8a77d75ff57a1d63d0c4b9e48388","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_assignMergeValue.js","hash":"7fd48396b2393692858a13cd1d9fee4f9f56c034","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_assignValue.js","hash":"8889cd8e010ef1ab8259b9401f1ace23164a676a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_assocIndexOf.js","hash":"b557d0550d466f2e0a20697d953061c8198bc3f2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseAssign.js","hash":"b12b76d29619f0fadf5c75c2b1f4d9c5a140af4d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseAggregator.js","hash":"a0f27fd540785f2f3d54913950fcd555ca789b4f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseAssignIn.js","hash":"1e9e2424746865f1ea7c278592329917a2d2ddd8","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseAssignValue.js","hash":"c09bc3ff6aa7082144eef5b7583f795f7d16ac19","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseAt.js","hash":"93dcc3d90a67de6c407d3f6ccda164d3fac140b9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseClamp.js","hash":"ce109abcb1e12c30e97c79917e51520aa544db9a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseClone.js","hash":"cf17b505addad5992c486d6a8249248266a71000","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseConforms.js","hash":"f518eceb5bf9e6dc4c9cf811e07c3ff8469c902b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseConformsTo.js","hash":"f2f1431ffc02fb8ab64d86abecdcfe2685d2eb4b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseCreate.js","hash":"202aced68f2ce65d35a3d9e7ee56e373de463233","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseDelay.js","hash":"2a9133e727e4b0a6a9ec776addec9c791c812a4f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseDifference.js","hash":"b3dc957d88a325a9c4e11645134bc92eb807dec8","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseEach.js","hash":"8df288083999c6711cdddc83d3f62ee092e0bd35","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseEachRight.js","hash":"f8f31ce8197c50e01ffe073be5e329bb95c5dd7f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseEvery.js","hash":"6e445241a2ceb58e400c619247c7f1d5a9ad76da","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseExtremum.js","hash":"931adb7b69f0e4683324797c8522f4f6c9ad6321","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseFill.js","hash":"474427d0d470b473ac37456e9ba151a966b2ade7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseFindKey.js","hash":"dc99c1f56a9a4559ae3fc9f3dbd7f8cfac677949","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseFindIndex.js","hash":"a6811f11035fd20ebedd10b014566614f1fee155","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseFilter.js","hash":"aa90047b0a1231f770807422c67a36a4c3524365","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseFlatten.js","hash":"045ce95760998450c806995fd49db7ce8fd96982","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseFor.js","hash":"6d4e2744c99f75df073ca2e005317feea00533f6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseForRight.js","hash":"2d3155596f8e8420da54564a69dadfadbd84cd67","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseForOwn.js","hash":"8977ba022a8d144093f35c729822e6161d5fd291","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseForOwnRight.js","hash":"29a6ce1c8ff0893a7a5021a5b54d3303dc7e9ef5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseFunctions.js","hash":"17d2e75a62a380223a943a07c0726c2d101c59ff","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseGetTag.js","hash":"b66f083cb3c9fac408a18fa8e104a20e64355d45","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseGetAllKeys.js","hash":"f7c042fc3a0e1f89ee6f0ab2765615983796b303","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseGet.js","hash":"2c7bfaa44754b5302e3bd2137d95b4e045bc4c85","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseHas.js","hash":"0643a432e7d64d10615b4cd7092f2483c317cda7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseGt.js","hash":"7368ca132e9b25b5f2ae74cfc01d619f284e84d3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseHasIn.js","hash":"e11103f369bb4fef0cbd193622c7126c70e0fc8c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseInRange.js","hash":"5186220a6519de4a9b0882ccbe565b74caea68cf","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIndexOf.js","hash":"554c47e0383ef62d126d9d66aeb416e8e75ebf3b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIndexOfWith.js","hash":"bf10b85520bfc5add8a38c341e95a985e1ab3626","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseInverter.js","hash":"84de1267be8b3b1973a696826a66247ff88e7c25","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIntersection.js","hash":"deed35c6297d406b8f5e0672a4cc99cbc95fd0b1","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseInvoke.js","hash":"b287bbe200beaf0e4825bc7bccb7ff702e0eff74","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsArguments.js","hash":"6c428b2e543a752140ee6b1223a659f45025a71c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsArrayBuffer.js","hash":"f154818234664296ec6c8496be8cbe77c6909c8e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsDate.js","hash":"c21fd699a4d3d38d28770746f33992778c3e2e94","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsEqualDeep.js","hash":"becc7c47d3ad5aaf2a6e5df7038595f21ff92bb3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsEqual.js","hash":"7f9ae050c867190bf8379e97f1fd9d01cc2c96f3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsMap.js","hash":"b28a7248f4a44300ecc8080ad259944d4bb9a356","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsMatch.js","hash":"68d520389a8b2d00f0b649787df02734bc00ad9f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsNative.js","hash":"1f36b939f5e5b0dc5f28ba7c47206d717b966c7e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsNaN.js","hash":"01512b16931316dc87e670d11c3b3d7c354366a9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsRegExp.js","hash":"663e2101fd6aa3086bddedb08f0d2e7bbc30c0f9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsSet.js","hash":"52795ae38cc0426dca2468342cf28dc2f78775f2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIsTypedArray.js","hash":"291f63ba52ab97764a33305efd699a2e394b2517","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseIteratee.js","hash":"032e8e56ae36205075f11cef6a7e91890a8425bd","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseKeysIn.js","hash":"eb88d9e4d4f429c250f3ee2f22312b885ce7a75d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseLt.js","hash":"92e621a7798bec567f79b006e1608a434b18d22c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseLodash.js","hash":"dfebf25a399f77aa4b416e1a92ba11ca59c2a8e9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseMap.js","hash":"e4d4a4031106e999c0f44a81dd62afc0f84f3fe0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseKeys.js","hash":"29d99b03db5dad4affa41a388470c89595e44991","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseMatches.js","hash":"bb2332567191ebdf1e2414efb7279d989fa223ed","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseMatchesProperty.js","hash":"0a4a914477d3d5a170f0c5bc7c5b2abd106bbfbf","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseMean.js","hash":"0e536b0da31875ca4a97989a76d851b5589cc867","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseMerge.js","hash":"98522fc0af55b07d81dc373b90c34f20406c45b6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseNth.js","hash":"7afabca34c7963943eab1dc70a433231283cc8c5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseMergeDeep.js","hash":"945714c53207b62762cf4e7be64eff1fce7ad7e2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseOrderBy.js","hash":"c76b0438a27df64a71220d2e819d9baa79d9641f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_basePick.js","hash":"1eb8ddfe3a55363b22404e9cfe3723a56c9715cf","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseProperty.js","hash":"31d8d961f7383f581a360947b0b752e95d35cd14","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_basePickBy.js","hash":"2749eb539f38c35b694e6b8f74d20f5cdc37ca15","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_basePropertyDeep.js","hash":"b9329f5af409f1578f2fb9fd34ccbdf8cbe54070","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_basePropertyOf.js","hash":"33b60f71f3cbf5f26607a2b7356070f8f6953223","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_basePullAll.js","hash":"a140d4775d1ee69b9d6d434d5729f82b7e55bc8e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_basePullAt.js","hash":"7b291db76db38fc2850529f7e519f5a273dd1f5b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseRandom.js","hash":"86fe0bbec2bf3b242a8d861abd894f9281c2408a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseReduce.js","hash":"96e87d251b7bbf30707b39b529243e5d3a7f5c2f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseRange.js","hash":"8816c954f5f5c9c100a51ae5be416a4661e418ed","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseRepeat.js","hash":"e5acd9c33e9026b8848de16db87d9ee1dfe293db","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseRest.js","hash":"e31a38bffa598aef97317e7b1970a212a4d44d00","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSample.js","hash":"bf50189b8b304ff4bafec174b108a7fe25a6a003","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSampleSize.js","hash":"b05eb913d80f60e274e00632d5499319bd0204f2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSet.js","hash":"0d99172a2005d7c0dfa71114b0cb0aca9cafd47a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSetData.js","hash":"fa3ddde4d03be0d225fb7e96d1b5f86f0e321453","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSetToString.js","hash":"4fa840e62be63264b265b19fff3dbad4540a376b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseShuffle.js","hash":"62b58e90df1ca7ee5d44cd923fd531f1964f37a7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSlice.js","hash":"959756556fea236343ff752adb6b869bcac82e4b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSome.js","hash":"4be43bfa949a8292f8f780eeeb83bb5da00f58b7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSortBy.js","hash":"77483347d5381f336bed3174c5b301f40dfc7a24","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSortedIndex.js","hash":"6a353c6feb19a86665f9ea37ae0ff7f5ff5a1d9b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSortedIndexBy.js","hash":"23b9368bcfe7afb35249a3a2bf880a170cc72ccb","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSortedUniq.js","hash":"c2ad97df99636c7977b6374e44cb61dedd64aece","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseSum.js","hash":"e96a801668916a3027558a8795a4957e11c791f1","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseTimes.js","hash":"7f3edc2bfd65d843b592ff123759c9d616ce3a64","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseToNumber.js","hash":"1d6f1a52fdbddf557ef5d870c3ad6fecb7089af9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseToPairs.js","hash":"d6ad1c204c16fee82d17a5b4febca922a78cda47","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseToString.js","hash":"f2a75bd83872d649b56a1c0fe7b785ee13ac3cf5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseUnary.js","hash":"5dbba7edab4fb0d361906358fa2d49dc35c1e603","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseUniq.js","hash":"ae7942f5facf5430171081eb0d2ee341f69c9fd2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseUnset.js","hash":"d9a16888d3995c743789eb2003d8d5c438f00ca5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseUpdate.js","hash":"12682de8a3a7f8d6e89f4872bbc2bf1c2b66f8b0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseValues.js","hash":"a8cfeda4f95c958cb46ac71f77a631e57617c1f7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseWhile.js","hash":"4fb4c4f09282c0e560a1bb289caaac7d58d64a10","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseWrapperValue.js","hash":"1b1d0a42b03e95693fc88d6a24e4a3473d15392c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseZipObject.js","hash":"7995093c8f43666bf1f2dc15cc1d752dacc55e35","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_baseXor.js","hash":"0077b838e654fac3f5ebcc99ab1dafbd158e4e71","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cacheHas.js","hash":"d676b44402e7e4ff04011e54a086f7efe819ef81","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_castArrayLikeObject.js","hash":"0a049ad2b5e466bb2173738787645d6aa97b9e03","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_castFunction.js","hash":"af88042305fb1cc58dde3bca997c206dd0359bf7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_castPath.js","hash":"a7a03888171be1aa22a92d12b9a02b8c8798375c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_castSlice.js","hash":"9b963fc73a75bdb6cde5c38b2ab1fac07835a800","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_castRest.js","hash":"82020a1342ba8656765ac9141410d1af2b7730f0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_charsStartIndex.js","hash":"c4db2a95b12b0a442f73d3ad3d27c0048193b216","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneArrayBuffer.js","hash":"ffbada38bb191bc5290fc3ae51f6c01c3f8f6d7f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_charsEndIndex.js","hash":"4164a27a922efe0dfb1dc15496d199152fd96599","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneBuffer.js","hash":"f0b54438e44d83118f342434cabe99dc438d19c3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneDataView.js","hash":"c8e9d1cd47aab00655a7ad7d3103cdddf2fd92a6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneMap.js","hash":"78b7b89278da0f365134c5e088d574ce4b197140","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneRegExp.js","hash":"d0318f8d44ff0e8720cf498982e3183e23579919","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneSymbol.js","hash":"8b27dca2415595e97e38d9fa7fb3f854c4051048","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneSet.js","hash":"4c0407fe20b7034b804d430d06502f816e7b5bbe","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_cloneTypedArray.js","hash":"b50a151594d841fdb56e8cf04619529fed4891f7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_compareAscending.js","hash":"456fc00f7549c8ea36a3d2f3b818b50bfcf016e6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_composeArgs.js","hash":"18e0c7dbd15ff30fb10ccaa4ef651751eea88ff7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_compareMultiple.js","hash":"798b323506b11fa866904e39771daf98df260bca","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_copyArray.js","hash":"cec6a29544aa38261f7cfc1bf123f3289d22c377","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_composeArgsRight.js","hash":"b826dac099cb5bdc350361b3fb6df6a3c743b49d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_copyObject.js","hash":"3bfeeec32b43433683d931621a2bf53dbc3db3d0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_copySymbols.js","hash":"871986e31fddf247cd65b93aa92b69392b9bde8d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_copySymbolsIn.js","hash":"92a72efc51ad106ed6bc2e4dc03d0f23751523fd","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_coreJsData.js","hash":"15e60e7a6363ae6df943c85e4b9e1078457b06e6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_countHolders.js","hash":"9ff8f78133806ffbcc60d281c0152897aa7640bf","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createAggregator.js","hash":"261d83069fe95d76ef0dcf16aecf4d21af132baf","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createAssigner.js","hash":"0125f6e53a2b16619993e408f3511862079717e5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createBaseEach.js","hash":"ade31f23b8e144e8588af940219fc4c8bda2ce53","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createBaseFor.js","hash":"77c64903d26461aaff6bb22d3e2739a5ac9a5e0e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createBind.js","hash":"56e3d29a4d8774c9709ba42dd15e204a693a8a42","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createCaseFirst.js","hash":"4eda4cc9710593950268262489e79a507679356f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createCompounder.js","hash":"195c16455366a158b8b855547fafdc602f0be9e9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createCtor.js","hash":"12be272e2dcd00624119d859d78459c9dae1baa0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createCurry.js","hash":"30c237eecdcbbf00b48be6b716264799e0f32c1e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createFind.js","hash":"3eb3975cd88173810656e3ab17de9c210773a1f4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createFlow.js","hash":"c9408be96649f6431781578ada26509a567005a8","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createHybrid.js","hash":"15282c26201bfcfdc26829ced58fa9785f1db1fe","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createInverter.js","hash":"3b149fffb0fb7fe82cf00dbd794973ddc33f33e4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createMathOperation.js","hash":"d02710cbdbf76e2b2001750b355238b9a0e951c9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createOver.js","hash":"ba8f63fcb4755dc9023793118e5f8180e86c4c64","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createPadding.js","hash":"0597ae4997016438b3d7629560c03d260f2b51a0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createPartial.js","hash":"2dc87c9d5a3fa04f144a85d4d90cfd55a4e4b208","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createRecurry.js","hash":"fa869537d2d2bb656d1a7876435dc4c79f57575e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createRange.js","hash":"1c65b8adbfe1a38fb5827f584a454bc8218050ac","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createRelationalOperation.js","hash":"428d4535498e0c63f8a998bca3403d36ddbf8004","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createRound.js","hash":"f6d9e30f03e0b5af47f9be48bea3399d9c684191","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createSet.js","hash":"c213de450f86338c23b81de1c99f8136a7538ba3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createToPairs.js","hash":"b16382972bd68fefa26ec9672c3935cfc1af1b7c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_createWrap.js","hash":"3cf0222feec115f3d4b71c1adbfe4aca7555ebe6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_customDefaultsAssignIn.js","hash":"3cfaa6d8045c1f0217366218ad4340b50de5ceef","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_customDefaultsMerge.js","hash":"9378ba434e10108ffac43ded9d6d28e32fac527e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_customOmitClone.js","hash":"2bf571311b6785fd53ae57ec710ed05ebad80ab7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_deburrLetter.js","hash":"65de6e749f5e37659ce5798a558a9aa1b50bec5c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_defineProperty.js","hash":"308f9b9c0f8822351b71d5801be25a8326bc5584","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_equalArrays.js","hash":"dd3a74350ab4d89beb889ba94510b3e5723b6209","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_equalByTag.js","hash":"bd57ba1568c522e436bd1af7ec860bcb1e274b85","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_equalObjects.js","hash":"6e408bc1b739bd195adea727a0f9dfdfb778a214","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_escapeHtmlChar.js","hash":"d1da9dd2828cdd0071b82ffea56eab694bafbe37","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_escapeStringChar.js","hash":"d011ca793a93e44d7e6928cced2055ea47f6c39e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_flatRest.js","hash":"1a96086a9a21bff7890036498a1e161fe7955194","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_freeGlobal.js","hash":"df0709e144040efc52114c69b7977ab04f3a799d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getAllKeys.js","hash":"9fcb354c326cd308df841e6846d506165842f9a3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getAllKeysIn.js","hash":"4c08d556179109df462c2ffdecef2d6486315062","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getData.js","hash":"2fea3c244fa4625b978cea63124835c16aefe660","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getFuncName.js","hash":"dd42afbc814c94e5bdd2fbef652efb7801403f6e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getHolder.js","hash":"86951aac23219e1a51267bf5fd7a38da110c877b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getMapData.js","hash":"f8986a4db2b55203a3237e5472a4620816306331","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getMatchData.js","hash":"221908980050132b19c79c53c1b7d78ef5b93d59","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getNative.js","hash":"a3c1a7f525a79c6216c2bd72810ccb1d8afefd9a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getPrototype.js","hash":"150397078aa95ac1ace14e9547b7c28eba508353","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getRawTag.js","hash":"08573f8b464cf110d0873d475890f499a9620d80","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getSymbols.js","hash":"1c87ed98ef573b41c8a015c15857a0991603eaa6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getSymbolsIn.js","hash":"0bae489598ad76c4f2faaf33bcc1b3bf34e4772b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getValue.js","hash":"aaeaa4d7600367187650a1ef2d6949e2f788cf76","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getTag.js","hash":"e74c13874eca982f0fd30b1e35dd05e0664c6af3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getView.js","hash":"3a642a1adfccdac302261e31fadd3918e623d6f6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hasPath.js","hash":"f300ab1b5c17494a458e38d10eb815f5c1c95b76","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_getWrapDetails.js","hash":"ab6c90ec5be32187a6cfe2c9e798e7d298263dd4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hasUnicode.js","hash":"2ead86c95243b0dac220736e198e0a14e68c2982","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hasUnicodeWord.js","hash":"254386bb9e3c37c9f53d068c485b3f41348dd56b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hashClear.js","hash":"7a6f43944d3ff13552dcbe9ceb972ae5a83e8b1b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hashGet.js","hash":"5645b9091466891d4c892c6b3bd220ebbd3a3d00","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hashDelete.js","hash":"5b552f18bab9b54a3192e193d44188e1656556d8","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hashHas.js","hash":"aec7a8cd442a620d0073260ab7dc03960f6c85c5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_hashSet.js","hash":"13d89d46c86111ca9941d0c35c29a84b2fb97a87","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_initCloneObject.js","hash":"f2ee8035eaa7751ff081de5681c6603da177f8f6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_initCloneByTag.js","hash":"8969b78bdee7f1b47064aec690b0d61956210c59","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_initCloneArray.js","hash":"ea7dc2be272c42decf2d28b9e87861ed83aa196d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_insertWrapDetails.js","hash":"07c0c750900d12cf01ff9d99e429c6be76790f4b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isFlattenable.js","hash":"f2cfab82055d2ca693f33a874c57d8250467fc04","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isIterateeCall.js","hash":"8116de0f8e735fb8c0a9d263a369be4b74f5f09c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isIndex.js","hash":"058615b9d859c6bbd682a9e64e9d5156d93a15ba","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isKey.js","hash":"e68a3f3cc1d7942c51ce0e8d927c0eb1896bc46e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isKeyable.js","hash":"89389f3a2f157c03608bcce01baf751018f25fa8","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isMaskable.js","hash":"54963a24b696b2c57b2e8d2a873ed7db9abe6b11","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isMasked.js","hash":"c001b1b4f9d3f7ece2e7263350f081da707804a5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isLaziable.js","hash":"857a630edb35c21d76e6e2fd6daed3f3b51ea6a9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isPrototype.js","hash":"6ebbd7e2661dbf8b6e35f36d680b7117fcc6b2c0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_iteratorToArray.js","hash":"0512af6634544643fd2dacfb328aa8fca1770d72","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_isStrictComparable.js","hash":"1db231f38b860e0a94e052c232829f8e8d31eb74","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_lazyClone.js","hash":"528f2c4e0ddaadd246d07757608fafc02842508b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_lazyReverse.js","hash":"a16d79ce7d467ebd00332162dafae250f726fe17","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_listCacheClear.js","hash":"cab24e3a5aa064726b71f761bac42e765a21517b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_lazyValue.js","hash":"8e87e755c6f452304a814a29998fe145065aac74","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_listCacheDelete.js","hash":"1421610bad35fbee226a1a6bf8e7edb8958a4d6e","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_listCacheHas.js","hash":"2070fe4515274fd0445b01ccbdad8acbc6b7c9a3","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_listCacheGet.js","hash":"266ac036effbb03c4a20397401900068f25ee510","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_mapCacheDelete.js","hash":"830ab65244dcd7c5a00fec9be355e9f713e6ea3f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_listCacheSet.js","hash":"cf902d42ba5e57849d08b0c03d2003c56bbc0dde","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_mapCacheClear.js","hash":"0eff5c92ebddbff48603ec60a32720c48fcdfd2a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_mapCacheGet.js","hash":"2f580dedb6aa86e87c9931a6bb2275df8fe8608a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_mapCacheSet.js","hash":"745d2c8aab1a63cd28192eea4ac7bd86d5050b02","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_mapCacheHas.js","hash":"a0104808ea49ff57061f2b4a6ec4ef5f28e20601","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_mapToArray.js","hash":"ba760ad87c596f8a038240cdb8eb21c8f441a288","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_matchesStrictComparable.js","hash":"886455dc09cdf350cadc57a4bb14cf8d700db358","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_memoizeCapped.js","hash":"6e577b3ba7b897f8a8e6277cee2a9c0d296608d9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_mergeData.js","hash":"88ffb153b2cf2792dd67b70ef0f7ba1715c991fa","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_metaMap.js","hash":"6fe08e4a7c81c515eb34e464db1fe31d20bc8ff6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_nativeKeys.js","hash":"9cddc8c7f8efeffa319763be371897c861027d65","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_nativeCreate.js","hash":"d77d487728a34b77fe91c07ed4a2ca41a7265b43","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_nativeKeysIn.js","hash":"d11eee972281d8eb8c93724d6a9088faf33e9679","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_nodeUtil.js","hash":"eb7f154a395ddfa64aa04fcc8da030a58b78c197","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_objectToString.js","hash":"c489ccc8b47254177546b747476ca6b4a339437c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_overArg.js","hash":"1fd1876980219dfd22c7ad86a49994f6ad1ffb0d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_overRest.js","hash":"7020d98e117801d3a38b53367295588fe9574282","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_parent.js","hash":"a509f65490a88db6e1469ba7d8eacf86f11e7578","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_reEscape.js","hash":"1956c226d87ffb9bfb9d0b443e5e7c6665e222a9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_reEvaluate.js","hash":"01062fe9dad608255c7e341c6d3e145c9ae6912b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_realNames.js","hash":"1d70870e01638a3ba3e742bf871a5618ba866480","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_reInterpolate.js","hash":"1f30c7932ca224ade79f3b50991da604fdc93c0f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_reorder.js","hash":"f9ebaaf8bddda0f54270363ed88d8eeb4b0acf95","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_replaceHolders.js","hash":"c24095b10ee93a2b1c4eabe187a37eb54a74b47c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_root.js","hash":"da38a7e1c62b9dec425d3354b1ae5b2f1473ed41","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_setCacheAdd.js","hash":"3e8d192f136058af7953acb255f3452e25f9dbd5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_setCacheHas.js","hash":"6b635d8cd68ddaf51b359bd7e89532dbbd5d259d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_setData.js","hash":"27ba08bcf3045df1eb5bc20514f6532d51049445","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_setToArray.js","hash":"8aa29aac79d989a3642638ba90120860d6e7cfd0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_setToPairs.js","hash":"8f144b728d7afc8059364769d27708f6f30f1bc9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_setToString.js","hash":"525d4e7a92d2f5de834b7199c926bf05e5863e02","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_setWrapToString.js","hash":"e1129dc30bd9fe222dc11cf9d319f2d16cf02f82","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_shortOut.js","hash":"2b821fd23499f0583817e801c9ec1aa7fabac0b5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_shuffleSelf.js","hash":"d384018a208bad370c0fa749fe1a7abdcf7d1550","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stackClear.js","hash":"f10a4d85636bf0a0495cb7222575c139c2963466","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stackDelete.js","hash":"0035fcf868dd14e85188c010466ead0b44caddc4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stackGet.js","hash":"edd10aa8b1688c112def671585164abd168f7dc7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stackHas.js","hash":"2c66efa2be2222610dae4edfe711b8b0d9a55a60","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stackSet.js","hash":"54d1b0f6e92c9327efb7142d082bea43f49521a4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_strictLastIndexOf.js","hash":"541978faa200571da921f5cee0c141cca0436237","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_strictIndexOf.js","hash":"4d373aae516f6097b486413f2e0815c73aa37bdb","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stringSize.js","hash":"2c19f863e40752a52b8d3347e8b05c8afb61a4d6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stringToArray.js","hash":"051613c1b18c5156a676b197586fb0e2c1acd0ec","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_stringToPath.js","hash":"a83334902dba0f0d56c0596c638b1456141465f4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_toKey.js","hash":"e24143e8602a9acd35301e6462b03c6ef0d94bc9","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_toSource.js","hash":"12282cc7f18c3c7446129f547741c3998b6caf18","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_unescapeHtmlChar.js","hash":"345300e6aa36d8b10133adfc3672efc630f77822","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_unicodeSize.js","hash":"4ef1b8b07c56ba22c273f20ce1f43c99d9e646af","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_unicodeToArray.js","hash":"a9378af7302c381a5f82467c32de3111ca597877","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_updateWrapDetails.js","hash":"2ef2e983cdda0be8c850d7e59d570862ce6b64d7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_unicodeWords.js","hash":"853d777feb807a223d13006f8417876aa7d8bf97","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/_wrapperClone.js","hash":"c54b050119a2a1ad75146508a03ed4a78ab9b5fb","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/after.js","hash":"4d65d6ae8537ba01400d74e3540b52b463dc86eb","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/add.js","hash":"69ccfa17792261411f27bd7166a6760e3e6e653d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/array.js","hash":"ac9338e3493fec2bb6d7a1dcef45ef9819b20649","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/ary.js","hash":"6db228f04677c2724e6b8438681c4c0fff0c998c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/assign.js","hash":"c80789cd7fd35c7190290526e466eed28caafa80","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/assignIn.js","hash":"166da8ae436b3ede129a5842457d68d6fdc9616a","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/assignInWith.js","hash":"7e951bb44bd108e1024ea5c691d9bf9449c112fc","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/assignWith.js","hash":"98f683f41fd043bead258cfc6e61bd6765eea779","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/at.js","hash":"cf037c2d8d960fa96854f59381675ee196cf4069","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/before.js","hash":"bc0b86f3e03b7056b39193a03c5d39ee4fef4023","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/attempt.js","hash":"6b981c1f3ff53c572ebd08babf8799c8f118f6f6","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/bind.js","hash":"6b960133235c585a9b461e19df07cdd6edff118c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/bindAll.js","hash":"cfd017286d7a7497547755272e1a55d39dc4beef","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/bindKey.js","hash":"b54c9311a7c9550ffceda021af5c995eee09f693","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/capitalize.js","hash":"cf956ec612dfed45fdab26ab30cac6f46d738119","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/camelCase.js","hash":"1db1aa1a3c7a3a703a33c660526ef141c0bd3b94","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/castArray.js","hash":"8dd901032216d00cf43986adaf961ad7422a64bd","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/ceil.js","hash":"13eff7a830076aeea2ffabd36b8d0d3254849953","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/chain.js","hash":"e51b12d085b20c8676bf3297d9d0a8acb3871e4f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/chunk.js","hash":"8e0f7e51303031640b539758ed6fa3e48e761783","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/cloneDeep.js","hash":"fcbe65493c8f2c4fb574dbdafaab5ec22ad3ac42","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/clamp.js","hash":"0c356936d91c87fe7938faa3e1bb61b8334e7f0b","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/clone.js","hash":"1268809f4924a5640d425e56eb4cb71df51ccb72","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/cloneDeepWith.js","hash":"2be99cb83b8e6ac3f488963b433a8dd1829d3599","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/cloneWith.js","hash":"e9108f222791a26a83106488509053910d8460b5","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/collection.js","hash":"235db0c51d2fbba77c1c0ab2f25617e3c02d9e5d","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/commit.js","hash":"f2962f416c4427b7d5fd2fe8f752c41a8e6ee53f","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/compact.js","hash":"f747cf703e5627de69652da7ef01299274cf48e7","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/cond.js","hash":"3df6aa9c3966438f382511f0b5ab7647ef5da87c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/concat.js","hash":"16777de6eeb0cb2828722e48c32e900256c21bd0","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/conforms.js","hash":"e226b49b5c96a85b5a1796b7a708c3e3fdd9fd9c","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/conformsTo.js","hash":"db8ff09750867c73d76ad1275a5cd8c2bc93b873","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/constant.js","hash":"0227ab051a5a8ca5e0fc7934bcea54ec25f90292","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/create.js","hash":"41e8f34b4e9429b4b7ab26264bc570214164a5b4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/core.min.js","hash":"539a79af1b727df63f16b8fc4bda993215394b45","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/countBy.js","hash":"048867f03021430a606b699403133e2e234777a4","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/curry.js","hash":"cd66258e0cf4fc625293d358d15a7bda051bfa67","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/curryRight.js","hash":"61586b4ac19da0224a3262027f2d280f25bd70e2","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/date.js","hash":"6466f5749384af915c2b6a449e74e14e320f4e11","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/debounce.js","hash":"e60ae7b90dbe302b4b221475f637f1ec33e8819e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/defaultTo.js","hash":"07e0f352f98a791be53a0a6eb43dedd756acbfbf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/deburr.js","hash":"460705fd44df7613129dc58981966abcc45f9488","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/defaults.js","hash":"ab1943c4519eba0e3d1ffdc29f2e2f92f42ab166","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/defaultsDeep.js","hash":"bf8d24913d8a34b40f1190a2d4fd01cadde49263","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/defer.js","hash":"471017a76ca3f3f71a111ccf7b487f89a50327db","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/delay.js","hash":"d7b8c52b90e17f9e42413ac7ea16d39a8e96bd4d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/difference.js","hash":"7a2a5465430dd730ff198a6ffcd5a3de8660c7b3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/differenceBy.js","hash":"ff88a7541ee0b628ea3bbd923077facde3dbab36","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/divide.js","hash":"b21dc4cea11b1da27812a545fa75aa0d6b9a834c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/differenceWith.js","hash":"0f2a92e973c183bdcff6395d840f683f318c3424","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/drop.js","hash":"6e25554b3f395b8e55d6b291451e7cac2149c7af","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/dropRight.js","hash":"e77c7613539baf9a222fcc57142d5a808263688e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/dropRightWhile.js","hash":"f9ccd85e2dc3364b0fdfbc824632e9f792b5a11d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/dropWhile.js","hash":"f710aa52d7e2a9b128e647ec58b24e3c37660790","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/endsWith.js","hash":"0d8fd73985ee8c845b0c851704c8700f1055863d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/eq.js","hash":"bc3769b5b5cb8262834ac0a28cc4cbe71257ce94","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/escape.js","hash":"60bec78e2fd63cbd52dc8f4f5f5b242bfc9449a5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/escapeRegExp.js","hash":"91892447637ec6b53595e90a9817241b536f5fbe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/every.js","hash":"6da415b41c0bae9c96fd40df253df2de7d965f4c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fill.js","hash":"bb9b5af63b9b43626fc4db976072b045976ea77a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/filter.js","hash":"5e630c86a2bd2a83a887241037b6d714401502d8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/find.js","hash":"bb6c19af408438f6a0e19998a230880354afd814","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/findIndex.js","hash":"2fc5db1562e58221e0aafbbd317240704eb29985","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/findKey.js","hash":"eecde37bba06739228e5f93eac97aeaab4a91d4f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/findLast.js","hash":"1f3be6d3e3eb97733c9a648872b4b3366d590257","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/findLastIndex.js","hash":"05743b963c7370d830ce76ddc5da4d85ba687935","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/findLastKey.js","hash":"9ba6afda847da380659ae98f0cb575566a0dc85c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flatMap.js","hash":"78f9ce2566f143366b0998ef02dd8dc89e004133","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flatMapDeep.js","hash":"76d3ae49d148850472922956935d294957f6f04f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flatMapDepth.js","hash":"fb4c4fc58c11b646dfdac83443e7495829da8f45","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flatten.js","hash":"72364918453483de6a71137a9a8003973c141fad","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flattenDeep.js","hash":"422f037a6379f0db6258b9337261c1a9cc719faa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flattenDepth.js","hash":"537a4e7196561ecae367985622872417cb19eabf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flip.js","hash":"67207c1ba95e6881968ff8fd5542f29e259aa3d7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/floor.js","hash":"dcc9365721002de964aa2439793b7a10419d3dad","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flow.js","hash":"7d9e4b712b68551d5b932bd4ed88d15b4aa1722f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/flowRight.js","hash":"3e028361a9b090f8e4166d89fba374d65d52711f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/forEach.js","hash":"0f3074268fefe6db115334ca5dd1b89eb56a8a3d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/forEachRight.js","hash":"654c60d4bb9737aa9fa3a7ac55e889f3dc2b50e3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/forIn.js","hash":"61f83e8b63f97c099842046983acd61ac1b31ff2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/forOwn.js","hash":"3e351a24c7fdf0593c116f361f59739cfb447950","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/forInRight.js","hash":"6a060f1b26a6be2a99c48eb56d104c4684b9bb30","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/forOwnRight.js","hash":"91e99b73af52bd6155bef7a259aa2e763aa4b885","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp.js","hash":"15a13940a645e776e00a229a7bec48f6af716505","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/function.js","hash":"23850ac10d90d3b9eee8723beaa3af727330323e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fromPairs.js","hash":"9a5f37cb42d2839c2637ca1792fcc1cd4333c56d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/functions.js","hash":"0ef50ad30d371a2b7ecf4363fd7862b5417130af","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/functionsIn.js","hash":"29e78c6d69d36b48c62e4374c6cd1c02da73da40","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/get.js","hash":"fd2860fd39bfc6e8c44bae101e133effe6373734","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/gt.js","hash":"8446ef3704d57dd44214e6513a6889f4d9db658a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/groupBy.js","hash":"18d1063f6af8b9cb6901c5ad3257db49027ab77b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/gte.js","hash":"ec5d91c1d30601111dd6a41af35d55c2c27498ce","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/has.js","hash":"c3c35131b701a60eb1f6bf9e530c78d123268cf9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/hasIn.js","hash":"8a4bf01f81a8d508b322441659f9c74f38998c3b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/head.js","hash":"374b879fa821ee60e31efa35f0b847ac5ba770af","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/identity.js","hash":"af8a8f8af76663a408cf9f29e5723d05f79eb236","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/inRange.js","hash":"38cdcc3285d54fcce6a7b362642c8c93305782f4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/includes.js","hash":"b5d81439dbbb9b6558c9148e37bf5db918a42d1e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/index.js","hash":"14d8b25e9e35c7f1b551d732fb814c982fc5301e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/indexOf.js","hash":"eec5a54dc7285759af46028f7a7c1ec3479993f4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/initial.js","hash":"c366df8c3c272bbc5fded392830b438d30d8c4a0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/intersection.js","hash":"b51e7675e09c00ab99a632cdf1fac769f1a874ff","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/intersectionBy.js","hash":"969e82efd3befe0749085336f9568eb81f55d7b5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/intersectionWith.js","hash":"1e1c0b6cf9c37aa60ea316a1540245bbff6f7a8a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/invert.js","hash":"8416527db2867dd6bb9645374268924b6ab5988f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/invoke.js","hash":"5bdfcbcf073fddbf4f00903e4a8db0f1b868c8e8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/invertBy.js","hash":"1e71c68fc7be2d1999d0c0a18c2db4910fc057c5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/invokeMap.js","hash":"bfbac7243fe9a57276626d7090d473d9a3b2d796","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isArray.js","hash":"c6d5635dc764c9acf7395abde2230c43121641a0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isArguments.js","hash":"b9214a907e11a8e2321e6adf907ecde99b9920d8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isArrayBuffer.js","hash":"b682ff167ce2b34539afe73df93f2abe81b8aac5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isArrayLike.js","hash":"88d7cd3fc8a6075777cef6c16e1cc4931734159a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isArrayLikeObject.js","hash":"300effec49e91a13bfaf9b6a9dda4ea2c4d45d92","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isBoolean.js","hash":"ace779f61262f820f5f4ed39695bddaa7ebd08a3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isDate.js","hash":"3a7813e7ff48c9ac6ce3bbbc8584b1ce22c4ea1c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isBuffer.js","hash":"246d03a17c274bdcf3acb909f2337c695c9aea45","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isElement.js","hash":"652c3967fe6b11419aaa8652a8d8d6e35f15a76e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isEmpty.js","hash":"935d1e74c2b8a3deb928af20d4440894368ccacb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isEqualWith.js","hash":"3e9d8f6214fbb2f859254ea9c4b8f9da58ac15a0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isEqual.js","hash":"370af44d612ddc96cdc52779fcc844fdf4ae00ae","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isError.js","hash":"b184db78799044db3af29c3f6224d8e2213c9985","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isFinite.js","hash":"388faf4e73347a1c0d77c98a3ac92be8902c5f36","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isFunction.js","hash":"6cb0b30f9e48fc93016a3f34d124224af7901908","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isInteger.js","hash":"ac93647df1dbe92f6358a992b1d5e7039cf85514","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isLength.js","hash":"45606d651b8071d8ef73beb03d31d6073ade0df4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isMap.js","hash":"d19970b50ffa3f5e8345e84c635dc7b553bca992","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isMatch.js","hash":"29b9682a150068960adbf9ffa6b1da7f2a45477b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isMatchWith.js","hash":"60bf9f292afffa501f83381428457dc7567ee4cf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isNaN.js","hash":"711cb119497d074148b07dda40eef0fa7519de8d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isNative.js","hash":"58dd206b6a97ede6c6c786ae029a36739c5efe7d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isNil.js","hash":"5780b6ca6e7dee6c2599a9ac77eb302812a373ca","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isNull.js","hash":"bd68451baaba662307893e3216b99ed20cf8a0d2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isNumber.js","hash":"75152f3218ff6f88b1ad22a258b16c85ebbf9408","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isObject.js","hash":"38f00e3e4772d23d56550ef75959d10f92448e3f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isPlainObject.js","hash":"104adb7c6dc9854cb91ac5995b17969c44614262","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isObjectLike.js","hash":"7213913d764526ff2189c115d354bb940470bfde","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isRegExp.js","hash":"af11b03682761c1292525e290f0312da974c02c9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isSafeInteger.js","hash":"18473b31325225abe68ccaa69aa84635ab02b651","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isSet.js","hash":"8753a0c0f5a73feb22942035f87351120db0f402","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isString.js","hash":"7eb7706298dea12e813be37db6cdc8ea92177630","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isSymbol.js","hash":"aaa0f4e5003e5d33ed7d67b8a274a9a14c3cd64f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isTypedArray.js","hash":"d92eaa92fa13419d2df184ff11f270c266590f66","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isUndefined.js","hash":"4e087abc1b0997f71bbf33e2065b40d438511e2e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isWeakMap.js","hash":"d88fd7f6dab0bc1a14c8b7b9f5adabf3d5430ef6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/isWeakSet.js","hash":"2582214ba7a25b23bebf2ef4ad8a799248a5e5f8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/iteratee.js","hash":"5e22aa3f442a49c5061a7328b39c7ef197b9a249","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/join.js","hash":"236f8abe4dfa446351d07525089fabee2e2d3f0b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/keyBy.js","hash":"96e32f75404ee87c0fe8bf2d8b7a2c69cee308a7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/kebabCase.js","hash":"ed770da5a2e3ada160f9dcd625a94d16ffa8fef0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/keys.js","hash":"84fe8dcc57c7b368d5fbd3ccf0c194cde0c78515","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/last.js","hash":"dcdc5c04379818603815dfc64e96bd5e2626fd29","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lang.js","hash":"2e1998c6fa6bd4a5c691edd1eb1fffaea2a35b85","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/keysIn.js","hash":"e444c4b265f9f39968467a82c09935bfa1be501a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lastIndexOf.js","hash":"64b8f7981a889c14b785738da32da89ea7b06519","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lte.js","hash":"02b0d1b5d68ff6e8cabda05c1e5a4c9675b10479","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lowerFirst.js","hash":"6b7a190cd8d1f01254d0556b7725ed8ad3ee9cb3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lowerCase.js","hash":"6280f901a37fb21a9acc5df8678661c1dd47d425","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/mapKeys.js","hash":"6c2885c6249ff8dbd5c18910338240ddcd441e48","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/map.js","hash":"484de2e64aa6e9cadbac92703bf79be5dbd53942","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lt.js","hash":"244011c8209227a5d714f5843106b13de0f5fc15","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/mapValues.js","hash":"7d273ea92cb971d298e84137f49b89c5d7249336","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/matches.js","hash":"b760524ca6b6ba617641aa4353e7598c0cebe50a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/matchesProperty.js","hash":"993988bbf9037d03aa3ec66e3d6ba3db185a58e9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/math.js","hash":"09b7cdb94b0829a362572cd9eb490c6b86471f35","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/max.js","hash":"2c5910535b9bc06c066c57f71b5b02965b894cfe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/maxBy.js","hash":"85f841238f0c60a3496eecb25a3bf7aec5fc36fc","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/mean.js","hash":"17efb674e29e2456f3b1e595210a9929480e14a3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/meanBy.js","hash":"5a9d6be568a698c6ef430a07f3431c11bbba3dcb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/memoize.js","hash":"507cd3e0ae52967b105d0452fd0f93fbbc69bfc9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/merge.js","hash":"20f06dc73414778002395627c8d4316699ff947b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/mergeWith.js","hash":"18a5592394d4cf1a0772e6ff38bacb9b547105f6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/method.js","hash":"6dedac7c45efb248890558a8d42a2656623ce0a5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/min.js","hash":"0ca11cbe1894931dd09246e001badc22eb734887","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/methodOf.js","hash":"6af752f45f4152f036fb378075d72f6ab82573ea","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/minBy.js","hash":"8fa3de3c1efcc246ee906a281757f905cb13507e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/mixin.js","hash":"813b628b7fe94024fa308fbc6d06d1883dee9325","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/multiply.js","hash":"47e4d5d6014da46305a0be1082d66d2f41928e82","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/negate.js","hash":"a01d8c228ce6992ec79ee4146677e52dcc487254","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/noop.js","hash":"35300b7ebb741e7a54fe528a8a718b26c35bf698","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/next.js","hash":"8504ac753cf6e3e19d811038503ee000b7829e8a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/now.js","hash":"ddba13c834824d9467e379769e67f414a6179d15","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/nth.js","hash":"4c0c437715ed4fb0942b8dee7273b9d0dc5f62e0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/nthArg.js","hash":"47191997e9ebf3b2b8dd667ee362e48d381217fb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/number.js","hash":"8c2564ca466fcb7f4f0decd5eb79f803f39983f9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/object.js","hash":"4b9c99e1cb054bfcb6777077f59a2a53a4759490","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/omit.js","hash":"874d0d4204aa0cd72c79d7b3a4c80a577f46b564","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/omitBy.js","hash":"4216fc454388cdba0292cc5199b2d28d7484ac7b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/once.js","hash":"5bb536b8c7f08f94ccc9019a51601cc97d9b24d3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/orderBy.js","hash":"7665eee9891d204d48cdd799992dbd6a9678125a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/over.js","hash":"e28a6b283217955bd749ce30edeba3e6b977273f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/overArgs.js","hash":"e60acc78f35d412319457c41a3bcecc898f9653e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/overEvery.js","hash":"03c5153a4c43d913a9162032f5041cc1f982250d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/overSome.js","hash":"153452d7a4349ee32447e45f59e975f929de5c19","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/package.json","hash":"1e11cfd3c2ad03a747cc2f6d6229f50a85a31782","modified":1486538261000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/padEnd.js","hash":"5973017726462db292d41c2f28b53b8a4a24c507","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pad.js","hash":"b6a0479a2ce0289d29214e8f7ff83a0074406d25","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/padStart.js","hash":"d6ea6887328ca596d505af7b181edcad862865f4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/parseInt.js","hash":"786b6be24ff93b68962925663708aca1236f2cc8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/partial.js","hash":"5c9f9b1c6719f70ceaa7fa314193f7ed4ed5770e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/partialRight.js","hash":"7c551ed65cc1b160ab8a7abb78b9e37c3b426e5f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/partition.js","hash":"36957b0323cbd50f5ec8e4be3b5cf571241407da","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pick.js","hash":"9c8c0c82b1db06c624523239aea143410c5258be","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pickBy.js","hash":"99eb4eed1acb33f67be3b41f359601f0f6d75ae3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/plant.js","hash":"2b370614388e8fc4a0e12d2eaa644c25622de026","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/property.js","hash":"276a7afddaacbac4fa184f0096a92f32ee517ced","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/propertyOf.js","hash":"d23f88041fae20fcd9b92740fffd39016a6715ff","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pull.js","hash":"e40207e049af5517cc5cfd59ffd23b1c3a1406dc","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pullAllBy.js","hash":"5dc628f7fe0c8e71edf931bebecdaeb0e30d6f2e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pullAll.js","hash":"1bb4ac35a97475e16cfa8a10abfc5d911c58d743","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pullAllWith.js","hash":"f205f46a35a1b3d40f86c92dd9488e25c59cf5b9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/pullAt.js","hash":"176790538e4f38124826d06462d089f8acfe1b0e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/random.js","hash":"d64df688329131b297c269ce8e10b44cabe52e66","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/rangeRight.js","hash":"6640704aba8af652f6f8d13758946125dc324e08","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/range.js","hash":"6bc797b60a5f0b1fe8e93c0c4c41361c7f8f1189","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/reduce.js","hash":"a6da684222d6a2179aa409e3728758572961152f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/rearg.js","hash":"ef1d75bb13e2f07e1737b028878775f67ed2b50a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/reduceRight.js","hash":"8c8897c831800592470dc2fec9f1f575f844b2fe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/reject.js","hash":"6b18138c39a26986320b80d9748bf5385c2b0c71","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/remove.js","hash":"a91465f281fb69fc2cf3a9fa751acfe89c5d95fb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/repeat.js","hash":"8a5c222ac1514d5732374f165d8df9dc0274bd71","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/rest.js","hash":"61b930cc021a8f03bb466ac833596d6d37416714","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/replace.js","hash":"a35231e4112316c03e6c65162affe9effee35922","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/reverse.js","hash":"09f86bfe19d080bb52606967a9df5f017333e963","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/result.js","hash":"7180962c1b72ea113dd6516d5c28d006080e97f5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sampleSize.js","hash":"7a14f0d38676fcf8ed64a12ac379c8203eda1e4a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sample.js","hash":"b861fdd759aa14bb6747b0e333df66b8995300b2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/round.js","hash":"629b46fafec63f591a3c6b02ee03529ef43a8acf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/seq.js","hash":"e8dae0be3b8ece53ea5d6594d0b45d221f643576","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/set.js","hash":"bd5aefade6c00bbf37fd21dcd79e0ffd085a6084","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/setWith.js","hash":"012090d3598aeb4e36cadb5fb3ee7ecd9d184211","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/shuffle.js","hash":"1d035fe3d9776decf38cab2e19e2b2da99aa5dfe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/size.js","hash":"baeb54345201e06c8c096f9a4f62192c8584f982","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/slice.js","hash":"fffe0c44921ec28dd2fc1512493b912411d06628","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/some.js","hash":"b6d44fdefb9894407b8d48ff379c6288fec935ee","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/snakeCase.js","hash":"b95290beac2d4eb4436d72bde0b191a8db147970","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortBy.js","hash":"5f928288640eec63d9ce82e3c16750b4952f5aa1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedIndexOf.js","hash":"21e71189ed17c2769fcd2c91625af1a65b84591b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedIndex.js","hash":"e31955eb8a9dcf9868e2df8f112a8ef873709970","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedIndexBy.js","hash":"785066b03fae1e7fa508b7380f95727d02284d7f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedLastIndex.js","hash":"b886560112d50f2aef5f1acdcc5cd9296ff6f8b7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedLastIndexBy.js","hash":"4bf9117b8f1d0161a8369f127220b897819cd6a9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedUniq.js","hash":"612a221cb2088447b6510930f35f7140ecf41d1f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedLastIndexOf.js","hash":"f4a56782a4a913c330d832d80000e0340093e020","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sortedUniqBy.js","hash":"e9ee6345a66fbef43ac161edd568feb2f197a2ce","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/split.js","hash":"f33b9e68923d6bd511a37658a794104452f1bacd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/spread.js","hash":"b5e45484e55917c836dfc464d1c1dfb5e016a53b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/startsWith.js","hash":"10e9857ce37a805453b6e1c5e0caac454d08ba89","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/startCase.js","hash":"5cae4afa2846579e8173a62ae27253a75fb57119","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/string.js","hash":"9da506e6420a685f56f77ccdcdd4dfe0ffe552b0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/stubArray.js","hash":"bdc0e5ed494f2924ffd64e91620fbcd8161f7223","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/stubFalse.js","hash":"e5b35ac8e1872e9c87f126c972891005c94e7d19","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/stubObject.js","hash":"dc710610031cb2255019c0bd8465df0d6db0111e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/stubTrue.js","hash":"35d765e8ae55e010a1b5eda7aa6596a14a052ef6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/stubString.js","hash":"053b1bf13c37041494b3afed57eea26d24b46c59","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/subtract.js","hash":"6927a0ddb3037e644d7d49f7aadd99f45ac2226d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sum.js","hash":"b468caad43dbd33443e584c510697155ec12a71c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/sumBy.js","hash":"9a28d421380fb4347c651dd4935461c69a465251","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/tail.js","hash":"9f994bae44d6e96a75142cfdbfb362f1f8190d8b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/take.js","hash":"07615e176130761c61262b882598a6aab8bbbd48","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/takeRight.js","hash":"aecb30e9e3d49c9194b57e4c7988a11b4e911170","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/takeRightWhile.js","hash":"b4562aaf5ce999f9c4b68b1bb5296da5799e4e37","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/tap.js","hash":"a1f5e1966c3620b69def36154a27a8d9893d87f1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/takeWhile.js","hash":"7ab5baee95d7a1aa64183a266176725180d74c8d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/template.js","hash":"a0d4d446da57415c4afbb6e3da20d6a6b5efc518","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/templateSettings.js","hash":"fa92b30409e71f025035d7a47921a061b46f70df","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/throttle.js","hash":"dc6c20077c14d5b184f3471924032e242c9ec3b9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/thru.js","hash":"d006fad2ab19f7bc90e0ec69eb5037f081d99bee","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/times.js","hash":"ee9fd905cf9b189471102ac6b4a75b745085ce48","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toArray.js","hash":"5cde4e05caa391716f89e179755c861677498c0c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toFinite.js","hash":"44b15d3279c2f94ac2098503c427e1e0eb34c3f4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toInteger.js","hash":"06e857ac41a5b7056f7b522db601b4679f04f5ee","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toIterator.js","hash":"f8fc807ff29125bb2dab968633ad964ec94194b0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toJSON.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toLength.js","hash":"9a0a62cbf4f795ff3efba1fd3b1a84cd5ec94ee1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toNumber.js","hash":"2b6f75e579b5ec0e84426be3ce1fd0d3a1abec18","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toLower.js","hash":"3cf1e67f3e193b9f982b8814fec29cdf99b6b038","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toPairs.js","hash":"48dbccab7f479c713471fa2378d5ffa402745f77","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toPairsIn.js","hash":"ddc2a974ba685da424c9de9e2f7949b662844273","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toPath.js","hash":"973bea7fc9852f05f88b1e11a768b7b7ab786990","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toPlainObject.js","hash":"4e96ce3252e389b1633a2c73fc9d68031a12df29","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toSafeInteger.js","hash":"c49cb9237787895a00956b20b569bd384c684269","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toString.js","hash":"6c4365360e107172a439c756d9be5db5470b1142","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/toUpper.js","hash":"5e6fa81c32735a5c142884a1da0b1d88b780d05d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/transform.js","hash":"2cb75bbd3d23239daa2681abefea716e5f7e0bfe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/trimEnd.js","hash":"c18ce828f8e810a17d423d75705261ff77b34462","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/trimStart.js","hash":"fdf32db72208d65d988d3a7672d2d22a2bce89b3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/trim.js","hash":"de870b0426ce1ef6506652312b8298aa7caa16fc","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/truncate.js","hash":"24f4a9506442f2cafc20a024b9d79fb6e5df3326","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/unary.js","hash":"079326455dbdd90b20704f1a3abf73cfab59d088","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/unionBy.js","hash":"0d110e48caa5b130f45e00bb7d65dcebe66e275c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/unescape.js","hash":"89bc8a104147bab3b23f5e6f1f1c3819c6168293","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/union.js","hash":"2cd89b9ad0a574cfddd5daa4c5c95ad71db6b4ee","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/uniq.js","hash":"2b735c46c626dba6b45907c8c70f17475366016f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/unionWith.js","hash":"16881474335022100f41832178f2109f7525061d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/uniqBy.js","hash":"5591128502a52624cfadfc2d4c7b20db4011267b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/uniqWith.js","hash":"0a37f6a99454364d2683df713e678bc9669d6684","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/uniqueId.js","hash":"0809eace58255a033eb37e73ce581e2cc6fe26d1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/unset.js","hash":"5f2a9664870f21d2b7dcf0255f50ad9b37a6c850","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/unzip.js","hash":"9adc3e8903f6134c27951f3a558286a7667656d9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/unzipWith.js","hash":"13255720f48e23ba96205aa49fe5bb538b3c640c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/update.js","hash":"abae1fa2fd4b937bb1cf1f4a0fb4a73eb9d4aaab","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/updateWith.js","hash":"dd63e7b716f897c2bc9f7d39884e0282ba81bccf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/upperFirst.js","hash":"091005e45cf8b9ce4f51e1b2ff2da30558b40714","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/upperCase.js","hash":"4ce59b5839e848688ed76fc99d62f35168f9f46c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/util.js","hash":"9e3bd39fa03689fa7d9897be9c2387e19646662f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/value.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/valuesIn.js","hash":"5d6cd8fa3358eafef39b236579720c3d6c4450c0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/valueOf.js","hash":"dcaa02fb24d8915128f62a50e2782e30d7d4fe8e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/without.js","hash":"979bbb5dc3e1e17ea311c4d85a47b5b8b5c9c58a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/values.js","hash":"6304ca5a2c8a30cb1eef8cfb80aed716e29d3495","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/wrap.js","hash":"956d1896e8a55677cef08f879674d4de21d45184","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/words.js","hash":"74ebd3c81508567ca14f57f717488d4cf337101f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/wrapperChain.js","hash":"0b6afa60d6fedd5ae935c2127562ba2a590b5b14","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/wrapperAt.js","hash":"4974d8fad13c6913d78fe90db2de8cd83a811f47","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/wrapperReverse.js","hash":"2318334d83fc88acd2b7fa81c1a709b957719f4a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/wrapperLodash.js","hash":"b20f7aa45935b9d38b954bc7fc07b0a15298df77","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/wrapperValue.js","hash":"dcf31c73fbacb8ab409179125d9ffe51e1ec8696","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/xor.js","hash":"77e7c70d299ec7430efd31d411e46bac4dd0450d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/xorBy.js","hash":"5e7d74900860098de29d83658deb9eccc1f7b840","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/xorWith.js","hash":"ceb3b359ce93812b82f622e0c117585ba83b2996","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/zip.js","hash":"2df2c5d391c0c7fb710357e33d6a9f16425d66fa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/zipObject.js","hash":"fa1c2ef419f663fe0b552effed4b64428cb52f15","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/zipObjectDeep.js","hash":"a4cd8a063e87152a2229d1493af4fdd0419d3ff0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/zipWith.js","hash":"8cb8637b0b2b1174922ef35138408a777911267a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/tough-cookie/lib/pubsuffix.js","hash":"56aac14d8b2dcacfe05e3447a6e4bf9dff2fa0d9","modified":1469134052000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/dest/index.js","hash":"ca21f5ad24522d0c8e8f8fec2dc4ec9f6610c187","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/src/getStats.js","hash":"356b8911b8a18422e973e146a533e07e341f7cac","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/clone/.npmignore","hash":"3ca0e72fdfd533e411cc95dc9c91c5ec59661f95","modified":1346721042000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/src/index.js","hash":"720c95a58c2077a351bb3c482d5989d089c53708","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/clone/.travis.yml","hash":"e438209a0417a788ce88536eb381285cc1de05af","modified":1368383060000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/clone/LICENSE","hash":"b943bc3de7bcc7b5eb5c4951370c5df745d8c8d0","modified":1404039267000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/clone/README.md","hash":"8a633b84e8ded4e6faf45640108dfbee433a416b","modified":1417042209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/clone/package.json","hash":"b861f14820b9559b498f72e5ad2fbb032cd024bc","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/clone/clone.js","hash":"b3d4cc4e904d116bfb144bba1c489bb9068149a0","modified":1417042209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/.npmignore","hash":"5fd5e0748fab8f60a15caf1abdd5c6a2ddfe00ce","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/clone/test.js","hash":"910e24b3afbb0bdb0485793f757f90012f9472e5","modified":1417042209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/LICENSE","hash":"73efe5bda3791d234730ab0dcc48eb619a2e0ec6","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/README.md","hash":"3ecce92efae230a3f6debb25a8ce965b25c14072","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/duplex.js","hash":"5ff8b0af1efbb8ed54ac1b3f57167447cb902344","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/passthrough.js","hash":"ff1590a9a778dc9d8ed51064670d82426782ee6e","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/package.json","hash":"ccf80d5744363c5b81ebf5860011b71b35198407","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/readable.js","hash":"52cc9c29efd6791d36b86828a49b4196b20d5857","modified":1460562257000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/writable.js","hash":"8a7bd86d1803614b9381a924ab9ef0a19fd70e6c","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/transform.js","hash":"2d31b50e657e5b03ce5abc5ce6b77187e8e876c2","modified":1422450453000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/LICENSE","hash":"2fcb1ef16111b68b75e32c37624f23a84545f9e3","modified":1405745814000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/README.md","hash":"228fae87c32d78d629e6e531df6ada27cadabb25","modified":1409233342000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/index.js","hash":"0da367ab607a8b3159ca3170a47aeb835a8aa021","modified":1416781152000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/through2/.npmignore","hash":"42c7f4a86782b81be271b4a9f31bbd50de1d3474","modified":1428599741000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/package.json","hash":"58ab4d622e8b3ef095a4c06ebdced6755731f2bd","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/through2/LICENSE","hash":"9111ee4142f0ea90481a6805bfdf840f6e5213d9","modified":1428599741000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/through2/README.md","hash":"dfcdcd7261144b54eb808605602d2b11256b9fc5","modified":1428601273000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/through2/package.json","hash":"0c374bade421577f673a72041675dc23cd1621e9","modified":1486538209000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/through2/through2.js","hash":"f1b43012d500dc93017f8fc933a0f79bcdb5825b","modified":1428599741000},{"_id":"themes/gandalfr/node_modules/yargs-parser/node_modules/camelcase/index.js","hash":"e40a0442b64c9ac099395ad1a883694028716495","modified":1462383174000},{"_id":"themes/gandalfr/node_modules/yargs-parser/node_modules/camelcase/license","hash":"0c94f137f6e0536db8cb2622a9dc84253b91b90c","modified":1396798991000},{"_id":"themes/gandalfr/node_modules/yargs-parser/node_modules/camelcase/package.json","hash":"1d0e5e77b91403c5b225c198a75ed471a15631cf","modified":1486538260000},{"_id":"themes/gandalfr/node_modules/yargs-parser/node_modules/camelcase/readme.md","hash":"c90528b5f1cea2de255651c9daab5b0aea013737","modified":1447354467000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/m4/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-value-example.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/core.js","hash":"aab3e34060a82311a006fd856c127684f3edcec3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lodash.min.js","hash":"07cd7b43ea43869582c970d11eaf1751ce46ec64","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/resolve/test/pathfilter/deep_ref/main.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/baz/doom.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/other_path/root.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/source-map/dist/source-map.debug.js","hash":"299fda2b4435847e46f2e8a7b2c91bfd03282c5f","modified":1462209639000},{"_id":"themes/gandalfr/node_modules/source-map/dist/source-map.min.js.map","hash":"efd0b11a61edbd71177c9bb4e375bbaa5305911f","modified":1462209639000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/core.js","hash":"9b732e6366f884bbc5be8e0295b459352417ebeb","modified":1483223560000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lodash.min.js","hash":"60de6e43c4a2c3326275ab12d4ffd90b2582aee9","modified":1483223561000},{"_id":"themes/gandalfr/.git/logs/refs/remotes/origin/master","hash":"6b6302a5af3036b60a2e7c5fce0d57292db2e030","modified":1493622653000},{"_id":"themes/gandalfr/.git/objects/pack/pack-45a21a80109c48dff7a583ed686467a5aa8e7c15.pack","hash":"fa8aff67d51f4307c747e3e514795c3196f4e6b8","modified":1492333064000},{"_id":"themes/gandalfr/node_modules/cross-spawn/node_modules/lru-cache/lib/lru-cache.js","hash":"eeb0f7c231e04d00540d0733077c28f1bc122d89","modified":1458666750000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df4c4045d53e722a0a88aec73ebec447c5ca9069","modified":1460560228000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bf779af0486ff730f3946ca90a8ca93cc6c6a963","modified":1460560228000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_readable.js","hash":"fbe877a784cabfe0f67f1a194bfa164517554453","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_transform.js","hash":"1eb7ec328583b5c038773c5702d01911e1107f17","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/glob-stream/node_modules/readable-stream/lib/_stream_writable.js","hash":"29fb611c264c00b9001364c1ce90fc64efa66ed9","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/examples/g.js","hash":"c5e6ed35ba98b68b876256e9fa7b15fbac79aa27","modified":1326929552000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/examples/usr-local.js","hash":"a82d273b8acbbb0728d1d8ba541f406ecb91d612","modified":1326931644000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/00-setup.js","hash":"78da07aaaadb2b79467173cd94329dd64130de62","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/bash-comparison.js","hash":"c7e27558c5870b5edc3bcd461c88f133fb22b1e2","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/cwd-test.js","hash":"3d7413c1706b868c4ee8730ecd58ebb87edcc137","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/bash-results.json","hash":"05fd3e5b75f1b50f6eede1f544bbe7a8481e5097","modified":1361809529000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/nocase-nomagic.js","hash":"0c1f3e2cf40a95940f301925052226c4c278c9e4","modified":1361809186000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/mark.js","hash":"f28c2ca48f13937b0a202f6f08219c0ad5b81924","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/pause-resume.js","hash":"2dfb282ca01b1c5187ec0aa8793560c89ef32d51","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/root-nomount.js","hash":"13bdc59237d69e3fe0bbdea9d14a55b5c3cdeea7","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/root.js","hash":"4ea6f42a975120c5fd51613775174a8ab1ceeaad","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/glob/test/zz-cleanup.js","hash":"cac3aa9dca8beaaffe9281f29ce2703a0211f345","modified":1358897151000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/graceful-fs/test/open.js","hash":"cba0c1a5ea28e35bebe95e5dfeea93fc73540d90","modified":1371011144000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/graceful-fs/test/ulimit.js","hash":"1b4b7cefd7fcaa3f78aab638a96c7c2f7aeb5cf9","modified":1371058145000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/test/brace-expand.js","hash":"a274bc9dea6fc8289ad997754bd58ee36bf47197","modified":1324537594000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/test/basic.js","hash":"91bf75896c5b86f7f8b312e2fab75fc38785371e","modified":1387171514000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/test/defaults.js","hash":"681bc0bd4e4e1fc342418109294e4d151f992e58","modified":1332985301000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/test/caching.js","hash":"310366ed1bb9228269562ca69f27534cfa611dcd","modified":1332887728000},{"_id":"themes/gandalfr/node_modules/globule/node_modules/minimatch/test/extglob-ending-with-state-char.js","hash":"bf57836fc4f7b64e8920baad6945880901a613c0","modified":1387223424000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/example/parse.js","hash":"7684d952ceaa32a8c9e3cd21ba26a62e7ee14387","modified":1372147306000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/dash.js","hash":"27fa6e19e26916edd7fd46ccc2d0b2301b3042a3","modified":1389378397000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/default_bool.js","hash":"ecdb759c4275fb23bd5d072c3c6a7baa74b407c7","modified":1372147071000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/dotted.js","hash":"51664f4efb36d519b2e439f1156e05e917c08bda","modified":1377730679000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/long.js","hash":"f0ccd5d55358f78efbc928753264e4a32f7724fc","modified":1372143145000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/parse_modified.js","hash":"5c3cf170e2a2476e0f5bfee9af78556a1958d503","modified":1372145355000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/parse.js","hash":"e240ae50a049d7b4b4b625467df34bcfaef7dceb","modified":1392957961000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/short.js","hash":"2ce00fdfe4906fc504286974c143c4ced6a11b12","modified":1391917546000},{"_id":"themes/gandalfr/node_modules/mkdirp/node_modules/minimist/test/whitespace.js","hash":"ea3a87137fa34c00a7d84a4d0350770e8d85ed9c","modified":1372148159000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/Xcode/README","hash":"e34a59826a4e03d3226e016e89fbee14fbe194b2","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/buildbot/commit_queue/OWNERS","hash":"d0c0c55192bedda080ef69dc060cd63dd5314595","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/data/win/large-pdb-shim.cc","hash":"df68a5aeadfc72a0005ad6e0f9574ff26ae78e09","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/buildbot/commit_queue/README","hash":"2a2cf963d0156a532ee4b046ef20c6cd6d7dba74","modified":1436533223000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/emacs/README","hash":"043e2d758d6a915d1eb70d1a014d5d34c633a997","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/buildbot/commit_queue/cq_config.json","hash":"e4b7f85333ab0ea9534183f140bd40406e8cf695","modified":1447559391000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/emacs/gyp-tests.el","hash":"172840f03a12b26a5ae04e032f9ab61a14fa9d4f","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/emacs/gyp.el","hash":"f0c30cfd94719c1a676fe64718a4e9a74489ee09","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/emacs/run-unit-tests.sh","hash":"415a0b8aecee435bf43601a71778813c2f04872c","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSNew.py","hash":"32f9f3d56c140f89bdee5636430e529cca96243c","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSProject.py","hash":"be9f6a294ab02dc54ec98389c5f15197af835b9f","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSToolFile.py","hash":"da3b00bcd21f67ece96a76d61f9bc827c2c4564b","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSUserFile.py","hash":"765ed22ffdbe7b31e91775c7dc9722a42e05fd82","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings.py","hash":"5f314c5e3d663c169a2ad5add3aed94cf7486e35","modified":1447559398000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSUtil.py","hash":"2300ecdacc5971520e1c2a25be987d8cc3b3dcaf","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSVersion.py","hash":"22338e7b3a4ea85480eaa259ad9817808f6084c0","modified":1447559391000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/__init__.py","hash":"90391102ed719cf8239086926be58983cfc7adf2","modified":1447559391000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/common.py","hash":"aa76baccd2010b2b68f3379751a3ade05933d2b0","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/common_test.py","hash":"bf40e7539605385948d989902adbc6cb216d2b90","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py","hash":"e8ef53c8697f51e58872bc2c62aecabd4365685c","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/flock_tool.py","hash":"63de08ee325b15089019b36b6d51af436c6e8a61","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/input_test.py","hash":"4a695f62aae333d68b3b438f91454c22a9e4e743","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/easy_xml_test.py","hash":"e6f29ede3c23874a167ec95af690440a353ef274","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/mac_tool.py","hash":"11c1020f51c8758a65e32509777f07dd46c19271","modified":1447559391000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/ninja_syntax.py","hash":"74a6661b1bb7862a69693b6899ab97a2e0c3f04b","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/ordered_dict.py","hash":"8c35e3ea6807b9010eee64832314e19ab5f7ab5f","modified":1393256359000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/msvs_emulation.py","hash":"a4811c935b4b4549ab547eb91d0521259a5130d8","modified":1447559398000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/simple_copy.py","hash":"8326dc1a4ab5ccee8f571509a86ea2db01042965","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/win_tool.py","hash":"98548cce05b63dfbd5f8684614a63c4e03f795a8","modified":1447559398000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/xcode_ninja.py","hash":"c19fe3119c11ddfe59a606855e6fa6c68e027c7e","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py","hash":"39fb039eb03d7f269090e02205216b0c334c2673","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/xml_fix.py","hash":"5907456728e5bcc39b5c7b5e41fdf4f7b3250dcf","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/gaze/lib/gaze.js","hash":"8e557a2200974f50314728efb56d2f023cae3062","modified":1473513870000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/gaze/lib/helper.js","hash":"287f8835f51b6392917f423f48e2e38a58e64804","modified":1455680258000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/globule/lib/globule.js","hash":"5295ae0a903385bea5707c5215230f509042d64f","modified":1460653414000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/contrib/libsass.spec","hash":"09e88345d1ff22029b374fa7c1d5bdf239219bca","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/contrib/plugin.cpp","hash":"eb37622ed8110dcedd2ec5a179b862b715c133de","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass.h","hash":"400a1f43095340e9217565999e2b82abd77a0278","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass2scss.h","hash":"7184dd5fcc86e7751f508123bd3af0be86b48826","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/res/resource.rc","hash":"8eb72150c98cfbebb3e2c6ff77ee036ca8a8182b","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/m4/m4-ax_cxx_compile_stdcxx_11.m4","hash":"c729351d4d0ef9900afd5cfe1de1ff888b0243bd","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/bootstrap","hash":"0bfea6dc15eaecd7bb71075b8ca5e602b1517906","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/branding","hash":"cb873536bffe46fadbec9c32774537a9ee88e9d7","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/ci-build-libsass","hash":"49c6ba1c6e66546e567f94b9d3c3c444496b8573","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/ci-install-compiler","hash":"16a0f4e5fdd2a672ee6cb3411db74aa7cefe562e","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/ci-install-deps","hash":"ede3aea103e5b268fa4d19aadc77145588a0e733","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/ci-report-coverage","hash":"061e955832d1ae1578f411a589fbe62551dfa04f","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/spec","hash":"31bb4a5412295c7167f54efcdb2220a89e33933c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/tap-runner","hash":"65eebc9573c380e7796f8a1c87ac0026ed42e381","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/script/tap-driver","hash":"7e3f50d7c10c77fd1585b3d07321121a28253630","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/win/libsass.targets","hash":"c5ea02fc7ea9e95ad2cb6b6aa71a899db60d5954","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/win/libsass.sln","hash":"a3a59170f8179d4de6b79ea33decb94931ff83a8","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/win/libsass.vcxproj.filters","hash":"b37cb1f8507da8806f5b89887ff8eb2bda2536ad","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/win/libsass.vcxproj","hash":"cc515085c5258c78c9739cb912242902f7fe61f7","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-context-example.md","hash":"caebee931df109a6ad4f329039e2f3056a9e3d1d","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/README.md","hash":"288b4955fa98d82c9359ce23845c874c4dd4fb16","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-context-internal.md","hash":"266f6e3c497c615bf489d937df5bb15c1a50f5f0","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-doc.md","hash":"0dc86df06298040ca9359ace4f73301cf9f363fb","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-context.md","hash":"002c5d8d173107d16951c904af813f5c3540ba42","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-function-example.md","hash":"47b68ddbd8ab962b737bf69f86fd5d9203f29356","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-function.md","hash":"e48b7df877b688236dc74edaffae4ab7c4c830e2","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-function-internal.md","hash":"53b907e9aef9089f955929e5a59e96b2bf61ca3c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-importer-example.md","hash":"f01f1994754cc3adf4225f6b790767a6c8c44285","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-importer-internal.md","hash":"27f66aacc49203eb90fd17cd3ef19edcb3a5e78c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-importer.md","hash":"13200efd601ef1fef7d9259bf0ecfd0c623cec63","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-value-internal.md","hash":"8fc993450b90d92b19087dd5788c7fcf51a41972","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-on-darwin.md","hash":"37f787cb90bc2c2d58e90d1c609044ec23420beb","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/api-value.md","hash":"bac65b4efcf8f12775590a5d896afb66c6415b55","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-on-gentoo.md","hash":"895f239a3c0b9d865aa8d0322353b9c00a4b0023","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-on-windows.md","hash":"43da367ca9925424beacbda5e554018f45c79051","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-shared-library.md","hash":"84af60ee3fd38e2fc2e2c57d4e4a4237c9c23a7d","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-with-autotools.md","hash":"2f097eda52456e9b928ffad25516e8c228ae5bf4","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-with-makefiles.md","hash":"566eb29836ba4f61206a341faea9bcd3c49221bb","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-with-mingw.md","hash":"87be673ac3a2f6c049188660568d9be174f8d611","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build-with-visual-studio.md","hash":"140bece215caab86adcb0174a1c5daf3be6b1d2d","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/build.md","hash":"e0287cdb19315a18ff8167893bae8462a4ff1a41","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/compatibility-plan.md","hash":"71e1cecbc01caf751a5471febda2875ba6bbb125","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/contributing.md","hash":"7c2e1f627b60c9a17e37539b7c6a278828c2d546","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/custom-functions-internal.md","hash":"c1f532e04b2624c6d81011f4190e27d85c91349b","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/implementations.md","hash":"e0ecf31b160492bf987f1ed354d9e359dade0cc0","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/plugins.md","hash":"459170112957c0bd2bf5e5f4ee26b6a42098cbcd","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/setup-environment.md","hash":"bc537b91b9e0f3b450d5ec02e931463a82e49d33","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/source-map-internals.md","hash":"cf90583520eb9dea1504622b74583aaa9a0b4146","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/trace.md","hash":"cc50e2693e081ed19bf51171da2f6bd103a2d64b","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/triage.md","hash":"d5a693bf6f5a7f5b8effed5979513b744474ba91","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/docs/unicode.md","hash":"99e5d75cbee9a36d8362557f98705b435fcc48f4","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/test/test_node.cpp","hash":"23e7f20bf7262d563611fc878532a86dc87704f6","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/test/test_paths.cpp","hash":"ca72e4f9ea560115d9aa9e2268950f20f831820a","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/test/test_selector_difference.cpp","hash":"0455213655e077a6aa7524c5793f9b5a5a95a8e6","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/test/test_specificity.cpp","hash":"035a3283276c1e472e059704b0079e156ab8770c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/test/test_subset_map.cpp","hash":"bf52323c62d1a8ce71d261c62fcd93e36f0a4bc4","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/test/test_superselector.cpp","hash":"dcf4b55ce341dd3cbfb8db2f44f9a6eb83655a2c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/GNUmakefile.am","hash":"83fc47bfbbdc87e01381ceda783aaed05b8aa18e","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/test/test_unification.cpp","hash":"669b7a4b03d64b8fe79f5f95ffaeae50fc25b0f7","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/ast_def_macros.hpp","hash":"4bbea362e78d1bd78d088b1032ffb315fdd685d2","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/ast_factory.hpp","hash":"6174db24ac424800c7818d09c04c838d6afe1254","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/ast_fwd_decl.hpp","hash":"0a14bdb3161e37bb1402f313f5331776d50055fc","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/backtrace.hpp","hash":"9d79ef85d0ca53898ad719a73909c5439f3ab858","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/base64vlq.cpp","hash":"58e04764cc88f18b72bf444e6162a9efa8c02a27","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/base64vlq.hpp","hash":"fc12234ab87be257952e359645c0d812925b37df","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/bind.hpp","hash":"f2d1e004ac835bbea59635ab69557ed50ef63f08","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/bind.cpp","hash":"3db4758de2831b06f32e91d311dc31c4b2d3c0a0","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/c99func.c","hash":"1e31ab6aa68a6063391170c2dd48259526d247a7","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/color_maps.cpp","hash":"96f58cc70df0e8175a57602aa3736c1f30281222","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/color_maps.hpp","hash":"29c58895d8b86d90c8de989d93e58812418ac616","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/cencode.c","hash":"a68841c3ca7d53329f0a96dbf380e29ae29b699b","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/constants.hpp","hash":"301134738e942fad87c22798da3c837620f4f0a9","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/constants.cpp","hash":"e4c9f1b8544ad7e46182489a303c3aa82304af23","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/context.cpp","hash":"137d50f946f5a80fa3d21961ba9796454904d863","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/context.hpp","hash":"cc6dbf4df60dba68c6805ac1857f560cab45e654","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/cssize.hpp","hash":"c390453009de8c7dd0f7481439c79acd2d8466cb","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/cssize.cpp","hash":"86590c06f07e315f02d0aea4c0db6516af12e332","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/debug.hpp","hash":"7fff29dfd923c6711f817434ade27eb149141263","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/emitter.cpp","hash":"5438777fbb582c6e7692a5753f8b5f12f401f0ea","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/emitter.hpp","hash":"fe5c3ba94eeff3c923d13e042273c11a90ba193d","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/debugger.hpp","hash":"5ef683dfd7bef1088b0d040ae33d164e6a0d0190","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/environment.cpp","hash":"04f205806aa7caa584d55520abd1358d7c0b7810","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/environment.hpp","hash":"04aafaa8c0097a4437d53ab4427f2258bee86670","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/error_handling.cpp","hash":"4083a113b700888dbf2cfdb48f01c4b0ca41694b","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/error_handling.hpp","hash":"8f5512748aff8cb7773cfb2385fd649385454d69","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/eval.hpp","hash":"afbe3a97778d2c5087a13cbf18ba4d140c10a2fc","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/eval.cpp","hash":"cc26171e51e72b27bc9bdb1f17b8b4e3833375e9","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/expand.hpp","hash":"ce558473b043bafa0e92988db76848df8a635325","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/expand.cpp","hash":"1da3c08c5b3f0964d1f020fd0f8f43020338b73a","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/extend.hpp","hash":"d6298d6b7b65f49f810544dd8b90c483ed3a71d2","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/file.hpp","hash":"357aa266df032d732e9195e34eef8129107001c2","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/file.cpp","hash":"0d6200be6412d02df2698c79aca62173440eb5fd","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/functions.hpp","hash":"ca92885e1797ecf2514810f88543aa436e49f475","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/inspect.hpp","hash":"eaa96154ea9761cd19c98287d0cbdc84e9aa0dfc","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/json.cpp","hash":"c5279c9f5fee93983d453050aa9365e8d30a461b","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/json.hpp","hash":"70d44fcec2b9c348eb8bef487fb14a2e1c825d2b","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/lexer.cpp","hash":"09e237e1ac1ca3aa6b73e2eae432ba8308ddf648","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/inspect.cpp","hash":"20b94f80ef16f2fdb5a71419e10c86f228c52c2c","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/kwd_arg_macros.hpp","hash":"616d8b2fc5aaf92bcde58c6d6e852970d10ad9f9","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/listize.hpp","hash":"48670729cc4e9a4fb940a2a6deb0b5349db2c2be","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/lexer.hpp","hash":"634c00101122ee046d77d07c108aa52797cf0435","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/listize.cpp","hash":"18dbf20fcef6f1e406288167b38b6732e23796cd","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/mapping.hpp","hash":"0c39fe9bd141706e9af4547d8d2ba56730e4c3e0","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/memory_manager.cpp","hash":"996ff9e723a486e96821a7934377a60830b21409","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/memory_manager.hpp","hash":"3377ed6c8f1ef470fe681714c42b775adde1efc9","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/node.hpp","hash":"cea968a318ff1472cc93087e9b7d53c428bb1948","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/node.cpp","hash":"d5c236d9611201fe54c2535d1af19689ef11cb61","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/operation.hpp","hash":"38e8c30bff8e22a8160a7b2fb4bd46343f266bf2","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/output.hpp","hash":"8d952ee70d9e2b9a2c9d16bcd4e9d13b1a74d955","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/paths.hpp","hash":"79f6279896a40131e06357d6aa3662440207b559","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/parser.hpp","hash":"7c27d0c11df92d85bb4ab6e231c6355ed682155d","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/output.cpp","hash":"28c85708a9474ee138ab991bd2118475e8c63784","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/plugins.hpp","hash":"0492c4aa010bff5eb978700b88250bab0b041652","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/plugins.cpp","hash":"85fce346a4a67c0ffa90bce4bd335c95e52e9e9f","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/position.cpp","hash":"7376a2de4041542f6f89398709dd049f38c0ce7a","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/position.hpp","hash":"7110de09c92701ca9d86dcc42a983d1a19a65756","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/prelexer.cpp","hash":"5269a9f6b9b2ea2636cc38a35fce38345b5d2638","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/prelexer.hpp","hash":"c12e3d9b2d965eebd8ddb287a11056fd988765ca","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/remove_placeholders.cpp","hash":"7351413aa864880ca35cf5f63d496aee3a285f50","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/remove_placeholders.hpp","hash":"c98c133f6d631f8e38148ae7fafad533cbf6c3c6","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass.hpp","hash":"df5a6a2e55dfe479ea66915d1a810babcc84c8d1","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass.cpp","hash":"005d379ca34050dc2bab4aec5b4a2e1b6f8ab1b7","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_context.cpp","hash":"88237d178020cc0d4665e2e5561cd7e0a037d4d9","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_context.hpp","hash":"501bb48adb19a5d4e6f58345e65b7c8377ac337e","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_functions.cpp","hash":"0479203ab6f07e7a3f1a8d280bc2baa65583406f","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass2scss.cpp","hash":"b67d81d4c5d2ab7e5649bace8d00e18982cfde2c","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_functions.hpp","hash":"8e0dfe93cc2c5f5f6989ff0836fc8a4f7d8be106","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_util.hpp","hash":"d012ebd9b81fb801aee7cb83dc9110aa64106f8c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_values.hpp","hash":"cbb96187b171ebec1e2d812e6c88c8b8c19bef1f","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_util.cpp","hash":"860ed90e05d2255e3736c1392d13573b457a0551","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/sass_values.cpp","hash":"07391a2d341adf774115826f5141c7e83f4b1ba7","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/source_map.cpp","hash":"036b51ecea279ca75247c83b7fede0220a1f3a35","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/source_map.hpp","hash":"6ad078aa334cf8299d51ec19dc0852bb71c66712","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/subset_map.hpp","hash":"8b58d9dae33c2e687a993137e92bca0d64b9c4bf","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/to_c.cpp","hash":"7ab06cd41e9870b4d65bd4a702c259aae25b5430","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/to_value.cpp","hash":"1e04fa2050645db5bf1bd9d4a51460fc7b14aec2","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/to_c.hpp","hash":"1a6179ee81f7af5d20a2eab3d35bf2e1c45d20a0","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/units.cpp","hash":"71c88e08e1040d4a6f9ff0222b20a910bad4677a","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/to_value.hpp","hash":"4db2be2aee8c7d233beff24b479f9b48dafd5688","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/utf8.h","hash":"e3c90b46539f5aa7056ac8dd992721cd4663e47e","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/units.hpp","hash":"6ba90955ab4eddebad335f36a40ed53598ed4cf1","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/utf8_string.hpp","hash":"7136671a4cd0f6bb3c6d11a8973f8c5fb749679f","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/utf8_string.cpp","hash":"8c79137f942f692db6817c9a0b6f02f1fefcdfa9","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/util.cpp","hash":"e1053beda36ead8dd05e80edf7effc6c4320c764","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/values.cpp","hash":"81b7a2e977c0ecfd1a38629d2c841c0504e1a6b9","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/util.hpp","hash":"98d3c95a1b86d638f64108b8dde3ca52cf355f06","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/compressed/index.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/values.hpp","hash":"555f900079a80708b272dc21ce8b094c011dbf5c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/compressed/expected.css","hash":"45334503999ba83712e7e686e2ae3d7910207bea","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/_common.scss","hash":"582b5481e681e56737e516abc4e60efaaddf6c29","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/a.scss","hash":"33b7f2d586071f33771739bb9f4662b37c8f03a0","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/_struct.scss","hash":"ad79dce1b5e61b66f65abbc9084e640701954978","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/_vars.scss","hash":"46fd656305f6623139f11711e73d14f5a9d459cc","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/a1.scss","hash":"12d053c848b9f27370a9583618dd4a44a04300a4","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/b.scss","hash":"a1ebe432a9ea078e6b6b9d5d59b858fedda352c9","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/b1.scss","hash":"0acef1bbec08d2b973abfd3662a8d9306ab711d7","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/expected.css","hash":"cf83935d869e674f56019a8078fbb4f54f2532c0","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/depth-first/index.scss","hash":"d337ef1c4cfc9af6a8e6801ae4bc43f7817d04b0","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_arrays_of_importers.js","hash":"1a7f3fe5be1e4affe1e7ec3a026d291e097716b5","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_functions_setter.js","hash":"c3c1be7d67c4900f32025b06e89b820bdf021acf","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_functions_string_conversion.js","hash":"e17fe2b93f647d0ef3f1c6f7c806f259f166728c","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_importer_data.js","hash":"4294b88f271e3575a1e285a360673fedb68eb583","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_importer_data_cb.js","hash":"1301daac0d706556cc6c5eb3d7b905b7ce749c08","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_importer_file.js","hash":"6753ec609e3e7ac2720b372964890f0201d776f9","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_importer_error.js","hash":"30a9d6f7cbc9dfd8f0dfb5144ff14b02b4c03eae","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_importer_file_and_data.js","hash":"6c23ae830be79d6b39044babebeddb1b1d07b923","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_importer_file_and_data_cb.js","hash":"74c7ab0b01cda5f8d6a8482ccccb4a0c77c3aae1","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/custom-functions/setter-expected.css","hash":"c8fb308e478fc4655b9dbf1aaa805ac2b789ac37","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/extras/my_custom_importer_file_cb.js","hash":"c2175852dd1866f7ba19d5f947f7030b963a6903","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/custom-functions/setter.scss","hash":"ac9522afef61d15255b840dc3b4b479d5000efa5","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/custom-functions/string-conversion-expected.css","hash":"2db0942274c761913971acf92964089963f7260b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/custom-functions/string-conversion.scss","hash":"3114815f32e370ccb0ffba28944f360c24dd39ee","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-path/expected.css","hash":"20a8b2fe735c549bf6d2a3f52e1542bee3be8d47","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-path/index.scss","hash":"7f1c710cfe21f2c0281f4fd283289000c34ceea2","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-files/bar.scss","hash":"8f962140354c953e77563a92780a0a4d5ff5b38c","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-files/chained-imports-with-custom-importer.scss","hash":"de448aed5d9d36a1df6976eec1f5866cf5f8b655","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-files/file-not-processed-by-loader.scss","hash":"7a872331ffa145790059b3693620abed7f6f608e","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-files/expected-importer.css","hash":"3b24dc314f39f30450c6bcb0c7639d7e811fa09f","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-files/file-processed-by-loader.scss","hash":"eeaacc104a65fa5463c0bcb8376c32a8c71613a1","modified":1461059737000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-files/foo.scss","hash":"7a275d4360b7e55b3088923e15c66ff6cc64cf4a","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-files/index.scss","hash":"5937112cb361d23cd76e00c203b25f0441f2847d","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/indent/expected.css","hash":"21e0164949daa927997b34a4dd6e45d30766da9c","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/output-directory/index.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/indent/index.sass","hash":"61b7157b0bb4a522c9a26b988fbb508847421d17","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/invalid/index.scss","hash":"cdbdc70ff5aae4f7cabeef95023695f572484be3","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/precision/expected.css","hash":"08da0c28cedcebbfab901b158771af44f464a015","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/simple/expected.css","hash":"28e1ec9649e1a850a59284ca985da8296e89416d","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/precision/index.scss","hash":"8b99dc8e57dfa54d89655443ce9a71380fc2778f","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/source-comments/expected.css","hash":"0de8f0f5452d7400a5ac43484f0af6dc572ca678","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/simple/index.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/source-comments/index.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/source-map-embed/expected.css","hash":"f0fff1b3142e26dee05af19de78d369d74667f97","modified":1481350260000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/sass-path/expected-orange.css","hash":"86ff23a4314c6c2c7602d417f395a54909862eb6","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/source-map-embed/index.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/sass-path/expected-red.css","hash":"42c622880e5247c6cc5bd104805bc8cb8cf30f69","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/sass-path/index.scss","hash":"17822770961e02a1d541e43327e0b8f940f729d8","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/source-map/expected.css","hash":"9cbbfcc98f44614d9b36e55d5be62c4afc91d3ac","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/source-map/expected.map","hash":"151efbdce279850047ed552e268e7a9a61053dad","modified":1481350260000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/source-map/index.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/scripts/util/proxy.js","hash":"bf8aad436562d4037af7f90c3d11c1b539432f71","modified":1479379156000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/watching/bar.sass","hash":"d5333b08dd8bd70d3715d4ddc59ba64b3136809d","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/watching/index.sass","hash":"9cc98df024fa776d49e237d2909f6bc71d58c3be","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/watching/index.scss","hash":"f1f71d329246a016a47b48731344e60670d5f06e","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/watching/white.scss","hash":"a161b55179609521e2eef0f0d71f806c567b9ca4","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/watching-dir-01/index.scss","hash":"11db81979a26faf95c98404609cde1613cf6963f","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/watching-dir-02/index.scss","hash":"747f5b83cb0d2dd2e8e06129c7c861f8099cb57d","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/watching-dir-02/foo.scss","hash":"a161b55179609521e2eef0f0d71f806c567b9ca4","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/F.js","hash":"18f568c6af0e139bc63d9943f5e798fd09bf01b6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/T.js","hash":"f10191c08571d40fee301d26e97240125511bb31","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/__.js","hash":"9c805f4d417e7a952726f3cd1d0bfa7c30cfa7b8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/_baseConvert.js","hash":"51e6442d72b6bf062637827cd37622eed78d8f22","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/_convertBrowser.js","hash":"b4cceca914f9af59a7c47c384127602dce2abf6a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/_falseOptions.js","hash":"ad9c0db1f5df98f88d63bd70d729417a7eab2adf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/_util.js","hash":"bd9207acceb19c0f79424066e2fba5c70ab9140a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/_mapping.js","hash":"1270b28bdde33abc1384e7b311d70fdca4b20f26","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/add.js","hash":"9a7af31a7389d2b2b2ada006440c4cc5c2e42e14","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/all.js","hash":"ca7a311804ca0107de2a6f00602710f36160c765","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/after.js","hash":"b9b375ce8fc1a7d08495feac490844967e5c6ac0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/allPass.js","hash":"d6accb07bf9f23b3d0f72ce21b787618d575da04","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/always.js","hash":"d3c13a79ddd4488702c96b285bbfe2556ee67e17","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/any.js","hash":"64f468269587c745e361d31e0d8b26cb8f67fb06","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/apply.js","hash":"eb2c8c5f1efdd93f4d55605df4874bea9f831b54","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/anyPass.js","hash":"4a3f89614864715dcc36c7ee5dbb9850f6ae2f95","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/array.js","hash":"6c3a1a438a1f341a9bfbf059da2d1efd4a582178","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/ary.js","hash":"b811ed8b5b34ff86e65589b38cf22f1d7699ed4d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assign.js","hash":"52e569f6c7d83714506850d8174be2c3a2992852","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assignAll.js","hash":"57a1a620f001ae55ba98b560fa7a858cebc13023","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assignAllWith.js","hash":"404f26b37a62ce5a1e9b6fb33672e69913d4efed","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assignIn.js","hash":"71da9458e2fdabef9d716d9b48060a12c0185afe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assignInAll.js","hash":"3d99977ee0df2bc32edca5ceae451a08cb43bf76","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assignInAllWith.js","hash":"47ae8b9efcba88af49e9a58fa2a5b7c35813cb7f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assignInWith.js","hash":"b3b0adbd4b47e963b9f3ec93335b375deca2a320","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assignWith.js","hash":"d4a0c3092be5c92abca026002a322407a1e12f2d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assoc.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/assocPath.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/at.js","hash":"615c43358bc89d4eaed242300b9fd77631f72443","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/attempt.js","hash":"eb059364d0e518867b8fe2d4d9773ca481f80b15","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/before.js","hash":"c9fbf0e49c14385711d6335cb1dc0d6e09f3aea4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/bindAll.js","hash":"2e3944394c315756627aab74b8ce3cebab98662a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/bindKey.js","hash":"8884ec3af184de8a5f20829f6eb5fb6ea459582b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/bind.js","hash":"5620199ffaf7354deb17332bd96d023ef93a7563","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/camelCase.js","hash":"8eb598ce4ff5d309c2ab8fb299f41df23c4cd308","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/capitalize.js","hash":"101f5c2148a579105036a5cdd25b4193812f64d3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/castArray.js","hash":"ab5ea04ba48ee2920164fadb8b78d8a03f1cee6d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/ceil.js","hash":"0539c156c827c85dd682ece5986b9f7bac19a097","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/chunk.js","hash":"63359d1585edc86fb70c74388c36e0a96e16b96c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/chain.js","hash":"c85611a5e7da7d0aaf29a45bd34130b56315199c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/clamp.js","hash":"d10d4fb46ea8518851b6578ef67dde23b2a9b013","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/clone.js","hash":"6cd53703b2949cbee86ce6d708942e248afb8b4d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/cloneDeep.js","hash":"179860c9bdc495da2f5d8281fec35077b2f2b216","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/cloneDeepWith.js","hash":"365d2b00fa2e722ce8c60b0605bf3af06c6ff454","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/cloneWith.js","hash":"a303da7355a2bcf3314b47558b57c8e3b235094f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/collection.js","hash":"75a23149e229dc1435bbddc870542ac1ff298f91","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/commit.js","hash":"2b2f58504601fed318dd5f6ef943a873018195cd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/compact.js","hash":"b6603e874a29627153368292851fe987f5462bcf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/complement.js","hash":"db8673391fb52d0d4682d80065e5f82809a3292a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/compose.js","hash":"ea122818ed87e1559af41edff0f2d2fa54319b9a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/concat.js","hash":"64240c44714fa5369fc4092f00ef58caced12344","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/conforms.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/cond.js","hash":"c5bcad894a249463aeabed85ac3d3e7474455533","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/conformsTo.js","hash":"fa5e2fa22ac3442d8ad5b09e3a6c0959316431ed","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/contains.js","hash":"cf59973c08cea72d4b25f223aa3c30e99fde8e55","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/constant.js","hash":"109c49b151baa999c023e7934b4223e0fe3d84c5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/countBy.js","hash":"52e5e9e4b6064c30131e7f678551f23f8120cf0d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/convert.js","hash":"5e125cf746680131339a8ab7f41d917bdccdf356","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/create.js","hash":"7fdb4d9dfc8e2b4876ec6b47b9b32fa37eb1aa2c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/curry.js","hash":"ded1e6452bc77478e51a4b9a7f8f2eb9c07d1b03","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/curryN.js","hash":"13f2d44be73b0df20161c72c0b77b69f8bfdba39","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/curryRight.js","hash":"333b1a096341c2552aae7af172dfc6b1aa2d68d2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/curryRightN.js","hash":"919ca15f73c98eb40bfddd2213edff6a8992e2e4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/date.js","hash":"bbf85ffcdfc83df6d5c24c84b03ca937f9796257","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/deburr.js","hash":"b4aba68c497e84459d6d9739d71b0f1a3bb7182e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/debounce.js","hash":"c702651f3d6844c12c8e7fb2d2d07ee898f3c78e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/defaultTo.js","hash":"39bad3a9a0314e20e1fcc52f2c7c1711a796754d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/defaults.js","hash":"0afcaa5650946e068d13f298bdcf3e185f5a1f07","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/defaultsAll.js","hash":"2006e77adc3f6e20fc16af80af1a26d166d14c07","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/defaultsDeepAll.js","hash":"ee6d0af3f9942f2314c2b6fc2f283debd885fe36","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/defaultsDeep.js","hash":"6eea71a30ff427217403c02e6721e6bdaa0de604","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/defer.js","hash":"49b70a2e28eca9a02a89437582cf42c165dd2d05","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/delay.js","hash":"1f6a34ed80e76bcfa748c686fbc67488d0164d78","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/differenceBy.js","hash":"55c72db5c42636b2f5824b45979834483161d817","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/difference.js","hash":"13ba75b75ad25ad44bcfcc552dd0fe00114c13da","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/differenceWith.js","hash":"290648f706217284bb229fc0957d21578b89b0e2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/dissoc.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/dissocPath.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/divide.js","hash":"86636acadd06d91f809acd2c1d31cf780caa8649","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/drop.js","hash":"2cf18a3172602551b9950bf4b21ef23b07f5c8e4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/dropLast.js","hash":"297bd9ff4c5ed9fd6323d3ce10286936be549bfd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/dropLastWhile.js","hash":"3901051acf9fea300dfe2961fcc31890adabe4da","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/dropRight.js","hash":"e8beb9bca520499fc14e793b6e8f7a428d197bb9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/dropRightWhile.js","hash":"779915c003cbb1a9643965f284858729bc032b6a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/dropWhile.js","hash":"3d82fced32a443d92d80485508cd79c34b0a0ac2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/endsWith.js","hash":"1e2c542c82f7aefc5fad986136445a7a4425e145","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/eq.js","hash":"e22365568b08047e550d002e351cef842cddabbd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/equals.js","hash":"735240597ea9393397bbd638934ebfaea4f6b2c8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/escape.js","hash":"68a5b97faa5723827ef59f065101bbbe2556e6bd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/escapeRegExp.js","hash":"2a88b89297d34797244d963f2323e59a7c3d4d31","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/every.js","hash":"0499e846512778b49de2da8574e81f21dbd3ca40","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/extendAll.js","hash":"33d62f7192821133af2eb6ed064b6dcd173a13aa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/fill.js","hash":"783c4109619e522701ef2956d070ec6f94ebb258","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/extendAllWith.js","hash":"1d2dab39cc17f3beec2cbdf117837509ca72309d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/filter.js","hash":"7f77256838b2435ebf7539e186cce009aa54c1a5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/find.js","hash":"86e525b8931055cfd1dbed74e13e649b39e8fa6e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findFrom.js","hash":"7a92981afdd815aa0d39348b752306abd7697559","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findIndex.js","hash":"6dae88bc0ea9a1c2ceb6bed27e6fcc1a993795cd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findIndexFrom.js","hash":"61e3f312582261bc44d36fac85ddbe6f11f26a30","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findKey.js","hash":"7a3a8649e4119245549d42a71a20752a7a3258bc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findLast.js","hash":"a19b3954a423f675b6e556a4838d45a28eca25b1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findLastFrom.js","hash":"72d9c3ee81778f2f3be72594451a11c7ece2e35b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findLastIndex.js","hash":"25b3d6da9b75a73e37d908e0bd1c2c071eb81def","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findLastIndexFrom.js","hash":"077ebe8808fe2fe62d216b354af30236aa471903","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/findLastKey.js","hash":"d71353c58b59d98cc7d909a543f8f49ace63bf10","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flatMap.js","hash":"1b0399b113f8f036d69c78626ffb7fdbd531a452","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flatMapDeep.js","hash":"68eb25628604462da50f41131335e5bdd79dd931","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flatMapDepth.js","hash":"04d4e92f43b87d2f5504ebfd7d095c0421322e6e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flatten.js","hash":"93940d34c59306c75e8680b2f54a9535f1eb56fe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flattenDeep.js","hash":"3d4a37408b913e82d947aa842b984fca60b9dd0d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flattenDepth.js","hash":"c606dc88f1ff4ae80ccb61d0e293d46f53e687ba","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flip.js","hash":"e13e97806d2757e3661b52657b0a81077bddddcf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/floor.js","hash":"a7a4526f7ffcc6fd12b5805cc687f5e31fb41152","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flow.js","hash":"b1fa8a6738958fb2b0f61f55670e80e72b37f3f6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/flowRight.js","hash":"ba997b9952e847801199c2767ee07ffd64c4810a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/forEach.js","hash":"fe364b04d37562751d1e68482ddf6a7808156916","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/forEachRight.js","hash":"fd98cd06ffb50506eacfab8999a3cc06d2c646b6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/forIn.js","hash":"83e5d965ee8ff794867c6c8a2e01ca56fe76a15b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/forInRight.js","hash":"3f48c8bb263b1eb71cbaf4ad9d2606b3656f8a83","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/forOwn.js","hash":"60ef3e46e036d39572320f2c6f7601881ca41955","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/forOwnRight.js","hash":"5e5befea43de625a990a571cabcf5545f7ce1ad2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/function.js","hash":"c7d47f84639e315320f598f32c3a8f8dc8b0a724","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/functions.js","hash":"82f6797b95c815f8082611ca84cffad654ed7ee0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/fromPairs.js","hash":"1e7734eac86bf368e7d1bf63ca1657952b20f13f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/functionsIn.js","hash":"8b79a911c832b5683868fa56bc7c6cdaeb4d5e88","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/get.js","hash":"27edd6c7c585dcd0222c1cea97765e5eb1c52925","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/getOr.js","hash":"423682307e027ac900a0cc83948ad83b19c2fca1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/groupBy.js","hash":"28032f75b908231d97cfacc99fc04ff0a3f22e65","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/gt.js","hash":"36dfa14d07d98b751b8d37ba1ee1e64c64971161","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/hasIn.js","hash":"c9e75e41b1638417c4d1f9101c43469032522afd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/gte.js","hash":"d6e1cf7bd2d03d198791afb3eedae8323b06c262","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/has.js","hash":"20fd58ff42e0550eb9f94e183225458d52436836","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/head.js","hash":"886dc89b060616ea92340f7d68bc946f058e8c2c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/identical.js","hash":"40efa57b258af781819e8bd050c32583837184b5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/identity.js","hash":"59c993b05e7ec2f4653e4bc55b3025dcd5ca2f13","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/inRange.js","hash":"57145747d9c73137b76796e00ed79263c9049c14","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/includes.js","hash":"c5b5262c60578989e7569a4ec24c14c22af9d4be","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/includesFrom.js","hash":"13cb72c249c72145915615e75617f529d36ad4d6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/indexOf.js","hash":"f296c1ad76022ce01e1f733136933820a2744cfa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/indexBy.js","hash":"c4137629ebf66269744e84038e8a5c02084d931c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/indexOfFrom.js","hash":"a9af522fbc2eb5a6727c604d91e8ffc21198f5d4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/init.js","hash":"22ffae77010a1ac713f0326fa468621c3ab83a2c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/initial.js","hash":"345cc5bbcd2fcb19a0d5e3ba7c44dc8d4bb85be9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/intersection.js","hash":"1391dbb03a7ea4de5e8c8a937667c5b2f58d3b28","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/intersectionBy.js","hash":"c5f67ae844b3c57014cf4ca6878fd805e7a0c7d8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/intersectionWith.js","hash":"f264dacabb5c65b41cdb9301fd281252ceefcd45","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/invert.js","hash":"fd7502e8c46743d84540d1f6e83e3e70e4190812","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/invertBy.js","hash":"f23b5d7017a48c8757e9e02f8e9198de8af6f181","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/invertObj.js","hash":"f2acc5a6d3985a3d717e180810fc8da4b70eda6c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/invoke.js","hash":"af082b901fb05e5ca0b8c366f2d91c1a80a02fd1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/invokeArgs.js","hash":"fae0d54f2a10c1da45de1894b3a854b2f42f88a7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/invokeArgsMap.js","hash":"9cb53649858eb1e33827cc8513c16d9e7363d9da","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/invokeMap.js","hash":"e53c69c9c4a6be115fea0a3574c4d1255bfe5428","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isArguments.js","hash":"675c9c3ee2f01b2ecbbcaa9637bbccd65f89d943","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isArray.js","hash":"45376d39c70fb04bc0cea0bdda3b1998d0c76b3a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isArrayBuffer.js","hash":"6d6c14aae84e1662f0fbac87ff49d1dc0c568444","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isArrayLike.js","hash":"f6ef38c98c8344533e90a2212650cf936ce808c1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isArrayLikeObject.js","hash":"4d053b5fbd0477fe770249346cbc0bcfb37a6219","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isBoolean.js","hash":"b91a773b54bd4822f9c23bb88b139b67f4f1eafb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isBuffer.js","hash":"192efd2ec17cbeeadc1e68b893e504b8b14afcaa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isDate.js","hash":"ccd1b64eeefbb7d146ab6294c52aeec2ad1a93a5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isEmpty.js","hash":"517aca0c6b7b51087db094f4ff1ac06bc50c765c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isEqual.js","hash":"e143e5a19f1ceadc7a6d93d5bc95a4e62b6be530","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isElement.js","hash":"41b8187c0a4dfb59cdc5c939f1b3a68d674e7048","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isError.js","hash":"03dabdbd0e30796a8bdc2a341394d329a461a9d2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isEqualWith.js","hash":"685a3ecf2190a5656547f3a62fd8fc0c4fefcad4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isFinite.js","hash":"79c3ad8c8702d1aab54ae80ea400d5f73ae49dc1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isFunction.js","hash":"a5644120eabb397e67c38922ffb9b87d22aab5b7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isInteger.js","hash":"b30a8a902259cad6f2300f7b06d3f2bc3975f34e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isLength.js","hash":"6aabade08bfdd6e8bb07e28225629c419b5e8c97","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isMap.js","hash":"c2421f5389375dd9697de826b777b3d99c8e833b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isMatch.js","hash":"ea5bb01a981706a79b547149e5aadb39369967ea","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isMatchWith.js","hash":"0afec1beb71c2424691fd4b4dcb9100820374c26","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isNaN.js","hash":"c607c72d2d7f67fd2da46ca370acf5e12a024e44","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isNative.js","hash":"4dc770dd04ad9f97aad0b764d876375aad3c8a9e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isNil.js","hash":"00960af435b0e8ad04bb1fea65d6a30ae8a61d06","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isNull.js","hash":"dc555ce657002d169ecd3f2af155b6ddd64fc6f7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isNumber.js","hash":"6caecaae0ff0b438dbe62b2a814b14db80c6afd1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isObject.js","hash":"ffe7fe0c07a623545dedbd0c45ec219e3745cc99","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isObjectLike.js","hash":"49d650f710d56de004f9adb20ad8cf1b61f26554","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isPlainObject.js","hash":"14b52f86eae7bcbe9d5f0400377d9315a588bfef","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isRegExp.js","hash":"fc73a7faaf1e7ed7821d0600676678cd495326f0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isSafeInteger.js","hash":"e570e129d68bd49f8ba775f6b85ed596c4a96fbd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isSet.js","hash":"7c2c1be0d45c657157fe1ba88986a6b105c0318f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isString.js","hash":"512ad2c4610306d11bb3bb3491f53abd029e5ea2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isTypedArray.js","hash":"370900f84ff88e22af1153a209583c2bf6fc9415","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isSymbol.js","hash":"d374ee1761cd7c88e18c0d89797249ad5848ddc1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isUndefined.js","hash":"0022a9050a33a2d65905711d005042506bc9abad","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isWeakMap.js","hash":"2d9fb05f212d14e0ace898c6bab8563582d707cb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/iteratee.js","hash":"5a57ada3203e3a1b57b61923cda5737bc5bdf7ed","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/isWeakSet.js","hash":"00837472f9eff86d2ffecbc9b54ed3605b3c72da","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/join.js","hash":"3ef2d8c47d359b75da09f77c3fe2266508d4f021","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/juxt.js","hash":"19b5b68440238c0945975ba74e5a43d633a4cb25","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/kebabCase.js","hash":"8c4c6c334759ea0ecf4b1529287aae9fb187e47d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/keyBy.js","hash":"623811ac634d2ea4518def1661ebcf95b0201530","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/keys.js","hash":"5e7f14bc64715f1731977c278b871574eb7796dd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/keysIn.js","hash":"8e6ccf89f46ff56b75f2b23f820112e0982845ed","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/lang.js","hash":"62dc2db0a784f758cb9347da261f8089d1df95b7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/last.js","hash":"482343e9c2122718717131d20ff454537bc3452f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/lastIndexOf.js","hash":"34238beb4a520fcdcd9c46854d6dc7bfbcc1b5f9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/lastIndexOfFrom.js","hash":"2206dc50977fb1f15fb7ddbce38cd8adcefdc0fa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/lowerCase.js","hash":"10a1cbec9a77d960a0c2b470450877fe4596bd02","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/lowerFirst.js","hash":"e496119d716f19967b0070c7ec9c03d28b919122","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/lt.js","hash":"ebbdda9e5136aca682159edb9a951257370bc6f4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/lte.js","hash":"4926168ae6c4fe1a9493b20ddceb81f5ffef82a9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/map.js","hash":"b353305d3741738e30ccc46b96421df43380d99a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/mapKeys.js","hash":"ecdd3cd7edca30157bbb0bc2a3cd91058dc75199","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/mapValues.js","hash":"15803c364129828e85167dca814187bd2ac879c1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/matches.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/matchesProperty.js","hash":"73c7321e05c3a79d869afe876a64ae009d8d3da0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/math.js","hash":"dd031d6043c326be2e5c3a8b3a4bd728bc74650f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/max.js","hash":"72e93ed6cc51a6bb7ba5131cffbc4ed64b0d5148","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/maxBy.js","hash":"9a5c1f5cbbb6375b8f314d5c3508854a76541613","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/mean.js","hash":"73e71b6ebd607cc99741a6bd8a504f4b2d753cb3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/meanBy.js","hash":"062613f280d0bed68bb11a9999721c0c90730c6a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/memoize.js","hash":"d6bd34e0088a0f017e8c36785c6cb79450b2e0f3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/merge.js","hash":"087b5cb62cf464d2154b378d4a79fceb5987966f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/mergeAll.js","hash":"e9d2d85cbcc2a728e6baf932d05f053901f0a7e7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/mergeAllWith.js","hash":"7ed92253b45294795a4bf5e6fe8d5f716ad27b99","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/mergeWith.js","hash":"061bbc4f62c653eb99021e78accc7ae915c3d8a0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/method.js","hash":"9c12a91f85dc26106523d5662166b6ee0056dd14","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/methodOf.js","hash":"d7ca6c11064364211c6b7f7fa8465377f2a07342","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/min.js","hash":"e0a8670ec5ee7da49ea872f9eff2d5ec5bb5c1e6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/minBy.js","hash":"7c81c5d5a852cb0ece8e3026820c1000d6ad10f5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/mixin.js","hash":"bff01db6635beb3588b48b53aa0b83d92430f62d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/multiply.js","hash":"373b10cb68541026463c91d41901e052f3587044","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/nAry.js","hash":"bc98ebd544e4def682ac61ff204c16aba3b5a227","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/negate.js","hash":"1503b32cfd9bc78f575f865ac3984bbb3dec2695","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/noop.js","hash":"dd608cb4eb01d202042edb374958ea37494d0ffc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/next.js","hash":"ff0900b4e5fdd889ec980c50e5e52d05d469b9f1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/now.js","hash":"e455b0b859454a7852eeef13a2a7e2a26ba00502","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/nth.js","hash":"3cea03c8cc79b44fe085d53b73c2160ccd302029","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/nthArg.js","hash":"14cf05b970cf3ce3f5878e4396db31f286dc1653","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/number.js","hash":"56db9afc452bfa9338b206bf092497b8652f61f0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/object.js","hash":"1f4e289be4a66881114caa5198b881b1f16fd4de","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/omit.js","hash":"b9a90a8700d55718cb1a3d68b15223d0b9d7de61","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/omitAll.js","hash":"5c3a9227c6f9ddc785688becab205f8e912a9668","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/omitBy.js","hash":"1ae512e4ff2af4984900b15292137fcc10161589","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/once.js","hash":"b6d33d5a9c4379ef7e1c46b09f9c865ecb8603bf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/orderBy.js","hash":"7a17f923611248c0ea7086507bf568a043b98129","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/over.js","hash":"51db6346f35cb56c4ceff448ce83bb4b0529dd47","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/overArgs.js","hash":"adcf40dad62a1c856764978731537f30889b1c74","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/overEvery.js","hash":"3442bc9336ab31d30983323ab9e88f628085a1b1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/overSome.js","hash":"7de036f2f58dc0faecaf54be9adea63226aad560","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pad.js","hash":"383ad74a3c1d0de2b6ca0304eb1d1faa4bc5bd0a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/padChars.js","hash":"4c63a99952765c19e7858c17f18da7c6612c35a7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/padCharsEnd.js","hash":"07914fc0fb8ecc33d9611986519b7c6607fe455a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/padEnd.js","hash":"4aebe4522188368f563e7e72b2549083b542331b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/padCharsStart.js","hash":"5c7255195a70d48bba88ed00ac177d59c02e88e6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/parseInt.js","hash":"9f69cbcb1ac43f1e3e7d6cc58efd7685fe4a00aa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/padStart.js","hash":"a312c6f78be12857bd315385eebcc8eabc67c1e2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/partial.js","hash":"f2acb8a2cc54f7e90ae1cbca437be0f9c8bc4d68","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/partialRight.js","hash":"bcf63208bf8072ae6e7ff226467ec45fe20b7ace","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/partition.js","hash":"205607a8169b9faeb2b51b0974805fb3cef84b89","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/path.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pathOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pathEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/paths.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pickBy.js","hash":"7e90e85df68c3e5ed8e18b36ef2f1033f9c192eb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pick.js","hash":"7818ee7a56a4493a25f0262b42226a99b5ea4e74","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pickAll.js","hash":"a24ed77399bda55b6c76f52a7b2d0318e15e9d53","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pipe.js","hash":"9a9cf735bad407cdf098744f528e907de4b8f8bd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/plant.js","hash":"909ca1575840a93993b0cac28834173e1474eb9f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/placeholder.js","hash":"d211b85c131bc2d7c0230fc611c2f88d1aa1ae62","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pluck.js","hash":"56c45930b2236d7778657a85d48fb7c709e3010d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/prop.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/propEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/propOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/property.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/propertyOf.js","hash":"a0309506e91e32300edd07989a6765ba76469785","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pullAll.js","hash":"9d43ec3e85737776d1cba4dd43dfe33dcb691213","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/props.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pullAllBy.js","hash":"82df6feed00d7586139b8d19babff6a119d12abc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pull.js","hash":"e212c433d15f9e4aae0c7b7472df7478dce59826","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pullAllWith.js","hash":"a4c03d7ae4b54c96e5050bbc7421bce119aed17e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/pullAt.js","hash":"e64a22662e4110f3a7598bcbb20c3444ace05733","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/random.js","hash":"c9cacb8c48422049484d1b43f3e10da43f54fcf0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/range.js","hash":"c30a51ad9b00e95df9e8d84359393789adff6f70","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/rangeRight.js","hash":"87d5bc191b63a837147e1a06ff573017932f9956","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/rangeStepRight.js","hash":"2706912addb4a0f3cde29fdbc07e8e6efbca5022","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/rearg.js","hash":"d5b08395ea2c22d24207c8e80e19a62b8b68d49b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/rangeStep.js","hash":"8bb13a69dce53d8cb160b155579da0e6167551f0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/reduce.js","hash":"7607f41b09579aa65dca0224fae135f2a7bd90fe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/reduceRight.js","hash":"db8224e00025bde9179b073a6aa8aaef52cbaf6e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/reject.js","hash":"f24c316dcf99cac19664e5f3cba90bcb7928ef1c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/remove.js","hash":"f6c76702ae01ec215d972d87850624d302a45b9f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/repeat.js","hash":"7af31ea1d388664c134aeff68f0d5cb72297004a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/replace.js","hash":"f4cf1769a167cbafbca362598669cee3b2048b03","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/rest.js","hash":"a860492108f67bef2af79852208f2dfd4f541d7f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/restFrom.js","hash":"7658cbf9d7d17aa68e24ae89e087b1f1f82858ac","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/result.js","hash":"e805c5972b63deb60f49d1513e570ed116a864b5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/reverse.js","hash":"723596c407da9faeb8a6029ef74e42e97bdc6be9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/round.js","hash":"39a12f5a5a3ec3058dec8aa5118425b16d070281","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sample.js","hash":"2d93d3727f92362eeadcff288c3a8a733d023740","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sampleSize.js","hash":"fcfe74bb18b06d6da53495935d23a7600f9b24f7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/seq.js","hash":"4fd21585867c1b120e02b78852d98320ad8a38b2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/set.js","hash":"35767c3a9b3e46a963c7fcec39391fa87136861a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/setWith.js","hash":"c5fab5be851b87976674b1459d61b445d0d5be14","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/shuffle.js","hash":"2d110e1a05b0780b5ad4159ea18a807f7ea1e505","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/size.js","hash":"3fb55f18bf4ff0daea2c053a54a53c2674499e45","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/slice.js","hash":"ad400dcd46e81370daf0ad7c745ea1ab58df49a1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/snakeCase.js","hash":"d233254a26e81ab2a81fac31c48215d4b0b44adc","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/some.js","hash":"0ab071ab57a97cb20b860f9125f2d3f1f131f833","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortBy.js","hash":"bbfdf129dc3ce45a017989b1b825542383812b73","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedIndex.js","hash":"04be86485281acfc53118491293043d70e3a7f2e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedIndexBy.js","hash":"47138204798bfa0b43928340b12bbdcff317f60d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedIndexOf.js","hash":"70b13a8537667e2fcfeba4993992875bdf8ff864","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedLastIndex.js","hash":"d6598c35bd7fb8887fd6fdbdcb8b18befa6632ad","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedLastIndexBy.js","hash":"e53794520cd5b3ca6df2ffb977e0e6b7a5f9502c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedLastIndexOf.js","hash":"94fc33bdee1fdebb80f0b00d195eb4a13bb926f0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedUniq.js","hash":"8e361b43dd485f7aa5971e947939324cda143dd3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sortedUniqBy.js","hash":"dc651f780172d66beef630e5c50c006d9fba50d3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/spread.js","hash":"347036d4ea05dea39b09f20275d06e8594b55ccf","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/split.js","hash":"e785df2f7e7764f1bf518b872bc302679b505589","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/spreadFrom.js","hash":"30b843077c519cbe18ec47e2ba9685f3a37e19e2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/startCase.js","hash":"aee3f36ca72d7fa30de64c0541e80b8ce2d729bd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/startsWith.js","hash":"73df7824ddaf5d8dbcbfb2894234f8e5f4214497","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/string.js","hash":"3a30865f86edf4dc3baff7567a894bc6f280a654","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/stubArray.js","hash":"dd9b5ab21a9e90c5c2d33af270b15bb3a0d5a160","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/stubFalse.js","hash":"74f54c09c21a95c6e2168df204016afb1da85c08","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/stubObject.js","hash":"3c5521da1935e4b266a480fb8c2240fc2e572ea9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/stubString.js","hash":"493b8cce32dd2d2f0915c335941afd8a2030c59f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/stubTrue.js","hash":"7d69609e3844f8e596fbdd77e68be6352240ef7d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/subtract.js","hash":"f76a659ba3d7724c8e4ff6049dfb6cb17627ae41","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sum.js","hash":"430189ab2c6a23195cb8ea5111921794b9175ebb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/sumBy.js","hash":"73e4807968a99437d8168517ac9fd13ceeac5886","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/symmetricDifferenceBy.js","hash":"8cee02add02dca3ecabeeb07632dc8a2a1905e23","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/symmetricDifference.js","hash":"c1db644f2796082ce8c1445f0788558fbd4a6ce4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/symmetricDifferenceWith.js","hash":"129d57b15724b6e3dbe5a83af781cf7e9a74bffa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/tail.js","hash":"4515c52305fd72e45da2ac90042e05c2215178a2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/take.js","hash":"f9dd7f687a04982ac7aad57c525d98b1c3ffd1fe","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/takeLast.js","hash":"ac465095bcff9ff29ae8337a6d86a7658bb67196","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/takeRight.js","hash":"eed0e281c0ecf99c20f5668ce9e0dd154e45ca71","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/takeLastWhile.js","hash":"88248a7d663078cb48e2ecfc912a33ac3b097afa","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/takeRightWhile.js","hash":"b090924faefdfd4a31e25c54931f3b46f61c8203","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/takeWhile.js","hash":"072405b57aebe0b9a274eb3709ecee82226092b9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/tap.js","hash":"26ebee1454a84078cc66c9acb6c4844a5dbb6223","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/template.js","hash":"ee7becfdb63a3d9ff3dda057f1a9caef3a814554","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/templateSettings.js","hash":"b9a7dd2e08852490ea86ed35b1e7469482c2bb23","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/throttle.js","hash":"93c605d12d488e2ea9c6e6c63dbf42a538c66146","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/thru.js","hash":"e93cff48a14c89ca44d3cf7b14dd7ec275dd53ff","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/times.js","hash":"216300e9d1f02445f1af5f8c8427f949133b75a1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toArray.js","hash":"f47d0cfbc5a869b78087164b18237c5448f21851","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toFinite.js","hash":"3a63c6c9616bda4574b31fe27ef369c01cafd6c8","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toInteger.js","hash":"1a1797465c07599f7abc0f8430e46cff38d50986","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toIterator.js","hash":"961722cad23f72206b6f7d83e054c271b6a2add4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toJSON.js","hash":"7ac9ef07def4a64b062a05e942d3d110e3492ec7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toLength.js","hash":"7d567f44a37d6a32bbd5a3856d011d71a9665f5e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toNumber.js","hash":"3f6ed987b363575f5f35f6189b144ba3d907eb43","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toLower.js","hash":"e0fb8417621f54e54d3df261d1e873438502ed70","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toPairs.js","hash":"c28dd8a85dfaf032e5db9c1ae75da809d8527223","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toPairsIn.js","hash":"407a3784056e15bba952ddd7d835aff27eecc673","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toPath.js","hash":"d5cb075719634a9c336bea31d017ac20389c044d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toSafeInteger.js","hash":"fa9edb660be230da19a83e120f48052d9ee5400b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toPlainObject.js","hash":"fa912ce1e006d37f4483a53391271acb71692997","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toString.js","hash":"70b8676332f4ca060ba84f05a9bf101749fbf3f3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/transform.js","hash":"932c1b9f13d1e4892db0ea9eefd4902f843f74b4","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/toUpper.js","hash":"4312523e48af3aadf918218214ab329523305334","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/trim.js","hash":"f57135b04ed9e9db794f75b6b47b328440f06922","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/trimChars.js","hash":"28eb05ea233dc6596ed3b17a3684c7225efa82be","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/trimCharsStart.js","hash":"8415cb22cbb73b5fd101e360400bf6182f4d488e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/trimCharsEnd.js","hash":"c2d9c19c69c5e695022119baabadaa64ef02414c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/trimEnd.js","hash":"a9f669bd68b6fb04ca71e18d5f2c88805ec7d61a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/trimStart.js","hash":"50c328eddeec91b92f4eb516edcc78faaae87333","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unary.js","hash":"22e12bb090f8f305fb360a2372d87fcd9467399d","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unapply.js","hash":"936c484aca78852157be00e7b5cb71da6f747bfd","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/union.js","hash":"8e1193fe25429e87a9cd2e4a29dbd279c5decd5f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/truncate.js","hash":"af7ab1a8bcac66a7504359d2b2625b0b4bb6445c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unescape.js","hash":"e91a70341966dbafb94a8d6fc723f23f3c3a31a7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unionBy.js","hash":"139742a9be22d7eb2195e7e7182d87a912936e2f","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unionWith.js","hash":"c48bcdd3435f2cf4a650d30608cc929712943578","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/uniq.js","hash":"54b58010d1988f7a6ec28dc4a2df2205e83029ae","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/uniqBy.js","hash":"4111e9001db74d691176ba3e02af5527a4a77ed6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/uniqWith.js","hash":"af2818a584a4317e5148e52222afffa0c5fee59b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/uniqueId.js","hash":"414c720c8d11aeeca6b05cccb6deb16a0f27c943","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unnest.js","hash":"3d20beb0655413d13c2c55fdc3ac06013125edc6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unset.js","hash":"401e919462b8e66630dfc74e18796fdfa62ba6a3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unzip.js","hash":"29cd397f4baa016f6e6d1c8fc4326219106896e9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/unzipWith.js","hash":"afc880fef61b32bc409f3a9a7359d755cdddf83b","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/update.js","hash":"a7d197f6473f8a7a38c00acc709f53481c545474","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/updateWith.js","hash":"9dd189e80bb45da43b4076a1643a45c69f8cf1a7","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/upperFirst.js","hash":"084545106fd93e9acff00c4401918ed9054d55e3","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/upperCase.js","hash":"612a73d5f39d6d5a6f3c3b80ec89a6377e2e3c4a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/useWith.js","hash":"992d0f455bb3b824323580e322a9c79bd378d0c6","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/util.js","hash":"0724cd943bdab0b6bac86e7ac14e815e5aa1d9ed","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/valueOf.js","hash":"a2ea35c715e7b3b68051a38cbf6802b29370d975","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/value.js","hash":"e2d89ba1db613274b31d1d0fb1acb503644ad2e2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/values.js","hash":"97fd629e19d9740fbfc87a26f86a259bbe7ca7f9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/valuesIn.js","hash":"b7b2dd2b81111cce5adfeeb45254a5372e6c28f5","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/whereEq.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/where.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/without.js","hash":"2599adcc37dbd771a16ea4cc2a0c1d4513f38a9a","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/words.js","hash":"88c9e852c37f155c0dc429a401d44df09d9ca51c","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/wrap.js","hash":"3631e867dfc78a67db38ffff790ee94022015a52","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/wrapperAt.js","hash":"7d374b517c61846dba2ec2898d75181025fde1be","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/wrapperChain.js","hash":"1e4f82ce87696ad134450678d2fba27bb46cd123","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/wrapperLodash.js","hash":"ee531effe7e5e4472083f98b35497f858be33bb0","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/wrapperValue.js","hash":"51e6e912753e7d425a490e90c8205fe83dc435f1","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/wrapperReverse.js","hash":"0e41311c145f305b07da8c06db6e8e7ebe5433ec","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/xor.js","hash":"bb7e8f6d42f3c73d3358ad081b4e00796d1cc771","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/xorBy.js","hash":"476caccbc9387505d0e110f814102335c77bb511","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/xorWith.js","hash":"8d0c86364c19f9c2b17feac93b112781ff81b3c2","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/zip.js","hash":"3017d4235f2ff6d2658a88eb540246821e9dcf04","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/zipObj.js","hash":"353dfff83f25574ff58209ae8656869ab5516e81","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/zipAll.js","hash":"e5e2a68f3c74299cb44da02653f7773d7f6ae554","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/zipObject.js","hash":"8449412e15d18c596810ebfa34c5a0766f22b7e9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/zipObjectDeep.js","hash":"e27ad4a21f3e47d1a59b796566d3a4c5ffbe5ebb","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/fp/zipWith.js","hash":"641ede21898d379ba0b8b9038913fa0400a271b9","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/resolve/test/dotdot/abc/index.js","hash":"75a341c5a597afcc451ba5003f9274296812f1b6","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/precedence/aaa/index.js","hash":"b35cd29e4afa6af8c491dcea649f75e1eb1a33de","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/precedence/bbb/main.js","hash":"f5572df4e3b12c2f3f0b2182f1356c5747d5d2b2","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/baz/package.json","hash":"54931d5f8e2eeaf618a6f621ba26554ec56395bb","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/precedence/aaa/main.js","hash":"6abb061dc5fe8032ac292fa5701a1c79a8aac229","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/baz/quux.js","hash":"db311f33466c97593aa59411fcfd87e8489d8f50","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/incorrect_main/index.js","hash":"a6947a6ae82fe4fc03c1447ba40f53bcd7f356dd","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/incorrect_main/package.json","hash":"fd4f09f8d82645ce1701105eff34bf2e494c5496","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/without_basedir/main.js","hash":"25ccf64a8f231b3cdf853f87a8b525dae9ff71ac","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df22a616d3108766d7537b9985b7cd8cd729f1d0","modified":1478721005000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"493a4cf1bf1927d8a2bf5936b7d50b72bdafa378","modified":1478721005000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/lib/_stream_readable.js","hash":"d833189293a39d16db3aee7a69d697240c15823e","modified":1478724381000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/lib/_stream_transform.js","hash":"144bee7085913b3caef415e52033a36d341c0a87","modified":1478724381000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/lib/_stream_writable.js","hash":"513f36dedc17d9607a39d44d4e6cdfb3215efedb","modified":1479128587000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/__.js","hash":"9c805f4d417e7a952726f3cd1d0bfa7c30cfa7b8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/F.js","hash":"18f568c6af0e139bc63d9943f5e798fd09bf01b6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/T.js","hash":"f10191c08571d40fee301d26e97240125511bb31","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/_baseConvert.js","hash":"769b75e59422a7dd924792cae8edc42eccc63b75","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/_convertBrowser.js","hash":"b4cceca914f9af59a7c47c384127602dce2abf6a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/_mapping.js","hash":"b96514d67397db8eed6dbf568dc6cca537343f38","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/_falseOptions.js","hash":"ad9c0db1f5df98f88d63bd70d729417a7eab2adf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/add.js","hash":"9a7af31a7389d2b2b2ada006440c4cc5c2e42e14","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/_util.js","hash":"5d57b5f56061e9383ad93eda47ee6b5a99525ba6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/after.js","hash":"b9b375ce8fc1a7d08495feac490844967e5c6ac0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/all.js","hash":"ca7a311804ca0107de2a6f00602710f36160c765","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/allPass.js","hash":"d6accb07bf9f23b3d0f72ce21b787618d575da04","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/always.js","hash":"d3c13a79ddd4488702c96b285bbfe2556ee67e17","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/any.js","hash":"64f468269587c745e361d31e0d8b26cb8f67fb06","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/anyPass.js","hash":"4a3f89614864715dcc36c7ee5dbb9850f6ae2f95","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/apply.js","hash":"eb2c8c5f1efdd93f4d55605df4874bea9f831b54","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/array.js","hash":"6c3a1a438a1f341a9bfbf059da2d1efd4a582178","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assign.js","hash":"52e569f6c7d83714506850d8174be2c3a2992852","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/ary.js","hash":"b811ed8b5b34ff86e65589b38cf22f1d7699ed4d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assignAll.js","hash":"57a1a620f001ae55ba98b560fa7a858cebc13023","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assignAllWith.js","hash":"404f26b37a62ce5a1e9b6fb33672e69913d4efed","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assignIn.js","hash":"71da9458e2fdabef9d716d9b48060a12c0185afe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assignInAllWith.js","hash":"47ae8b9efcba88af49e9a58fa2a5b7c35813cb7f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assignInAll.js","hash":"3d99977ee0df2bc32edca5ceae451a08cb43bf76","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assignInWith.js","hash":"b3b0adbd4b47e963b9f3ec93335b375deca2a320","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assignWith.js","hash":"d4a0c3092be5c92abca026002a322407a1e12f2d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assoc.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/assocPath.js","hash":"3cd42a8269c6339b7a9eb3bfde6a404ac4a01dde","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/at.js","hash":"615c43358bc89d4eaed242300b9fd77631f72443","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/attempt.js","hash":"eb059364d0e518867b8fe2d4d9773ca481f80b15","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/before.js","hash":"c9fbf0e49c14385711d6335cb1dc0d6e09f3aea4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/bind.js","hash":"5620199ffaf7354deb17332bd96d023ef93a7563","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/bindAll.js","hash":"2e3944394c315756627aab74b8ce3cebab98662a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/bindKey.js","hash":"8884ec3af184de8a5f20829f6eb5fb6ea459582b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/camelCase.js","hash":"8eb598ce4ff5d309c2ab8fb299f41df23c4cd308","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/capitalize.js","hash":"101f5c2148a579105036a5cdd25b4193812f64d3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/castArray.js","hash":"ab5ea04ba48ee2920164fadb8b78d8a03f1cee6d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/ceil.js","hash":"0539c156c827c85dd682ece5986b9f7bac19a097","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/chunk.js","hash":"63359d1585edc86fb70c74388c36e0a96e16b96c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/chain.js","hash":"c85611a5e7da7d0aaf29a45bd34130b56315199c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/clamp.js","hash":"d10d4fb46ea8518851b6578ef67dde23b2a9b013","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/clone.js","hash":"6cd53703b2949cbee86ce6d708942e248afb8b4d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/cloneDeep.js","hash":"179860c9bdc495da2f5d8281fec35077b2f2b216","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/cloneDeepWith.js","hash":"365d2b00fa2e722ce8c60b0605bf3af06c6ff454","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/cloneWith.js","hash":"a303da7355a2bcf3314b47558b57c8e3b235094f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/collection.js","hash":"75a23149e229dc1435bbddc870542ac1ff298f91","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/compact.js","hash":"b6603e874a29627153368292851fe987f5462bcf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/commit.js","hash":"2b2f58504601fed318dd5f6ef943a873018195cd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/complement.js","hash":"db8673391fb52d0d4682d80065e5f82809a3292a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/compose.js","hash":"ea122818ed87e1559af41edff0f2d2fa54319b9a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/cond.js","hash":"c5bcad894a249463aeabed85ac3d3e7474455533","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/conformsTo.js","hash":"fa5e2fa22ac3442d8ad5b09e3a6c0959316431ed","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/concat.js","hash":"64240c44714fa5369fc4092f00ef58caced12344","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/constant.js","hash":"109c49b151baa999c023e7934b4223e0fe3d84c5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/conforms.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/contains.js","hash":"cf59973c08cea72d4b25f223aa3c30e99fde8e55","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/convert.js","hash":"5e125cf746680131339a8ab7f41d917bdccdf356","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/countBy.js","hash":"52e5e9e4b6064c30131e7f678551f23f8120cf0d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/create.js","hash":"7fdb4d9dfc8e2b4876ec6b47b9b32fa37eb1aa2c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/curry.js","hash":"ded1e6452bc77478e51a4b9a7f8f2eb9c07d1b03","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/curryN.js","hash":"13f2d44be73b0df20161c72c0b77b69f8bfdba39","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/curryRightN.js","hash":"919ca15f73c98eb40bfddd2213edff6a8992e2e4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/curryRight.js","hash":"333b1a096341c2552aae7af172dfc6b1aa2d68d2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/date.js","hash":"bbf85ffcdfc83df6d5c24c84b03ca937f9796257","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/debounce.js","hash":"c702651f3d6844c12c8e7fb2d2d07ee898f3c78e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/deburr.js","hash":"b4aba68c497e84459d6d9739d71b0f1a3bb7182e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/defaultTo.js","hash":"39bad3a9a0314e20e1fcc52f2c7c1711a796754d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/defaults.js","hash":"0afcaa5650946e068d13f298bdcf3e185f5a1f07","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/defaultsAll.js","hash":"2006e77adc3f6e20fc16af80af1a26d166d14c07","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/defaultsDeep.js","hash":"6eea71a30ff427217403c02e6721e6bdaa0de604","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/defaultsDeepAll.js","hash":"ee6d0af3f9942f2314c2b6fc2f283debd885fe36","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/defer.js","hash":"49b70a2e28eca9a02a89437582cf42c165dd2d05","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/delay.js","hash":"1f6a34ed80e76bcfa748c686fbc67488d0164d78","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/difference.js","hash":"13ba75b75ad25ad44bcfcc552dd0fe00114c13da","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/differenceBy.js","hash":"55c72db5c42636b2f5824b45979834483161d817","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/differenceWith.js","hash":"290648f706217284bb229fc0957d21578b89b0e2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/dissoc.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/dissocPath.js","hash":"4daf52a97c16d6624e3e1abfa4d0b8d8d2362add","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/divide.js","hash":"86636acadd06d91f809acd2c1d31cf780caa8649","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/drop.js","hash":"2cf18a3172602551b9950bf4b21ef23b07f5c8e4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/dropLast.js","hash":"297bd9ff4c5ed9fd6323d3ce10286936be549bfd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/dropLastWhile.js","hash":"3901051acf9fea300dfe2961fcc31890adabe4da","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/dropRight.js","hash":"e8beb9bca520499fc14e793b6e8f7a428d197bb9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/dropRightWhile.js","hash":"779915c003cbb1a9643965f284858729bc032b6a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/dropWhile.js","hash":"3d82fced32a443d92d80485508cd79c34b0a0ac2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/each.js","hash":"dbfc772ff0330e9d0bb2ee704242e67b0435929a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/eachRight.js","hash":"c7a90b0a7bec56aea41c7569a652ebf17c20fde1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/endsWith.js","hash":"1e2c542c82f7aefc5fad986136445a7a4425e145","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/entries.js","hash":"8788b9edcf643acf20e434e5894d09fb18742112","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/entriesIn.js","hash":"995c6287a9c5f6641931c966de331b5521f63d3e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/eq.js","hash":"e22365568b08047e550d002e351cef842cddabbd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/equals.js","hash":"735240597ea9393397bbd638934ebfaea4f6b2c8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/escape.js","hash":"68a5b97faa5723827ef59f065101bbbe2556e6bd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/escapeRegExp.js","hash":"2a88b89297d34797244d963f2323e59a7c3d4d31","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/every.js","hash":"0499e846512778b49de2da8574e81f21dbd3ca40","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/extend.js","hash":"79bb5928a674d6122686fc0df5a28f00b22d4d0e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/extendAll.js","hash":"33d62f7192821133af2eb6ed064b6dcd173a13aa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/extendWith.js","hash":"fe394cac415eb0a6518371d1b95e08144a682526","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/fill.js","hash":"783c4109619e522701ef2956d070ec6f94ebb258","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/extendAllWith.js","hash":"1d2dab39cc17f3beec2cbdf117837509ca72309d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/filter.js","hash":"7f77256838b2435ebf7539e186cce009aa54c1a5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/find.js","hash":"86e525b8931055cfd1dbed74e13e649b39e8fa6e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findFrom.js","hash":"7a92981afdd815aa0d39348b752306abd7697559","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findIndex.js","hash":"6dae88bc0ea9a1c2ceb6bed27e6fcc1a993795cd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findIndexFrom.js","hash":"61e3f312582261bc44d36fac85ddbe6f11f26a30","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findKey.js","hash":"7a3a8649e4119245549d42a71a20752a7a3258bc","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findLast.js","hash":"a19b3954a423f675b6e556a4838d45a28eca25b1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findLastFrom.js","hash":"72d9c3ee81778f2f3be72594451a11c7ece2e35b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findLastIndex.js","hash":"25b3d6da9b75a73e37d908e0bd1c2c071eb81def","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findLastIndexFrom.js","hash":"077ebe8808fe2fe62d216b354af30236aa471903","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/findLastKey.js","hash":"d71353c58b59d98cc7d909a543f8f49ace63bf10","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/first.js","hash":"a2eac20812e95b557a5bc11dab060163fe1133d0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flatMap.js","hash":"1b0399b113f8f036d69c78626ffb7fdbd531a452","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flatMapDeep.js","hash":"68eb25628604462da50f41131335e5bdd79dd931","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flatMapDepth.js","hash":"04d4e92f43b87d2f5504ebfd7d095c0421322e6e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flatten.js","hash":"93940d34c59306c75e8680b2f54a9535f1eb56fe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flattenDeep.js","hash":"3d4a37408b913e82d947aa842b984fca60b9dd0d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flip.js","hash":"e13e97806d2757e3661b52657b0a81077bddddcf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flattenDepth.js","hash":"c606dc88f1ff4ae80ccb61d0e293d46f53e687ba","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/floor.js","hash":"a7a4526f7ffcc6fd12b5805cc687f5e31fb41152","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flow.js","hash":"b1fa8a6738958fb2b0f61f55670e80e72b37f3f6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/flowRight.js","hash":"ba997b9952e847801199c2767ee07ffd64c4810a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/forEach.js","hash":"fe364b04d37562751d1e68482ddf6a7808156916","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/forEachRight.js","hash":"fd98cd06ffb50506eacfab8999a3cc06d2c646b6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/forIn.js","hash":"83e5d965ee8ff794867c6c8a2e01ca56fe76a15b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/forOwn.js","hash":"60ef3e46e036d39572320f2c6f7601881ca41955","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/forInRight.js","hash":"3f48c8bb263b1eb71cbaf4ad9d2606b3656f8a83","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/forOwnRight.js","hash":"5e5befea43de625a990a571cabcf5545f7ce1ad2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/fromPairs.js","hash":"1e7734eac86bf368e7d1bf63ca1657952b20f13f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/functions.js","hash":"82f6797b95c815f8082611ca84cffad654ed7ee0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/function.js","hash":"c7d47f84639e315320f598f32c3a8f8dc8b0a724","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/functionsIn.js","hash":"8b79a911c832b5683868fa56bc7c6cdaeb4d5e88","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/get.js","hash":"27edd6c7c585dcd0222c1cea97765e5eb1c52925","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/getOr.js","hash":"423682307e027ac900a0cc83948ad83b19c2fca1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/groupBy.js","hash":"28032f75b908231d97cfacc99fc04ff0a3f22e65","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/gte.js","hash":"d6e1cf7bd2d03d198791afb3eedae8323b06c262","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/gt.js","hash":"36dfa14d07d98b751b8d37ba1ee1e64c64971161","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/has.js","hash":"20fd58ff42e0550eb9f94e183225458d52436836","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/hasIn.js","hash":"c9e75e41b1638417c4d1f9101c43469032522afd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/head.js","hash":"886dc89b060616ea92340f7d68bc946f058e8c2c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/identity.js","hash":"59c993b05e7ec2f4653e4bc55b3025dcd5ca2f13","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/identical.js","hash":"40efa57b258af781819e8bd050c32583837184b5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/inRange.js","hash":"57145747d9c73137b76796e00ed79263c9049c14","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/includes.js","hash":"c5b5262c60578989e7569a4ec24c14c22af9d4be","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/indexBy.js","hash":"c4137629ebf66269744e84038e8a5c02084d931c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/includesFrom.js","hash":"13cb72c249c72145915615e75617f529d36ad4d6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/indexOf.js","hash":"f296c1ad76022ce01e1f733136933820a2744cfa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/indexOfFrom.js","hash":"a9af522fbc2eb5a6727c604d91e8ffc21198f5d4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/init.js","hash":"22ffae77010a1ac713f0326fa468621c3ab83a2c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/initial.js","hash":"345cc5bbcd2fcb19a0d5e3ba7c44dc8d4bb85be9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/intersection.js","hash":"1391dbb03a7ea4de5e8c8a937667c5b2f58d3b28","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/intersectionBy.js","hash":"c5f67ae844b3c57014cf4ca6878fd805e7a0c7d8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/invert.js","hash":"fd7502e8c46743d84540d1f6e83e3e70e4190812","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/invertBy.js","hash":"f23b5d7017a48c8757e9e02f8e9198de8af6f181","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/intersectionWith.js","hash":"f264dacabb5c65b41cdb9301fd281252ceefcd45","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/invertObj.js","hash":"f2acc5a6d3985a3d717e180810fc8da4b70eda6c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/invoke.js","hash":"af082b901fb05e5ca0b8c366f2d91c1a80a02fd1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/invokeArgs.js","hash":"fae0d54f2a10c1da45de1894b3a854b2f42f88a7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/invokeArgsMap.js","hash":"9cb53649858eb1e33827cc8513c16d9e7363d9da","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/invokeMap.js","hash":"e53c69c9c4a6be115fea0a3574c4d1255bfe5428","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isArguments.js","hash":"675c9c3ee2f01b2ecbbcaa9637bbccd65f89d943","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isArray.js","hash":"45376d39c70fb04bc0cea0bdda3b1998d0c76b3a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isArrayBuffer.js","hash":"6d6c14aae84e1662f0fbac87ff49d1dc0c568444","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isArrayLike.js","hash":"f6ef38c98c8344533e90a2212650cf936ce808c1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isArrayLikeObject.js","hash":"4d053b5fbd0477fe770249346cbc0bcfb37a6219","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isBoolean.js","hash":"b91a773b54bd4822f9c23bb88b139b67f4f1eafb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isBuffer.js","hash":"192efd2ec17cbeeadc1e68b893e504b8b14afcaa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isDate.js","hash":"ccd1b64eeefbb7d146ab6294c52aeec2ad1a93a5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isElement.js","hash":"41b8187c0a4dfb59cdc5c939f1b3a68d674e7048","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isEmpty.js","hash":"517aca0c6b7b51087db094f4ff1ac06bc50c765c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isEqual.js","hash":"e143e5a19f1ceadc7a6d93d5bc95a4e62b6be530","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isEqualWith.js","hash":"685a3ecf2190a5656547f3a62fd8fc0c4fefcad4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isError.js","hash":"03dabdbd0e30796a8bdc2a341394d329a461a9d2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isFinite.js","hash":"79c3ad8c8702d1aab54ae80ea400d5f73ae49dc1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isFunction.js","hash":"a5644120eabb397e67c38922ffb9b87d22aab5b7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isInteger.js","hash":"b30a8a902259cad6f2300f7b06d3f2bc3975f34e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isLength.js","hash":"6aabade08bfdd6e8bb07e28225629c419b5e8c97","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isMap.js","hash":"c2421f5389375dd9697de826b777b3d99c8e833b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isMatch.js","hash":"ea5bb01a981706a79b547149e5aadb39369967ea","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isMatchWith.js","hash":"0afec1beb71c2424691fd4b4dcb9100820374c26","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isNaN.js","hash":"c607c72d2d7f67fd2da46ca370acf5e12a024e44","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isNative.js","hash":"4dc770dd04ad9f97aad0b764d876375aad3c8a9e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isNil.js","hash":"00960af435b0e8ad04bb1fea65d6a30ae8a61d06","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isNull.js","hash":"dc555ce657002d169ecd3f2af155b6ddd64fc6f7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isNumber.js","hash":"6caecaae0ff0b438dbe62b2a814b14db80c6afd1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isObject.js","hash":"ffe7fe0c07a623545dedbd0c45ec219e3745cc99","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isObjectLike.js","hash":"49d650f710d56de004f9adb20ad8cf1b61f26554","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isPlainObject.js","hash":"14b52f86eae7bcbe9d5f0400377d9315a588bfef","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isRegExp.js","hash":"fc73a7faaf1e7ed7821d0600676678cd495326f0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isSafeInteger.js","hash":"e570e129d68bd49f8ba775f6b85ed596c4a96fbd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isSet.js","hash":"7c2c1be0d45c657157fe1ba88986a6b105c0318f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isString.js","hash":"512ad2c4610306d11bb3bb3491f53abd029e5ea2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isSymbol.js","hash":"d374ee1761cd7c88e18c0d89797249ad5848ddc1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isTypedArray.js","hash":"370900f84ff88e22af1153a209583c2bf6fc9415","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isUndefined.js","hash":"0022a9050a33a2d65905711d005042506bc9abad","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isWeakMap.js","hash":"2d9fb05f212d14e0ace898c6bab8563582d707cb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/isWeakSet.js","hash":"00837472f9eff86d2ffecbc9b54ed3605b3c72da","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/iteratee.js","hash":"5a57ada3203e3a1b57b61923cda5737bc5bdf7ed","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/join.js","hash":"3ef2d8c47d359b75da09f77c3fe2266508d4f021","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/juxt.js","hash":"19b5b68440238c0945975ba74e5a43d633a4cb25","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/kebabCase.js","hash":"8c4c6c334759ea0ecf4b1529287aae9fb187e47d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/keyBy.js","hash":"623811ac634d2ea4518def1661ebcf95b0201530","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/keys.js","hash":"5e7f14bc64715f1731977c278b871574eb7796dd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/keysIn.js","hash":"8e6ccf89f46ff56b75f2b23f820112e0982845ed","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/last.js","hash":"482343e9c2122718717131d20ff454537bc3452f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/lang.js","hash":"62dc2db0a784f758cb9347da261f8089d1df95b7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/lastIndexOf.js","hash":"34238beb4a520fcdcd9c46854d6dc7bfbcc1b5f9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/lastIndexOfFrom.js","hash":"2206dc50977fb1f15fb7ddbce38cd8adcefdc0fa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/lowerFirst.js","hash":"e496119d716f19967b0070c7ec9c03d28b919122","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/lowerCase.js","hash":"10a1cbec9a77d960a0c2b470450877fe4596bd02","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/lt.js","hash":"ebbdda9e5136aca682159edb9a951257370bc6f4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/lte.js","hash":"4926168ae6c4fe1a9493b20ddceb81f5ffef82a9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/map.js","hash":"b353305d3741738e30ccc46b96421df43380d99a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/mapKeys.js","hash":"ecdd3cd7edca30157bbb0bc2a3cd91058dc75199","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/mapValues.js","hash":"15803c364129828e85167dca814187bd2ac879c1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/matchesProperty.js","hash":"73c7321e05c3a79d869afe876a64ae009d8d3da0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/matches.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/math.js","hash":"dd031d6043c326be2e5c3a8b3a4bd728bc74650f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/max.js","hash":"72e93ed6cc51a6bb7ba5131cffbc4ed64b0d5148","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/maxBy.js","hash":"9a5c1f5cbbb6375b8f314d5c3508854a76541613","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/mean.js","hash":"73e71b6ebd607cc99741a6bd8a504f4b2d753cb3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/meanBy.js","hash":"062613f280d0bed68bb11a9999721c0c90730c6a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/memoize.js","hash":"d6bd34e0088a0f017e8c36785c6cb79450b2e0f3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/merge.js","hash":"087b5cb62cf464d2154b378d4a79fceb5987966f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/mergeAll.js","hash":"e9d2d85cbcc2a728e6baf932d05f053901f0a7e7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/mergeAllWith.js","hash":"7ed92253b45294795a4bf5e6fe8d5f716ad27b99","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/mergeWith.js","hash":"061bbc4f62c653eb99021e78accc7ae915c3d8a0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/method.js","hash":"9c12a91f85dc26106523d5662166b6ee0056dd14","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/methodOf.js","hash":"d7ca6c11064364211c6b7f7fa8465377f2a07342","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/min.js","hash":"e0a8670ec5ee7da49ea872f9eff2d5ec5bb5c1e6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/minBy.js","hash":"7c81c5d5a852cb0ece8e3026820c1000d6ad10f5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/mixin.js","hash":"bff01db6635beb3588b48b53aa0b83d92430f62d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/multiply.js","hash":"373b10cb68541026463c91d41901e052f3587044","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/nAry.js","hash":"bc98ebd544e4def682ac61ff204c16aba3b5a227","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/negate.js","hash":"1503b32cfd9bc78f575f865ac3984bbb3dec2695","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/next.js","hash":"ff0900b4e5fdd889ec980c50e5e52d05d469b9f1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/now.js","hash":"e455b0b859454a7852eeef13a2a7e2a26ba00502","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/noop.js","hash":"dd608cb4eb01d202042edb374958ea37494d0ffc","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/nth.js","hash":"3cea03c8cc79b44fe085d53b73c2160ccd302029","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/nthArg.js","hash":"14cf05b970cf3ce3f5878e4396db31f286dc1653","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/number.js","hash":"56db9afc452bfa9338b206bf092497b8652f61f0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/object.js","hash":"1f4e289be4a66881114caa5198b881b1f16fd4de","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/omit.js","hash":"b9a90a8700d55718cb1a3d68b15223d0b9d7de61","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/omitAll.js","hash":"5c3a9227c6f9ddc785688becab205f8e912a9668","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/once.js","hash":"b6d33d5a9c4379ef7e1c46b09f9c865ecb8603bf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/omitBy.js","hash":"1ae512e4ff2af4984900b15292137fcc10161589","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/orderBy.js","hash":"7a17f923611248c0ea7086507bf568a043b98129","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/over.js","hash":"51db6346f35cb56c4ceff448ce83bb4b0529dd47","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/overArgs.js","hash":"adcf40dad62a1c856764978731537f30889b1c74","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/overEvery.js","hash":"3442bc9336ab31d30983323ab9e88f628085a1b1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/overSome.js","hash":"7de036f2f58dc0faecaf54be9adea63226aad560","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pad.js","hash":"383ad74a3c1d0de2b6ca0304eb1d1faa4bc5bd0a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/padChars.js","hash":"4c63a99952765c19e7858c17f18da7c6612c35a7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/padCharsEnd.js","hash":"07914fc0fb8ecc33d9611986519b7c6607fe455a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/padCharsStart.js","hash":"5c7255195a70d48bba88ed00ac177d59c02e88e6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/padEnd.js","hash":"4aebe4522188368f563e7e72b2549083b542331b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/padStart.js","hash":"a312c6f78be12857bd315385eebcc8eabc67c1e2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/parseInt.js","hash":"9f69cbcb1ac43f1e3e7d6cc58efd7685fe4a00aa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/partial.js","hash":"f2acb8a2cc54f7e90ae1cbca437be0f9c8bc4d68","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/partialRight.js","hash":"bcf63208bf8072ae6e7ff226467ec45fe20b7ace","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/partition.js","hash":"205607a8169b9faeb2b51b0974805fb3cef84b89","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/path.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pathOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pathEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/paths.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pick.js","hash":"7818ee7a56a4493a25f0262b42226a99b5ea4e74","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pickAll.js","hash":"a24ed77399bda55b6c76f52a7b2d0318e15e9d53","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pickBy.js","hash":"7e90e85df68c3e5ed8e18b36ef2f1033f9c192eb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pipe.js","hash":"9a9cf735bad407cdf098744f528e907de4b8f8bd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/placeholder.js","hash":"d211b85c131bc2d7c0230fc611c2f88d1aa1ae62","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/plant.js","hash":"909ca1575840a93993b0cac28834173e1474eb9f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pluck.js","hash":"56c45930b2236d7778657a85d48fb7c709e3010d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/prop.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/propEq.js","hash":"2449e34c17552d94cd719c23e1ffaee752b19a49","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/propOr.js","hash":"8453669dae1bef8fb6e22746d8c5b09e21705dab","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/property.js","hash":"563c5eb1769785a3350bfd1cb2b4e090a650c994","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/propertyOf.js","hash":"a0309506e91e32300edd07989a6765ba76469785","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/props.js","hash":"6dc80a19f4b7e95104d76ad38cab58672e823c41","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pull.js","hash":"e212c433d15f9e4aae0c7b7472df7478dce59826","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pullAllBy.js","hash":"82df6feed00d7586139b8d19babff6a119d12abc","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pullAll.js","hash":"9d43ec3e85737776d1cba4dd43dfe33dcb691213","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pullAllWith.js","hash":"a4c03d7ae4b54c96e5050bbc7421bce119aed17e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/pullAt.js","hash":"e64a22662e4110f3a7598bcbb20c3444ace05733","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/range.js","hash":"c30a51ad9b00e95df9e8d84359393789adff6f70","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/random.js","hash":"c9cacb8c48422049484d1b43f3e10da43f54fcf0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/rangeRight.js","hash":"87d5bc191b63a837147e1a06ff573017932f9956","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/rangeStep.js","hash":"8bb13a69dce53d8cb160b155579da0e6167551f0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/rangeStepRight.js","hash":"2706912addb4a0f3cde29fdbc07e8e6efbca5022","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/rearg.js","hash":"d5b08395ea2c22d24207c8e80e19a62b8b68d49b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/reduce.js","hash":"7607f41b09579aa65dca0224fae135f2a7bd90fe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/reject.js","hash":"f24c316dcf99cac19664e5f3cba90bcb7928ef1c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/reduceRight.js","hash":"db8224e00025bde9179b073a6aa8aaef52cbaf6e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/remove.js","hash":"f6c76702ae01ec215d972d87850624d302a45b9f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/repeat.js","hash":"7af31ea1d388664c134aeff68f0d5cb72297004a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/replace.js","hash":"f4cf1769a167cbafbca362598669cee3b2048b03","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/rest.js","hash":"a860492108f67bef2af79852208f2dfd4f541d7f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/restFrom.js","hash":"7658cbf9d7d17aa68e24ae89e087b1f1f82858ac","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/result.js","hash":"e805c5972b63deb60f49d1513e570ed116a864b5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/reverse.js","hash":"723596c407da9faeb8a6029ef74e42e97bdc6be9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sample.js","hash":"2d93d3727f92362eeadcff288c3a8a733d023740","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/round.js","hash":"39a12f5a5a3ec3058dec8aa5118425b16d070281","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sampleSize.js","hash":"fcfe74bb18b06d6da53495935d23a7600f9b24f7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/seq.js","hash":"4fd21585867c1b120e02b78852d98320ad8a38b2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/set.js","hash":"35767c3a9b3e46a963c7fcec39391fa87136861a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/setWith.js","hash":"c5fab5be851b87976674b1459d61b445d0d5be14","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/shuffle.js","hash":"2d110e1a05b0780b5ad4159ea18a807f7ea1e505","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/size.js","hash":"3fb55f18bf4ff0daea2c053a54a53c2674499e45","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/slice.js","hash":"ad400dcd46e81370daf0ad7c745ea1ab58df49a1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/snakeCase.js","hash":"d233254a26e81ab2a81fac31c48215d4b0b44adc","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/some.js","hash":"0ab071ab57a97cb20b860f9125f2d3f1f131f833","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortBy.js","hash":"bbfdf129dc3ce45a017989b1b825542383812b73","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedIndexBy.js","hash":"47138204798bfa0b43928340b12bbdcff317f60d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedIndex.js","hash":"04be86485281acfc53118491293043d70e3a7f2e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedIndexOf.js","hash":"70b13a8537667e2fcfeba4993992875bdf8ff864","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedLastIndex.js","hash":"d6598c35bd7fb8887fd6fdbdcb8b18befa6632ad","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedLastIndexBy.js","hash":"e53794520cd5b3ca6df2ffb977e0e6b7a5f9502c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedLastIndexOf.js","hash":"94fc33bdee1fdebb80f0b00d195eb4a13bb926f0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedUniq.js","hash":"8e361b43dd485f7aa5971e947939324cda143dd3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sortedUniqBy.js","hash":"dc651f780172d66beef630e5c50c006d9fba50d3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/split.js","hash":"e785df2f7e7764f1bf518b872bc302679b505589","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/spreadFrom.js","hash":"30b843077c519cbe18ec47e2ba9685f3a37e19e2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/startCase.js","hash":"aee3f36ca72d7fa30de64c0541e80b8ce2d729bd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/spread.js","hash":"347036d4ea05dea39b09f20275d06e8594b55ccf","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/startsWith.js","hash":"73df7824ddaf5d8dbcbfb2894234f8e5f4214497","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/string.js","hash":"3a30865f86edf4dc3baff7567a894bc6f280a654","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/stubArray.js","hash":"dd9b5ab21a9e90c5c2d33af270b15bb3a0d5a160","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/stubFalse.js","hash":"74f54c09c21a95c6e2168df204016afb1da85c08","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/stubObject.js","hash":"3c5521da1935e4b266a480fb8c2240fc2e572ea9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/stubString.js","hash":"493b8cce32dd2d2f0915c335941afd8a2030c59f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/stubTrue.js","hash":"7d69609e3844f8e596fbdd77e68be6352240ef7d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/subtract.js","hash":"f76a659ba3d7724c8e4ff6049dfb6cb17627ae41","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sum.js","hash":"430189ab2c6a23195cb8ea5111921794b9175ebb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/sumBy.js","hash":"73e4807968a99437d8168517ac9fd13ceeac5886","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/symmetricDifference.js","hash":"c1db644f2796082ce8c1445f0788558fbd4a6ce4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/symmetricDifferenceBy.js","hash":"8cee02add02dca3ecabeeb07632dc8a2a1905e23","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/symmetricDifferenceWith.js","hash":"129d57b15724b6e3dbe5a83af781cf7e9a74bffa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/tail.js","hash":"4515c52305fd72e45da2ac90042e05c2215178a2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/take.js","hash":"f9dd7f687a04982ac7aad57c525d98b1c3ffd1fe","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/takeLast.js","hash":"ac465095bcff9ff29ae8337a6d86a7658bb67196","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/takeLastWhile.js","hash":"88248a7d663078cb48e2ecfc912a33ac3b097afa","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/takeRight.js","hash":"eed0e281c0ecf99c20f5668ce9e0dd154e45ca71","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/takeRightWhile.js","hash":"b090924faefdfd4a31e25c54931f3b46f61c8203","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/takeWhile.js","hash":"072405b57aebe0b9a274eb3709ecee82226092b9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/template.js","hash":"ee7becfdb63a3d9ff3dda057f1a9caef3a814554","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/tap.js","hash":"26ebee1454a84078cc66c9acb6c4844a5dbb6223","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/templateSettings.js","hash":"b9a7dd2e08852490ea86ed35b1e7469482c2bb23","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/throttle.js","hash":"93c605d12d488e2ea9c6e6c63dbf42a538c66146","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/thru.js","hash":"e93cff48a14c89ca44d3cf7b14dd7ec275dd53ff","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/times.js","hash":"216300e9d1f02445f1af5f8c8427f949133b75a1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toArray.js","hash":"f47d0cfbc5a869b78087164b18237c5448f21851","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toFinite.js","hash":"3a63c6c9616bda4574b31fe27ef369c01cafd6c8","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toInteger.js","hash":"1a1797465c07599f7abc0f8430e46cff38d50986","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toIterator.js","hash":"961722cad23f72206b6f7d83e054c271b6a2add4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toJSON.js","hash":"7ac9ef07def4a64b062a05e942d3d110e3492ec7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toLower.js","hash":"e0fb8417621f54e54d3df261d1e873438502ed70","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toLength.js","hash":"7d567f44a37d6a32bbd5a3856d011d71a9665f5e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toNumber.js","hash":"3f6ed987b363575f5f35f6189b144ba3d907eb43","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toPairs.js","hash":"c28dd8a85dfaf032e5db9c1ae75da809d8527223","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toPairsIn.js","hash":"407a3784056e15bba952ddd7d835aff27eecc673","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toPath.js","hash":"d5cb075719634a9c336bea31d017ac20389c044d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toPlainObject.js","hash":"fa912ce1e006d37f4483a53391271acb71692997","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toSafeInteger.js","hash":"fa9edb660be230da19a83e120f48052d9ee5400b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toString.js","hash":"70b8676332f4ca060ba84f05a9bf101749fbf3f3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/toUpper.js","hash":"4312523e48af3aadf918218214ab329523305334","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/transform.js","hash":"932c1b9f13d1e4892db0ea9eefd4902f843f74b4","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/trim.js","hash":"f57135b04ed9e9db794f75b6b47b328440f06922","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/trimChars.js","hash":"28eb05ea233dc6596ed3b17a3684c7225efa82be","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/trimCharsEnd.js","hash":"c2d9c19c69c5e695022119baabadaa64ef02414c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/trimCharsStart.js","hash":"8415cb22cbb73b5fd101e360400bf6182f4d488e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/trimEnd.js","hash":"a9f669bd68b6fb04ca71e18d5f2c88805ec7d61a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/trimStart.js","hash":"50c328eddeec91b92f4eb516edcc78faaae87333","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/truncate.js","hash":"af7ab1a8bcac66a7504359d2b2625b0b4bb6445c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unapply.js","hash":"936c484aca78852157be00e7b5cb71da6f747bfd","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unary.js","hash":"22e12bb090f8f305fb360a2372d87fcd9467399d","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unescape.js","hash":"e91a70341966dbafb94a8d6fc723f23f3c3a31a7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/union.js","hash":"8e1193fe25429e87a9cd2e4a29dbd279c5decd5f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unionBy.js","hash":"139742a9be22d7eb2195e7e7182d87a912936e2f","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unionWith.js","hash":"c48bcdd3435f2cf4a650d30608cc929712943578","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/uniq.js","hash":"54b58010d1988f7a6ec28dc4a2df2205e83029ae","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/uniqBy.js","hash":"4111e9001db74d691176ba3e02af5527a4a77ed6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/uniqWith.js","hash":"af2818a584a4317e5148e52222afffa0c5fee59b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/uniqueId.js","hash":"414c720c8d11aeeca6b05cccb6deb16a0f27c943","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unnest.js","hash":"3d20beb0655413d13c2c55fdc3ac06013125edc6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unset.js","hash":"401e919462b8e66630dfc74e18796fdfa62ba6a3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unzip.js","hash":"29cd397f4baa016f6e6d1c8fc4326219106896e9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/unzipWith.js","hash":"afc880fef61b32bc409f3a9a7359d755cdddf83b","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/update.js","hash":"a7d197f6473f8a7a38c00acc709f53481c545474","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/upperCase.js","hash":"612a73d5f39d6d5a6f3c3b80ec89a6377e2e3c4a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/updateWith.js","hash":"9dd189e80bb45da43b4076a1643a45c69f8cf1a7","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/upperFirst.js","hash":"084545106fd93e9acff00c4401918ed9054d55e3","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/useWith.js","hash":"992d0f455bb3b824323580e322a9c79bd378d0c6","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/util.js","hash":"0724cd943bdab0b6bac86e7ac14e815e5aa1d9ed","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/value.js","hash":"e2d89ba1db613274b31d1d0fb1acb503644ad2e2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/valueOf.js","hash":"a2ea35c715e7b3b68051a38cbf6802b29370d975","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/values.js","hash":"97fd629e19d9740fbfc87a26f86a259bbe7ca7f9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/valuesIn.js","hash":"b7b2dd2b81111cce5adfeeb45254a5372e6c28f5","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/where.js","hash":"03fc81a616faf63ab5d5097dc6ec2580e8a32fe2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/whereEq.js","hash":"95d70e584abab7e886e137823be0c719bb67ca2e","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/without.js","hash":"2599adcc37dbd771a16ea4cc2a0c1d4513f38a9a","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/wrap.js","hash":"3631e867dfc78a67db38ffff790ee94022015a52","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/words.js","hash":"88c9e852c37f155c0dc429a401d44df09d9ca51c","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/wrapperAt.js","hash":"7d374b517c61846dba2ec2898d75181025fde1be","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/wrapperChain.js","hash":"1e4f82ce87696ad134450678d2fba27bb46cd123","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/wrapperLodash.js","hash":"ee531effe7e5e4472083f98b35497f858be33bb0","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/wrapperReverse.js","hash":"0e41311c145f305b07da8c06db6e8e7ebe5433ec","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/wrapperValue.js","hash":"51e6e912753e7d425a490e90c8205fe83dc435f1","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/xor.js","hash":"bb7e8f6d42f3c73d3358ad081b4e00796d1cc771","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/xorBy.js","hash":"476caccbc9387505d0e110f814102335c77bb511","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/xorWith.js","hash":"8d0c86364c19f9c2b17feac93b112781ff81b3c2","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/zip.js","hash":"3017d4235f2ff6d2658a88eb540246821e9dcf04","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/zipAll.js","hash":"e5e2a68f3c74299cb44da02653f7773d7f6ae554","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/zipObj.js","hash":"353dfff83f25574ff58209ae8656869ab5516e81","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/zipObject.js","hash":"8449412e15d18c596810ebfa34c5a0766f22b7e9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/zipObjectDeep.js","hash":"e27ad4a21f3e47d1a59b796566d3a4c5ffbe5ebb","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/fp/zipWith.js","hash":"641ede21898d379ba0b8b9038913fa0400a271b9","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/dest/writeContents/index.js","hash":"981812bab75fdbc202cf31bf4b00b3b45a4fd1d1","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/dest/writeContents/writeDir.js","hash":"546f9be71216f252b1c1454b6f9ccdbfdf17349e","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/dest/writeContents/writeBuffer.js","hash":"4b2bec5a2f19e0e2bf9a21d9d4b70b59a8f3f09d","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/dest/writeContents/writeStream.js","hash":"80e549abc59671129b9902a334c796f42c596adf","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/src/getContents/bufferFile.js","hash":"24c479a621114a981379f36915b9cafd5be9a989","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/src/getContents/index.js","hash":"b19730dfe4ee77a8500f54871256ee7c9a44b1f8","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/src/getContents/streamFile.js","hash":"b916a1161b12e5844d759b4543cc3a0eaf120708","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/lib/src/getContents/readDir.js","hash":"61c7ab47540cda4c7d37f2278e70bc54789de5a8","modified":1442714862000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_duplex.js","hash":"df4c4045d53e722a0a88aec73ebec447c5ca9069","modified":1460560228000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_passthrough.js","hash":"bf779af0486ff730f3946ca90a8ca93cc6c6a963","modified":1460560228000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_readable.js","hash":"fbe877a784cabfe0f67f1a194bfa164517554453","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_transform.js","hash":"1eb7ec328583b5c038773c5702d01911e1107f17","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/readable-stream/lib/_stream_writable.js","hash":"29fb611c264c00b9001364c1ce90fc64efa66ed9","modified":1460561931000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/lib/cloneBuffer.js","hash":"434a91be54da878952c3128a9b47cf6521268426","modified":1409296013000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/lib/inspectStream.js","hash":"7ee432c397a0d55d6a7ec0c60550819f016652cb","modified":1409296013000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/lib/isBuffer.js","hash":"b7711a383d0a046f171664bcedb529b62c5c3d4e","modified":1387585188000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/lib/isStream.js","hash":"fe040abc25abf6b00173ebc661da4c52960b5e69","modified":1387591573000},{"_id":"themes/gandalfr/node_modules/vinyl-fs/node_modules/vinyl/lib/isNull.js","hash":"9af85a81bcaf79ffd0ed2de0b5586991a7651ccd","modified":1409296013000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/css/baz.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/css/qux.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/js/bar.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/deep/deep.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/js/foo.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/__init__.py","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/MSVSSettings_test.py","hash":"aacdda61ae8980f93051a5a3ab4b8c694f37dfb2","modified":1447559398000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/input.py","hash":"83e2e06bd4f10c45ea40d46e9e0a1e4a43bbb6f8","modified":1484011841000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/xcodeproj_file.py","hash":"45e8d7b868e4e2e129b4f17d90aae20f93cb3d89","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/ast.cpp","hash":"ec0eeab587d5b1c89b81f0ee4f469a39ab8d13a4","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/ast.hpp","hash":"cb4ef449ca8ec481706f5c61c73521c72af56049","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/extend.cpp","hash":"72bc39f9d2260111a521ea1271b7783f30235c25","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/functions.cpp","hash":"e09518a381007d03a9e65f75944197300683ab01","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/parser.cpp","hash":"bc8a4e36d6a7316e76bb672fc7d7474195ac2852","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/other_path/lib/other-lib.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/Xcode/Specifications/gyp.xclangspec","hash":"e87a05f0207176162d6cb975da478f2301c36249","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/Xcode/Specifications/gyp.pbfilespec","hash":"65f10440af4c604b36b845354a321d2fc66cd399","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp","hash":"fc144e3bff480436092617867757d7d6c41aca18","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/analyzer.py","hash":"cd1885856940c5a3a503161f79afd402c9e2314a","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/dump_dependency_json.py","hash":"0420dac8574c685490790d5f6a9de01fbc3dfc33","modified":1447559391000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/android.py","hash":"c8e8d86fecd7470cfaccda3c44465426a8f9b9f1","modified":1465986709000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/cmake.py","hash":"899aa517a7203082c1da6603dce4210df0c8626c","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/eclipse.py","hash":"5405df01bb0dc3faf4d7d3d837fc35784dac17f1","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/gypd.py","hash":"a8f5c7f56ad2626c942f5c126d2232b0edb49100","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/gypsh.py","hash":"6fe54f95a01283d9fdb3ae3eee76ef8a7da80485","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja_test.py","hash":"b14c086d6fc7c1b2c2765ebcd022d511051139db","modified":1436533222000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs_test.py","hash":"f960d0a800fcfebebeebb21d075fb0348194b5b0","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode.py","hash":"8bc7862793809832a315d8893c5c71871d5a2bb0","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/xcode_test.py","hash":"d1f49ee0fef4135a1f4219154f398344dba664c2","modified":1385454748000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass/base.h","hash":"3a4df38efe4c269c62ce0e5e256e387aaa49e757","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass/context.h","hash":"b1893ac3d32743df8f647da86163c02871210f2b","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass/functions.h","hash":"8a70330844304fb24fda0320aae7a2ac1f66ee45","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass/version.h","hash":"144f57da1a89af2ea7e8a71bfc72f0761612c1a7","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass/version.h.in","hash":"9f839296f9015f645ffaf30f0bb8fe8782b57342","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/include/sass/values.h","hash":"2de2bd93278997c2fdd35dfe69a87e601f957f1b","modified":1481350278000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/b64/encode.h","hash":"13dcea3037d78e15117e5c20f53b43ff9c3a06f4","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/b64/cencode.h","hash":"dd08436079b47bc078cdc2a7de3e5be54c9f906c","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/support/libsass.pc.in","hash":"10c187d06cb5e2284e97cc8ec5196fe0c69d936f","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/utf8/checked.h","hash":"842f4e5f234593e733b8e8d581737db1ca0dd1cb","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/utf8/core.h","hash":"9fd44ddd80aa088b9f4ea0ac0002bd498bcfb9a1","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/src/libsass/src/utf8/unchecked.h","hash":"bb10eff03bd168a6c656130e6edfabe6abaf91ae","modified":1461407546000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-path/functions/colorBlue.scss","hash":"46c11995cc2c640160c1c086fca647216edcd604","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/include-path/lib/vars.scss","hash":"e76bb711f96cad59996f812845eca013e9d7b4f2","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/input-directory/sass/_skipped.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/input-directory/sass/one.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/input-directory/sass/two.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/sass-path/orange/colors.scss","hash":"93989730f1fe101e5d5d513232ff54f5bfd88212","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/sass-path/red/colors.scss","hash":"e76bb711f96cad59996f812845eca013e9d7b4f2","modified":1473762160000},{"_id":"themes/gandalfr/node_modules/resolve/test/node_path/x/aaa/index.js","hash":"4b616d6a3e49ec0b9f8a40b07940fc9334ae3184","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/node_path/y/ccc/index.js","hash":"a87ca222379cef10ef65b62af862d8c09faba847","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/node_path/y/bbb/index.js","hash":"329bb0d7e23f441afac2d205ce0bab1243bb1015","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/module_dir/xmodules/aaa/index.js","hash":"801190a884bb0ba8ef3457b4bcf99d45ec6fb7a7","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/node_path/x/ccc/index.js","hash":"e95339b8e0538902fa7d20e9b748ecc176027ec7","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/module_dir/ymodules/aaa/index.js","hash":"8ab905ac897199b408f3f5ac70425ba60b9d1b39","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/module_dir/zmodules/bbb/main.js","hash":"a860711dfe0ed743e04b756897cfd2138559f132","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/module_dir/zmodules/bbb/package.json","hash":"3d33fb74a6cd3a549dbae1cbe22a7c2f337f978e","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/resolve/test/resolver/quux/foo/index.js","hash":"db311f33466c97593aa59411fcfd87e8489d8f50","modified":1481608506000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/doc/wg-meetings/2015-01-30.md","hash":"1fafe6e2e28a4404db90ae6dc867199b74468ca4","modified":1460659178000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/deep/deeper/deeper.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/make.py","hash":"9eff82d853730c95d23419497d4100b1cdb9fe07","modified":1465986709000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/msvs.py","hash":"e25d8a0f51eeed63cf01946ec42115bccf4a5423","modified":1447559398000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/pylib/gyp/generator/ninja.py","hash":"fc2986bb3875fa7f6972180d406d77895a51a465","modified":1455245443000},{"_id":"themes/gandalfr/node_modules/node-gyp/gyp/tools/emacs/testdata/media.gyp.fontified","hash":"c84c7c3760afa3f4385f4c1905495efd1e15e591","modified":1358993749000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/follow/foo/bar/index.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/node-sass/test/fixtures/input-directory/sass/nested/three.scss","hash":"0343242ef12f70dce293cdcb42b860d2f1571d6b","modified":1461059709000},{"_id":"themes/gandalfr/node_modules/through2/node_modules/readable-stream/lib/internal/streams/BufferList.js","hash":"b6d4cead08f33e7ba6e71f4b815fa941169f1742","modified":1478721005000},{"_id":"themes/gandalfr/node_modules/globule/test/fixtures/expand/deep/deeper/deepest/deepest.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1363894196000},{"_id":"themes/gandalfr/node_modules/node-sass/node_modules/lodash/lodash.js","hash":"36fe0eea808a7797b560839729dbbbcb6ece0a86","modified":1477982318000},{"_id":"themes/gandalfr/node_modules/sass-graph/node_modules/lodash/lodash.js","hash":"d8e7e155b43e7edcabc46682a809836a68444b01","modified":1483223561000},{"_id":"themes/gandalfr/node_modules/caniuse-db/data.json","hash":"e6f29a085822882b093dbbe806017728b3f12dd9","modified":1486446950000},{"_id":"themes/gandalfr/node_modules/caniuse-db/fulldata-json/data-1.0.json","hash":"e6f29a085822882b093dbbe806017728b3f12dd9","modified":1486446950000},{"_id":"themes/gandalfr/node_modules/caniuse-db/fulldata-json/data-2.0.json","hash":"eab2696bbf0466ae715716f9ed709987bce1903f","modified":1486446951000},{"_id":"themes/gandalfr/node_modules/node-sass/vendor/darwin-x64-51/binding.node","hash":"e8e7e856fff39442b33bc172a793ac1df9471f5c","modified":1486538262000},{"_id":"public/atom.xml","hash":"99af9399ed94b42b1465f6f0ec2ad7cd1e853da0","modified":1493622778531},{"_id":"public/sitemap.xml","hash":"314e8c4dd1dd045f039923880c83bc8f3ce6bdc8","modified":1493622778595},{"_id":"public/tags/index.html","hash":"c547119f765ed1c2c108c4dd4cb2f2181ac7a55c","modified":1493622778609},{"_id":"public/2017/04/30/PermutationinString/index.html","hash":"c94287dfc1680a4c9d4747d948b36208573e8800","modified":1493622778609},{"_id":"public/2017/04/30/SubarraySumEqualsK/index.html","hash":"6eafe6a8f02f37ce4e7f56d5106ec0c29d48b09f","modified":1493622778609},{"_id":"public/2017/04/29/NextPermutation/index.html","hash":"7aeea166fe08a1efbef2d2c5a72eebfcc52610b2","modified":1493622778609},{"_id":"public/2017/04/28/FindtheClosestPalindrome/index.html","hash":"7cc182ff959cde79f0c88ccc04424f8531f3ad11","modified":1493622778609},{"_id":"public/2017/04/27/RestoreIPAddresses/index.html","hash":"1bbb409f88bf9ea470a5b835eb860b75e35bbbf9","modified":1493622778609},{"_id":"public/2017/04/26/SearchforaRange/index.html","hash":"e89d9af6b5211835d984f2c0c88a1db5b19c58b6","modified":1493622778609},{"_id":"public/2017/04/25/RemoveKDigits/index.html","hash":"0abf02079833583de68f0bdeee95b2270ab33c7e","modified":1493622778609},{"_id":"public/2017/04/24/KthSmallestElementinaSortedMatrix/index.html","hash":"bda282e025912a7227301fb6629e503d1d214437","modified":1493622778609},{"_id":"public/2017/04/23/LongestLineofConsecutiveOneinMatrix/index.html","hash":"0675a75846950726cc055f50c2648e83f5678c07","modified":1493622778609},{"_id":"public/2017/04/22/RangeSumQuery-Mutable/index.html","hash":"403f57a0c506475f73ef5eb01e25e31d3c18b7f2","modified":1493622778610},{"_id":"public/2017/04/21/PermutationsII/index.html","hash":"9e786a2821ff4158ea7a43de598ad02ece2cb71a","modified":1493622778610},{"_id":"public/2017/04/20/JumpGame/index.html","hash":"b872b4a9eb081edbcb7b4e2830eb28431fda7ae4","modified":1493622778610},{"_id":"public/2017/04/19/HouseRobberII/index.html","hash":"aa5bf72d57031fef548e025874eab22e7c264fef","modified":1493622778610},{"_id":"public/2017/04/18/FractiontoRecurringDecimal/index.html","hash":"b004914004522eaeed65bdaaae8230d6a68d55aa","modified":1493622778610},{"_id":"public/2017/04/17/WaterandJugProblem/index.html","hash":"144dc420e5a7ce9e0c08860372f354d046af3cf0","modified":1493622778610},{"_id":"public/2017/04/16/OptimalDivision/index.html","hash":"8c37724b4ecc62029e283ec0622f57d1f0e4de84","modified":1493622778610},{"_id":"public/2017/04/15/WiggleSortII/index.html","hash":"e6115d1435604fe8315f1381e643dda83cbcc960","modified":1493622778610},{"_id":"public/2017/04/14/CourseScheduleII/index.html","hash":"7dc6dfe0a822131b66986745d3e686106f4609c6","modified":1493622778610},{"_id":"public/2017/04/13/SpiralMatrix/index.html","hash":"c995192d8c563fcfdc52bc2efff6014da7784c5e","modified":1493622778610},{"_id":"public/2017/04/12/RangeSumQuery2D-Immutable/index.html","hash":"b9c4d80d1a12dd3a6d52ab360f673f99c96daa8c","modified":1493622778610},{"_id":"public/2017/04/11/CoinChangeII/index.html","hash":"32dbe0e3c5163e5172ea17e7318dcfaed42f3f71","modified":1493622778610},{"_id":"public/2017/04/10/NextGreaterElementIII/index.html","hash":"de64abc863f48500b07bd04be9f95849d1ebe6e1","modified":1493622778610},{"_id":"public/2017/04/09/BrickWall/index.html","hash":"e14c8fe8d14c76efc4fafa799f6874c5fd50ef02","modified":1493622778610},{"_id":"public/2017/04/08/DiligentRobots/index.html","hash":"4fcf770c2e3d784dca1932ad72f8b59de4aac8de","modified":1493622778610},{"_id":"public/2017/04/08/QueenAttack/index.html","hash":"33707b4c26a013aef35706c138ce967d6314c44e","modified":1493622778610},{"_id":"public/2017/04/07/LongestUncommonSubsequenceII/index.html","hash":"550f93cb8a43f41109823d227a221296ac20308b","modified":1493622778611},{"_id":"public/2017/04/06/LongestUncommonSubsequenceI/index.html","hash":"7bcdbdc84c4e3870a24bf3f81a9e200e57cbf38f","modified":1493622778611},{"_id":"public/2017/04/05/IncreasingTripletSubsequence/index.html","hash":"57f570efe91b810bceb094612b3d733af3a9181e","modified":1493622778611},{"_id":"public/2017/04/03/FriendCircles/index.html","hash":"b330004f4d0ab2834b68fd5acf12c7dc1cef200f","modified":1493622778611},{"_id":"public/2017/04/02/ComplexNumberMultiplication/index.html","hash":"d16629f58966cd530cce2aa33ecca3f842018276","modified":1493622778611},{"_id":"public/2017/04/01/ConvertBSTtoGreaterTree/index.html","hash":"1184cb42d0940e9d1cc5a75340a5e9ff6e016b4e","modified":1493622778611},{"_id":"public/2017/03/31/FindKPairswithSmallestSums/index.html","hash":"a07e543e6b6a0a36288fd9553744eaadf0312e56","modified":1493622778611},{"_id":"public/2017/03/30/MergeIntervals/index.html","hash":"8fa401f567a2d6e1d36de4ef0c37f1ab0f4fb6db","modified":1493622778611},{"_id":"public/2017/03/29/LongestSubstringwithAtLeastKRepeatingCharacters/index.html","hash":"8569f587e7985365b7305bdd3bedbf4a9d760fa1","modified":1493622778611},{"_id":"public/2017/03/28/BulbSwitcher/index.html","hash":"0d15a739b119e09db8bac7170fe3f095bd27073f","modified":1493622778611},{"_id":"public/2017/03/27/ContainsDuplicateIII/index.html","hash":"a8109d9f0bb0cb7fd11840cf67670215a739da7d","modified":1493622778611},{"_id":"public/2017/03/26/EvaluateReversePolishNotation/index.html","hash":"44c6c2a884f8f0cae4444f74fea48dd66892761a","modified":1493622778611},{"_id":"public/2017/03/24/CountNumberswithUniqueDigits/index.html","hash":"c089bff7ed2702dcb34481a81d1fdfaf79390343","modified":1493622778611},{"_id":"public/2017/03/23/PowerofFour/index.html","hash":"968e102e87b75b88129b3e656eade4c3c057fc2b","modified":1493622778611},{"_id":"public/2017/03/22/LongestIncreasingSubsequence/index.html","hash":"8e334943b840ba16e2e0a83dda1be3c2bfc22e33","modified":1493622778611},{"_id":"public/2017/03/20/DiameterofBinaryTree/index.html","hash":"a5c8aa0c4effadc9e23fd41c9e2ccf22c03b78e0","modified":1493622778611},{"_id":"public/2017/03/16/ReverseStringII/index.html","hash":"367f66cfd9f433ea3009dfad54d0bc0900d50022","modified":1493622778611},{"_id":"public/2017/03/14/MinimumTimeDifference/index.html","hash":"5244acd671a9901e0969a30cd682eb22704bfe92","modified":1493622778611},{"_id":"public/2017/03/13/CanIWin/index.html","hash":"4982632236a9b0a7dc9711794c4be3618642a5a7","modified":1493622778611},{"_id":"public/2017/03/12/SurroundedRegions/index.html","hash":"9f277cceec756286861432bb0faf1d61b0f61707","modified":1493622778611},{"_id":"public/2017/03/11/IntegerBreak/index.html","hash":"2e2a43223e7de1845b99b1de808bab60a81c3f1a","modified":1493622778611},{"_id":"public/2017/03/09/SingleElementinaSortedArray/index.html","hash":"dee5b6f830cb291436f0e26e44ee80dae91cadf3","modified":1493622778611},{"_id":"public/2017/03/08/ContinuousSubarraySum/index.html","hash":"4e03e88fea76754d4b524ef1dd28aa1ccc43642e","modified":1493622778611},{"_id":"public/2017/03/06/LonelyPixelII/index.html","hash":"f48b337ab63afb79781af0a48ca1e1d7c50ada65","modified":1493622778611},{"_id":"public/2017/03/05/K-diffPairsinanArray/index.html","hash":"2f6e51b09e394ef980f4213ce430950f33f9ce8d","modified":1493622778611},{"_id":"public/2017/03/04/EncodeandDecodeTinyURL/index.html","hash":"d63b5c0f646f9eac28321f8e79027e41e883075b","modified":1493622778612},{"_id":"public/2017/03/03/MinimumAbsoluteDifferenceinBST/index.html","hash":"c79546cc1e70ec085bcbbe08d29b4e12461f755e","modified":1493622778612},{"_id":"public/2017/03/01/LongestWordinDictionarythroughDeleting/index.html","hash":"1e2d274ad598a9c57886c999dc5e77fc0e9639b9","modified":1493622778612},{"_id":"public/2017/02/28/Minesweeper/index.html","hash":"8404e5face8f6dd394c83f069b49ce5469a546d2","modified":1493622778612},{"_id":"public/2017/02/27/NextGreaterElementII/index.html","hash":"f00b16563dcde51a0acb3b75e79402922c1c6650","modified":1493622778612},{"_id":"public/2017/02/26/ContainerWithMostWater/index.html","hash":"0b9ad158561b39139d4ee590587146a03e6470d9","modified":1493622778612},{"_id":"public/2017/02/25/DetectCapital/index.html","hash":"d34bf612416c3f44618e969f86dbb92825f46d8d","modified":1493622778612},{"_id":"public/2017/02/24/BeautifulArrangement/index.html","hash":"f54a1fb9d70cb5a9e58e5b839433ac1c2e7765ff","modified":1493622778612},{"_id":"public/2017/02/23/4SumII/index.html","hash":"49076992ec6cccd4eb1a52f47de58bd52f48303f","modified":1493622778612},{"_id":"public/2017/02/22/LongestPalindromicSubsequence/index.html","hash":"fa4fe828c9c6280a175431ef2b46e59a3ff16bbd","modified":1493622778612},{"_id":"public/2017/02/21/ContiguousArray/index.html","hash":"e155eaec11b3b636dfc3b1c67b9f4b0c76b52283","modified":1493622778612},{"_id":"public/2017/02/20/KeyboardRow/index.html","hash":"b5f0aa25baeae26a09921a6909dbf098cf63c763","modified":1493622778612},{"_id":"public/2017/02/19/MaxConsecutiveOnes/index.html","hash":"3939c4f562c8cce2ac0681a319cb0088de753419","modified":1493622778612},{"_id":"public/2017/02/14/FontSize/index.html","hash":"a615d995e5da52f02f0105b6d493707d86ce6b4e","modified":1493622778612},{"_id":"public/2017/02/13/Permutations/index.html","hash":"141a4765a707e766bfb058ea755edfbb564baa6f","modified":1493622778612},{"_id":"public/2017/02/12/FindLargestElementinEachRow/index.html","hash":"125e1dc67012696ea4e540be820e878a089cba03","modified":1493622778612},{"_id":"public/2017/02/12/FindLeftMostElement/index.html","hash":"1d17d57f9ceec2b4e0a481256a1c807c59459094","modified":1493622778612},{"_id":"public/2017/02/11/Base7/index.html","hash":"84f64bbc60a4bca0b094834310d77d93a7b1cc21","modified":1493622778612},{"_id":"public/2017/02/10/DiagonalTraverse/index.html","hash":"65ae05006c5f2904bb6338424fcd761d09d70284","modified":1493622778612},{"_id":"public/2017/02/09/MaximumXORofTwoNumbersinanArray/index.html","hash":"24f7c8f48e06c8144895889805e9c01772375e04","modified":1493622778612},{"_id":"public/2017/02/08/FindtheDuplicateNumber/index.html","hash":"37155bbea4f97cfeaef9af4bb51f26342bcfcc33","modified":1493622778612},{"_id":"public/2017/02/07/MostFrequentSubtreeSum/index.html","hash":"309410cd7a53bbe85ce9bcace99ebd925f447d85","modified":1493622778612},{"_id":"public/2017/02/06/BestTimetoBuyandSellStockwithCooldown/index.html","hash":"11f8078ca0e49bcee5dc11d14924458c9ea998e9","modified":1493622778612},{"_id":"public/2017/02/05/NextGreaterElementI/index.html","hash":"dabe4371730994aaeafd4b87f69556d9648f3e86","modified":1493622778612},{"_id":"public/2017/02/05/RelativeRanks/index.html","hash":"a0250c17e9a11a7991db8039e9625f6893ab40de","modified":1493622778612},{"_id":"public/2017/02/04/MatchstickstoSquare/index.html","hash":"7606f1ab7e3f5ad7dda23a635cf98e0fed15115c","modified":1493622778612},{"_id":"public/2017/02/03/PredicttheWinner/index.html","hash":"247052880c862be63fb99d1ddad8ae4950396553","modified":1493622778612},{"_id":"public/2017/02/02/TeemoAttacking/index.html","hash":"f2bdb2af85fe4078282259e6ad3d01c1e0e35194","modified":1493622778613},{"_id":"public/2017/02/01/FindModeinBinarySearchTree/index.html","hash":"2916607ee2d85e9bb0a7d1dc22bfa74f8871cfc4","modified":1493622778613},{"_id":"public/2017/01/30/UniqueSubstringsinWraparoundString/index.html","hash":"cf70cd29e1f88f6da4d41e26217d112a8957ca5b","modified":1493622778613},{"_id":"public/2017/01/29/IncreasingSubsequences/index.html","hash":"0a4d9a249a3012cb4fd68a85d0079fadb0b5e7ce","modified":1493622778613},{"_id":"public/2017/01/28/TargetSum/index.html","hash":"439e035b0db4ad8e43da0e31e525a4e30aec169c","modified":1493622778613},{"_id":"public/2017/01/27/DecodeString/index.html","hash":"af4304ccea4b447398d091d441593de7c628c0bf","modified":1493622778613},{"_id":"public/2017/01/26/MinimumMovestoEqualArrayElementsII/index.html","hash":"23239ca9f9cea041e47bde3a715632f0ea3ba526","modified":1493622778613},{"_id":"public/2017/01/25/ValidPerfectSquare/index.html","hash":"35c9a968e74361873449c575de0b06f1079d7869","modified":1493622778613},{"_id":"public/2017/01/24/NumberComplement/index.html","hash":"3799aa19119f6893d743c8b62e612ad68163e7fb","modified":1493622778613},{"_id":"public/2017/01/22/IntegerReplacement/index.html","hash":"6bcddb7a6118d6f940c5c1ce31a5e9847170f058","modified":1493622778613},{"_id":"public/2017/01/21/HouseRobberIII/index.html","hash":"c26d53eca016a84a1201f12991fe6e2a66ffd135","modified":1493622778613},{"_id":"public/2017/01/20/OnesandZeroes/index.html","hash":"9962aeda3c89bf2e631294a99d63f1fc4ce701a7","modified":1493622778613},{"_id":"public/2017/01/18/MaximumProductofWordLengths/index.html","hash":"66b0fe08bc9d51312731ab1e7a638ea4a5ca78e7","modified":1493622778613},{"_id":"public/2017/01/17/LicenseKeyFormatting/index.html","hash":"9acfaafe7f0ba2f9405fa9cee8a45fb0f757fb13","modified":1493622778613},{"_id":"public/2017/01/16/PerfectSquares/index.html","hash":"4666f9320462125e6af1f2f2974dfcb85644cf6f","modified":1493622778613},{"_id":"public/2017/01/15/MaxConsecutiveOnesII/index.html","hash":"a18b66428f112c76206c6b4aa63ffe5d62652939","modified":1493622778613},{"_id":"public/2017/01/14/CoinChange/index.html","hash":"166dbca2de51336a9cc6aa3449a4914108bc58aa","modified":1493622778613},{"_id":"public/2017/01/13/LargestDivisibleSubset/index.html","hash":"355d2ce592c2e83c3f664b941714fd3519de8305","modified":1493622778613},{"_id":"public/2017/01/12/RansomNote/index.html","hash":"020b7b7d512b6173c6f11a3f79cc4c30af84b2ea","modified":1493622778613},{"_id":"public/2017/01/11/CombinationSumIV/index.html","hash":"d8d4b14ab05e9594e73bb2ec3dcdbc673450a1b3","modified":1493622778613},{"_id":"public/2017/01/10/GroupAnagrams/index.html","hash":"0dd797a6d6ba4dbaacb1e85734ab21b07a654eea","modified":1493622778614},{"_id":"public/2017/01/09/LongestIncreasingPathinaMatrix/index.html","hash":"8bf7d3e11bbe1142c94397ac2064dc3dcb70fa6a","modified":1493622778614},{"_id":"public/2017/01/08/IntersectionofTwoArraysII/index.html","hash":"ab8bd6e39a0f90cfa63f5fa7f95fefb1c2c6baba","modified":1493622778614},{"_id":"public/2017/01/07/PathSumIII/index.html","hash":"b0c333bf612384c9a209cc62ede5b0275311f86c","modified":1493622778614},{"_id":"public/2017/01/06/PartitionEqualSubsetSum/index.html","hash":"df2ffa7882049257e9779f7b5f5e6a740573da09","modified":1493622778614},{"_id":"public/2017/01/04/Heaters/index.html","hash":"456cdef673474a64193e069d14cf123cd8159721","modified":1493622778614},{"_id":"public/2017/01/03/132Pattern/index.html","hash":"8d265c7f1793ed4ae1e9c4a5a1c6634520fe2c9c","modified":1493622778614},{"_id":"public/2017/01/02/TotalHammingDistance/index.html","hash":"bf24905b09248797ae652044e50d9a71569e2ba2","modified":1493622778614},{"_id":"public/2017/01/01/NewStart/index.html","hash":"0ccae0f8d09c061d5399864e47347b81d548bc89","modified":1493622778614},{"_id":"public/archives/2017/01/index.html","hash":"a9cbe4e23c18f4468d278bf4ef029756263f66a8","modified":1493622778614},{"_id":"public/archives/2017/02/index.html","hash":"26acaa6bb201497649d4b8e959f459d40d3716cb","modified":1493622778614},{"_id":"public/archives/2017/03/index.html","hash":"69a89a40fa4ea1006df573a649d4aaf92cd2f360","modified":1493622778614},{"_id":"public/archives/2017/04/index.html","hash":"a28191967d2810d2f8617babd883680a5e69f829","modified":1493622778614},{"_id":"public/archives/2017/05/index.html","hash":"13f17ec38904e2741178fff6044053bc95b4f2be","modified":1493622778614},{"_id":"public/index.html","hash":"9f68291d88d18a0c8d999b34b0570dcde4886afa","modified":1493622778614},{"_id":"public/page/2/index.html","hash":"a39d3e9738150b855698f84421c9b173a21aa6fe","modified":1493622778614},{"_id":"public/page/3/index.html","hash":"2a39722e92c7708feaa97c2086f1fda415abebc0","modified":1493622778614},{"_id":"public/page/4/index.html","hash":"2e8728ce234dd22a4c6619ef2d125d06e48a8fcb","modified":1493622778614},{"_id":"public/page/5/index.html","hash":"f1390dd08fdc6a325ef032782c8f2c78400230cb","modified":1493622778614},{"_id":"public/page/6/index.html","hash":"a9b93a2171909609a31e53a3e59b756afb734eeb","modified":1493622778614},{"_id":"public/page/7/index.html","hash":"5083d2a8a4bc020bc27f1e43de1b85502d0cc597","modified":1493622778614},{"_id":"public/page/8/index.html","hash":"c909f9e8eb5d50382dcf825ca9d5f2fb6db5f232","modified":1493622778614},{"_id":"public/page/9/index.html","hash":"05881924f1e2a9e5f0bbdaae255dbe0f62eb0718","modified":1493622778614},{"_id":"public/page/10/index.html","hash":"18a99b72d5c7f79967ecbde6e4e91edab64c5d19","modified":1493622778614},{"_id":"public/page/11/index.html","hash":"c1f1949085f0c49bb6d9d884e8f85c0424db1948","modified":1493622778614},{"_id":"public/page/12/index.html","hash":"6e6fc80d563cacfc480c6fa97f6d51b89f14ebed","modified":1493622778614},{"_id":"public/page/13/index.html","hash":"7afaff1509303c73b40824542a0604c40a3cc642","modified":1493622778614},{"_id":"public/page/14/index.html","hash":"58202e5e6a6c12b7840db2ac169e746588ef65a5","modified":1493622778614},{"_id":"public/page/15/index.html","hash":"2730a3af7d6c352aae9795897e9ebe99b1b32242","modified":1493622778614},{"_id":"public/page/16/index.html","hash":"76a7830c53b122d20b125626bdcad5796ad0eb3e","modified":1493622778614},{"_id":"public/page/17/index.html","hash":"5884ddb0142b143eb0750d666111f1cffa247143","modified":1493622778614},{"_id":"public/page/18/index.html","hash":"6912c092528a6a8ecd06933dcd1f221c081fd80a","modified":1493622778615},{"_id":"public/page/19/index.html","hash":"3a55e71c6f777c52893af0da3ad1ee9aec82505d","modified":1493622778615},{"_id":"public/page/20/index.html","hash":"5eda469ccbcd02ed74cbdadd32e91d12654714ce","modified":1493622778616},{"_id":"public/page/21/index.html","hash":"c3cca2e8d1af1e904112b4fae4b4a5854db39171","modified":1493622778616},{"_id":"public/page/22/index.html","hash":"8a7cc9fc8943304e952cb76930e59ff1d563c3a2","modified":1493622778616},{"_id":"public/page/23/index.html","hash":"d9d67e74ade967a684dc5b717a2e1e201cd2ae10","modified":1493622778616},{"_id":"public/tags/Depth-first-Search/index.html","hash":"343022444a802ec24e0470596103ffdd9169cdbc","modified":1493622778616},{"_id":"public/tags/Breadth-first-Search/index.html","hash":"4770194129e199929041eec7c3681f4f0e32d531","modified":1493622778616},{"_id":"public/tags/Stack/index.html","hash":"9d5f79ab7c2a85f27ca57e9e47e24b9c2c348c3c","modified":1493622778616},{"_id":"public/tags/Array/index.html","hash":"1444b733f735e32f878eedaee9254e952ed67e05","modified":1493622778616},{"_id":"public/tags/Trie/index.html","hash":"07b5e79a901c4048b1cfc89415b9e8db2ea6c201","modified":1493622778616},{"_id":"public/tags/Hash-Table/index.html","hash":"aa56792d134d6444c2f1d668e7cdbb45a39ec777","modified":1493622778616},{"_id":"public/tags/Math/index.html","hash":"1c107f810e899598f4abd2dcb765626e3b20a25e","modified":1493622778616},{"_id":"public/tags/Binary-Search/index.html","hash":"1613d68aed6a0a3fd2353b621ad388d96cc74213","modified":1493622778616},{"_id":"public/tags/Backtracking/index.html","hash":"f4ce1699a505a7088023a971579c33130a6a5d4a","modified":1493622778616},{"_id":"public/tags/Simulation/index.html","hash":"55552cd90864e6a276f07ae07a6770e142ec5a6b","modified":1493622778616},{"_id":"public/tags/Dynamic-Programming/index.html","hash":"872e33184ecc5c87a65a427417649b40baec7c12","modified":1493622778616},{"_id":"public/tags/Brainteaser/index.html","hash":"15a7be9da08abad0c01c2820581c674a8d73b462","modified":1493622778616},{"_id":"public/tags/Minimax/index.html","hash":"733f22d01f1fc06f8033cde074a62d8e94b2ec51","modified":1493622778616},{"_id":"public/tags/Two-Pointers/index.html","hash":"8644910c57942c8a34206d4d6ccd7bd828a1638e","modified":1493622778616},{"_id":"public/tags/String/index.html","hash":"4e61112acf4e8dd6d3c5817648580d878e33c62c","modified":1493622778616},{"_id":"public/tags/Tree/index.html","hash":"e4d8e62a68b880f515f9c0f6a17e5a4cfaedf42b","modified":1493622778616},{"_id":"public/tags/Binary-Search-Tree/index.html","hash":"0e1a80272e50278afbccc222a9b033ac190bd1f3","modified":1493622778616},{"_id":"public/tags/Graph/index.html","hash":"ad6ac7d1b1a7c9f64ea81b926fe0c6cbaa471d25","modified":1493622778617},{"_id":"public/tags/Topological-Sort/index.html","hash":"7092f6b50337be45f2a80298ed00aa6db4274a7e","modified":1493622778617},{"_id":"public/tags/Heap/index.html","hash":"c235ecf412295828fca24edd3b091123faabb44c","modified":1493622778617},{"_id":"public/tags/Sort/index.html","hash":"019e239f860d4a43ebb27f20935e090227c9aafc","modified":1493622778617},{"_id":"public/tags/Bitmap/index.html","hash":"c75d4f197f39c3dbfd316aaf3d7a89182575853f","modified":1493622778617},{"_id":"public/tags/Greedy/index.html","hash":"60246e092717b9e2f6fbf395c2c44058b0ccc0be","modified":1493622778617},{"_id":"public/tags/Memoization/index.html","hash":"56b662b17211f01c4bc35c052a8a5791b1e344b8","modified":1493622778617},{"_id":"public/tags/Topological-sort/index.html","hash":"56b662b17211f01c4bc35c052a8a5791b1e344b8","modified":1493622778617},{"_id":"public/tags/Bit-Manipulation/index.html","hash":"c83210b73faca9fe5478fd97ac4aa17648c1cb79","modified":1493622778617},{"_id":"public/tags/Description/index.html","hash":"491550a25127756190ec284c7912efd31e03a099","modified":1493622778617},{"_id":"public/tags/Segment-Tree/index.html","hash":"fde9d2a796e7d8493db027de02ac43d333f7f408","modified":1493622778617},{"_id":"public/tags/Binary-Indexed-Tree/index.html","hash":"fde9d2a796e7d8493db027de02ac43d333f7f408","modified":1493622778617},{"_id":"public/tags/Union-Find/index.html","hash":"fe1f0479693193110f890eb2bdbd877fa3be0aae","modified":1493622778617},{"_id":"public/2017/05/01/MaximumVacationDays/index.html","hash":"451d3694d4b8b8bf269cab454cb68ca10305a82b","modified":1493622778617},{"_id":"public/2017/04/04/WordSearchII/index.html","hash":"6d98f07e4ff22b64f2623dd7d1dc13661007ed5e","modified":1493622778617},{"_id":"public/2017/03/21/01Matrix/index.html","hash":"5bee89e395dc692b379d10853f92f06cfd1de295","modified":1493622778617},{"_id":"public/2017/02/15/403Forbidden/index.html","hash":"6d0b60168068aaf318fd0144140fb8eec5d8c67a","modified":1493622778617},{"_id":"public/2017/01/05/BattleshipsinaBoard/index.html","hash":"91d1dc9fc1ee106950fd0b19839e2c149f393415","modified":1493622778617},{"_id":"public/archives/index.html","hash":"68b9112054e25f9c16f8f3c450a1a18e93a08451","modified":1493622778617},{"_id":"public/archives/2017/index.html","hash":"b74a22a3c765d47e0fd7e45809f6d227abbb3871","modified":1493622778617},{"_id":"public/favicon.ico","hash":"b8eb4ec54a6ce48e939cfdcb775493d3d0ab58ef","modified":1493622778625},{"_id":"public/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1493622778625},{"_id":"public/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1493622778625},{"_id":"public/css/gandalfr.css","hash":"ce037730191d183a6ff77291a1e09d8f093d31f8","modified":1493622778638},{"_id":"public/scss/gandalfr.css","hash":"d1d52e1cff1f7c9f5a8879dc8006a5eff63f4e44","modified":1493622778654}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-01-11T05:42:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-11 13:42:42\ntype: \"tags\"\n---\n","updated":"2017-01-11T05:43:02.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj25sfpvb0000x2f4sg5h2nsu","content":"","excerpt":"","more":""}],"Post":[{"title":"01 Matrix","date":"2017-03-21T02:44:42.000Z","_content":"\n> Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\n> The distance between two adjacent cells is 1.\n>\n> Example 1:\n>\n> ```\nInput:\n0 0 0\n0 1 0\n0 0 0\nOutput:\n0 0 0\n0 1 0\n0 0 0\n```\n> Example 2:\n>\n> ```\nInput:\n0 0 0\n0 1 0\n1 1 1\nOutput:\n0 0 0\n0 1 0\n1 2 1\n```\n> Note:\n>  + The number of elements of the given matrix will not exceed 10,000.\n>  + There are at least one 0 in the given matrix.\n>  + The cells are adjacent in only four directions: up, down, left and right.\n\n<!--more-->\n\nThis is Leetcode No.542. It is a common problem of Searching. I think it is better to use breadth-first search rather than depth-first search.\n\nHere is my first code:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > updateMatrix(vector<vector<int> >& matrix) {\n            vector<vector<int> > res;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                vector<int> level(matrix[0].size());\n                res.push_back(level);\n            }\n\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    res[idx][idy] = check(matrix, idx, idy, 0);\n                }\n            }\n\n            return res;\n        }\n\n        int check(vector<vector<int> > matrix, int idx, int idy, int current) {\n            if (idx < 0 || idx >= (int)matrix.size()) {\n                return INT_MAX;\n            }\n            if (idy < 0 || idy >= (int)matrix[0].size()) {\n                return INT_MAX;\n            }\n\n            if (matrix[idx][idy] == 0) {\n                return current;\n            } else {\n                return min(\n                        min(check(matrix, idx - 1, idy, current + 1), check(matrix, idx, idy - 1, current + 1)),\n                        min(check(matrix, idx + 1, idy, current + 1), check(matrix, idx, idy + 1, current + 1))\n                        );\n            }\n\n        }\n};\n```\n\nEasy to understand, but there are some problems, for example the visited cell will be visited twice. So I add the visited array to mark the visited cells.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > updateMatrix(vector<vector<int> >& matrix) {\n            vector<vector<int> > res;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                vector<int> level(matrix[0].size());\n                res.push_back(level);\n            }\n\n            vector<vector<int> > visited;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                vector<int> level(matrix[0].size());\n                visited.push_back(level);\n            }\n\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    clearVisited(visited);\n                    res[idx][idy] = check(matrix, idx, idy, 0L, visited);\n                    cout << idx << ':' << idy << '=' << res[idx][idy] << endl;\n                }\n            }\n            return res;\n        }\n\n        void clearVisited(vector<vector<int> > &visited) {\n            for (int idx = 0; idx < (int)visited.size(); idx++) {\n                for (int idy = 0; idy < (int)visited[0].size(); idy++) {\n                    visited[idx][idy] = 0;\n                }\n            }\n        }\n\n        int check(vector<vector<int> > matrix, int idx, int idy, long current, vector<vector<int> > &visited) {\n            if (idx < 0 || idx >= (int)matrix.size()) {\n                return INT_MAX;\n            }\n            if (idy < 0 || idy >= (int)matrix[0].size()) {\n                return INT_MAX;\n            }\n            if (visited[idx][idy] == 1) {\n                return INT_MAX;\n            } else {\n                visited[idx][idy] = 1;\n            }\n\n            if (matrix[idx][idy] == 0) {\n                return current;\n            } else {\n                long res = min(\n                        min(check(matrix, idx - 1, idy, current + 1, visited),\n                            check(matrix, idx, idy - 1, current + 1, visited)),\n                        min(check(matrix, idx + 1, idy, current + 1, visited),\n                            check(matrix, idx, idy + 1, current + 1, visited))\n                        );\n                visited[idx][idy] = 0;\n                return res;\n            }\n        }\n};\n```\n\nBut it get a TLE, because the same cell will be counted more than once. So I have to figure out some more solutions.\n\nYou may think about a DP or memerized method based on BFS or DFS.\n\nHowever, you can find another better way to solve the problem.\n\n0. mark all cells expect 0 to INT_MAX.\n1. find all the 0 cell.\n2. find all neighbours around this 0 cell and mark them 1.\n3. then find all the 1 cell and do No.1 step.\n\nThe time complex is O(n).\n\nAnd the solution is like these:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > updateMatrix(vector<vector<int> >& matrix) {\n            int remain = 0;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    if (matrix[idx][idy] != 0) {\n                        matrix[idx][idy] = INT_MAX;\n                        remain++;\n                    }\n                }\n            }\n            int flag = 1;\n            do {\n                for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                    for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                        if (matrix[idx][idy] == flag - 1) {\n                            if (idx - 1 >= 0 && matrix[idx - 1][idy] == INT_MAX) {\n                                matrix[idx - 1][idy] = flag;\n                                remain--;\n                            }\n                            if (idx + 1 < (int)matrix.size() && matrix[idx + 1][idy] == INT_MAX) {\n                                matrix[idx + 1][idy] = flag;\n                                remain--;\n                            }\n                            if (idy - 1 >= 0 && matrix[idx][idy - 1] == INT_MAX) {\n                                matrix[idx][idy - 1] = flag;\n                                remain--;\n                            }\n                            if (idy + 1 < (int)matrix[0].size() && matrix[idx][idy + 1] == INT_MAX) {\n                                matrix[idx][idy + 1] = flag;\n                                remain--;\n                            }\n                        }\n                    }\n                }\n                flag++;\n            } while (remain > 0);\n\n            return matrix;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/01Matrix.md","raw":"---\ntitle: 01 Matrix\ndate: 2017-03-21 10:44:42\ntags:\n    - Depth-first Search\n    - Breadth-first Search\n---\n\n> Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\n> The distance between two adjacent cells is 1.\n>\n> Example 1:\n>\n> ```\nInput:\n0 0 0\n0 1 0\n0 0 0\nOutput:\n0 0 0\n0 1 0\n0 0 0\n```\n> Example 2:\n>\n> ```\nInput:\n0 0 0\n0 1 0\n1 1 1\nOutput:\n0 0 0\n0 1 0\n1 2 1\n```\n> Note:\n>  + The number of elements of the given matrix will not exceed 10,000.\n>  + There are at least one 0 in the given matrix.\n>  + The cells are adjacent in only four directions: up, down, left and right.\n\n<!--more-->\n\nThis is Leetcode No.542. It is a common problem of Searching. I think it is better to use breadth-first search rather than depth-first search.\n\nHere is my first code:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > updateMatrix(vector<vector<int> >& matrix) {\n            vector<vector<int> > res;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                vector<int> level(matrix[0].size());\n                res.push_back(level);\n            }\n\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    res[idx][idy] = check(matrix, idx, idy, 0);\n                }\n            }\n\n            return res;\n        }\n\n        int check(vector<vector<int> > matrix, int idx, int idy, int current) {\n            if (idx < 0 || idx >= (int)matrix.size()) {\n                return INT_MAX;\n            }\n            if (idy < 0 || idy >= (int)matrix[0].size()) {\n                return INT_MAX;\n            }\n\n            if (matrix[idx][idy] == 0) {\n                return current;\n            } else {\n                return min(\n                        min(check(matrix, idx - 1, idy, current + 1), check(matrix, idx, idy - 1, current + 1)),\n                        min(check(matrix, idx + 1, idy, current + 1), check(matrix, idx, idy + 1, current + 1))\n                        );\n            }\n\n        }\n};\n```\n\nEasy to understand, but there are some problems, for example the visited cell will be visited twice. So I add the visited array to mark the visited cells.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > updateMatrix(vector<vector<int> >& matrix) {\n            vector<vector<int> > res;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                vector<int> level(matrix[0].size());\n                res.push_back(level);\n            }\n\n            vector<vector<int> > visited;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                vector<int> level(matrix[0].size());\n                visited.push_back(level);\n            }\n\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    clearVisited(visited);\n                    res[idx][idy] = check(matrix, idx, idy, 0L, visited);\n                    cout << idx << ':' << idy << '=' << res[idx][idy] << endl;\n                }\n            }\n            return res;\n        }\n\n        void clearVisited(vector<vector<int> > &visited) {\n            for (int idx = 0; idx < (int)visited.size(); idx++) {\n                for (int idy = 0; idy < (int)visited[0].size(); idy++) {\n                    visited[idx][idy] = 0;\n                }\n            }\n        }\n\n        int check(vector<vector<int> > matrix, int idx, int idy, long current, vector<vector<int> > &visited) {\n            if (idx < 0 || idx >= (int)matrix.size()) {\n                return INT_MAX;\n            }\n            if (idy < 0 || idy >= (int)matrix[0].size()) {\n                return INT_MAX;\n            }\n            if (visited[idx][idy] == 1) {\n                return INT_MAX;\n            } else {\n                visited[idx][idy] = 1;\n            }\n\n            if (matrix[idx][idy] == 0) {\n                return current;\n            } else {\n                long res = min(\n                        min(check(matrix, idx - 1, idy, current + 1, visited),\n                            check(matrix, idx, idy - 1, current + 1, visited)),\n                        min(check(matrix, idx + 1, idy, current + 1, visited),\n                            check(matrix, idx, idy + 1, current + 1, visited))\n                        );\n                visited[idx][idy] = 0;\n                return res;\n            }\n        }\n};\n```\n\nBut it get a TLE, because the same cell will be counted more than once. So I have to figure out some more solutions.\n\nYou may think about a DP or memerized method based on BFS or DFS.\n\nHowever, you can find another better way to solve the problem.\n\n0. mark all cells expect 0 to INT_MAX.\n1. find all the 0 cell.\n2. find all neighbours around this 0 cell and mark them 1.\n3. then find all the 1 cell and do No.1 step.\n\nThe time complex is O(n).\n\nAnd the solution is like these:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > updateMatrix(vector<vector<int> >& matrix) {\n            int remain = 0;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    if (matrix[idx][idy] != 0) {\n                        matrix[idx][idy] = INT_MAX;\n                        remain++;\n                    }\n                }\n            }\n            int flag = 1;\n            do {\n                for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                    for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                        if (matrix[idx][idy] == flag - 1) {\n                            if (idx - 1 >= 0 && matrix[idx - 1][idy] == INT_MAX) {\n                                matrix[idx - 1][idy] = flag;\n                                remain--;\n                            }\n                            if (idx + 1 < (int)matrix.size() && matrix[idx + 1][idy] == INT_MAX) {\n                                matrix[idx + 1][idy] = flag;\n                                remain--;\n                            }\n                            if (idy - 1 >= 0 && matrix[idx][idy - 1] == INT_MAX) {\n                                matrix[idx][idy - 1] = flag;\n                                remain--;\n                            }\n                            if (idy + 1 < (int)matrix[0].size() && matrix[idx][idy + 1] == INT_MAX) {\n                                matrix[idx][idy + 1] = flag;\n                                remain--;\n                            }\n                        }\n                    }\n                }\n                flag++;\n            } while (remain > 0);\n\n            return matrix;\n        }\n};\n```\n\nIt gets AC.\n","slug":"01Matrix","published":1,"updated":"2017-03-21T11:27:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpve0001x2f47nw5zuln","content":"<blockquote>\n<p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.<br>The distance between two adjacent cells is 1.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">0 0 0</div><div class=\"line\">Output:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">0 0 0</div></pre></td></tr></table></figure>\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">1 1 1</div><div class=\"line\">Output:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">1 2 1</div></pre></td></tr></table></figure>\n<p>Note:</p>\n<ul>\n<li>The number of elements of the given matrix will not exceed 10,000.</li>\n<li>There are at least one 0 in the given matrix.</li>\n<li>The cells are adjacent in only four directions: up, down, left and right.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.542. It is a common problem of Searching. I think it is better to use breadth-first search rather than depth-first search.</p>\n<p>Here is my first code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; updateMatrix(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(matrix[0].size());</div><div class=\"line\">                res.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    res[idx][idy] = check(matrix, idx, idy, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int check(vector&lt;vector&lt;int&gt; &gt; matrix, int idx, int idy, int current) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)matrix.size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idy &lt; 0 || idy &gt;= (int)matrix[0].size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (matrix[idx][idy] == 0) &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return min(</div><div class=\"line\">                        min(check(matrix, idx - 1, idy, current + 1), check(matrix, idx, idy - 1, current + 1)),</div><div class=\"line\">                        min(check(matrix, idx + 1, idy, current + 1), check(matrix, idx, idy + 1, current + 1))</div><div class=\"line\">                        );</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to understand, but there are some problems, for example the visited cell will be visited twice. So I add the visited array to mark the visited cells.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; updateMatrix(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(matrix[0].size());</div><div class=\"line\">                res.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; visited;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(matrix[0].size());</div><div class=\"line\">                visited.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    clearVisited(visited);</div><div class=\"line\">                    res[idx][idy] = check(matrix, idx, idy, 0L, visited);</div><div class=\"line\">                    cout &lt;&lt; idx &lt;&lt; &apos;:&apos; &lt;&lt; idy &lt;&lt; &apos;=&apos; &lt;&lt; res[idx][idy] &lt;&lt; endl;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void clearVisited(vector&lt;vector&lt;int&gt; &gt; &amp;visited) &#123;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)visited.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)visited[0].size(); idy++) &#123;</div><div class=\"line\">                    visited[idx][idy] = 0;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int check(vector&lt;vector&lt;int&gt; &gt; matrix, int idx, int idy, long current, vector&lt;vector&lt;int&gt; &gt; &amp;visited) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)matrix.size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idy &lt; 0 || idy &gt;= (int)matrix[0].size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited[idx][idy] == 1) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                visited[idx][idy] = 1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (matrix[idx][idy] == 0) &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                long res = min(</div><div class=\"line\">                        min(check(matrix, idx - 1, idy, current + 1, visited),</div><div class=\"line\">                            check(matrix, idx, idy - 1, current + 1, visited)),</div><div class=\"line\">                        min(check(matrix, idx + 1, idy, current + 1, visited),</div><div class=\"line\">                            check(matrix, idx, idy + 1, current + 1, visited))</div><div class=\"line\">                        );</div><div class=\"line\">                visited[idx][idy] = 0;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it get a TLE, because the same cell will be counted more than once. So I have to figure out some more solutions.</p>\n<p>You may think about a DP or memerized method based on BFS or DFS.</p>\n<p>However, you can find another better way to solve the problem.</p>\n<ol>\n<li>mark all cells expect 0 to INT_MAX.</li>\n<li>find all the 0 cell.</li>\n<li>find all neighbours around this 0 cell and mark them 1.</li>\n<li>then find all the 1 cell and do No.1 step.</li>\n</ol>\n<p>The time complex is O(n).</p>\n<p>And the solution is like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; updateMatrix(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            int remain = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    if (matrix[idx][idy] != 0) &#123;</div><div class=\"line\">                        matrix[idx][idy] = INT_MAX;</div><div class=\"line\">                        remain++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int flag = 1;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                    for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                        if (matrix[idx][idy] == flag - 1) &#123;</div><div class=\"line\">                            if (idx - 1 &gt;= 0 &amp;&amp; matrix[idx - 1][idy] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx - 1][idy] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            if (idx + 1 &lt; (int)matrix.size() &amp;&amp; matrix[idx + 1][idy] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx + 1][idy] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            if (idy - 1 &gt;= 0 &amp;&amp; matrix[idx][idy - 1] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx][idy - 1] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            if (idy + 1 &lt; (int)matrix[0].size() &amp;&amp; matrix[idx][idy + 1] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx][idy + 1] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                flag++;</div><div class=\"line\">            &#125; while (remain &gt; 0);</div><div class=\"line\"></div><div class=\"line\">            return matrix;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.<br>The distance between two adjacent cells is 1.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">0 0 0</div><div class=\"line\">Output:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">0 0 0</div></pre></td></tr></table></figure>\n<p>Example 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">1 1 1</div><div class=\"line\">Output:</div><div class=\"line\">0 0 0</div><div class=\"line\">0 1 0</div><div class=\"line\">1 2 1</div></pre></td></tr></table></figure>\n<p>Note:</p>\n<ul>\n<li>The number of elements of the given matrix will not exceed 10,000.</li>\n<li>There are at least one 0 in the given matrix.</li>\n<li>The cells are adjacent in only four directions: up, down, left and right.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.542. It is a common problem of Searching. I think it is better to use breadth-first search rather than depth-first search.</p>\n<p>Here is my first code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; updateMatrix(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(matrix[0].size());</div><div class=\"line\">                res.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    res[idx][idy] = check(matrix, idx, idy, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int check(vector&lt;vector&lt;int&gt; &gt; matrix, int idx, int idy, int current) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)matrix.size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idy &lt; 0 || idy &gt;= (int)matrix[0].size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (matrix[idx][idy] == 0) &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return min(</div><div class=\"line\">                        min(check(matrix, idx - 1, idy, current + 1), check(matrix, idx, idy - 1, current + 1)),</div><div class=\"line\">                        min(check(matrix, idx + 1, idy, current + 1), check(matrix, idx, idy + 1, current + 1))</div><div class=\"line\">                        );</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to understand, but there are some problems, for example the visited cell will be visited twice. So I add the visited array to mark the visited cells.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; updateMatrix(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(matrix[0].size());</div><div class=\"line\">                res.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; visited;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(matrix[0].size());</div><div class=\"line\">                visited.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    clearVisited(visited);</div><div class=\"line\">                    res[idx][idy] = check(matrix, idx, idy, 0L, visited);</div><div class=\"line\">                    cout &lt;&lt; idx &lt;&lt; &apos;:&apos; &lt;&lt; idy &lt;&lt; &apos;=&apos; &lt;&lt; res[idx][idy] &lt;&lt; endl;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void clearVisited(vector&lt;vector&lt;int&gt; &gt; &amp;visited) &#123;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)visited.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)visited[0].size(); idy++) &#123;</div><div class=\"line\">                    visited[idx][idy] = 0;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int check(vector&lt;vector&lt;int&gt; &gt; matrix, int idx, int idy, long current, vector&lt;vector&lt;int&gt; &gt; &amp;visited) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)matrix.size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idy &lt; 0 || idy &gt;= (int)matrix[0].size()) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited[idx][idy] == 1) &#123;</div><div class=\"line\">                return INT_MAX;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                visited[idx][idy] = 1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (matrix[idx][idy] == 0) &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                long res = min(</div><div class=\"line\">                        min(check(matrix, idx - 1, idy, current + 1, visited),</div><div class=\"line\">                            check(matrix, idx, idy - 1, current + 1, visited)),</div><div class=\"line\">                        min(check(matrix, idx + 1, idy, current + 1, visited),</div><div class=\"line\">                            check(matrix, idx, idy + 1, current + 1, visited))</div><div class=\"line\">                        );</div><div class=\"line\">                visited[idx][idy] = 0;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it get a TLE, because the same cell will be counted more than once. So I have to figure out some more solutions.</p>\n<p>You may think about a DP or memerized method based on BFS or DFS.</p>\n<p>However, you can find another better way to solve the problem.</p>\n<ol>\n<li>mark all cells expect 0 to INT_MAX.</li>\n<li>find all the 0 cell.</li>\n<li>find all neighbours around this 0 cell and mark them 1.</li>\n<li>then find all the 1 cell and do No.1 step.</li>\n</ol>\n<p>The time complex is O(n).</p>\n<p>And the solution is like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; updateMatrix(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            int remain = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    if (matrix[idx][idy] != 0) &#123;</div><div class=\"line\">                        matrix[idx][idy] = INT_MAX;</div><div class=\"line\">                        remain++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int flag = 1;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                    for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                        if (matrix[idx][idy] == flag - 1) &#123;</div><div class=\"line\">                            if (idx - 1 &gt;= 0 &amp;&amp; matrix[idx - 1][idy] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx - 1][idy] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            if (idx + 1 &lt; (int)matrix.size() &amp;&amp; matrix[idx + 1][idy] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx + 1][idy] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            if (idy - 1 &gt;= 0 &amp;&amp; matrix[idx][idy - 1] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx][idy - 1] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            if (idy + 1 &lt; (int)matrix[0].size() &amp;&amp; matrix[idx][idy + 1] == INT_MAX) &#123;</div><div class=\"line\">                                matrix[idx][idy + 1] = flag;</div><div class=\"line\">                                remain--;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                flag++;</div><div class=\"line\">            &#125; while (remain &gt; 0);</div><div class=\"line\"></div><div class=\"line\">            return matrix;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"132 Pattern","date":"2017-01-03T05:46:25.000Z","_content":"\n> Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.\n>\n> Note: n will be less than 15,000.\n>\n> Example 1:\n> Input: [1, 2, 3, 4]\n> Output: False\n>\n> Explanation: There is no 132 pattern in the sequence.\n> \n> Example 2:\n> Input: [3, 1, 4, 2]\n> Output: True\n>\n> Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n>\n> Example 3:\n> Input: [-1, 3, 2, 0]\n> Output: True\n>\n> Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n\n<!--more-->\n\nThis is Leetcode 456. As the problem description, we can quickly write this solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool find132pattern(vector<int>& nums) {\n            for (int i = 0; i < (int)nums.size() - 2; i++) {\n                for (int j = i + 1; j < (int)nums.size() - 1; j++) {\n                    for (int k = j + 1; k < (int)nums.size(); k++) {\n                        if (check(nums, i, j, k)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        bool check(vector<int> &nums, int idx, int idy, int idz) {\n            if (nums[idx] < nums[idy]\n                    && nums[idz] < nums[idy]\n                    && nums[idx] < nums[idz]) {\n                return true;\n            }\n            return false;\n        }\n};\n```\nBut it's time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 < S2 < S3, we will find use two pointers to aim at the start and the end of the array.\n\nSo, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.\n\nFor more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:\n\nEXAMPLE:\n + i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty\n + i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]\n + i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]\n + i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]\n + i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 < 9, sequence found!\n\nSo, the solution is:\n\n```\nbool find132pattern(vector<int>& nums) {\n    int s3 = INT_MIN, s1;\n    std::stack<int> stack;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        s1 = nums[i];\n        if (s3 > s1) {\n            return true;\n        } else {\n            while (!stack.empty() && nums[i] > stack.top()) {\n                s3 = stack.top();\n                stack.pop();\n            }\n        }\n        stack.push(nums[i]);\n    }\n    return false;\n}\n```\n","source":"_posts/132Pattern.md","raw":"---\ntitle: 132 Pattern\ndate: 2017-01-03 13:46:25\ntags:\n    - Stack\n---\n\n> Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.\n>\n> Note: n will be less than 15,000.\n>\n> Example 1:\n> Input: [1, 2, 3, 4]\n> Output: False\n>\n> Explanation: There is no 132 pattern in the sequence.\n> \n> Example 2:\n> Input: [3, 1, 4, 2]\n> Output: True\n>\n> Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n>\n> Example 3:\n> Input: [-1, 3, 2, 0]\n> Output: True\n>\n> Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n\n<!--more-->\n\nThis is Leetcode 456. As the problem description, we can quickly write this solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool find132pattern(vector<int>& nums) {\n            for (int i = 0; i < (int)nums.size() - 2; i++) {\n                for (int j = i + 1; j < (int)nums.size() - 1; j++) {\n                    for (int k = j + 1; k < (int)nums.size(); k++) {\n                        if (check(nums, i, j, k)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        bool check(vector<int> &nums, int idx, int idy, int idz) {\n            if (nums[idx] < nums[idy]\n                    && nums[idz] < nums[idy]\n                    && nums[idx] < nums[idz]) {\n                return true;\n            }\n            return false;\n        }\n};\n```\nBut it's time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 < S2 < S3, we will find use two pointers to aim at the start and the end of the array.\n\nSo, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.\n\nFor more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:\n\nEXAMPLE:\n + i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty\n + i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]\n + i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]\n + i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]\n + i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 < 9, sequence found!\n\nSo, the solution is:\n\n```\nbool find132pattern(vector<int>& nums) {\n    int s3 = INT_MIN, s1;\n    std::stack<int> stack;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        s1 = nums[i];\n        if (s3 > s1) {\n            return true;\n        } else {\n            while (!stack.empty() && nums[i] > stack.top()) {\n                s3 = stack.top();\n                stack.pop();\n            }\n        }\n        stack.push(nums[i]);\n    }\n    return false;\n}\n```\n","slug":"132Pattern","published":1,"updated":"2017-01-13T03:09:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvi0002x2f425ybhtqc","content":"<blockquote>\n<p>Given a sequence of n integers a1, a2, …, an, a 132 pattern is a subsequence ai, aj, ak such that i &lt; j &lt; k and ai &lt; ak &lt; aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p>\n<p>Note: n will be less than 15,000.</p>\n<p>Example 1:<br>Input: [1, 2, 3, 4]<br>Output: False</p>\n<p>Explanation: There is no 132 pattern in the sequence.</p>\n<p>Example 2:<br>Input: [3, 1, 4, 2]<br>Output: True</p>\n<p>Explanation: There is a 132 pattern in the sequence: [1, 4, 2].</p>\n<p>Example 3:<br>Input: [-1, 3, 2, 0]<br>Output: True</p>\n<p>Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 456. As the problem description, we can quickly write this solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size() - 2; i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size() - 1; j++) &#123;</div><div class=\"line\">                    for (int k = j + 1; k &lt; (int)nums.size(); k++) &#123;</div><div class=\"line\">                        if (check(nums, i, j, k)) &#123;</div><div class=\"line\">                            return true;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(vector&lt;int&gt; &amp;nums, int idx, int idy, int idz) &#123;</div><div class=\"line\">            if (nums[idx] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idz] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idx] &lt; nums[idz]) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it’s time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 &lt; S2 &lt; S3, we will find use two pointers to aim at the start and the end of the array.</p>\n<p>So, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.</p>\n<p>For more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:</p>\n<p>EXAMPLE:</p>\n<ul>\n<li>i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty</li>\n<li>i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]</li>\n<li>i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]</li>\n<li>i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]</li>\n<li>i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 &lt; 9, sequence found!</li>\n</ul>\n<p>So, the solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int s3 = INT_MIN, s1;</div><div class=\"line\">    std::stack&lt;int&gt; stack;</div><div class=\"line\">    for (int i = nums.size() - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">        s1 = nums[i];</div><div class=\"line\">        if (s3 &gt; s1) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            while (!stack.empty() &amp;&amp; nums[i] &gt; stack.top()) &#123;</div><div class=\"line\">                s3 = stack.top();</div><div class=\"line\">                stack.pop();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        stack.push(nums[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Given a sequence of n integers a1, a2, …, an, a 132 pattern is a subsequence ai, aj, ak such that i &lt; j &lt; k and ai &lt; ak &lt; aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p>\n<p>Note: n will be less than 15,000.</p>\n<p>Example 1:<br>Input: [1, 2, 3, 4]<br>Output: False</p>\n<p>Explanation: There is no 132 pattern in the sequence.</p>\n<p>Example 2:<br>Input: [3, 1, 4, 2]<br>Output: True</p>\n<p>Explanation: There is a 132 pattern in the sequence: [1, 4, 2].</p>\n<p>Example 3:<br>Input: [-1, 3, 2, 0]<br>Output: True</p>\n<p>Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].</p>\n</blockquote>","more":"<p>This is Leetcode 456. As the problem description, we can quickly write this solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size() - 2; i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size() - 1; j++) &#123;</div><div class=\"line\">                    for (int k = j + 1; k &lt; (int)nums.size(); k++) &#123;</div><div class=\"line\">                        if (check(nums, i, j, k)) &#123;</div><div class=\"line\">                            return true;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(vector&lt;int&gt; &amp;nums, int idx, int idy, int idz) &#123;</div><div class=\"line\">            if (nums[idx] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idz] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idx] &lt; nums[idz]) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it’s time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 &lt; S2 &lt; S3, we will find use two pointers to aim at the start and the end of the array.</p>\n<p>So, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.</p>\n<p>For more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:</p>\n<p>EXAMPLE:</p>\n<ul>\n<li>i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty</li>\n<li>i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]</li>\n<li>i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]</li>\n<li>i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]</li>\n<li>i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 &lt; 9, sequence found!</li>\n</ul>\n<p>So, the solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int s3 = INT_MIN, s1;</div><div class=\"line\">    std::stack&lt;int&gt; stack;</div><div class=\"line\">    for (int i = nums.size() - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">        s1 = nums[i];</div><div class=\"line\">        if (s3 &gt; s1) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            while (!stack.empty() &amp;&amp; nums[i] &gt; stack.top()) &#123;</div><div class=\"line\">                s3 = stack.top();</div><div class=\"line\">                stack.pop();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        stack.push(nums[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"403 Forbidden","date":"2017-02-15T05:15:56.000Z","_content":"\n\n> **Description**\n> Little Hi runs a web server. Sometimes he has to deny access from a certain set of malicious IP addresses while his friends are still allow to access his server. To do this he writes N rules in the configuration file which look like:\n> ```\nallow 1.2.3.4/30\ndeny 1.1.1.1\nallow 127.0.0.1\nallow 123.234.12.23/3\ndeny 0.0.0.0/0\n```\n> Each rule is in the form: allow | deny address or allow | deny address/mask.\n>\n> When there comes a request, the rules are checked in sequence until the first match is found. If no rule is matched the request will be allowed. Rule and request are matched if the request address is the same as the rule address or they share the same first mask digits when both written as 32bit binary number.\n>\n> For example IP \"1.2.3.4\" matches rule \"allow 1.2.3.4\" because the addresses are the same. And IP \"128.127.8.125\" matches rule \"deny 128.127.4.100/20\" because 10000000011111110000010001100100 (128.127.4.100 as binary number) shares the first 20 (mask) digits with 10000000011111110000100001111101 (128.127.8.125 as binary number).\n>\n> Now comes M access requests. Given their IP addresses, your task is to find out which ones are allowed and which ones are denied.\n>\n> **Input**\n>\n> + Line 1: two integers N and M.\n> + Line 2-N+1: one rule on each line.\n> + Line N+2-N+M+1: one IP address on each line.\n> + All addresses are IPv4 addresses(0.0.0.0 - 255.255.255.255). 0 <= mask <= 32.\n> + For 40% of the data: 1 <= N, M <= 1000.\n> + For 100% of the data: 1 <= N, M <= 100000.\n>\n> **Output**\n>\n> For each request output \"YES\" or \"NO\" according to whether it is allowed.\n>\n<!--more-->\n>\n> ** Sample Input**\n> ```\n5 5\nallow 1.2.3.4/30\ndeny 1.1.1.1\nallow 127.0.0.1\nallow 123.234.12.23/3\ndeny 0.0.0.0/0\n1.2.3.4\n1.2.3.5\n1.1.1.1\n100.100.100.100\n219.142.53.100\n```\n> **Sample Output**\n> ```\nYES\nYES\nNO\nYES\nNO\n ```\n<!--more-->\n\nIt is one of the Microsoft 2016 Campus Hiring Contest - April. It is fun and it is such a problem to test our basic programming skills.\n\nI just find that Java may be a better language to solve this problem. So I use Java to deal with this problem.\n\nIt's complex and easy to get 40% data.\n\n```\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class P1289 {\n\n    static class Rule {\n        public String  address;\n        public boolean isAllowed;\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n\n            Rule address1 = (Rule) o;\n\n            if (isAllowed != address1.isAllowed) return false;\n            return address != null ? address.equals(address1.address) : address1.address == null;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = address != null ? address.hashCode() : 0;\n            result = 31 * result + (isAllowed ? 1 : 0);\n            return result;\n        }\n    }\n\n    public static String append8bit(String binary) {\n        switch (binary.length()) {\n            case 0:\n                return \"00000000\";\n            case 1:\n                return \"0000000\" + binary;\n            case 2:\n                return \"000000\" + binary;\n            case 3:\n                return \"00000\" + binary;\n            case 4:\n                return \"0000\" + binary;\n            case 5:\n                return \"000\" + binary;\n            case 6:\n                return \"00\" + binary;\n            case 7:\n                return \"0\" + binary;\n            default:\n                return binary;\n        }\n    }\n\n    public static String ip2str(String ip) {\n        StringBuilder stringBuilder = new StringBuilder(32);\n        String res = null;\n        String[] parts = ip.split(\"\\\\.\");\n\n        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[0]))));\n        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[1]))));\n        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[2]))));\n        if (parts[3].contains(\"/\")) {\n            String[] ip_mask = parts[3].split(\"/\");\n            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(ip_mask[0]))));\n            res = stringBuilder.substring(0, Integer.valueOf(ip_mask[1]));\n        } else {\n            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[3]))));\n            res = stringBuilder.toString();\n        }\n        return res;\n    }\n\n    public static boolean check(String address, Vector<Rule> rules) {\n        for (int i = 0; i < rules.size(); i++) {\n            if (address.startsWith(rules.get(i).address)) {\n                return rules.get(i).isAllowed;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int M, N;\n        while (scanner.hasNext()) {\n            N = scanner.nextInt();\n            M = scanner.nextInt();\n            scanner.nextLine();\n            Vector<Rule> rules = new Vector<Rule>(N);\n            for (int i = 0; i < N; i++) {\n                String ruleStr = scanner.nextLine();\n                Rule rule = new Rule();\n                if (ruleStr.startsWith(\"a\")) {\n                    ruleStr = ruleStr.substring(6);\n                    rule.isAllowed = true;\n                    rule.address = ip2str(ruleStr);\n                } else {\n                    ruleStr = ruleStr.substring(5);\n                    rule.isAllowed = false;\n                    rule.address = ip2str(ruleStr);\n                }\n                rules.add(rule);\n            }\n\n            for (int i = 0; i < M; i++) {\n                String IP = ip2str(scanner.nextLine());\n                if (check(IP, rules)) {\n                    System.out.println(\"YES\");\n                } else {\n                    System.out.println(\"NO\");\n                }\n            }\n        }\n    }\n}\n```\n\nIt passed 40% data. And I think if I want to pass the total data, I should do something better, like combining the rules.\n\nI will check the better solution later.\n","source":"_posts/403Forbidden.md","raw":"---\ntitle: 403 Forbidden\ndate: 2017-02-15 13:15:56\ntags:\n    - Array\n    - Trie\n    - Hash Table\n---\n\n\n> **Description**\n> Little Hi runs a web server. Sometimes he has to deny access from a certain set of malicious IP addresses while his friends are still allow to access his server. To do this he writes N rules in the configuration file which look like:\n> ```\nallow 1.2.3.4/30\ndeny 1.1.1.1\nallow 127.0.0.1\nallow 123.234.12.23/3\ndeny 0.0.0.0/0\n```\n> Each rule is in the form: allow | deny address or allow | deny address/mask.\n>\n> When there comes a request, the rules are checked in sequence until the first match is found. If no rule is matched the request will be allowed. Rule and request are matched if the request address is the same as the rule address or they share the same first mask digits when both written as 32bit binary number.\n>\n> For example IP \"1.2.3.4\" matches rule \"allow 1.2.3.4\" because the addresses are the same. And IP \"128.127.8.125\" matches rule \"deny 128.127.4.100/20\" because 10000000011111110000010001100100 (128.127.4.100 as binary number) shares the first 20 (mask) digits with 10000000011111110000100001111101 (128.127.8.125 as binary number).\n>\n> Now comes M access requests. Given their IP addresses, your task is to find out which ones are allowed and which ones are denied.\n>\n> **Input**\n>\n> + Line 1: two integers N and M.\n> + Line 2-N+1: one rule on each line.\n> + Line N+2-N+M+1: one IP address on each line.\n> + All addresses are IPv4 addresses(0.0.0.0 - 255.255.255.255). 0 <= mask <= 32.\n> + For 40% of the data: 1 <= N, M <= 1000.\n> + For 100% of the data: 1 <= N, M <= 100000.\n>\n> **Output**\n>\n> For each request output \"YES\" or \"NO\" according to whether it is allowed.\n>\n<!--more-->\n>\n> ** Sample Input**\n> ```\n5 5\nallow 1.2.3.4/30\ndeny 1.1.1.1\nallow 127.0.0.1\nallow 123.234.12.23/3\ndeny 0.0.0.0/0\n1.2.3.4\n1.2.3.5\n1.1.1.1\n100.100.100.100\n219.142.53.100\n```\n> **Sample Output**\n> ```\nYES\nYES\nNO\nYES\nNO\n ```\n<!--more-->\n\nIt is one of the Microsoft 2016 Campus Hiring Contest - April. It is fun and it is such a problem to test our basic programming skills.\n\nI just find that Java may be a better language to solve this problem. So I use Java to deal with this problem.\n\nIt's complex and easy to get 40% data.\n\n```\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class P1289 {\n\n    static class Rule {\n        public String  address;\n        public boolean isAllowed;\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n\n            Rule address1 = (Rule) o;\n\n            if (isAllowed != address1.isAllowed) return false;\n            return address != null ? address.equals(address1.address) : address1.address == null;\n        }\n\n        @Override\n        public int hashCode() {\n            int result = address != null ? address.hashCode() : 0;\n            result = 31 * result + (isAllowed ? 1 : 0);\n            return result;\n        }\n    }\n\n    public static String append8bit(String binary) {\n        switch (binary.length()) {\n            case 0:\n                return \"00000000\";\n            case 1:\n                return \"0000000\" + binary;\n            case 2:\n                return \"000000\" + binary;\n            case 3:\n                return \"00000\" + binary;\n            case 4:\n                return \"0000\" + binary;\n            case 5:\n                return \"000\" + binary;\n            case 6:\n                return \"00\" + binary;\n            case 7:\n                return \"0\" + binary;\n            default:\n                return binary;\n        }\n    }\n\n    public static String ip2str(String ip) {\n        StringBuilder stringBuilder = new StringBuilder(32);\n        String res = null;\n        String[] parts = ip.split(\"\\\\.\");\n\n        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[0]))));\n        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[1]))));\n        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[2]))));\n        if (parts[3].contains(\"/\")) {\n            String[] ip_mask = parts[3].split(\"/\");\n            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(ip_mask[0]))));\n            res = stringBuilder.substring(0, Integer.valueOf(ip_mask[1]));\n        } else {\n            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[3]))));\n            res = stringBuilder.toString();\n        }\n        return res;\n    }\n\n    public static boolean check(String address, Vector<Rule> rules) {\n        for (int i = 0; i < rules.size(); i++) {\n            if (address.startsWith(rules.get(i).address)) {\n                return rules.get(i).isAllowed;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int M, N;\n        while (scanner.hasNext()) {\n            N = scanner.nextInt();\n            M = scanner.nextInt();\n            scanner.nextLine();\n            Vector<Rule> rules = new Vector<Rule>(N);\n            for (int i = 0; i < N; i++) {\n                String ruleStr = scanner.nextLine();\n                Rule rule = new Rule();\n                if (ruleStr.startsWith(\"a\")) {\n                    ruleStr = ruleStr.substring(6);\n                    rule.isAllowed = true;\n                    rule.address = ip2str(ruleStr);\n                } else {\n                    ruleStr = ruleStr.substring(5);\n                    rule.isAllowed = false;\n                    rule.address = ip2str(ruleStr);\n                }\n                rules.add(rule);\n            }\n\n            for (int i = 0; i < M; i++) {\n                String IP = ip2str(scanner.nextLine());\n                if (check(IP, rules)) {\n                    System.out.println(\"YES\");\n                } else {\n                    System.out.println(\"NO\");\n                }\n            }\n        }\n    }\n}\n```\n\nIt passed 40% data. And I think if I want to pass the total data, I should do something better, like combining the rules.\n\nI will check the better solution later.\n","slug":"403Forbidden","published":1,"updated":"2017-04-18T16:50:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvn0004x2f4lpti5p4z","content":"<blockquote>\n<p><strong>Description</strong><br>Little Hi runs a web server. Sometimes he has to deny access from a certain set of malicious IP addresses while his friends are still allow to access his server. To do this he writes N rules in the configuration file which look like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">allow 1.2.3.4/30</div><div class=\"line\">deny 1.1.1.1</div><div class=\"line\">allow 127.0.0.1</div><div class=\"line\">allow 123.234.12.23/3</div><div class=\"line\">deny 0.0.0.0/0</div></pre></td></tr></table></figure></p>\n<p>Each rule is in the form: allow | deny address or allow | deny address/mask.</p>\n<p>When there comes a request, the rules are checked in sequence until the first match is found. If no rule is matched the request will be allowed. Rule and request are matched if the request address is the same as the rule address or they share the same first mask digits when both written as 32bit binary number.</p>\n<p>For example IP “1.2.3.4” matches rule “allow 1.2.3.4” because the addresses are the same. And IP “128.127.8.125” matches rule “deny 128.127.4.100/20” because 10000000011111110000010001100100 (128.127.4.100 as binary number) shares the first 20 (mask) digits with 10000000011111110000100001111101 (128.127.8.125 as binary number).</p>\n<p>Now comes M access requests. Given their IP addresses, your task is to find out which ones are allowed and which ones are denied.</p>\n<p><strong>Input</strong></p>\n<ul>\n<li>Line 1: two integers N and M.</li>\n<li>Line 2-N+1: one rule on each line.</li>\n<li>Line N+2-N+M+1: one IP address on each line.</li>\n<li>All addresses are IPv4 addresses(0.0.0.0 - 255.255.255.255). 0 &lt;= mask &lt;= 32.</li>\n<li>For 40% of the data: 1 &lt;= N, M &lt;= 1000.</li>\n<li>For 100% of the data: 1 &lt;= N, M &lt;= 100000.</li>\n</ul>\n<p><strong>Output</strong></p>\n<p>For each request output “YES” or “NO” according to whether it is allowed.</p>\n<a id=\"more\"></a>\n<p><strong> Sample Input</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">5 5</div><div class=\"line\">allow 1.2.3.4/30</div><div class=\"line\">deny 1.1.1.1</div><div class=\"line\">allow 127.0.0.1</div><div class=\"line\">allow 123.234.12.23/3</div><div class=\"line\">deny 0.0.0.0/0</div><div class=\"line\">1.2.3.4</div><div class=\"line\">1.2.3.5</div><div class=\"line\">1.1.1.1</div><div class=\"line\">100.100.100.100</div><div class=\"line\">219.142.53.100</div></pre></td></tr></table></figure></p>\n<p><strong>Sample Output</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">YES</div><div class=\"line\">YES</div><div class=\"line\">NO</div><div class=\"line\">YES</div><div class=\"line\">NO</div></pre></td></tr></table></figure></p>\n</blockquote>\n<!--more-->\n<p>It is one of the Microsoft 2016 Campus Hiring Contest - April. It is fun and it is such a problem to test our basic programming skills.</p>\n<p>I just find that Java may be a better language to solve this problem. So I use Java to deal with this problem.</p>\n<p>It’s complex and easy to get 40% data.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.Scanner;</div><div class=\"line\">import java.util.Vector;</div><div class=\"line\"></div><div class=\"line\">public class P1289 &#123;</div><div class=\"line\"></div><div class=\"line\">    static class Rule &#123;</div><div class=\"line\">        public String  address;</div><div class=\"line\">        public boolean isAllowed;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean equals(Object o) &#123;</div><div class=\"line\">            if (this == o) return true;</div><div class=\"line\">            if (o == null || getClass() != o.getClass()) return false;</div><div class=\"line\"></div><div class=\"line\">            Rule address1 = (Rule) o;</div><div class=\"line\"></div><div class=\"line\">            if (isAllowed != address1.isAllowed) return false;</div><div class=\"line\">            return address != null ? address.equals(address1.address) : address1.address == null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public int hashCode() &#123;</div><div class=\"line\">            int result = address != null ? address.hashCode() : 0;</div><div class=\"line\">            result = 31 * result + (isAllowed ? 1 : 0);</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String append8bit(String binary) &#123;</div><div class=\"line\">        switch (binary.length()) &#123;</div><div class=\"line\">            case 0:</div><div class=\"line\">                return &quot;00000000&quot;;</div><div class=\"line\">            case 1:</div><div class=\"line\">                return &quot;0000000&quot; + binary;</div><div class=\"line\">            case 2:</div><div class=\"line\">                return &quot;000000&quot; + binary;</div><div class=\"line\">            case 3:</div><div class=\"line\">                return &quot;00000&quot; + binary;</div><div class=\"line\">            case 4:</div><div class=\"line\">                return &quot;0000&quot; + binary;</div><div class=\"line\">            case 5:</div><div class=\"line\">                return &quot;000&quot; + binary;</div><div class=\"line\">            case 6:</div><div class=\"line\">                return &quot;00&quot; + binary;</div><div class=\"line\">            case 7:</div><div class=\"line\">                return &quot;0&quot; + binary;</div><div class=\"line\">            default:</div><div class=\"line\">                return binary;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String ip2str(String ip) &#123;</div><div class=\"line\">        StringBuilder stringBuilder = new StringBuilder(32);</div><div class=\"line\">        String res = null;</div><div class=\"line\">        String[] parts = ip.split(&quot;\\\\.&quot;);</div><div class=\"line\"></div><div class=\"line\">        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[0]))));</div><div class=\"line\">        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[1]))));</div><div class=\"line\">        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[2]))));</div><div class=\"line\">        if (parts[3].contains(&quot;/&quot;)) &#123;</div><div class=\"line\">            String[] ip_mask = parts[3].split(&quot;/&quot;);</div><div class=\"line\">            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(ip_mask[0]))));</div><div class=\"line\">            res = stringBuilder.substring(0, Integer.valueOf(ip_mask[1]));</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[3]))));</div><div class=\"line\">            res = stringBuilder.toString();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static boolean check(String address, Vector&lt;Rule&gt; rules) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; rules.size(); i++) &#123;</div><div class=\"line\">            if (address.startsWith(rules.get(i).address)) &#123;</div><div class=\"line\">                return rules.get(i).isAllowed;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Scanner scanner = new Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">        int M, N;</div><div class=\"line\">        while (scanner.hasNext()) &#123;</div><div class=\"line\">            N = scanner.nextInt();</div><div class=\"line\">            M = scanner.nextInt();</div><div class=\"line\">            scanner.nextLine();</div><div class=\"line\">            Vector&lt;Rule&gt; rules = new Vector&lt;Rule&gt;(N);</div><div class=\"line\">            for (int i = 0; i &lt; N; i++) &#123;</div><div class=\"line\">                String ruleStr = scanner.nextLine();</div><div class=\"line\">                Rule rule = new Rule();</div><div class=\"line\">                if (ruleStr.startsWith(&quot;a&quot;)) &#123;</div><div class=\"line\">                    ruleStr = ruleStr.substring(6);</div><div class=\"line\">                    rule.isAllowed = true;</div><div class=\"line\">                    rule.address = ip2str(ruleStr);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    ruleStr = ruleStr.substring(5);</div><div class=\"line\">                    rule.isAllowed = false;</div><div class=\"line\">                    rule.address = ip2str(ruleStr);</div><div class=\"line\">                &#125;</div><div class=\"line\">                rules.add(rule);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; M; i++) &#123;</div><div class=\"line\">                String IP = ip2str(scanner.nextLine());</div><div class=\"line\">                if (check(IP, rules)) &#123;</div><div class=\"line\">                    System.out.println(&quot;YES&quot;);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    System.out.println(&quot;NO&quot;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It passed 40% data. And I think if I want to pass the total data, I should do something better, like combining the rules.</p>\n<p>I will check the better solution later.</p>\n","excerpt":"<blockquote>\n<p><strong>Description</strong><br>Little Hi runs a web server. Sometimes he has to deny access from a certain set of malicious IP addresses while his friends are still allow to access his server. To do this he writes N rules in the configuration file which look like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">allow 1.2.3.4/30</div><div class=\"line\">deny 1.1.1.1</div><div class=\"line\">allow 127.0.0.1</div><div class=\"line\">allow 123.234.12.23/3</div><div class=\"line\">deny 0.0.0.0/0</div></pre></td></tr></table></figure></p>\n<p>Each rule is in the form: allow | deny address or allow | deny address/mask.</p>\n<p>When there comes a request, the rules are checked in sequence until the first match is found. If no rule is matched the request will be allowed. Rule and request are matched if the request address is the same as the rule address or they share the same first mask digits when both written as 32bit binary number.</p>\n<p>For example IP “1.2.3.4” matches rule “allow 1.2.3.4” because the addresses are the same. And IP “128.127.8.125” matches rule “deny 128.127.4.100/20” because 10000000011111110000010001100100 (128.127.4.100 as binary number) shares the first 20 (mask) digits with 10000000011111110000100001111101 (128.127.8.125 as binary number).</p>\n<p>Now comes M access requests. Given their IP addresses, your task is to find out which ones are allowed and which ones are denied.</p>\n<p><strong>Input</strong></p>\n<ul>\n<li>Line 1: two integers N and M.</li>\n<li>Line 2-N+1: one rule on each line.</li>\n<li>Line N+2-N+M+1: one IP address on each line.</li>\n<li>All addresses are IPv4 addresses(0.0.0.0 - 255.255.255.255). 0 &lt;= mask &lt;= 32.</li>\n<li>For 40% of the data: 1 &lt;= N, M &lt;= 1000.</li>\n<li>For 100% of the data: 1 &lt;= N, M &lt;= 100000.</li>\n</ul>\n<p><strong>Output</strong></p>\n<p>For each request output “YES” or “NO” according to whether it is allowed.</p>","more":"<p><strong> Sample Input</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">5 5</div><div class=\"line\">allow 1.2.3.4/30</div><div class=\"line\">deny 1.1.1.1</div><div class=\"line\">allow 127.0.0.1</div><div class=\"line\">allow 123.234.12.23/3</div><div class=\"line\">deny 0.0.0.0/0</div><div class=\"line\">1.2.3.4</div><div class=\"line\">1.2.3.5</div><div class=\"line\">1.1.1.1</div><div class=\"line\">100.100.100.100</div><div class=\"line\">219.142.53.100</div></pre></td></tr></table></figure></p>\n<p><strong>Sample Output</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">YES</div><div class=\"line\">YES</div><div class=\"line\">NO</div><div class=\"line\">YES</div><div class=\"line\">NO</div></pre></td></tr></table></figure></p>\n</blockquote>\n<!--more-->\n<p>It is one of the Microsoft 2016 Campus Hiring Contest - April. It is fun and it is such a problem to test our basic programming skills.</p>\n<p>I just find that Java may be a better language to solve this problem. So I use Java to deal with this problem.</p>\n<p>It’s complex and easy to get 40% data.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.Scanner;</div><div class=\"line\">import java.util.Vector;</div><div class=\"line\"></div><div class=\"line\">public class P1289 &#123;</div><div class=\"line\"></div><div class=\"line\">    static class Rule &#123;</div><div class=\"line\">        public String  address;</div><div class=\"line\">        public boolean isAllowed;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean equals(Object o) &#123;</div><div class=\"line\">            if (this == o) return true;</div><div class=\"line\">            if (o == null || getClass() != o.getClass()) return false;</div><div class=\"line\"></div><div class=\"line\">            Rule address1 = (Rule) o;</div><div class=\"line\"></div><div class=\"line\">            if (isAllowed != address1.isAllowed) return false;</div><div class=\"line\">            return address != null ? address.equals(address1.address) : address1.address == null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public int hashCode() &#123;</div><div class=\"line\">            int result = address != null ? address.hashCode() : 0;</div><div class=\"line\">            result = 31 * result + (isAllowed ? 1 : 0);</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String append8bit(String binary) &#123;</div><div class=\"line\">        switch (binary.length()) &#123;</div><div class=\"line\">            case 0:</div><div class=\"line\">                return &quot;00000000&quot;;</div><div class=\"line\">            case 1:</div><div class=\"line\">                return &quot;0000000&quot; + binary;</div><div class=\"line\">            case 2:</div><div class=\"line\">                return &quot;000000&quot; + binary;</div><div class=\"line\">            case 3:</div><div class=\"line\">                return &quot;00000&quot; + binary;</div><div class=\"line\">            case 4:</div><div class=\"line\">                return &quot;0000&quot; + binary;</div><div class=\"line\">            case 5:</div><div class=\"line\">                return &quot;000&quot; + binary;</div><div class=\"line\">            case 6:</div><div class=\"line\">                return &quot;00&quot; + binary;</div><div class=\"line\">            case 7:</div><div class=\"line\">                return &quot;0&quot; + binary;</div><div class=\"line\">            default:</div><div class=\"line\">                return binary;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String ip2str(String ip) &#123;</div><div class=\"line\">        StringBuilder stringBuilder = new StringBuilder(32);</div><div class=\"line\">        String res = null;</div><div class=\"line\">        String[] parts = ip.split(&quot;\\\\.&quot;);</div><div class=\"line\"></div><div class=\"line\">        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[0]))));</div><div class=\"line\">        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[1]))));</div><div class=\"line\">        stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[2]))));</div><div class=\"line\">        if (parts[3].contains(&quot;/&quot;)) &#123;</div><div class=\"line\">            String[] ip_mask = parts[3].split(&quot;/&quot;);</div><div class=\"line\">            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(ip_mask[0]))));</div><div class=\"line\">            res = stringBuilder.substring(0, Integer.valueOf(ip_mask[1]));</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            stringBuilder.append(append8bit(Integer.toBinaryString(Integer.valueOf(parts[3]))));</div><div class=\"line\">            res = stringBuilder.toString();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static boolean check(String address, Vector&lt;Rule&gt; rules) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; rules.size(); i++) &#123;</div><div class=\"line\">            if (address.startsWith(rules.get(i).address)) &#123;</div><div class=\"line\">                return rules.get(i).isAllowed;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Scanner scanner = new Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">        int M, N;</div><div class=\"line\">        while (scanner.hasNext()) &#123;</div><div class=\"line\">            N = scanner.nextInt();</div><div class=\"line\">            M = scanner.nextInt();</div><div class=\"line\">            scanner.nextLine();</div><div class=\"line\">            Vector&lt;Rule&gt; rules = new Vector&lt;Rule&gt;(N);</div><div class=\"line\">            for (int i = 0; i &lt; N; i++) &#123;</div><div class=\"line\">                String ruleStr = scanner.nextLine();</div><div class=\"line\">                Rule rule = new Rule();</div><div class=\"line\">                if (ruleStr.startsWith(&quot;a&quot;)) &#123;</div><div class=\"line\">                    ruleStr = ruleStr.substring(6);</div><div class=\"line\">                    rule.isAllowed = true;</div><div class=\"line\">                    rule.address = ip2str(ruleStr);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    ruleStr = ruleStr.substring(5);</div><div class=\"line\">                    rule.isAllowed = false;</div><div class=\"line\">                    rule.address = ip2str(ruleStr);</div><div class=\"line\">                &#125;</div><div class=\"line\">                rules.add(rule);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; M; i++) &#123;</div><div class=\"line\">                String IP = ip2str(scanner.nextLine());</div><div class=\"line\">                if (check(IP, rules)) &#123;</div><div class=\"line\">                    System.out.println(&quot;YES&quot;);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    System.out.println(&quot;NO&quot;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It passed 40% data. And I think if I want to pass the total data, I should do something better, like combining the rules.</p>\n<p>I will check the better solution later.</p>"},{"title":"4Sum II","date":"2017-02-23T01:11:17.000Z","_content":"\n\n> Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.\n>\n> To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.\n>\n> Example:\n>\n> Input:\n> ```\n A = [ 1, 2]\n B = [-2,-1]\n C = [-1, 2]\n D = [ 0, 2]\n```\n> Output:\n> 2\n>\n> Explanation:\n>\n> The two tuples are:\n> 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n> 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n\n<!--more-->\n\nIt is Leetcode No.454, and I quickly find a simple solution. Because if we use the traditional backtracing solution , the time complex will be O(n^4).\n\nSo I just divide the four array into two part. And I use a map to store the result as <sum, times>.\n\nSo the time complex will be O(2*n^2) and then I can use O(n) to find the total nums.\n\n```\nclass Solution {\n    public:\n        int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n            map<int, int> sums1, sums2;\n            for (int i = 0; i < (int)A.size(); i++) {\n                for (int j = 0; j < (int)B.size(); j++) {\n                    if (sums1.find(A[i] + B[j]) != sums1.end()) {\n                        sums1.find(A[i] + B[j])->second++;\n                    } else {\n                        sums1.insert(pair<int, int>(A[i] + B[j], 1));\n                    }\n                }\n            }\n            for (int i = 0; i < (int)C.size(); i++) {\n                for (int j = 0; j < (int)D.size(); j++) {\n                    if (sums2.find(C[i] + D[j]) != sums2.end()) {\n                        sums2.find(C[i] + D[j])->second++;\n                    } else {\n                        sums2.insert(pair<int, int>(C[i] + D[j], 1));\n                    }\n                }\n            }\n\n            int res = 0;\n            for (auto i : sums1) {\n                if (sums2.find(0 - i.first) != sums2.end()) {\n                    res = res + i.second * sums2.find(0 - i.first)->second;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt is not the best solution but I think it is a easy-understand solution. Also, it gets AC.\n","source":"_posts/4SumII.md","raw":"---\ntitle: 4Sum II\ndate: 2017-02-23 09:11:17\ntags:\n    - Binary Search\n    - Hash Table\n---\n\n\n> Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.\n>\n> To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.\n>\n> Example:\n>\n> Input:\n> ```\n A = [ 1, 2]\n B = [-2,-1]\n C = [-1, 2]\n D = [ 0, 2]\n```\n> Output:\n> 2\n>\n> Explanation:\n>\n> The two tuples are:\n> 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n> 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n\n<!--more-->\n\nIt is Leetcode No.454, and I quickly find a simple solution. Because if we use the traditional backtracing solution , the time complex will be O(n^4).\n\nSo I just divide the four array into two part. And I use a map to store the result as <sum, times>.\n\nSo the time complex will be O(2*n^2) and then I can use O(n) to find the total nums.\n\n```\nclass Solution {\n    public:\n        int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n            map<int, int> sums1, sums2;\n            for (int i = 0; i < (int)A.size(); i++) {\n                for (int j = 0; j < (int)B.size(); j++) {\n                    if (sums1.find(A[i] + B[j]) != sums1.end()) {\n                        sums1.find(A[i] + B[j])->second++;\n                    } else {\n                        sums1.insert(pair<int, int>(A[i] + B[j], 1));\n                    }\n                }\n            }\n            for (int i = 0; i < (int)C.size(); i++) {\n                for (int j = 0; j < (int)D.size(); j++) {\n                    if (sums2.find(C[i] + D[j]) != sums2.end()) {\n                        sums2.find(C[i] + D[j])->second++;\n                    } else {\n                        sums2.insert(pair<int, int>(C[i] + D[j], 1));\n                    }\n                }\n            }\n\n            int res = 0;\n            for (auto i : sums1) {\n                if (sums2.find(0 - i.first) != sums2.end()) {\n                    res = res + i.second * sums2.find(0 - i.first)->second;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt is not the best solution but I think it is a easy-understand solution. Also, it gets AC.\n","slug":"4SumII","published":1,"updated":"2017-02-23T01:24:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvq0005x2f4klp99usc","content":"<blockquote>\n<p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p>\n<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p>\n<p>Example:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">A = [ 1, 2]</div><div class=\"line\">B = [-2,-1]</div><div class=\"line\">C = [-1, 2]</div><div class=\"line\">D = [ 0, 2]</div></pre></td></tr></table></figure></p>\n<p>Output:<br>2</p>\n<p>Explanation:</p>\n<p>The two tuples are:</p>\n<ol>\n<li>(0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</li>\n<li>(1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode No.454, and I quickly find a simple solution. Because if we use the traditional backtracing solution , the time complex will be O(n^4).</p>\n<p>So I just divide the four array into two part. And I use a map to store the result as <sum, times=\"\">.</sum,></p>\n<p>So the time complex will be O(2*n^2) and then I can use O(n) to find the total nums.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int fourSumCount(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B, vector&lt;int&gt;&amp; C, vector&lt;int&gt;&amp; D) &#123;</div><div class=\"line\">            map&lt;int, int&gt; sums1, sums2;</div><div class=\"line\">            for (int i = 0; i &lt; (int)A.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)B.size(); j++) &#123;</div><div class=\"line\">                    if (sums1.find(A[i] + B[j]) != sums1.end()) &#123;</div><div class=\"line\">                        sums1.find(A[i] + B[j])-&gt;second++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        sums1.insert(pair&lt;int, int&gt;(A[i] + B[j], 1));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)C.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)D.size(); j++) &#123;</div><div class=\"line\">                    if (sums2.find(C[i] + D[j]) != sums2.end()) &#123;</div><div class=\"line\">                        sums2.find(C[i] + D[j])-&gt;second++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        sums2.insert(pair&lt;int, int&gt;(C[i] + D[j], 1));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto i : sums1) &#123;</div><div class=\"line\">                if (sums2.find(0 - i.first) != sums2.end()) &#123;</div><div class=\"line\">                    res = res + i.second * sums2.find(0 - i.first)-&gt;second;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is not the best solution but I think it is a easy-understand solution. Also, it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p>\n<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p>\n<p>Example:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">A = [ 1, 2]</div><div class=\"line\">B = [-2,-1]</div><div class=\"line\">C = [-1, 2]</div><div class=\"line\">D = [ 0, 2]</div></pre></td></tr></table></figure></p>\n<p>Output:<br>2</p>\n<p>Explanation:</p>\n<p>The two tuples are:</p>\n<ol>\n<li>(0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</li>\n<li>(1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</li>\n</ol>\n</blockquote>","more":"<p>It is Leetcode No.454, and I quickly find a simple solution. Because if we use the traditional backtracing solution , the time complex will be O(n^4).</p>\n<p>So I just divide the four array into two part. And I use a map to store the result as <sum, times>.</p>\n<p>So the time complex will be O(2*n^2) and then I can use O(n) to find the total nums.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int fourSumCount(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B, vector&lt;int&gt;&amp; C, vector&lt;int&gt;&amp; D) &#123;</div><div class=\"line\">            map&lt;int, int&gt; sums1, sums2;</div><div class=\"line\">            for (int i = 0; i &lt; (int)A.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)B.size(); j++) &#123;</div><div class=\"line\">                    if (sums1.find(A[i] + B[j]) != sums1.end()) &#123;</div><div class=\"line\">                        sums1.find(A[i] + B[j])-&gt;second++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        sums1.insert(pair&lt;int, int&gt;(A[i] + B[j], 1));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)C.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)D.size(); j++) &#123;</div><div class=\"line\">                    if (sums2.find(C[i] + D[j]) != sums2.end()) &#123;</div><div class=\"line\">                        sums2.find(C[i] + D[j])-&gt;second++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        sums2.insert(pair&lt;int, int&gt;(C[i] + D[j], 1));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto i : sums1) &#123;</div><div class=\"line\">                if (sums2.find(0 - i.first) != sums2.end()) &#123;</div><div class=\"line\">                    res = res + i.second * sums2.find(0 - i.first)-&gt;second;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is not the best solution but I think it is a easy-understand solution. Also, it gets AC.</p>"},{"title":"Base 7","date":"2017-02-11T05:33:27.000Z","_content":"\n> Given an integer, return its base 7 string representation.\n>\n> Example 1:\n>\n> + Input: 100\n> + Output: \"202\"\n>\n> Example 2:\n>\n> + Input: -7\n> + Output: \"-10\"\n>\n> Note: The input will be in range of [-1e7, 1e7].\n\n<!--more-->\n\nEasy one. My solution is:\n\n```\nclass Solution {\n    public:\n        string convertTo7(int num) {\n            string res = \"\";\n            if (num == 0) {\n                res += '0';\n            }\n\n            int flag = 0;\n            if (num < 0) {\n                num = -num;\n                flag = 1;\n            }\n            while (num != 0) {\n                res = (char)('0' + (num % 7)) + res;\n                num = num / 7;\n            }\n\n            if (flag) {\n                res = '-' + res;\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/Base7.md","raw":"---\ntitle: Base 7\ndate: 2017-02-11 13:33:27\ntags:\n    - Math\n---\n\n> Given an integer, return its base 7 string representation.\n>\n> Example 1:\n>\n> + Input: 100\n> + Output: \"202\"\n>\n> Example 2:\n>\n> + Input: -7\n> + Output: \"-10\"\n>\n> Note: The input will be in range of [-1e7, 1e7].\n\n<!--more-->\n\nEasy one. My solution is:\n\n```\nclass Solution {\n    public:\n        string convertTo7(int num) {\n            string res = \"\";\n            if (num == 0) {\n                res += '0';\n            }\n\n            int flag = 0;\n            if (num < 0) {\n                num = -num;\n                flag = 1;\n            }\n            while (num != 0) {\n                res = (char)('0' + (num % 7)) + res;\n                num = num / 7;\n            }\n\n            if (flag) {\n                res = '-' + res;\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"Base7","published":1,"updated":"2017-02-12T05:34:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvs0006x2f4ro0p6co7","content":"<blockquote>\n<p>Given an integer, return its base 7 string representation.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 100</li>\n<li>Output: “202”</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: -7</li>\n<li>Output: “-10”</li>\n</ul>\n<p>Note: The input will be in range of [-1e7, 1e7].</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>Easy one. My solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string convertTo7(int num) &#123;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            if (num == 0) &#123;</div><div class=\"line\">                res += &apos;0&apos;;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int flag = 0;</div><div class=\"line\">            if (num &lt; 0) &#123;</div><div class=\"line\">                num = -num;</div><div class=\"line\">                flag = 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            while (num != 0) &#123;</div><div class=\"line\">                res = (char)(&apos;0&apos; + (num % 7)) + res;</div><div class=\"line\">                num = num / 7;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (flag) &#123;</div><div class=\"line\">                res = &apos;-&apos; + res;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an integer, return its base 7 string representation.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 100</li>\n<li>Output: “202”</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: -7</li>\n<li>Output: “-10”</li>\n</ul>\n<p>Note: The input will be in range of [-1e7, 1e7].</p>\n</blockquote>","more":"<p>Easy one. My solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string convertTo7(int num) &#123;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            if (num == 0) &#123;</div><div class=\"line\">                res += &apos;0&apos;;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int flag = 0;</div><div class=\"line\">            if (num &lt; 0) &#123;</div><div class=\"line\">                num = -num;</div><div class=\"line\">                flag = 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            while (num != 0) &#123;</div><div class=\"line\">                res = (char)(&apos;0&apos; + (num % 7)) + res;</div><div class=\"line\">                num = num / 7;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (flag) &#123;</div><div class=\"line\">                res = &apos;-&apos; + res;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Beautiful Arrangement","date":"2017-02-24T07:47:20.000Z","_content":"\n\n> Suppose you have N integers from 1 to N.\n>\n> We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 ≤ i ≤ N) in this array:\n>\n> + The number at the ith position is divisible by i.\n> + i is divisible by the number at the ith position.\n>\n> Now given N, how many beautiful arrangements can you construct?\n>\n> Example 1:\n> + Input: 2\n> + Output: 2\n>\n> Explanation:\n>\n> + The first beautiful arrangement is [1, 2]:\n> + Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\n> + Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\n> + The second beautiful arrangement is [2, 1]:\n> + Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\n> + Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\n>\n> Note:\n> + N is a positive integer and will not exceed 15.\n\n<!--more-->\n\nThis is Leetcode No.526, First I will share my normal solution. As the tag says 'Backtracking', so I use the similiar method as show all the permutation of a array. Just add some condition before go further.\n\n```\nclass Solution {\n    public:\n        int res;\n        int countArrangement(int N) {\n            res = 0;\n            vector<int> nums(N + 1);\n            _generate(nums, 1);\n            return res;\n        }\n\n        void _generate(vector<int> nums, int currentLength) {\n            if (currentLength == (int)nums.size()) {\n                res++;\n            } else {\n                for (int i = 1; i < (int)nums.size(); i++) {\n                    if (nums[i] == 0 && (i % currentLength == 0 || currentLength % i == 0)) {\n                        nums[i] = 1;\n                        _generate(nums, currentLength + 1);\n                        nums[i] = 0;\n                    }\n                }\n            }\n        }\n};\n```\n\nIt gets AC. But there is a much fucker solution. Just show the result of all the 15 result. LOL.\n","source":"_posts/BeautifulArrangement.md","raw":"---\ntitle: Beautiful Arrangement\ndate: 2017-02-24 15:47:20\ntags:\n    - Backtracking\n---\n\n\n> Suppose you have N integers from 1 to N.\n>\n> We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 ≤ i ≤ N) in this array:\n>\n> + The number at the ith position is divisible by i.\n> + i is divisible by the number at the ith position.\n>\n> Now given N, how many beautiful arrangements can you construct?\n>\n> Example 1:\n> + Input: 2\n> + Output: 2\n>\n> Explanation:\n>\n> + The first beautiful arrangement is [1, 2]:\n> + Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\n> + Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\n> + The second beautiful arrangement is [2, 1]:\n> + Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\n> + Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\n>\n> Note:\n> + N is a positive integer and will not exceed 15.\n\n<!--more-->\n\nThis is Leetcode No.526, First I will share my normal solution. As the tag says 'Backtracking', so I use the similiar method as show all the permutation of a array. Just add some condition before go further.\n\n```\nclass Solution {\n    public:\n        int res;\n        int countArrangement(int N) {\n            res = 0;\n            vector<int> nums(N + 1);\n            _generate(nums, 1);\n            return res;\n        }\n\n        void _generate(vector<int> nums, int currentLength) {\n            if (currentLength == (int)nums.size()) {\n                res++;\n            } else {\n                for (int i = 1; i < (int)nums.size(); i++) {\n                    if (nums[i] == 0 && (i % currentLength == 0 || currentLength % i == 0)) {\n                        nums[i] = 1;\n                        _generate(nums, currentLength + 1);\n                        nums[i] = 0;\n                    }\n                }\n            }\n        }\n};\n```\n\nIt gets AC. But there is a much fucker solution. Just show the result of all the 15 result. LOL.\n","slug":"BeautifulArrangement","published":1,"updated":"2017-02-24T09:23:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvt0008x2f4xhq7az26","content":"<blockquote>\n<p>Suppose you have N integers from 1 to N.</p>\n<p>We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 ≤ i ≤ N) in this array:</p>\n<ul>\n<li>The number at the ith position is divisible by i.</li>\n<li>i is divisible by the number at the ith position.</li>\n</ul>\n<p>Now given N, how many beautiful arrangements can you construct?</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 2</li>\n<li>Output: 2</li>\n</ul>\n<p>Explanation:</p>\n<ul>\n<li>The first beautiful arrangement is [1, 2]:</li>\n<li>Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).</li>\n<li>Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).</li>\n<li>The second beautiful arrangement is [2, 1]:</li>\n<li>Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).</li>\n<li>Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>N is a positive integer and will not exceed 15.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.526, First I will share my normal solution. As the tag says ‘Backtracking’, so I use the similiar method as show all the permutation of a array. Just add some condition before go further.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int countArrangement(int N) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            vector&lt;int&gt; nums(N + 1);</div><div class=\"line\">            _generate(nums, 1);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _generate(vector&lt;int&gt; nums, int currentLength) &#123;</div><div class=\"line\">            if (currentLength == (int)nums.size()) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (int i = 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                    if (nums[i] == 0 &amp;&amp; (i % currentLength == 0 || currentLength % i == 0)) &#123;</div><div class=\"line\">                        nums[i] = 1;</div><div class=\"line\">                        _generate(nums, currentLength + 1);</div><div class=\"line\">                        nums[i] = 0;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. But there is a much fucker solution. Just show the result of all the 15 result. LOL.</p>\n","excerpt":"<blockquote>\n<p>Suppose you have N integers from 1 to N.</p>\n<p>We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 ≤ i ≤ N) in this array:</p>\n<ul>\n<li>The number at the ith position is divisible by i.</li>\n<li>i is divisible by the number at the ith position.</li>\n</ul>\n<p>Now given N, how many beautiful arrangements can you construct?</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 2</li>\n<li>Output: 2</li>\n</ul>\n<p>Explanation:</p>\n<ul>\n<li>The first beautiful arrangement is [1, 2]:</li>\n<li>Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).</li>\n<li>Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).</li>\n<li>The second beautiful arrangement is [2, 1]:</li>\n<li>Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).</li>\n<li>Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>N is a positive integer and will not exceed 15.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.526, First I will share my normal solution. As the tag says ‘Backtracking’, so I use the similiar method as show all the permutation of a array. Just add some condition before go further.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int countArrangement(int N) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            vector&lt;int&gt; nums(N + 1);</div><div class=\"line\">            _generate(nums, 1);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _generate(vector&lt;int&gt; nums, int currentLength) &#123;</div><div class=\"line\">            if (currentLength == (int)nums.size()) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (int i = 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                    if (nums[i] == 0 &amp;&amp; (i % currentLength == 0 || currentLength % i == 0)) &#123;</div><div class=\"line\">                        nums[i] = 1;</div><div class=\"line\">                        _generate(nums, currentLength + 1);</div><div class=\"line\">                        nums[i] = 0;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. But there is a much fucker solution. Just show the result of all the 15 result. LOL.</p>"},{"title":"Battleships in a Board","date":"2017-01-05T05:46:25.000Z","_content":"\n> Given an 2D board, count how many different battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n>\n>  + You receive a valid board, made of only battleships or empty slots.\n>  + Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\n>  + At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n>\n> Example:\n>\n> X..X\n> ...X\n> ...X\n>\n> In the above board there are 2 battleships.\n>\n> Invalid Example:\n>\n> ...X\n> XXXX\n> ...X\n>\n> This is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n>\n> Follow up:\n> Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n<!-- more -->\n\nThis is Leetcode 419, and it's easy enough to figure out with simulation way as following:\n\n1. find the first X char, from up to down and left to right.\n2. if found, then search up and right, to check whether it is ok.\n3. use a global flag to mark if it's good for the result.\n\nThis method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.\n\nFor example, if we use a visited array to mark the visited cells. the solution will be like these:\n\n```\nbool checkShip(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (visited[idx][idy]) {\n        return false;\n    }\n\n    bool res = true;\n    // check the direction, down\n    int currentIdx = idx, currentIdy = idy;\n    while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n        if (board[currentIdx][currentIdy] == 'X') {\n            if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                res = false;\n                break;\n            }\n            if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                res = false;\n                break;\n            }\n        } else {\n            res = true;\n            break;\n        }\n        currentIdx++;\n    }\n    // check the direction, right\n    currentIdx = idx, currentIdy = idy;\n    if (!res) {\n        res = true;\n        while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n            if (board[currentIdx][currentIdy] == 'X') {\n                if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n                if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n            } else {\n                res = true;\n                break;\n            }\n            currentIdy++;\n        }\n    }\n    _visit(board, visited, idx, idy);\n    return res;\n}\n\nvoid _visit(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n        return;\n    }\n    if (visited[idx][idy]) {\n        return;\n    }\n    if (board[idx][idy] == '.') {\n        return;\n    }\n    visited[idx][idy] = 1;\n    _visit(board, visited, idx + 1, idy);\n    _visit(board, visited, idx, idy + 1);\n    _visit(board, visited, idx - 1, idy);\n    _visit(board, visited, idx, idy - 1);\n}\n\nint countBattleships(vector<vector<char> >& board) {\n    int* visited[board.size()];\n    for (int i = 0; i < (int)board.size(); i++) {\n        visited[i] = new int[board[0].size()];\n        memset(visited[i], 0, sizeof(int) * board[0].size());\n    }\n    int res = 0;\n    for (int idx = 0; idx < (int)board.size(); idx++) {\n        for (int idy = 0; idy < (int)board[0].size(); idy++) {\n            if (board[idx][idy] == 'X' && checkShip(board, visited, idx, idy)) {\n                res++;\n            }\n        }\n    }\n    return res;\n}\n```\n\nBut, if we can give up the visited array, just make sure the current cell's left or up have X char to mark it has been visited. It will make sense.\n\nSo, we should add these method to replace the former visited array:\n\n```\nbool isVisited(vector<vector<char> > &board, int idx, int idy) {\n    if (idx == 0 && idy == 0) {\n        return false;\n    } else if (idx == 0) {\n        return board[idx][idy - 1] == 'X';\n    } else if (idy == 0) {\n        return board[idx - 1][idy] == 'X';\n    } else {\n        return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n    }\n}\n```\nSo, the last AC code will like these:\n\n```\nclass Solution {\n    public:\n        bool isVisited(vector<vector<char> > &board, int idx, int idy) {\n            if (idx == 0 && idy == 0) {\n                return false;\n            } else if (idx == 0) {\n                return board[idx][idy - 1] == 'X';\n            } else if (idy == 0) {\n                return board[idx - 1][idy] == 'X';\n            } else {\n                return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n            }\n        }\n\n        bool checkShip(vector<vector<char> > &board, int idx, int idy) {\n            if (isVisited(board, idx, idy)) {\n                return false;\n            }\n\n            bool res = true;\n            // check the direction, down\n            int currentIdx = idx, currentIdy = idy;\n            while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                if (board[currentIdx][currentIdy] == 'X') {\n                    if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                    if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                } else {\n                    res = true;\n                    break;\n                }\n                currentIdx++;\n            }\n            // check the direction, right\n            currentIdx = idx, currentIdy = idy;\n            if (!res) {\n                res = true;\n                while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                    if (board[currentIdx][currentIdy] == 'X') {\n                        if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                        if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                    } else {\n                        res = true;\n                        break;\n                    }\n                    currentIdy++;\n                }\n            }\n            _visit(board, idx, idy);\n            return res;\n        }\n\n        void _visit(vector<vector<char> > &board, int idx, int idy) {\n            if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n                return;\n            }\n            if (isVisited(board, idx, idy)) {\n                return;\n            }\n            if (board[idx][idy] == '.') {\n                return;\n            }\n            // visited[idx][idy] = 1;\n            _visit(board, idx + 1, idy);\n            _visit(board, idx, idy + 1);\n            _visit(board, idx - 1, idy);\n            _visit(board, idx, idy - 1);\n        }\n\n        int countBattleships(vector<vector<char> >& board) {\n            int res = 0;\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'X' && checkShip(board, idx, idy)) {\n                        res++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n","source":"_posts/BattleshipsinaBoard.md","raw":"---\ntitle: Battleships in a Board\ndate: 2017-01-05 13:46:25\ntags:\n    - Simulation\n---\n\n> Given an 2D board, count how many different battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n>\n>  + You receive a valid board, made of only battleships or empty slots.\n>  + Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\n>  + At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n>\n> Example:\n>\n> X..X\n> ...X\n> ...X\n>\n> In the above board there are 2 battleships.\n>\n> Invalid Example:\n>\n> ...X\n> XXXX\n> ...X\n>\n> This is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n>\n> Follow up:\n> Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n<!-- more -->\n\nThis is Leetcode 419, and it's easy enough to figure out with simulation way as following:\n\n1. find the first X char, from up to down and left to right.\n2. if found, then search up and right, to check whether it is ok.\n3. use a global flag to mark if it's good for the result.\n\nThis method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.\n\nFor example, if we use a visited array to mark the visited cells. the solution will be like these:\n\n```\nbool checkShip(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (visited[idx][idy]) {\n        return false;\n    }\n\n    bool res = true;\n    // check the direction, down\n    int currentIdx = idx, currentIdy = idy;\n    while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n        if (board[currentIdx][currentIdy] == 'X') {\n            if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                res = false;\n                break;\n            }\n            if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                res = false;\n                break;\n            }\n        } else {\n            res = true;\n            break;\n        }\n        currentIdx++;\n    }\n    // check the direction, right\n    currentIdx = idx, currentIdy = idy;\n    if (!res) {\n        res = true;\n        while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n            if (board[currentIdx][currentIdy] == 'X') {\n                if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n                if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n            } else {\n                res = true;\n                break;\n            }\n            currentIdy++;\n        }\n    }\n    _visit(board, visited, idx, idy);\n    return res;\n}\n\nvoid _visit(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n        return;\n    }\n    if (visited[idx][idy]) {\n        return;\n    }\n    if (board[idx][idy] == '.') {\n        return;\n    }\n    visited[idx][idy] = 1;\n    _visit(board, visited, idx + 1, idy);\n    _visit(board, visited, idx, idy + 1);\n    _visit(board, visited, idx - 1, idy);\n    _visit(board, visited, idx, idy - 1);\n}\n\nint countBattleships(vector<vector<char> >& board) {\n    int* visited[board.size()];\n    for (int i = 0; i < (int)board.size(); i++) {\n        visited[i] = new int[board[0].size()];\n        memset(visited[i], 0, sizeof(int) * board[0].size());\n    }\n    int res = 0;\n    for (int idx = 0; idx < (int)board.size(); idx++) {\n        for (int idy = 0; idy < (int)board[0].size(); idy++) {\n            if (board[idx][idy] == 'X' && checkShip(board, visited, idx, idy)) {\n                res++;\n            }\n        }\n    }\n    return res;\n}\n```\n\nBut, if we can give up the visited array, just make sure the current cell's left or up have X char to mark it has been visited. It will make sense.\n\nSo, we should add these method to replace the former visited array:\n\n```\nbool isVisited(vector<vector<char> > &board, int idx, int idy) {\n    if (idx == 0 && idy == 0) {\n        return false;\n    } else if (idx == 0) {\n        return board[idx][idy - 1] == 'X';\n    } else if (idy == 0) {\n        return board[idx - 1][idy] == 'X';\n    } else {\n        return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n    }\n}\n```\nSo, the last AC code will like these:\n\n```\nclass Solution {\n    public:\n        bool isVisited(vector<vector<char> > &board, int idx, int idy) {\n            if (idx == 0 && idy == 0) {\n                return false;\n            } else if (idx == 0) {\n                return board[idx][idy - 1] == 'X';\n            } else if (idy == 0) {\n                return board[idx - 1][idy] == 'X';\n            } else {\n                return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n            }\n        }\n\n        bool checkShip(vector<vector<char> > &board, int idx, int idy) {\n            if (isVisited(board, idx, idy)) {\n                return false;\n            }\n\n            bool res = true;\n            // check the direction, down\n            int currentIdx = idx, currentIdy = idy;\n            while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                if (board[currentIdx][currentIdy] == 'X') {\n                    if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                    if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                } else {\n                    res = true;\n                    break;\n                }\n                currentIdx++;\n            }\n            // check the direction, right\n            currentIdx = idx, currentIdy = idy;\n            if (!res) {\n                res = true;\n                while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                    if (board[currentIdx][currentIdy] == 'X') {\n                        if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                        if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                    } else {\n                        res = true;\n                        break;\n                    }\n                    currentIdy++;\n                }\n            }\n            _visit(board, idx, idy);\n            return res;\n        }\n\n        void _visit(vector<vector<char> > &board, int idx, int idy) {\n            if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n                return;\n            }\n            if (isVisited(board, idx, idy)) {\n                return;\n            }\n            if (board[idx][idy] == '.') {\n                return;\n            }\n            // visited[idx][idy] = 1;\n            _visit(board, idx + 1, idy);\n            _visit(board, idx, idy + 1);\n            _visit(board, idx - 1, idy);\n            _visit(board, idx, idy - 1);\n        }\n\n        int countBattleships(vector<vector<char> >& board) {\n            int res = 0;\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'X' && checkShip(board, idx, idy)) {\n                        res++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n","slug":"BattleshipsinaBoard","published":1,"updated":"2017-04-18T17:05:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvv0009x2f4v5wyptz7","content":"<blockquote>\n<p>Given an 2D board, count how many different battleships are in it. The battleships are represented with ‘X’s, empty slots are represented with ‘.’s. You may assume the following rules:</p>\n<ul>\n<li>You receive a valid board, made of only battleships or empty slots.</li>\n<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.</li>\n<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\n</ul>\n<p>Example:</p>\n<p>X..X<br>…X<br>…X</p>\n<p>In the above board there are 2 battleships.</p>\n<p>Invalid Example:</p>\n<p>…X<br>XXXX<br>…X</p>\n<p>This is an invalid board that you will not receive - as battleships will always have a cell separating between them.</p>\n<p>Follow up:<br>Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 419, and it’s easy enough to figure out with simulation way as following:</p>\n<ol>\n<li>find the first X char, from up to down and left to right.</li>\n<li>if found, then search up and right, to check whether it is ok.</li>\n<li>use a global flag to mark if it’s good for the result.</li>\n</ol>\n<p>This method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.</p>\n<p>For example, if we use a visited array to mark the visited cells. the solution will be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool res = true;</div><div class=\"line\">    // check the direction, down</div><div class=\"line\">    int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">        if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">            if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            res = true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">        currentIdx++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // check the direction, right</div><div class=\"line\">    currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    if (!res) &#123;</div><div class=\"line\">        res = true;</div><div class=\"line\">        while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">            if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            currentIdy++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    _visit(board, visited, idx, idy);</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    visited[idx][idy] = 1;</div><div class=\"line\">    _visit(board, visited, idx + 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy + 1);</div><div class=\"line\">    _visit(board, visited, idx - 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy - 1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">    int* visited[board.size()];</div><div class=\"line\">    for (int i = 0; i &lt; (int)board.size(); i++) &#123;</div><div class=\"line\">        visited[i] = new int[board[0].size()];</div><div class=\"line\">        memset(visited[i], 0, sizeof(int) * board[0].size());</div><div class=\"line\">    &#125;</div><div class=\"line\">    int res = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">        for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">            if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, visited, idx, idy)) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But, if we can give up the visited array, just make sure the current cell’s left or up have X char to mark it has been visited. It will make sense.</p>\n<p>So, we should add these method to replace the former visited array:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">    if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125; else if (idx == 0) &#123;</div><div class=\"line\">        return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125; else if (idy == 0) &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So, the last AC code will like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else if (idx == 0) &#123;</div><div class=\"line\">                return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125; else if (idy == 0) &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool res = true;</div><div class=\"line\">            // check the direction, down</div><div class=\"line\">            int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = true;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                currentIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // check the direction, right</div><div class=\"line\">            currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            if (!res) &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                    if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                        if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res = true;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    currentIdy++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(board, idx, idy);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // visited[idx][idy] = 1;</div><div class=\"line\">            _visit(board, idx + 1, idy);</div><div class=\"line\">            _visit(board, idx, idy + 1);</div><div class=\"line\">            _visit(board, idx - 1, idy);</div><div class=\"line\">            _visit(board, idx, idy - 1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, idx, idy)) &#123;</div><div class=\"line\">                        res++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Given an 2D board, count how many different battleships are in it. The battleships are represented with ‘X’s, empty slots are represented with ‘.’s. You may assume the following rules:</p>\n<ul>\n<li>You receive a valid board, made of only battleships or empty slots.</li>\n<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.</li>\n<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\n</ul>\n<p>Example:</p>\n<p>X..X<br>…X<br>…X</p>\n<p>In the above board there are 2 battleships.</p>\n<p>Invalid Example:</p>\n<p>…X<br>XXXX<br>…X</p>\n<p>This is an invalid board that you will not receive - as battleships will always have a cell separating between them.</p>\n<p>Follow up:<br>Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?</p>\n</blockquote>","more":"<p>This is Leetcode 419, and it’s easy enough to figure out with simulation way as following:</p>\n<ol>\n<li>find the first X char, from up to down and left to right.</li>\n<li>if found, then search up and right, to check whether it is ok.</li>\n<li>use a global flag to mark if it’s good for the result.</li>\n</ol>\n<p>This method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.</p>\n<p>For example, if we use a visited array to mark the visited cells. the solution will be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool res = true;</div><div class=\"line\">    // check the direction, down</div><div class=\"line\">    int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">        if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">            if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            res = true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">        currentIdx++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // check the direction, right</div><div class=\"line\">    currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    if (!res) &#123;</div><div class=\"line\">        res = true;</div><div class=\"line\">        while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">            if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            currentIdy++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    _visit(board, visited, idx, idy);</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    visited[idx][idy] = 1;</div><div class=\"line\">    _visit(board, visited, idx + 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy + 1);</div><div class=\"line\">    _visit(board, visited, idx - 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy - 1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">    int* visited[board.size()];</div><div class=\"line\">    for (int i = 0; i &lt; (int)board.size(); i++) &#123;</div><div class=\"line\">        visited[i] = new int[board[0].size()];</div><div class=\"line\">        memset(visited[i], 0, sizeof(int) * board[0].size());</div><div class=\"line\">    &#125;</div><div class=\"line\">    int res = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">        for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">            if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, visited, idx, idy)) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But, if we can give up the visited array, just make sure the current cell’s left or up have X char to mark it has been visited. It will make sense.</p>\n<p>So, we should add these method to replace the former visited array:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">    if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125; else if (idx == 0) &#123;</div><div class=\"line\">        return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125; else if (idy == 0) &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So, the last AC code will like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else if (idx == 0) &#123;</div><div class=\"line\">                return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125; else if (idy == 0) &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool res = true;</div><div class=\"line\">            // check the direction, down</div><div class=\"line\">            int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = true;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                currentIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // check the direction, right</div><div class=\"line\">            currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            if (!res) &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                    if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                        if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res = true;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    currentIdy++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(board, idx, idy);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // visited[idx][idy] = 1;</div><div class=\"line\">            _visit(board, idx + 1, idy);</div><div class=\"line\">            _visit(board, idx, idy + 1);</div><div class=\"line\">            _visit(board, idx - 1, idy);</div><div class=\"line\">            _visit(board, idx, idy - 1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, idx, idy)) &#123;</div><div class=\"line\">                        res++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"Best Time to Buy and Sell Stock with Cooldown","date":"2017-02-06T07:44:45.000Z","_content":"\n> Say you have an array for which the ith element is the price of a given stock on day i.\n>\n> Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:\n>\n> + You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n> + After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)\n>\n> Example:\n> + prices = [1, 2, 3, 0, 2]\n> + maxProfit = 3\n> + transactions = [buy, sell, cooldown, buy, sell]\n\n<!--more-->\n\nThis is Leetcode No.309, and it is a such a DP problem. The important thing is to find the relationship of the condition transition.\n\nFirst, you can define two status, No.1 is cooldown, No.2 is hold, No.2 is none.\n\n+ When status = 0, you can only do go on.\n\n+ When status = 1, you can sell or hold.\n\n+ When status = 2, you can buy and go on.\n\nSo, quickly find the solution:\n\n```\nclass Solution {\n    public:\n        int res;\n        int maxProfit(vector<int>& prices) {\n            res = INT_MIN;\n\n            _calc(prices, 2, 0, 0, 0);\n\n            return res;\n        }\n\n        // status: 0 cooldown, 1 hold, 2 none\n        void _calc(vector<int> prices, int currentStatus, int currentIdx, int currentProfit, int holdPrice) {\n            if (currentProfit > res) {\n                res = currentProfit;\n            }\n            if (currentIdx >= (int)prices.size()) {\n                return;\n            }\n            if (currentStatus == 0) {\n                _calc(prices, 2, currentIdx + 1, currentProfit, 0);\n            }\n            if (currentStatus == 1) {\n                // sell if larger than hold\n                if (prices[currentIdx] > holdPrice) {\n                    _calc(prices, 0, currentIdx + 1, currentProfit + prices[currentIdx] - holdPrice, 0);\n                }\n                _calc(prices, 1, currentIdx + 1, currentProfit, holdPrice);\n            }\n            if (currentStatus == 2) {\n                _calc(prices, 2, currentIdx + 1, currentProfit, 0);\n                _calc(prices, 1, currentIdx + 1, currentProfit, prices[currentIdx]);\n            }\n        }\n};\n```\n\nIt is right, but it gets TLE. So, it should need a DP improvement.\n\nSo, we can use three status array to store the status of current to present our profit.\n\nAs, what I say above, we will have three status. So, we can define the DP representation:\n\n+ none[i] = max(none[i - 1], cooldown[i - 1]); // Stay at none, or rest from cooldown\n+ hold[i] = max(hold[i - 1], none[i - 1] - prices[i]); // Stay at hold, or buy from none\n+ cooldown[i] = hold[i - 1] + prices[i]; // Only one way from hold\n\nSo, the initial status is:\n\n+ none[0] = 0;\n+ hold[0] = -prices[0];\n+ cooldown = 0;\n\nSo, the solution is as following:\n\n```\nclass Solution {\n    public:\n        int maxProfit(vector<int>& prices){\n            if (prices.size() <= 1) return 0;\n            vector<int> none(prices.size(), 0);\n            vector<int> hold(prices.size(), 0);\n            vector<int> cooldown(prices.size(), 0);\n            hold[0] = -prices[0];\n            none[0] = 0;\n            cooldown[0] = INT_MIN;\n            for (int i = 1; i < (int)prices.size(); i++) {\n                none[i] = max(none[i - 1], cooldown[i - 1]);\n                hold[i] = max(hold[i - 1], none[i - 1] - prices[i]);\n                cooldown[i] = hold[i - 1] + prices[i];\n            }\n            return max(none[prices.size() - 1], cooldown[prices.size() - 1]);\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/BestTimetoBuyandSellStockwithCooldown.md","raw":"---\ntitle: Best Time to Buy and Sell Stock with Cooldown\ndate: 2017-02-06 15:44:45\ntags:\n    - Dynamic Programming\n---\n\n> Say you have an array for which the ith element is the price of a given stock on day i.\n>\n> Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:\n>\n> + You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).\n> + After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)\n>\n> Example:\n> + prices = [1, 2, 3, 0, 2]\n> + maxProfit = 3\n> + transactions = [buy, sell, cooldown, buy, sell]\n\n<!--more-->\n\nThis is Leetcode No.309, and it is a such a DP problem. The important thing is to find the relationship of the condition transition.\n\nFirst, you can define two status, No.1 is cooldown, No.2 is hold, No.2 is none.\n\n+ When status = 0, you can only do go on.\n\n+ When status = 1, you can sell or hold.\n\n+ When status = 2, you can buy and go on.\n\nSo, quickly find the solution:\n\n```\nclass Solution {\n    public:\n        int res;\n        int maxProfit(vector<int>& prices) {\n            res = INT_MIN;\n\n            _calc(prices, 2, 0, 0, 0);\n\n            return res;\n        }\n\n        // status: 0 cooldown, 1 hold, 2 none\n        void _calc(vector<int> prices, int currentStatus, int currentIdx, int currentProfit, int holdPrice) {\n            if (currentProfit > res) {\n                res = currentProfit;\n            }\n            if (currentIdx >= (int)prices.size()) {\n                return;\n            }\n            if (currentStatus == 0) {\n                _calc(prices, 2, currentIdx + 1, currentProfit, 0);\n            }\n            if (currentStatus == 1) {\n                // sell if larger than hold\n                if (prices[currentIdx] > holdPrice) {\n                    _calc(prices, 0, currentIdx + 1, currentProfit + prices[currentIdx] - holdPrice, 0);\n                }\n                _calc(prices, 1, currentIdx + 1, currentProfit, holdPrice);\n            }\n            if (currentStatus == 2) {\n                _calc(prices, 2, currentIdx + 1, currentProfit, 0);\n                _calc(prices, 1, currentIdx + 1, currentProfit, prices[currentIdx]);\n            }\n        }\n};\n```\n\nIt is right, but it gets TLE. So, it should need a DP improvement.\n\nSo, we can use three status array to store the status of current to present our profit.\n\nAs, what I say above, we will have three status. So, we can define the DP representation:\n\n+ none[i] = max(none[i - 1], cooldown[i - 1]); // Stay at none, or rest from cooldown\n+ hold[i] = max(hold[i - 1], none[i - 1] - prices[i]); // Stay at hold, or buy from none\n+ cooldown[i] = hold[i - 1] + prices[i]; // Only one way from hold\n\nSo, the initial status is:\n\n+ none[0] = 0;\n+ hold[0] = -prices[0];\n+ cooldown = 0;\n\nSo, the solution is as following:\n\n```\nclass Solution {\n    public:\n        int maxProfit(vector<int>& prices){\n            if (prices.size() <= 1) return 0;\n            vector<int> none(prices.size(), 0);\n            vector<int> hold(prices.size(), 0);\n            vector<int> cooldown(prices.size(), 0);\n            hold[0] = -prices[0];\n            none[0] = 0;\n            cooldown[0] = INT_MIN;\n            for (int i = 1; i < (int)prices.size(); i++) {\n                none[i] = max(none[i - 1], cooldown[i - 1]);\n                hold[i] = max(hold[i - 1], none[i - 1] - prices[i]);\n                cooldown[i] = hold[i - 1] + prices[i];\n            }\n            return max(none[prices.size() - 1], cooldown[prices.size() - 1]);\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"BestTimetoBuyandSellStockwithCooldown","published":1,"updated":"2017-02-06T08:35:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvw000bx2f4fptbm1cs","content":"<blockquote>\n<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n<ul>\n<li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>\n<li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li>\n</ul>\n<p>Example:</p>\n<ul>\n<li>prices = [1, 2, 3, 0, 2]</li>\n<li>maxProfit = 3</li>\n<li>transactions = [buy, sell, cooldown, buy, sell]</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.309, and it is a such a DP problem. The important thing is to find the relationship of the condition transition.</p>\n<p>First, you can define two status, No.1 is cooldown, No.2 is hold, No.2 is none.</p>\n<ul>\n<li><p>When status = 0, you can only do go on.</p>\n</li>\n<li><p>When status = 1, you can sell or hold.</p>\n</li>\n<li><p>When status = 2, you can buy and go on.</p>\n</li>\n</ul>\n<p>So, quickly find the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</div><div class=\"line\">            res = INT_MIN;</div><div class=\"line\"></div><div class=\"line\">            _calc(prices, 2, 0, 0, 0);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // status: 0 cooldown, 1 hold, 2 none</div><div class=\"line\">        void _calc(vector&lt;int&gt; prices, int currentStatus, int currentIdx, int currentProfit, int holdPrice) &#123;</div><div class=\"line\">            if (currentProfit &gt; res) &#123;</div><div class=\"line\">                res = currentProfit;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentIdx &gt;= (int)prices.size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentStatus == 0) &#123;</div><div class=\"line\">                _calc(prices, 2, currentIdx + 1, currentProfit, 0);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentStatus == 1) &#123;</div><div class=\"line\">                // sell if larger than hold</div><div class=\"line\">                if (prices[currentIdx] &gt; holdPrice) &#123;</div><div class=\"line\">                    _calc(prices, 0, currentIdx + 1, currentProfit + prices[currentIdx] - holdPrice, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">                _calc(prices, 1, currentIdx + 1, currentProfit, holdPrice);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentStatus == 2) &#123;</div><div class=\"line\">                _calc(prices, 2, currentIdx + 1, currentProfit, 0);</div><div class=\"line\">                _calc(prices, 1, currentIdx + 1, currentProfit, prices[currentIdx]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is right, but it gets TLE. So, it should need a DP improvement.</p>\n<p>So, we can use three status array to store the status of current to present our profit.</p>\n<p>As, what I say above, we will have three status. So, we can define the DP representation:</p>\n<ul>\n<li>none[i] = max(none[i - 1], cooldown[i - 1]); // Stay at none, or rest from cooldown</li>\n<li>hold[i] = max(hold[i - 1], none[i - 1] - prices[i]); // Stay at hold, or buy from none</li>\n<li>cooldown[i] = hold[i - 1] + prices[i]; // Only one way from hold</li>\n</ul>\n<p>So, the initial status is:</p>\n<ul>\n<li>none[0] = 0;</li>\n<li>hold[0] = -prices[0];</li>\n<li>cooldown = 0;</li>\n</ul>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxProfit(vector&lt;int&gt;&amp; prices)&#123;</div><div class=\"line\">            if (prices.size() &lt;= 1) return 0;</div><div class=\"line\">            vector&lt;int&gt; none(prices.size(), 0);</div><div class=\"line\">            vector&lt;int&gt; hold(prices.size(), 0);</div><div class=\"line\">            vector&lt;int&gt; cooldown(prices.size(), 0);</div><div class=\"line\">            hold[0] = -prices[0];</div><div class=\"line\">            none[0] = 0;</div><div class=\"line\">            cooldown[0] = INT_MIN;</div><div class=\"line\">            for (int i = 1; i &lt; (int)prices.size(); i++) &#123;</div><div class=\"line\">                none[i] = max(none[i - 1], cooldown[i - 1]);</div><div class=\"line\">                hold[i] = max(hold[i - 1], none[i - 1] - prices[i]);</div><div class=\"line\">                cooldown[i] = hold[i - 1] + prices[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return max(none[prices.size() - 1], cooldown[prices.size() - 1]);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n<ul>\n<li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>\n<li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li>\n</ul>\n<p>Example:</p>\n<ul>\n<li>prices = [1, 2, 3, 0, 2]</li>\n<li>maxProfit = 3</li>\n<li>transactions = [buy, sell, cooldown, buy, sell]</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.309, and it is a such a DP problem. The important thing is to find the relationship of the condition transition.</p>\n<p>First, you can define two status, No.1 is cooldown, No.2 is hold, No.2 is none.</p>\n<ul>\n<li><p>When status = 0, you can only do go on.</p>\n</li>\n<li><p>When status = 1, you can sell or hold.</p>\n</li>\n<li><p>When status = 2, you can buy and go on.</p>\n</li>\n</ul>\n<p>So, quickly find the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</div><div class=\"line\">            res = INT_MIN;</div><div class=\"line\"></div><div class=\"line\">            _calc(prices, 2, 0, 0, 0);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // status: 0 cooldown, 1 hold, 2 none</div><div class=\"line\">        void _calc(vector&lt;int&gt; prices, int currentStatus, int currentIdx, int currentProfit, int holdPrice) &#123;</div><div class=\"line\">            if (currentProfit &gt; res) &#123;</div><div class=\"line\">                res = currentProfit;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentIdx &gt;= (int)prices.size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentStatus == 0) &#123;</div><div class=\"line\">                _calc(prices, 2, currentIdx + 1, currentProfit, 0);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentStatus == 1) &#123;</div><div class=\"line\">                // sell if larger than hold</div><div class=\"line\">                if (prices[currentIdx] &gt; holdPrice) &#123;</div><div class=\"line\">                    _calc(prices, 0, currentIdx + 1, currentProfit + prices[currentIdx] - holdPrice, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">                _calc(prices, 1, currentIdx + 1, currentProfit, holdPrice);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentStatus == 2) &#123;</div><div class=\"line\">                _calc(prices, 2, currentIdx + 1, currentProfit, 0);</div><div class=\"line\">                _calc(prices, 1, currentIdx + 1, currentProfit, prices[currentIdx]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is right, but it gets TLE. So, it should need a DP improvement.</p>\n<p>So, we can use three status array to store the status of current to present our profit.</p>\n<p>As, what I say above, we will have three status. So, we can define the DP representation:</p>\n<ul>\n<li>none[i] = max(none[i - 1], cooldown[i - 1]); // Stay at none, or rest from cooldown</li>\n<li>hold[i] = max(hold[i - 1], none[i - 1] - prices[i]); // Stay at hold, or buy from none</li>\n<li>cooldown[i] = hold[i - 1] + prices[i]; // Only one way from hold</li>\n</ul>\n<p>So, the initial status is:</p>\n<ul>\n<li>none[0] = 0;</li>\n<li>hold[0] = -prices[0];</li>\n<li>cooldown = 0;</li>\n</ul>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxProfit(vector&lt;int&gt;&amp; prices)&#123;</div><div class=\"line\">            if (prices.size() &lt;= 1) return 0;</div><div class=\"line\">            vector&lt;int&gt; none(prices.size(), 0);</div><div class=\"line\">            vector&lt;int&gt; hold(prices.size(), 0);</div><div class=\"line\">            vector&lt;int&gt; cooldown(prices.size(), 0);</div><div class=\"line\">            hold[0] = -prices[0];</div><div class=\"line\">            none[0] = 0;</div><div class=\"line\">            cooldown[0] = INT_MIN;</div><div class=\"line\">            for (int i = 1; i &lt; (int)prices.size(); i++) &#123;</div><div class=\"line\">                none[i] = max(none[i - 1], cooldown[i - 1]);</div><div class=\"line\">                hold[i] = max(hold[i - 1], none[i - 1] - prices[i]);</div><div class=\"line\">                cooldown[i] = hold[i - 1] + prices[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return max(none[prices.size() - 1], cooldown[prices.size() - 1]);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Brick Wall","date":"2017-04-09T08:09:27.000Z","_content":"\n> There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.\n>\n> The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.\n>\n> If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.\n>\n> You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\n>\n> Example:\n>\n> **Input**:\n>```\n[\n    [1,2,2,1],\n    [3,1,2],\n    [1,3,2],\n    [2,4],\n    [3,1,2],\n    [1,3,1,1]\n]\n```\n> **Output:** 2\n>\n<!--more-->\n> **Explanation:**\n>\n> ![Explanation](https://leetcode.com/static/images/problemset/brick_wall.png)\n>\n> Note:\n>   + The width sum of bricks in different rows are the same and won't exceed INT_MAX.\n>   + The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.\n\nThis is Leetcode No.554, and it is also a problem of Hihocode contest.\n\nFirst I find a solution about this poblem with an easy-to-think way.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int leastBricks(vector<vector<int> >& wall) {\n            int maxSum = 0;\n            for (int i = 0; i < (int)wall[0].size(); i++) {\n                maxSum += wall[0][i];\n            }\n\n            map<int, set<int> > levels;\n            for (int i = 0; i < (int)wall.size(); i++) {\n                int level = 0;\n                set<int> brickSum;\n                for (int idx = 0; idx < (int)wall[idx].size() - 1; idx++) {\n                    level += wall[i][idx];\n                    brickSum.insert(level);\n                }\n                levels.insert(pair<int, set<int> >(i, brickSum));\n            }\n\n            int res = wall.size();\n            for (int level = 0; level < (int)wall.size(); level++) {\n                for (auto i : levels.find(level)->second) {\n                    int val = wall.size();\n                    for (int idx = 0; idx < (int)wall.size(); idx++) {\n                        if (levels.find(idx)->second.size() > 0 && levels.find(idx)->second.find(i) != levels.find(idx)->second.end()) {\n                            val--;\n                        }\n                    }\n                    res = min(res, val);\n                }\n            }\n            return res;\n        }\n};\n```\n\nI just mark every mark in the `<level, marks>` map. But this method has O(n).\n\nBut it is too complicated. And then I find a better way to save the space complex.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int leastBricks(vector<vector<int> >& wall) {\n            int res = wall.size();\n            map<int, int> marks;\n            for (int level = 0; level < (int)wall.size(); level++) {\n                int brickSum = 0;\n                for (int idx = 0; idx < (int)wall[level].size() - 1; idx++) {\n                    brickSum += wall[level][idx];\n                    if (marks.find(brickSum) == marks.end()) {\n                        marks.insert(pair<int, int>(brickSum, 1));\n                    } else {\n                        marks.find(brickSum)->second++;\n                    }\n                }\n            }\n            for (auto i : marks) {\n                res = min(res, (int)wall.size() - i.second);\n            }\n            return res;\n        }\n};\n```\n\nIt also gets AC. But this solution save more space.\n","source":"_posts/BrickWall.md","raw":"---\ntitle: Brick Wall\ndate: 2017-04-09 16:09:27\ntags:\n    - Hash Table\n---\n\n> There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.\n>\n> The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.\n>\n> If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.\n>\n> You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\n>\n> Example:\n>\n> **Input**:\n>```\n[\n    [1,2,2,1],\n    [3,1,2],\n    [1,3,2],\n    [2,4],\n    [3,1,2],\n    [1,3,1,1]\n]\n```\n> **Output:** 2\n>\n<!--more-->\n> **Explanation:**\n>\n> ![Explanation](https://leetcode.com/static/images/problemset/brick_wall.png)\n>\n> Note:\n>   + The width sum of bricks in different rows are the same and won't exceed INT_MAX.\n>   + The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.\n\nThis is Leetcode No.554, and it is also a problem of Hihocode contest.\n\nFirst I find a solution about this poblem with an easy-to-think way.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int leastBricks(vector<vector<int> >& wall) {\n            int maxSum = 0;\n            for (int i = 0; i < (int)wall[0].size(); i++) {\n                maxSum += wall[0][i];\n            }\n\n            map<int, set<int> > levels;\n            for (int i = 0; i < (int)wall.size(); i++) {\n                int level = 0;\n                set<int> brickSum;\n                for (int idx = 0; idx < (int)wall[idx].size() - 1; idx++) {\n                    level += wall[i][idx];\n                    brickSum.insert(level);\n                }\n                levels.insert(pair<int, set<int> >(i, brickSum));\n            }\n\n            int res = wall.size();\n            for (int level = 0; level < (int)wall.size(); level++) {\n                for (auto i : levels.find(level)->second) {\n                    int val = wall.size();\n                    for (int idx = 0; idx < (int)wall.size(); idx++) {\n                        if (levels.find(idx)->second.size() > 0 && levels.find(idx)->second.find(i) != levels.find(idx)->second.end()) {\n                            val--;\n                        }\n                    }\n                    res = min(res, val);\n                }\n            }\n            return res;\n        }\n};\n```\n\nI just mark every mark in the `<level, marks>` map. But this method has O(n).\n\nBut it is too complicated. And then I find a better way to save the space complex.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int leastBricks(vector<vector<int> >& wall) {\n            int res = wall.size();\n            map<int, int> marks;\n            for (int level = 0; level < (int)wall.size(); level++) {\n                int brickSum = 0;\n                for (int idx = 0; idx < (int)wall[level].size() - 1; idx++) {\n                    brickSum += wall[level][idx];\n                    if (marks.find(brickSum) == marks.end()) {\n                        marks.insert(pair<int, int>(brickSum, 1));\n                    } else {\n                        marks.find(brickSum)->second++;\n                    }\n                }\n            }\n            for (auto i : marks) {\n                res = min(res, (int)wall.size() - i.second);\n            }\n            return res;\n        }\n};\n```\n\nIt also gets AC. But this solution save more space.\n","slug":"BrickWall","published":1,"updated":"2017-04-09T09:37:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvx000dx2f48vimn79r","content":"<blockquote>\n<p>There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.</p>\n<p>The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.</p>\n<p>If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.</p>\n<p>You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</p>\n<p>Example:</p>\n<p><strong>Input</strong>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [1,2,2,1],</div><div class=\"line\">    [3,1,2],</div><div class=\"line\">    [1,3,2],</div><div class=\"line\">    [2,4],</div><div class=\"line\">    [3,1,2],</div><div class=\"line\">    [1,3,1,1]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p><strong>Output:</strong> 2</p>\n<a id=\"more\"></a>\n<p><strong>Explanation:</strong></p>\n<p><img src=\"https://leetcode.com/static/images/problemset/brick_wall.png\" alt=\"Explanation\"></p>\n<p>Note:</p>\n<ul>\n<li>The width sum of bricks in different rows are the same and won’t exceed INT_MAX.</li>\n<li>The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won’t exceed 20,000.</li>\n</ul>\n</blockquote>\n<p>This is Leetcode No.554, and it is also a problem of Hihocode contest.</p>\n<p>First I find a solution about this poblem with an easy-to-think way.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int leastBricks(vector&lt;vector&lt;int&gt; &gt;&amp; wall) &#123;</div><div class=\"line\">            int maxSum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)wall[0].size(); i++) &#123;</div><div class=\"line\">                maxSum += wall[0][i];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            map&lt;int, set&lt;int&gt; &gt; levels;</div><div class=\"line\">            for (int i = 0; i &lt; (int)wall.size(); i++) &#123;</div><div class=\"line\">                int level = 0;</div><div class=\"line\">                set&lt;int&gt; brickSum;</div><div class=\"line\">                for (int idx = 0; idx &lt; (int)wall[idx].size() - 1; idx++) &#123;</div><div class=\"line\">                    level += wall[i][idx];</div><div class=\"line\">                    brickSum.insert(level);</div><div class=\"line\">                &#125;</div><div class=\"line\">                levels.insert(pair&lt;int, set&lt;int&gt; &gt;(i, brickSum));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = wall.size();</div><div class=\"line\">            for (int level = 0; level &lt; (int)wall.size(); level++) &#123;</div><div class=\"line\">                for (auto i : levels.find(level)-&gt;second) &#123;</div><div class=\"line\">                    int val = wall.size();</div><div class=\"line\">                    for (int idx = 0; idx &lt; (int)wall.size(); idx++) &#123;</div><div class=\"line\">                        if (levels.find(idx)-&gt;second.size() &gt; 0 &amp;&amp; levels.find(idx)-&gt;second.find(i) != levels.find(idx)-&gt;second.end()) &#123;</div><div class=\"line\">                            val--;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res = min(res, val);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I just mark every mark in the <code>&lt;level, marks&gt;</code> map. But this method has O(n).</p>\n<p>But it is too complicated. And then I find a better way to save the space complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int leastBricks(vector&lt;vector&lt;int&gt; &gt;&amp; wall) &#123;</div><div class=\"line\">            int res = wall.size();</div><div class=\"line\">            map&lt;int, int&gt; marks;</div><div class=\"line\">            for (int level = 0; level &lt; (int)wall.size(); level++) &#123;</div><div class=\"line\">                int brickSum = 0;</div><div class=\"line\">                for (int idx = 0; idx &lt; (int)wall[level].size() - 1; idx++) &#123;</div><div class=\"line\">                    brickSum += wall[level][idx];</div><div class=\"line\">                    if (marks.find(brickSum) == marks.end()) &#123;</div><div class=\"line\">                        marks.insert(pair&lt;int, int&gt;(brickSum, 1));</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        marks.find(brickSum)-&gt;second++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (auto i : marks) &#123;</div><div class=\"line\">                res = min(res, (int)wall.size() - i.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It also gets AC. But this solution save more space.</p>\n","excerpt":"<blockquote>\n<p>There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.</p>\n<p>The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.</p>\n<p>If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.</p>\n<p>You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</p>\n<p>Example:</p>\n<p><strong>Input</strong>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [1,2,2,1],</div><div class=\"line\">    [3,1,2],</div><div class=\"line\">    [1,3,2],</div><div class=\"line\">    [2,4],</div><div class=\"line\">    [3,1,2],</div><div class=\"line\">    [1,3,1,1]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p><strong>Output:</strong> 2</p>","more":"<p><strong>Explanation:</strong></p>\n<p><img src=\"https://leetcode.com/static/images/problemset/brick_wall.png\" alt=\"Explanation\"></p>\n<p>Note:</p>\n<ul>\n<li>The width sum of bricks in different rows are the same and won’t exceed INT_MAX.</li>\n<li>The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won’t exceed 20,000.</li>\n</ul>\n</blockquote>\n<p>This is Leetcode No.554, and it is also a problem of Hihocode contest.</p>\n<p>First I find a solution about this poblem with an easy-to-think way.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int leastBricks(vector&lt;vector&lt;int&gt; &gt;&amp; wall) &#123;</div><div class=\"line\">            int maxSum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)wall[0].size(); i++) &#123;</div><div class=\"line\">                maxSum += wall[0][i];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            map&lt;int, set&lt;int&gt; &gt; levels;</div><div class=\"line\">            for (int i = 0; i &lt; (int)wall.size(); i++) &#123;</div><div class=\"line\">                int level = 0;</div><div class=\"line\">                set&lt;int&gt; brickSum;</div><div class=\"line\">                for (int idx = 0; idx &lt; (int)wall[idx].size() - 1; idx++) &#123;</div><div class=\"line\">                    level += wall[i][idx];</div><div class=\"line\">                    brickSum.insert(level);</div><div class=\"line\">                &#125;</div><div class=\"line\">                levels.insert(pair&lt;int, set&lt;int&gt; &gt;(i, brickSum));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = wall.size();</div><div class=\"line\">            for (int level = 0; level &lt; (int)wall.size(); level++) &#123;</div><div class=\"line\">                for (auto i : levels.find(level)-&gt;second) &#123;</div><div class=\"line\">                    int val = wall.size();</div><div class=\"line\">                    for (int idx = 0; idx &lt; (int)wall.size(); idx++) &#123;</div><div class=\"line\">                        if (levels.find(idx)-&gt;second.size() &gt; 0 &amp;&amp; levels.find(idx)-&gt;second.find(i) != levels.find(idx)-&gt;second.end()) &#123;</div><div class=\"line\">                            val--;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res = min(res, val);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I just mark every mark in the <code>&lt;level, marks&gt;</code> map. But this method has O(n).</p>\n<p>But it is too complicated. And then I find a better way to save the space complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int leastBricks(vector&lt;vector&lt;int&gt; &gt;&amp; wall) &#123;</div><div class=\"line\">            int res = wall.size();</div><div class=\"line\">            map&lt;int, int&gt; marks;</div><div class=\"line\">            for (int level = 0; level &lt; (int)wall.size(); level++) &#123;</div><div class=\"line\">                int brickSum = 0;</div><div class=\"line\">                for (int idx = 0; idx &lt; (int)wall[level].size() - 1; idx++) &#123;</div><div class=\"line\">                    brickSum += wall[level][idx];</div><div class=\"line\">                    if (marks.find(brickSum) == marks.end()) &#123;</div><div class=\"line\">                        marks.insert(pair&lt;int, int&gt;(brickSum, 1));</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        marks.find(brickSum)-&gt;second++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (auto i : marks) &#123;</div><div class=\"line\">                res = min(res, (int)wall.size() - i.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It also gets AC. But this solution save more space.</p>"},{"title":"Bulb Switcher","date":"2017-03-28T05:47:57.000Z","_content":"\n> There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.\n>\n> Example:\n>\n>```\nGiven n = 3.\n\nAt first, the three bulbs are [off, off, off].\nAfter first round, the three bulbs are [on, on, on].\nAfter second round, the three bulbs are [on, off, on].\nAfter third round, the three bulbs are [on, off, off].\n\nSo you should return 1, because there is only one bulb is on.\n```\n\n<!--more-->\n\nThis is Leetcode No.319. It is a Math problem in my opinion. So, I make it a math way to solve. Code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int bulbSwitch(int num) {\n            int res = 0;\n            for (int idx = 1; idx <= num; idx++) {\n                int flag = 0;\n                for (int del = 1; del <= idx / del; del++) {\n                    if (idx % del == 0) {\n                        flag = flag + (idx / del == del ? 1 : 2);\n                    }\n                }\n                if (flag % 2 == 1) {\n                    res++;\n                }\n            }\n            return res;\n        }\n};\n```\n\nHowever, It gets a TLE. This is a O(n) method. So, I think there is other way to solve the problem.\n\nSo, I check the discuss and find a better way to solve the problem a really O(n) solution.\n\nYou can find which kind of number is on. Those can be multiply by the same num.\n\nSo, the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int bulbSwitch(int num) {\n            int res = 0;\n            for (int i = 1; i * i <= num; i++) {\n                res++;\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC. But I find a O(1) solution in the discuss.\n\nWe just need to know, the max idx which under the condition that `idx * idx <= num`\n\nSo, the idx is the result. The code can be much clearer.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int bulbSwitch(int n) {\n            return sqrt(n);\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/BulbSwitcher.md","raw":"---\ntitle: Bulb Switcher\ndate: 2017-03-28 13:47:57\ntags:\n    - Math\n    - Brainteaser\n---\n\n> There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.\n>\n> Example:\n>\n>```\nGiven n = 3.\n\nAt first, the three bulbs are [off, off, off].\nAfter first round, the three bulbs are [on, on, on].\nAfter second round, the three bulbs are [on, off, on].\nAfter third round, the three bulbs are [on, off, off].\n\nSo you should return 1, because there is only one bulb is on.\n```\n\n<!--more-->\n\nThis is Leetcode No.319. It is a Math problem in my opinion. So, I make it a math way to solve. Code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int bulbSwitch(int num) {\n            int res = 0;\n            for (int idx = 1; idx <= num; idx++) {\n                int flag = 0;\n                for (int del = 1; del <= idx / del; del++) {\n                    if (idx % del == 0) {\n                        flag = flag + (idx / del == del ? 1 : 2);\n                    }\n                }\n                if (flag % 2 == 1) {\n                    res++;\n                }\n            }\n            return res;\n        }\n};\n```\n\nHowever, It gets a TLE. This is a O(n) method. So, I think there is other way to solve the problem.\n\nSo, I check the discuss and find a better way to solve the problem a really O(n) solution.\n\nYou can find which kind of number is on. Those can be multiply by the same num.\n\nSo, the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int bulbSwitch(int num) {\n            int res = 0;\n            for (int i = 1; i * i <= num; i++) {\n                res++;\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC. But I find a O(1) solution in the discuss.\n\nWe just need to know, the max idx which under the condition that `idx * idx <= num`\n\nSo, the idx is the result. The code can be much clearer.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int bulbSwitch(int n) {\n            return sqrt(n);\n        }\n};\n```\n\nIt gets AC.\n","slug":"BulbSwitcher","published":1,"updated":"2017-03-28T08:19:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvy000gx2f4w0pcg5hn","content":"<blockquote>\n<p>There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given n = 3.</div><div class=\"line\"></div><div class=\"line\">At first, the three bulbs are [off, off, off].</div><div class=\"line\">After first round, the three bulbs are [on, on, on].</div><div class=\"line\">After second round, the three bulbs are [on, off, on].</div><div class=\"line\">After third round, the three bulbs are [on, off, off].</div><div class=\"line\"></div><div class=\"line\">So you should return 1, because there is only one bulb is on.</div></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.319. It is a Math problem in my opinion. So, I make it a math way to solve. Code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int bulbSwitch(int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 1; idx &lt;= num; idx++) &#123;</div><div class=\"line\">                int flag = 0;</div><div class=\"line\">                for (int del = 1; del &lt;= idx / del; del++) &#123;</div><div class=\"line\">                    if (idx % del == 0) &#123;</div><div class=\"line\">                        flag = flag + (idx / del == del ? 1 : 2);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (flag % 2 == 1) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, It gets a TLE. This is a O(n) method. So, I think there is other way to solve the problem.</p>\n<p>So, I check the discuss and find a better way to solve the problem a really O(n) solution.</p>\n<p>You can find which kind of number is on. Those can be multiply by the same num.</p>\n<p>So, the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int bulbSwitch(int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int i = 1; i * i &lt;= num; i++) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. But I find a O(1) solution in the discuss.</p>\n<p>We just need to know, the max idx which under the condition that <code>idx * idx &lt;= num</code></p>\n<p>So, the idx is the result. The code can be much clearer.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int bulbSwitch(int n) &#123;</div><div class=\"line\">            return sqrt(n);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given n = 3.</div><div class=\"line\"></div><div class=\"line\">At first, the three bulbs are [off, off, off].</div><div class=\"line\">After first round, the three bulbs are [on, on, on].</div><div class=\"line\">After second round, the three bulbs are [on, off, on].</div><div class=\"line\">After third round, the three bulbs are [on, off, off].</div><div class=\"line\"></div><div class=\"line\">So you should return 1, because there is only one bulb is on.</div></pre></td></tr></table></figure>\n</blockquote>","more":"<p>This is Leetcode No.319. It is a Math problem in my opinion. So, I make it a math way to solve. Code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int bulbSwitch(int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 1; idx &lt;= num; idx++) &#123;</div><div class=\"line\">                int flag = 0;</div><div class=\"line\">                for (int del = 1; del &lt;= idx / del; del++) &#123;</div><div class=\"line\">                    if (idx % del == 0) &#123;</div><div class=\"line\">                        flag = flag + (idx / del == del ? 1 : 2);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (flag % 2 == 1) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, It gets a TLE. This is a O(n) method. So, I think there is other way to solve the problem.</p>\n<p>So, I check the discuss and find a better way to solve the problem a really O(n) solution.</p>\n<p>You can find which kind of number is on. Those can be multiply by the same num.</p>\n<p>So, the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int bulbSwitch(int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int i = 1; i * i &lt;= num; i++) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. But I find a O(1) solution in the discuss.</p>\n<p>We just need to know, the max idx which under the condition that <code>idx * idx &lt;= num</code></p>\n<p>So, the idx is the result. The code can be much clearer.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int bulbSwitch(int n) &#123;</div><div class=\"line\">            return sqrt(n);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Can I Win","date":"2017-03-13T08:28:42.000Z","_content":"\n\n> In the \"100 game,\" two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.\n>\n> What if we change the game so that players cannot re-use integers?\n>\n> For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total >= 100.\n>\n> Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally.\n>\n> You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.\n>\n> Example:\n> ```\nInput:\n    maxChoosableInteger = 10\n    desiredTotal = 11\n\nOutput:\n    false\n\nExplanation:\n    No matter which integer the first player choose, the first player will lose.\n    The first player can choose an integer from 1 up to 10.\n    If the first player choose 1, the second player can only choose integers from 2 up to 10.\n    The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\n    Same with other integers chosen by the first player, the second player will always win.\n```\n\n<!--more-->\n\nThis is Leetcode No.464. At the beginning, I just want to show its all possible combination. The code is like following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canIWin(int maxChoosableInteger, int desiredTotal) {\n            if (desiredTotal < 1) {\n                return true;\n            }\n            set<int> nums;\n            for (int i = 1; i <= maxChoosableInteger; i++) {\n                nums.insert(i);\n            }\n\n            return _check(nums, false, 0, desiredTotal);\n        }\n\n        bool _check(set<int> &nums, int isFirst, int current, int target) {\n            if (current >= target) {\n                return isFirst;\n            }\n\n            bool res;\n            if (isFirst) {\n                res = false;\n\n                for (auto i : nums) {\n                    set<int> t_nums(nums);\n                    t_nums.erase(i);\n                    res = res || _check(t_nums, !isFirst, current + i, target);\n                }\n            } else {\n                res = true;\n\n                for (auto i : nums) {\n                    set<int> t_nums(nums);\n                    t_nums.erase(i);\n                    res = res && _check(t_nums, !isFirst, current + i, target);\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt is correct, However, it gets a TLE. So the problem is that the number of branches is too large. One solution is to find a way to reduce the branches.\n\nIn some case, the most time-cost step is the copying of the set. So I try to solve the problem first.\n\n\nThen, use memorized method to reduce the time cost. Then use BITSET instead of SET to reduce the space cost.\n\n```\nusing namespace std;\n\nclass Solution {\n    private:\n        vector<int> *winSet;\n        bool canIWinAux(int numSet, int total) {\n            int maxnum = maxNum(numSet);\n            if (maxnum >= total) return true;\n            if (winSet->at(numSet) != -1) return winSet->at(numSet);\n            for (int num = 1; num <= maxnum; num++) {\n                int mask = 1 << (num-1);\n                //\tskip used number\n                if (!(numSet&mask)) continue;\n                //\tskip if take num as first choice\n                if (canIWinAux((int)(numSet&(~mask)), total - num)) continue;\n                //\totherwise this num is the smart choice\n                winSet->at(numSet) = true;\n                return true;\n            }\n            //\thave tried every number in numSet and fail to win\n            winSet->at(numSet) = false;\n            return false;\n        }\n\n        //\treturn the maximum number avaliable in the numSet\n        int maxNum(int numSet) {\n            int firstBit = 0;\n            while (numSet) {\n                firstBit++;\n                numSet >>= 1;\n            }\n            return firstBit;\n        }\n\n\n    public:\n        bool canIWin(int maxChoosableInteger, int desiredTotal) {\n            if (desiredTotal>maxChoosableInteger*(maxChoosableInteger + 1) / 2) return false;\n            if (desiredTotal <= maxChoosableInteger) return true;\n            if (desiredTotal % (1 + maxChoosableInteger) == 0 && maxChoosableInteger % 2 == 0) return false;\n\n            //\tnumSet: the k-nd bit stands for number k; 1 is usable, 0 is used, -1 is unknown.\n            int numSet = (1 << (maxChoosableInteger))-1;\n            winSet = new vector<int>(1 << maxChoosableInteger, -1);\n            return canIWinAux(numSet, desiredTotal);\n        }\n};\n```\n\nThen it gets AC.\n","source":"_posts/CanIWin.md","raw":"---\ntitle: Can I Win\ndate: 2017-03-13 16:28:42\ntags:\n    - Minimax\n    - Dynamic Programming\n---\n\n\n> In the \"100 game,\" two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.\n>\n> What if we change the game so that players cannot re-use integers?\n>\n> For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total >= 100.\n>\n> Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally.\n>\n> You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.\n>\n> Example:\n> ```\nInput:\n    maxChoosableInteger = 10\n    desiredTotal = 11\n\nOutput:\n    false\n\nExplanation:\n    No matter which integer the first player choose, the first player will lose.\n    The first player can choose an integer from 1 up to 10.\n    If the first player choose 1, the second player can only choose integers from 2 up to 10.\n    The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\n    Same with other integers chosen by the first player, the second player will always win.\n```\n\n<!--more-->\n\nThis is Leetcode No.464. At the beginning, I just want to show its all possible combination. The code is like following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canIWin(int maxChoosableInteger, int desiredTotal) {\n            if (desiredTotal < 1) {\n                return true;\n            }\n            set<int> nums;\n            for (int i = 1; i <= maxChoosableInteger; i++) {\n                nums.insert(i);\n            }\n\n            return _check(nums, false, 0, desiredTotal);\n        }\n\n        bool _check(set<int> &nums, int isFirst, int current, int target) {\n            if (current >= target) {\n                return isFirst;\n            }\n\n            bool res;\n            if (isFirst) {\n                res = false;\n\n                for (auto i : nums) {\n                    set<int> t_nums(nums);\n                    t_nums.erase(i);\n                    res = res || _check(t_nums, !isFirst, current + i, target);\n                }\n            } else {\n                res = true;\n\n                for (auto i : nums) {\n                    set<int> t_nums(nums);\n                    t_nums.erase(i);\n                    res = res && _check(t_nums, !isFirst, current + i, target);\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt is correct, However, it gets a TLE. So the problem is that the number of branches is too large. One solution is to find a way to reduce the branches.\n\nIn some case, the most time-cost step is the copying of the set. So I try to solve the problem first.\n\n\nThen, use memorized method to reduce the time cost. Then use BITSET instead of SET to reduce the space cost.\n\n```\nusing namespace std;\n\nclass Solution {\n    private:\n        vector<int> *winSet;\n        bool canIWinAux(int numSet, int total) {\n            int maxnum = maxNum(numSet);\n            if (maxnum >= total) return true;\n            if (winSet->at(numSet) != -1) return winSet->at(numSet);\n            for (int num = 1; num <= maxnum; num++) {\n                int mask = 1 << (num-1);\n                //\tskip used number\n                if (!(numSet&mask)) continue;\n                //\tskip if take num as first choice\n                if (canIWinAux((int)(numSet&(~mask)), total - num)) continue;\n                //\totherwise this num is the smart choice\n                winSet->at(numSet) = true;\n                return true;\n            }\n            //\thave tried every number in numSet and fail to win\n            winSet->at(numSet) = false;\n            return false;\n        }\n\n        //\treturn the maximum number avaliable in the numSet\n        int maxNum(int numSet) {\n            int firstBit = 0;\n            while (numSet) {\n                firstBit++;\n                numSet >>= 1;\n            }\n            return firstBit;\n        }\n\n\n    public:\n        bool canIWin(int maxChoosableInteger, int desiredTotal) {\n            if (desiredTotal>maxChoosableInteger*(maxChoosableInteger + 1) / 2) return false;\n            if (desiredTotal <= maxChoosableInteger) return true;\n            if (desiredTotal % (1 + maxChoosableInteger) == 0 && maxChoosableInteger % 2 == 0) return false;\n\n            //\tnumSet: the k-nd bit stands for number k; 1 is usable, 0 is used, -1 is unknown.\n            int numSet = (1 << (maxChoosableInteger))-1;\n            winSet = new vector<int>(1 << maxChoosableInteger, -1);\n            return canIWinAux(numSet, desiredTotal);\n        }\n};\n```\n\nThen it gets AC.\n","slug":"CanIWin","published":1,"updated":"2017-03-14T11:08:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvy000ix2f4cfvtgzmr","content":"<blockquote>\n<p>In the “100 game,” two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.</p>\n<p>What if we change the game so that players cannot re-use integers?</p>\n<p>For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total &gt;= 100.</p>\n<p>Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally.</p>\n<p>You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">    maxChoosableInteger = 10</div><div class=\"line\">    desiredTotal = 11</div><div class=\"line\"></div><div class=\"line\">Output:</div><div class=\"line\">    false</div><div class=\"line\"></div><div class=\"line\">Explanation:</div><div class=\"line\">    No matter which integer the first player choose, the first player will lose.</div><div class=\"line\">    The first player can choose an integer from 1 up to 10.</div><div class=\"line\">    If the first player choose 1, the second player can only choose integers from 2 up to 10.</div><div class=\"line\">    The second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.</div><div class=\"line\">    Same with other integers chosen by the first player, the second player will always win.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.464. At the beginning, I just want to show its all possible combination. The code is like following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canIWin(int maxChoosableInteger, int desiredTotal) &#123;</div><div class=\"line\">            if (desiredTotal &lt; 1) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            set&lt;int&gt; nums;</div><div class=\"line\">            for (int i = 1; i &lt;= maxChoosableInteger; i++) &#123;</div><div class=\"line\">                nums.insert(i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return _check(nums, false, 0, desiredTotal);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _check(set&lt;int&gt; &amp;nums, int isFirst, int current, int target) &#123;</div><div class=\"line\">            if (current &gt;= target) &#123;</div><div class=\"line\">                return isFirst;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool res;</div><div class=\"line\">            if (isFirst) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\"></div><div class=\"line\">                for (auto i : nums) &#123;</div><div class=\"line\">                    set&lt;int&gt; t_nums(nums);</div><div class=\"line\">                    t_nums.erase(i);</div><div class=\"line\">                    res = res || _check(t_nums, !isFirst, current + i, target);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\"></div><div class=\"line\">                for (auto i : nums) &#123;</div><div class=\"line\">                    set&lt;int&gt; t_nums(nums);</div><div class=\"line\">                    t_nums.erase(i);</div><div class=\"line\">                    res = res &amp;&amp; _check(t_nums, !isFirst, current + i, target);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is correct, However, it gets a TLE. So the problem is that the number of branches is too large. One solution is to find a way to reduce the branches.</p>\n<p>In some case, the most time-cost step is the copying of the set. So I try to solve the problem first.</p>\n<p>Then, use memorized method to reduce the time cost. Then use BITSET instead of SET to reduce the space cost.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    private:</div><div class=\"line\">        vector&lt;int&gt; *winSet;</div><div class=\"line\">        bool canIWinAux(int numSet, int total) &#123;</div><div class=\"line\">            int maxnum = maxNum(numSet);</div><div class=\"line\">            if (maxnum &gt;= total) return true;</div><div class=\"line\">            if (winSet-&gt;at(numSet) != -1) return winSet-&gt;at(numSet);</div><div class=\"line\">            for (int num = 1; num &lt;= maxnum; num++) &#123;</div><div class=\"line\">                int mask = 1 &lt;&lt; (num-1);</div><div class=\"line\">                //\tskip used number</div><div class=\"line\">                if (!(numSet&amp;mask)) continue;</div><div class=\"line\">                //\tskip if take num as first choice</div><div class=\"line\">                if (canIWinAux((int)(numSet&amp;(~mask)), total - num)) continue;</div><div class=\"line\">                //\totherwise this num is the smart choice</div><div class=\"line\">                winSet-&gt;at(numSet) = true;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //\thave tried every number in numSet and fail to win</div><div class=\"line\">            winSet-&gt;at(numSet) = false;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //\treturn the maximum number avaliable in the numSet</div><div class=\"line\">        int maxNum(int numSet) &#123;</div><div class=\"line\">            int firstBit = 0;</div><div class=\"line\">            while (numSet) &#123;</div><div class=\"line\">                firstBit++;</div><div class=\"line\">                numSet &gt;&gt;= 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return firstBit;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        bool canIWin(int maxChoosableInteger, int desiredTotal) &#123;</div><div class=\"line\">            if (desiredTotal&gt;maxChoosableInteger*(maxChoosableInteger + 1) / 2) return false;</div><div class=\"line\">            if (desiredTotal &lt;= maxChoosableInteger) return true;</div><div class=\"line\">            if (desiredTotal % (1 + maxChoosableInteger) == 0 &amp;&amp; maxChoosableInteger % 2 == 0) return false;</div><div class=\"line\"></div><div class=\"line\">            //\tnumSet: the k-nd bit stands for number k; 1 is usable, 0 is used, -1 is unknown.</div><div class=\"line\">            int numSet = (1 &lt;&lt; (maxChoosableInteger))-1;</div><div class=\"line\">            winSet = new vector&lt;int&gt;(1 &lt;&lt; maxChoosableInteger, -1);</div><div class=\"line\">            return canIWinAux(numSet, desiredTotal);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Then it gets AC.</p>\n","excerpt":"<blockquote>\n<p>In the “100 game,” two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.</p>\n<p>What if we change the game so that players cannot re-use integers?</p>\n<p>For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total &gt;= 100.</p>\n<p>Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally.</p>\n<p>You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">    maxChoosableInteger = 10</div><div class=\"line\">    desiredTotal = 11</div><div class=\"line\"></div><div class=\"line\">Output:</div><div class=\"line\">    false</div><div class=\"line\"></div><div class=\"line\">Explanation:</div><div class=\"line\">    No matter which integer the first player choose, the first player will lose.</div><div class=\"line\">    The first player can choose an integer from 1 up to 10.</div><div class=\"line\">    If the first player choose 1, the second player can only choose integers from 2 up to 10.</div><div class=\"line\">    The second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.</div><div class=\"line\">    Same with other integers chosen by the first player, the second player will always win.</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.464. At the beginning, I just want to show its all possible combination. The code is like following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canIWin(int maxChoosableInteger, int desiredTotal) &#123;</div><div class=\"line\">            if (desiredTotal &lt; 1) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            set&lt;int&gt; nums;</div><div class=\"line\">            for (int i = 1; i &lt;= maxChoosableInteger; i++) &#123;</div><div class=\"line\">                nums.insert(i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return _check(nums, false, 0, desiredTotal);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _check(set&lt;int&gt; &amp;nums, int isFirst, int current, int target) &#123;</div><div class=\"line\">            if (current &gt;= target) &#123;</div><div class=\"line\">                return isFirst;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool res;</div><div class=\"line\">            if (isFirst) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\"></div><div class=\"line\">                for (auto i : nums) &#123;</div><div class=\"line\">                    set&lt;int&gt; t_nums(nums);</div><div class=\"line\">                    t_nums.erase(i);</div><div class=\"line\">                    res = res || _check(t_nums, !isFirst, current + i, target);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\"></div><div class=\"line\">                for (auto i : nums) &#123;</div><div class=\"line\">                    set&lt;int&gt; t_nums(nums);</div><div class=\"line\">                    t_nums.erase(i);</div><div class=\"line\">                    res = res &amp;&amp; _check(t_nums, !isFirst, current + i, target);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is correct, However, it gets a TLE. So the problem is that the number of branches is too large. One solution is to find a way to reduce the branches.</p>\n<p>In some case, the most time-cost step is the copying of the set. So I try to solve the problem first.</p>\n<p>Then, use memorized method to reduce the time cost. Then use BITSET instead of SET to reduce the space cost.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    private:</div><div class=\"line\">        vector&lt;int&gt; *winSet;</div><div class=\"line\">        bool canIWinAux(int numSet, int total) &#123;</div><div class=\"line\">            int maxnum = maxNum(numSet);</div><div class=\"line\">            if (maxnum &gt;= total) return true;</div><div class=\"line\">            if (winSet-&gt;at(numSet) != -1) return winSet-&gt;at(numSet);</div><div class=\"line\">            for (int num = 1; num &lt;= maxnum; num++) &#123;</div><div class=\"line\">                int mask = 1 &lt;&lt; (num-1);</div><div class=\"line\">                //\tskip used number</div><div class=\"line\">                if (!(numSet&amp;mask)) continue;</div><div class=\"line\">                //\tskip if take num as first choice</div><div class=\"line\">                if (canIWinAux((int)(numSet&amp;(~mask)), total - num)) continue;</div><div class=\"line\">                //\totherwise this num is the smart choice</div><div class=\"line\">                winSet-&gt;at(numSet) = true;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //\thave tried every number in numSet and fail to win</div><div class=\"line\">            winSet-&gt;at(numSet) = false;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //\treturn the maximum number avaliable in the numSet</div><div class=\"line\">        int maxNum(int numSet) &#123;</div><div class=\"line\">            int firstBit = 0;</div><div class=\"line\">            while (numSet) &#123;</div><div class=\"line\">                firstBit++;</div><div class=\"line\">                numSet &gt;&gt;= 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return firstBit;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        bool canIWin(int maxChoosableInteger, int desiredTotal) &#123;</div><div class=\"line\">            if (desiredTotal&gt;maxChoosableInteger*(maxChoosableInteger + 1) / 2) return false;</div><div class=\"line\">            if (desiredTotal &lt;= maxChoosableInteger) return true;</div><div class=\"line\">            if (desiredTotal % (1 + maxChoosableInteger) == 0 &amp;&amp; maxChoosableInteger % 2 == 0) return false;</div><div class=\"line\"></div><div class=\"line\">            //\tnumSet: the k-nd bit stands for number k; 1 is usable, 0 is used, -1 is unknown.</div><div class=\"line\">            int numSet = (1 &lt;&lt; (maxChoosableInteger))-1;</div><div class=\"line\">            winSet = new vector&lt;int&gt;(1 &lt;&lt; maxChoosableInteger, -1);</div><div class=\"line\">            return canIWinAux(numSet, desiredTotal);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Then it gets AC.</p>"},{"title":"Coin Change","date":"2017-01-14T05:54:51.000Z","_content":"\n> You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n>\n> Example 1:\n> coins = [1, 2, 5], amount = 11\n> return 3 (11 = 5 + 5 + 1)\n>\n> Example 2:\n> coins = [2], amount = 3\n> return -1.\n>\n> Note: You may assume that you have an infinite number of each kind of coin.\n\n<!--more-->\n\nThis is Leetcode 322, and it's quite a DP problem, so I first find this solution:\n1. use a DP array to store all the result from 0 to amount\n2. foreach add the coins to match the amount. for instance, we can find such an example:\n```\n  --- 2\n1 --- 3\n  --- 6\n  --- 3\n2 --- 4\n  --- 7\n    ...\n```\n3. So, after all this match we can finally find the result.\n\nSo, I write such solution code:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n\n            vector<long> DP(amount + 1, INT_MAX);\n            map<long, set<long> > coinMap;\n            long level = 1;\n            set<long> zeroN;\n            zeroN.insert(0);\n            coinMap.insert(pair<long, set<long> >(0, zeroN));\n            DP[0] = 0;\n\n            while (DP[amount] == INT_MAX) {\n                coinMap.insert(pair<long, set<long> >(level, set<long>()));\n                for (int preCoin : coinMap[level - 1]) {\n                    for (int coin : coins) {\n                        if (preCoin + (long)coin <= (long)amount) {\n                            coinMap[level].insert(preCoin + coin);\n                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (coinMap[level].size() == 0) {\n                    return -1;\n                }\n                level++;\n            }\n            return DP[amount];\n        }\n};\n```\n\nBut, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            long start = 0;\n            long end = 0;\n\n            DP[0] = 0;\n\n            while (start <= amount) {\n                for (int pre = start; pre <= end; pre++) {\n                    for (int coin : coins) {\n                        if ((long)coin + (long)pre <= (long)amount) {\n                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                start = coins[0] + start;\n                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);\n            }\n\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nHowever it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            DP[0] = 0;\n            for (int pre = 1; pre <= amount; pre++) {\n                for (int current : coins) {\n                    if (pre >= current) {\n                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nThis solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.\n","source":"_posts/CoinChange.md","raw":"---\ntitle: Coin Change\ndate: 2017-01-14 13:54:51\ntags:\n    - Dynamic Programming\n---\n\n> You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n>\n> Example 1:\n> coins = [1, 2, 5], amount = 11\n> return 3 (11 = 5 + 5 + 1)\n>\n> Example 2:\n> coins = [2], amount = 3\n> return -1.\n>\n> Note: You may assume that you have an infinite number of each kind of coin.\n\n<!--more-->\n\nThis is Leetcode 322, and it's quite a DP problem, so I first find this solution:\n1. use a DP array to store all the result from 0 to amount\n2. foreach add the coins to match the amount. for instance, we can find such an example:\n```\n  --- 2\n1 --- 3\n  --- 6\n  --- 3\n2 --- 4\n  --- 7\n    ...\n```\n3. So, after all this match we can finally find the result.\n\nSo, I write such solution code:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n\n            vector<long> DP(amount + 1, INT_MAX);\n            map<long, set<long> > coinMap;\n            long level = 1;\n            set<long> zeroN;\n            zeroN.insert(0);\n            coinMap.insert(pair<long, set<long> >(0, zeroN));\n            DP[0] = 0;\n\n            while (DP[amount] == INT_MAX) {\n                coinMap.insert(pair<long, set<long> >(level, set<long>()));\n                for (int preCoin : coinMap[level - 1]) {\n                    for (int coin : coins) {\n                        if (preCoin + (long)coin <= (long)amount) {\n                            coinMap[level].insert(preCoin + coin);\n                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (coinMap[level].size() == 0) {\n                    return -1;\n                }\n                level++;\n            }\n            return DP[amount];\n        }\n};\n```\n\nBut, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            long start = 0;\n            long end = 0;\n\n            DP[0] = 0;\n\n            while (start <= amount) {\n                for (int pre = start; pre <= end; pre++) {\n                    for (int coin : coins) {\n                        if ((long)coin + (long)pre <= (long)amount) {\n                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                start = coins[0] + start;\n                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);\n            }\n\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nHowever it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            DP[0] = 0;\n            for (int pre = 1; pre <= amount; pre++) {\n                for (int current : coins) {\n                    if (pre >= current) {\n                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nThis solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.\n","slug":"CoinChange","published":1,"updated":"2017-01-14T12:09:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpvz000kx2f4rh8fn7l4","content":"<blockquote>\n<p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p>\n<p>Example 1:<br>coins = [1, 2, 5], amount = 11<br>return 3 (11 = 5 + 5 + 1)</p>\n<p>Example 2:<br>coins = [2], amount = 3<br>return -1.</p>\n<p>Note: You may assume that you have an infinite number of each kind of coin.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 322, and it’s quite a DP problem, so I first find this solution:</p>\n<ol>\n<li>use a DP array to store all the result from 0 to amount</li>\n<li><p>foreach add the coins to match the amount. for instance, we can find such an example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  --- 2</div><div class=\"line\">1 --- 3</div><div class=\"line\">  --- 6</div><div class=\"line\">  --- 3</div><div class=\"line\">2 --- 4</div><div class=\"line\">  --- 7</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>So, after all this match we can finally find the result.</p>\n</li>\n</ol>\n<p>So, I write such solution code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\">            map&lt;long, set&lt;long&gt; &gt; coinMap;</div><div class=\"line\">            long level = 1;</div><div class=\"line\">            set&lt;long&gt; zeroN;</div><div class=\"line\">            zeroN.insert(0);</div><div class=\"line\">            coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(0, zeroN));</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (DP[amount] == INT_MAX) &#123;</div><div class=\"line\">                coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(level, set&lt;long&gt;()));</div><div class=\"line\">                for (int preCoin : coinMap[level - 1]) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if (preCoin + (long)coin &lt;= (long)amount) &#123;</div><div class=\"line\">                            coinMap[level].insert(preCoin + coin);</div><div class=\"line\">                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (coinMap[level].size() == 0) &#123;</div><div class=\"line\">                    return -1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                level++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long start = 0;</div><div class=\"line\">            long end = 0;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (start &lt;= amount) &#123;</div><div class=\"line\">                for (int pre = start; pre &lt;= end; pre++) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if ((long)coin + (long)pre &lt;= (long)amount) &#123;</div><div class=\"line\">                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                start = coins[0] + start;</div><div class=\"line\">                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>However it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int pre = 1; pre &lt;= amount; pre++) &#123;</div><div class=\"line\">                for (int current : coins) &#123;</div><div class=\"line\">                    if (pre &gt;= current) &#123;</div><div class=\"line\">                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.</p>\n","excerpt":"<blockquote>\n<p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p>\n<p>Example 1:<br>coins = [1, 2, 5], amount = 11<br>return 3 (11 = 5 + 5 + 1)</p>\n<p>Example 2:<br>coins = [2], amount = 3<br>return -1.</p>\n<p>Note: You may assume that you have an infinite number of each kind of coin.</p>\n</blockquote>","more":"<p>This is Leetcode 322, and it’s quite a DP problem, so I first find this solution:</p>\n<ol>\n<li>use a DP array to store all the result from 0 to amount</li>\n<li><p>foreach add the coins to match the amount. for instance, we can find such an example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  --- 2</div><div class=\"line\">1 --- 3</div><div class=\"line\">  --- 6</div><div class=\"line\">  --- 3</div><div class=\"line\">2 --- 4</div><div class=\"line\">  --- 7</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>So, after all this match we can finally find the result.</p>\n</li>\n</ol>\n<p>So, I write such solution code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\">            map&lt;long, set&lt;long&gt; &gt; coinMap;</div><div class=\"line\">            long level = 1;</div><div class=\"line\">            set&lt;long&gt; zeroN;</div><div class=\"line\">            zeroN.insert(0);</div><div class=\"line\">            coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(0, zeroN));</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (DP[amount] == INT_MAX) &#123;</div><div class=\"line\">                coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(level, set&lt;long&gt;()));</div><div class=\"line\">                for (int preCoin : coinMap[level - 1]) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if (preCoin + (long)coin &lt;= (long)amount) &#123;</div><div class=\"line\">                            coinMap[level].insert(preCoin + coin);</div><div class=\"line\">                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (coinMap[level].size() == 0) &#123;</div><div class=\"line\">                    return -1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                level++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long start = 0;</div><div class=\"line\">            long end = 0;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (start &lt;= amount) &#123;</div><div class=\"line\">                for (int pre = start; pre &lt;= end; pre++) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if ((long)coin + (long)pre &lt;= (long)amount) &#123;</div><div class=\"line\">                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                start = coins[0] + start;</div><div class=\"line\">                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>However it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int pre = 1; pre &lt;= amount; pre++) &#123;</div><div class=\"line\">                for (int current : coins) &#123;</div><div class=\"line\">                    if (pre &gt;= current) &#123;</div><div class=\"line\">                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.</p>"},{"title":"Coin Change II","date":"2017-04-11T14:25:47.000Z","_content":"\n> You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.\n>\n> Note: You can assume that\n>\n> + 0 <= amount <= 5000\n> + 1 <= coin <= 5000\n> + the number of coins is less than 500\n> + the answer is guaranteed to fit into signed 32-bit integer\n>\n> Example 1:\n>```\nInput: amount = 5, coins = [1, 2, 5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n```\n> Example 2:\n>```\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.\n```\n> Example 3:\n>```\nInput: amount = 10, coins = [10]\nOutput: 1\n```\n\n<!--more-->\n\nThis is Leetcode No.518. At first, you can quickly find a Backtracking method like below:\n\n```\nclass Solution {\n    public:\n        int res;\n        int change(int amount, vector<int>& coins) {\n            res = 0;\n            _combine(0, amount, 0, coins);\n\n            return res;\n        }\n\n        void _combine(int current, int target, int idx, vector<int> coins) {\n            if (current == target) {\n                res++;\n                return;\n            }\n            if (current > target) {\n                return;\n            }\n\n            for (int i = idx; i < (int)coins.size(); i++) {\n                _combine(current + coins[i], target, i, coins);\n            }\n        }\n};\n```\n\nBut it gets TLE on case \"500 [3,5,7,8,9,10,11]\". So, we have to find a better way to solve the problem.\n\nSo, you can find a O(amount) solution with DP.\n\nThen the code come into this:\n\n```\n\nusing namespace std;\n\nclass Solution {\n    public:\n        int change(int amount, vector<int>& coins) {\n            int DP[8000];\n            sort(coins.begin(), coins.end());\n\n            memset(DP, 0, sizeof(DP));\n            DP[0] = 1;\n            for (int idx = 0; idx < (int)coins.size(); idx++) {\n                for (int currentCoin = 1; currentCoin <= amount; currentCoin++) {\n                    if (currentCoin >= coins[idx]) {\n                        DP[currentCoin] += DP[currentCoin - coins[idx]];\n                    }\n                }\n                for (int i = 0; i <= amount; i++) {\n                    cout << DP[i] << ',';\n                }\n                cout << endl;\n            }\n\n            return DP[amount];\n        }\n};\n```\n\nWe use a DP array to store the states and use the states to mark the coins combination.\n\nIt gets AC.\n","source":"_posts/CoinChangeII.md","raw":"---\ntitle: Coin Change II\ndate: 2017-04-11 22:25:47\ntags:\n    - Backtracking\n    - Dynamic Programming\n---\n\n> You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.\n>\n> Note: You can assume that\n>\n> + 0 <= amount <= 5000\n> + 1 <= coin <= 5000\n> + the number of coins is less than 500\n> + the answer is guaranteed to fit into signed 32-bit integer\n>\n> Example 1:\n>```\nInput: amount = 5, coins = [1, 2, 5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n```\n> Example 2:\n>```\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.\n```\n> Example 3:\n>```\nInput: amount = 10, coins = [10]\nOutput: 1\n```\n\n<!--more-->\n\nThis is Leetcode No.518. At first, you can quickly find a Backtracking method like below:\n\n```\nclass Solution {\n    public:\n        int res;\n        int change(int amount, vector<int>& coins) {\n            res = 0;\n            _combine(0, amount, 0, coins);\n\n            return res;\n        }\n\n        void _combine(int current, int target, int idx, vector<int> coins) {\n            if (current == target) {\n                res++;\n                return;\n            }\n            if (current > target) {\n                return;\n            }\n\n            for (int i = idx; i < (int)coins.size(); i++) {\n                _combine(current + coins[i], target, i, coins);\n            }\n        }\n};\n```\n\nBut it gets TLE on case \"500 [3,5,7,8,9,10,11]\". So, we have to find a better way to solve the problem.\n\nSo, you can find a O(amount) solution with DP.\n\nThen the code come into this:\n\n```\n\nusing namespace std;\n\nclass Solution {\n    public:\n        int change(int amount, vector<int>& coins) {\n            int DP[8000];\n            sort(coins.begin(), coins.end());\n\n            memset(DP, 0, sizeof(DP));\n            DP[0] = 1;\n            for (int idx = 0; idx < (int)coins.size(); idx++) {\n                for (int currentCoin = 1; currentCoin <= amount; currentCoin++) {\n                    if (currentCoin >= coins[idx]) {\n                        DP[currentCoin] += DP[currentCoin - coins[idx]];\n                    }\n                }\n                for (int i = 0; i <= amount; i++) {\n                    cout << DP[i] << ',';\n                }\n                cout << endl;\n            }\n\n            return DP[amount];\n        }\n};\n```\n\nWe use a DP array to store the states and use the states to mark the coins combination.\n\nIt gets AC.\n","slug":"CoinChangeII","published":1,"updated":"2017-04-11T15:15:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpw0000lx2f422xgrzq6","content":"<blockquote>\n<p>You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.</p>\n<p>Note: You can assume that</p>\n<ul>\n<li>0 &lt;= amount &lt;= 5000</li>\n<li>1 &lt;= coin &lt;= 5000</li>\n<li>the number of coins is less than 500</li>\n<li>the answer is guaranteed to fit into signed 32-bit integer</li>\n</ul>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: amount = 5, coins = [1, 2, 5]</div><div class=\"line\">Output: 4</div><div class=\"line\">Explanation: there are four ways to make up the amount:</div><div class=\"line\">5=5</div><div class=\"line\">5=2+2+1</div><div class=\"line\">5=2+1+1+1</div><div class=\"line\">5=1+1+1+1+1</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: amount = 3, coins = [2]</div><div class=\"line\">Output: 0</div><div class=\"line\">Explanation: the amount of 3 cannot be made up just with coins of 2.</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: amount = 10, coins = [10]</div><div class=\"line\">Output: 1</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.518. At first, you can quickly find a Backtracking method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int change(int amount, vector&lt;int&gt;&amp; coins) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            _combine(0, amount, 0, coins);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _combine(int current, int target, int idx, vector&lt;int&gt; coins) &#123;</div><div class=\"line\">            if (current == target) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current &gt; target) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = idx; i &lt; (int)coins.size(); i++) &#123;</div><div class=\"line\">                _combine(current + coins[i], target, i, coins);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE on case “500 [3,5,7,8,9,10,11]”. So, we have to find a better way to solve the problem.</p>\n<p>So, you can find a O(amount) solution with DP.</p>\n<p>Then the code come into this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int change(int amount, vector&lt;int&gt;&amp; coins) &#123;</div><div class=\"line\">            int DP[8000];</div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\"></div><div class=\"line\">            memset(DP, 0, sizeof(DP));</div><div class=\"line\">            DP[0] = 1;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)coins.size(); idx++) &#123;</div><div class=\"line\">                for (int currentCoin = 1; currentCoin &lt;= amount; currentCoin++) &#123;</div><div class=\"line\">                    if (currentCoin &gt;= coins[idx]) &#123;</div><div class=\"line\">                        DP[currentCoin] += DP[currentCoin - coins[idx]];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (int i = 0; i &lt;= amount; i++) &#123;</div><div class=\"line\">                    cout &lt;&lt; DP[i] &lt;&lt; &apos;,&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                cout &lt;&lt; endl;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>We use a DP array to store the states and use the states to mark the coins combination.</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.</p>\n<p>Note: You can assume that</p>\n<ul>\n<li>0 &lt;= amount &lt;= 5000</li>\n<li>1 &lt;= coin &lt;= 5000</li>\n<li>the number of coins is less than 500</li>\n<li>the answer is guaranteed to fit into signed 32-bit integer</li>\n</ul>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: amount = 5, coins = [1, 2, 5]</div><div class=\"line\">Output: 4</div><div class=\"line\">Explanation: there are four ways to make up the amount:</div><div class=\"line\">5=5</div><div class=\"line\">5=2+2+1</div><div class=\"line\">5=2+1+1+1</div><div class=\"line\">5=1+1+1+1+1</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: amount = 3, coins = [2]</div><div class=\"line\">Output: 0</div><div class=\"line\">Explanation: the amount of 3 cannot be made up just with coins of 2.</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: amount = 10, coins = [10]</div><div class=\"line\">Output: 1</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.518. At first, you can quickly find a Backtracking method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int change(int amount, vector&lt;int&gt;&amp; coins) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            _combine(0, amount, 0, coins);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _combine(int current, int target, int idx, vector&lt;int&gt; coins) &#123;</div><div class=\"line\">            if (current == target) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current &gt; target) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = idx; i &lt; (int)coins.size(); i++) &#123;</div><div class=\"line\">                _combine(current + coins[i], target, i, coins);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE on case “500 [3,5,7,8,9,10,11]”. So, we have to find a better way to solve the problem.</p>\n<p>So, you can find a O(amount) solution with DP.</p>\n<p>Then the code come into this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int change(int amount, vector&lt;int&gt;&amp; coins) &#123;</div><div class=\"line\">            int DP[8000];</div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\"></div><div class=\"line\">            memset(DP, 0, sizeof(DP));</div><div class=\"line\">            DP[0] = 1;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)coins.size(); idx++) &#123;</div><div class=\"line\">                for (int currentCoin = 1; currentCoin &lt;= amount; currentCoin++) &#123;</div><div class=\"line\">                    if (currentCoin &gt;= coins[idx]) &#123;</div><div class=\"line\">                        DP[currentCoin] += DP[currentCoin - coins[idx]];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (int i = 0; i &lt;= amount; i++) &#123;</div><div class=\"line\">                    cout &lt;&lt; DP[i] &lt;&lt; &apos;,&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                cout &lt;&lt; endl;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>We use a DP array to store the states and use the states to mark the coins combination.</p>\n<p>It gets AC.</p>"},{"title":"Combination Sum IV","date":"2017-01-11T01:36:11.000Z","_content":"\n> Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n>\n> Example:\n>\n> nums = [1, 2, 3] , target = 4\n>\n> The possible combination ways are:\n> (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)\n>\n> Note that different sequences are counted as different combinations.\n>\n> Therefore the output is 7.\n>\n> Follow up:\n> What if negative numbers are allowed in the given array?\n> How does it change the problem?\n> What limitation we need to add to the question to allow negative number.\n\n<!--more-->\n\nThis is Leetcode 377, we can quickly find a DFS solution like these:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            sort(nums.begin(), nums.end());\n            res = 0;\n            DFS(nums, target, 0);\n            return res;\n        }\n\n        void DFS(vector<int> &nums, int target, int currentSum) {\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (currentSum + nums[i] > target) {\n                    return;\n                } else if (currentSum + nums[i] == target) {\n                    res++;\n                } else {\n                    DFS(nums, target, currentSum + nums[i]);\n                }\n            }\n        }\n};\n```\n\nIt will solve this problem but it's too slow to get AC. So, we can think in another way.\n\nPicture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.\n\nSo, the solution is as following:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            vector<int> res(target + 1, 0);\n            sort(nums.begin(), nums.end());\n            for (int i = 1; i <= target; i++) {\n                for (int num : nums) {\n                    if (num > i) {\n                        break;\n                    } else if (num == i) {\n                        res[num]++;\n                    } else {\n                        res[i] = res[i - num] + res[i];\n                    }\n                }\n            }\n            return res[target];\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/CombinationSumIV.md","raw":"---\ntitle: Combination Sum IV\ndate: 2017-01-11 09:36:11\ntags:\n    - Dynamic Programming\n---\n\n> Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n>\n> Example:\n>\n> nums = [1, 2, 3] , target = 4\n>\n> The possible combination ways are:\n> (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)\n>\n> Note that different sequences are counted as different combinations.\n>\n> Therefore the output is 7.\n>\n> Follow up:\n> What if negative numbers are allowed in the given array?\n> How does it change the problem?\n> What limitation we need to add to the question to allow negative number.\n\n<!--more-->\n\nThis is Leetcode 377, we can quickly find a DFS solution like these:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            sort(nums.begin(), nums.end());\n            res = 0;\n            DFS(nums, target, 0);\n            return res;\n        }\n\n        void DFS(vector<int> &nums, int target, int currentSum) {\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (currentSum + nums[i] > target) {\n                    return;\n                } else if (currentSum + nums[i] == target) {\n                    res++;\n                } else {\n                    DFS(nums, target, currentSum + nums[i]);\n                }\n            }\n        }\n};\n```\n\nIt will solve this problem but it's too slow to get AC. So, we can think in another way.\n\nPicture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.\n\nSo, the solution is as following:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            vector<int> res(target + 1, 0);\n            sort(nums.begin(), nums.end());\n            for (int i = 1; i <= target; i++) {\n                for (int num : nums) {\n                    if (num > i) {\n                        break;\n                    } else if (num == i) {\n                        res[num]++;\n                    } else {\n                        res[i] = res[i - num] + res[i];\n                    }\n                }\n            }\n            return res[target];\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"CombinationSumIV","published":1,"updated":"2017-01-13T03:09:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpw0000mx2f4vvnzaqgv","content":"<blockquote>\n<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\n<p>Example:</p>\n<p>nums = [1, 2, 3] , target = 4</p>\n<p>The possible combination ways are:<br>(1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)</p>\n<p>Note that different sequences are counted as different combinations.</p>\n<p>Therefore the output is 7.</p>\n<p>Follow up:<br>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative number.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 377, we can quickly find a DFS solution like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            res = 0;</div><div class=\"line\">            DFS(nums, target, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void DFS(vector&lt;int&gt; &amp;nums, int target, int currentSum) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (currentSum + nums[i] &gt; target) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125; else if (currentSum + nums[i] == target) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    DFS(nums, target, currentSum + nums[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It will solve this problem but it’s too slow to get AC. So, we can think in another way.</p>\n<p>Picture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.</p>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            vector&lt;int&gt; res(target + 1, 0);</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            for (int i = 1; i &lt;= target; i++) &#123;</div><div class=\"line\">                for (int num : nums) &#123;</div><div class=\"line\">                    if (num &gt; i) &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125; else if (num == i) &#123;</div><div class=\"line\">                        res[num]++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res[i] = res[i - num] + res[i];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res[target];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\n<p>Example:</p>\n<p>nums = [1, 2, 3] , target = 4</p>\n<p>The possible combination ways are:<br>(1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)</p>\n<p>Note that different sequences are counted as different combinations.</p>\n<p>Therefore the output is 7.</p>\n<p>Follow up:<br>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative number.</p>\n</blockquote>","more":"<p>This is Leetcode 377, we can quickly find a DFS solution like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            res = 0;</div><div class=\"line\">            DFS(nums, target, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void DFS(vector&lt;int&gt; &amp;nums, int target, int currentSum) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (currentSum + nums[i] &gt; target) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125; else if (currentSum + nums[i] == target) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    DFS(nums, target, currentSum + nums[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It will solve this problem but it’s too slow to get AC. So, we can think in another way.</p>\n<p>Picture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.</p>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            vector&lt;int&gt; res(target + 1, 0);</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            for (int i = 1; i &lt;= target; i++) &#123;</div><div class=\"line\">                for (int num : nums) &#123;</div><div class=\"line\">                    if (num &gt; i) &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125; else if (num == i) &#123;</div><div class=\"line\">                        res[num]++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res[i] = res[i - num] + res[i];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res[target];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Container With Most Water","date":"2017-02-26T09:52:03.000Z","_content":"\n> Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai).\n>\n> n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).\n>\n> Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n>\n> Note: You may not slant the container and n is at least 2.\n\n<!--more-->\n\nThis is Leetcode No.11. Because I should prepare for the incoming interview of the USTC.\n\nSo, I gave up the Leetcode contest.\n\nAt first, I thought this problem is to figure out how many water can this sticks can container.\n\nHowever, this problem is to figure out what is the max value of `min(heights[leftIdx], heights[rightIdx]) * (rightIdx - leftIdx)`.\n\nSo the solution is simple.\n\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int maxArea(vector<int>& heights) {\n            int leftIdx = 0, rightIdx = heights.size() - 1, height = max(heights[leftIdx], heights[rightIdx]), res = INT_MIN;\n            while (leftIdx < rightIdx) {\n                height = min(heights[leftIdx], heights[rightIdx]);\n                res = max(height * (rightIdx - leftIdx), res);\n                while (leftIdx < rightIdx && heights[leftIdx] <= height) {\n                    leftIdx++;\n                }\n                while (leftIdx < rightIdx && heights[rightIdx] <= height) {\n                    rightIdx--;\n                }\n            }\n            return res;\n        }\n};\n```\n\nBecause if the new leftIdx and the new rightIdx are not larger than the older, their result will never larger than before.\n\nIt gets AC.\n","source":"_posts/ContainerWithMostWater.md","raw":"---\ntitle: Container With Most Water\ndate: 2017-02-26 17:52:03\ntags:\n    - Array\n    - Two Pointers\n---\n\n> Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai).\n>\n> n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).\n>\n> Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n>\n> Note: You may not slant the container and n is at least 2.\n\n<!--more-->\n\nThis is Leetcode No.11. Because I should prepare for the incoming interview of the USTC.\n\nSo, I gave up the Leetcode contest.\n\nAt first, I thought this problem is to figure out how many water can this sticks can container.\n\nHowever, this problem is to figure out what is the max value of `min(heights[leftIdx], heights[rightIdx]) * (rightIdx - leftIdx)`.\n\nSo the solution is simple.\n\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int maxArea(vector<int>& heights) {\n            int leftIdx = 0, rightIdx = heights.size() - 1, height = max(heights[leftIdx], heights[rightIdx]), res = INT_MIN;\n            while (leftIdx < rightIdx) {\n                height = min(heights[leftIdx], heights[rightIdx]);\n                res = max(height * (rightIdx - leftIdx), res);\n                while (leftIdx < rightIdx && heights[leftIdx] <= height) {\n                    leftIdx++;\n                }\n                while (leftIdx < rightIdx && heights[rightIdx] <= height) {\n                    rightIdx--;\n                }\n            }\n            return res;\n        }\n};\n```\n\nBecause if the new leftIdx and the new rightIdx are not larger than the older, their result will never larger than before.\n\nIt gets AC.\n","slug":"ContainerWithMostWater","published":1,"updated":"2017-02-26T11:30:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpw3000ox2f4d0gv0az9","content":"<blockquote>\n<p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai).</p>\n<p>n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).</p>\n<p>Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and n is at least 2.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.11. Because I should prepare for the incoming interview of the USTC.</p>\n<p>So, I gave up the Leetcode contest.</p>\n<p>At first, I thought this problem is to figure out how many water can this sticks can container.</p>\n<p>However, this problem is to figure out what is the max value of <code>min(heights[leftIdx], heights[rightIdx]) * (rightIdx - leftIdx)</code>.</p>\n<p>So the solution is simple.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxArea(vector&lt;int&gt;&amp; heights) &#123;</div><div class=\"line\">            int leftIdx = 0, rightIdx = heights.size() - 1, height = max(heights[leftIdx], heights[rightIdx]), res = INT_MIN;</div><div class=\"line\">            while (leftIdx &lt; rightIdx) &#123;</div><div class=\"line\">                height = min(heights[leftIdx], heights[rightIdx]);</div><div class=\"line\">                res = max(height * (rightIdx - leftIdx), res);</div><div class=\"line\">                while (leftIdx &lt; rightIdx &amp;&amp; heights[leftIdx] &lt;= height) &#123;</div><div class=\"line\">                    leftIdx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                while (leftIdx &lt; rightIdx &amp;&amp; heights[rightIdx] &lt;= height) &#123;</div><div class=\"line\">                    rightIdx--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Because if the new leftIdx and the new rightIdx are not larger than the older, their result will never larger than before.</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai).</p>\n<p>n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).</p>\n<p>Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and n is at least 2.</p>\n</blockquote>","more":"<p>This is Leetcode No.11. Because I should prepare for the incoming interview of the USTC.</p>\n<p>So, I gave up the Leetcode contest.</p>\n<p>At first, I thought this problem is to figure out how many water can this sticks can container.</p>\n<p>However, this problem is to figure out what is the max value of <code>min(heights[leftIdx], heights[rightIdx]) * (rightIdx - leftIdx)</code>.</p>\n<p>So the solution is simple.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxArea(vector&lt;int&gt;&amp; heights) &#123;</div><div class=\"line\">            int leftIdx = 0, rightIdx = heights.size() - 1, height = max(heights[leftIdx], heights[rightIdx]), res = INT_MIN;</div><div class=\"line\">            while (leftIdx &lt; rightIdx) &#123;</div><div class=\"line\">                height = min(heights[leftIdx], heights[rightIdx]);</div><div class=\"line\">                res = max(height * (rightIdx - leftIdx), res);</div><div class=\"line\">                while (leftIdx &lt; rightIdx &amp;&amp; heights[leftIdx] &lt;= height) &#123;</div><div class=\"line\">                    leftIdx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                while (leftIdx &lt; rightIdx &amp;&amp; heights[rightIdx] &lt;= height) &#123;</div><div class=\"line\">                    rightIdx--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Because if the new leftIdx and the new rightIdx are not larger than the older, their result will never larger than before.</p>\n<p>It gets AC.</p>"},{"title":"Contiguous Array","date":"2017-02-21T08:17:35.000Z","_content":"\n> Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.\n>\n> Example 1:\n> + Input: [0,1]\n> + Output: 2\n> + Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\n>\n> Example 2:\n> + Input: [0,1,0]\n> + Output: 2\n> + Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n>\n> Note: The length of the given binary array will not exceed 50,000.\n\n<!--more-->\n\nThis is Leetcode No.525. We can quickly find a solution that:\n\n```\n    0 1 0 0 1\n0   1 1 2 3 3\n1   0 1 1 1 2\n```\n\nWe can use DP[idx][0-1] to represent the num of each index. However, we must to use DP[idx1][0-1] - DP[idx2][0-1] to find the exactly num between idx1 and idx2. So the time complex will be O(n^2).\n\nSo, we must to find a better solution to solve the problem.\n\nWe can use similar solution as the Best time to sell and buy stock.\n\nWhat if we have a sequence [0, 0, 0, 0, 1, 1]? the maximum length is 4, the count starting from 0, will equal -1, -2, -3, -4, -3, -2, and won't go back to 0 again. But wait, the longest subarray with equal number of 0 and 1 started and ended when count equals -2. We can plot the changes of count on a graph, as shown below. Point (0,0) indicates the initial value of count is 0, so we count the sequence starting from index 1. The longest subarray is from index 2 to 6.\n\n![https://leetcode.com/uploads/files/1487543036101-figure_1.png](https://leetcode.com/uploads/files/1487543036101-figure_1.png)\n\nSo, we make the time complex to O(n).\n\nHere comes the solution:\n\n```\nclass Solution {\n    public:\n        int findMaxLength(vector<int>& nums) {\n            int count = 0;\n            map<int, vector<int> > idxs;\n            vector<int> idxlist;\n            idxlist.push_back(0);\n            idxs.insert(pair<int, vector<int> >(0, idxlist));\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (nums[idx] == 0) {\n                    count--;\n                } else {\n                    count++;\n                }\n                if (idxs.find(count) == idxs.end()) {\n                    vector<int> idxList;\n                    idxList.push_back(idx + 1);\n                    idxs.insert(pair<int, vector<int> >(count, idxList));\n                } else {\n                    idxs.find(count)->second.push_back(idx + 1);\n                }\n            }\n\n            int res = 0;\n            for (auto p : idxs) {\n                if (p.second.size() > 1) {\n                    res = max(res, p.second[p.second.size() - 1] - p.second[0]);\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/ContiguousArray.md","raw":"---\ntitle: Contiguous Array\ndate: 2017-02-21 16:17:35\ntags:\n    - Hash Table\n---\n\n> Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.\n>\n> Example 1:\n> + Input: [0,1]\n> + Output: 2\n> + Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\n>\n> Example 2:\n> + Input: [0,1,0]\n> + Output: 2\n> + Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n>\n> Note: The length of the given binary array will not exceed 50,000.\n\n<!--more-->\n\nThis is Leetcode No.525. We can quickly find a solution that:\n\n```\n    0 1 0 0 1\n0   1 1 2 3 3\n1   0 1 1 1 2\n```\n\nWe can use DP[idx][0-1] to represent the num of each index. However, we must to use DP[idx1][0-1] - DP[idx2][0-1] to find the exactly num between idx1 and idx2. So the time complex will be O(n^2).\n\nSo, we must to find a better solution to solve the problem.\n\nWe can use similar solution as the Best time to sell and buy stock.\n\nWhat if we have a sequence [0, 0, 0, 0, 1, 1]? the maximum length is 4, the count starting from 0, will equal -1, -2, -3, -4, -3, -2, and won't go back to 0 again. But wait, the longest subarray with equal number of 0 and 1 started and ended when count equals -2. We can plot the changes of count on a graph, as shown below. Point (0,0) indicates the initial value of count is 0, so we count the sequence starting from index 1. The longest subarray is from index 2 to 6.\n\n![https://leetcode.com/uploads/files/1487543036101-figure_1.png](https://leetcode.com/uploads/files/1487543036101-figure_1.png)\n\nSo, we make the time complex to O(n).\n\nHere comes the solution:\n\n```\nclass Solution {\n    public:\n        int findMaxLength(vector<int>& nums) {\n            int count = 0;\n            map<int, vector<int> > idxs;\n            vector<int> idxlist;\n            idxlist.push_back(0);\n            idxs.insert(pair<int, vector<int> >(0, idxlist));\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (nums[idx] == 0) {\n                    count--;\n                } else {\n                    count++;\n                }\n                if (idxs.find(count) == idxs.end()) {\n                    vector<int> idxList;\n                    idxList.push_back(idx + 1);\n                    idxs.insert(pair<int, vector<int> >(count, idxList));\n                } else {\n                    idxs.find(count)->second.push_back(idx + 1);\n                }\n            }\n\n            int res = 0;\n            for (auto p : idxs) {\n                if (p.second.size() > 1) {\n                    res = max(res, p.second[p.second.size() - 1] - p.second[0]);\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"ContiguousArray","published":1,"updated":"2017-02-21T08:53:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpw5000px2f4fdvxvj1i","content":"<blockquote>\n<p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [0,1]</li>\n<li>Output: 2</li>\n<li>Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [0,1,0]</li>\n<li>Output: 2</li>\n<li>Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.</li>\n</ul>\n<p>Note: The length of the given binary array will not exceed 50,000.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.525. We can quickly find a solution that:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    0 1 0 0 1</div><div class=\"line\">0   1 1 2 3 3</div><div class=\"line\">1   0 1 1 1 2</div></pre></td></tr></table></figure>\n<p>We can use DP[idx][0-1] to represent the num of each index. However, we must to use DP[idx1][0-1] - DP[idx2][0-1] to find the exactly num between idx1 and idx2. So the time complex will be O(n^2).</p>\n<p>So, we must to find a better solution to solve the problem.</p>\n<p>We can use similar solution as the Best time to sell and buy stock.</p>\n<p>What if we have a sequence [0, 0, 0, 0, 1, 1]? the maximum length is 4, the count starting from 0, will equal -1, -2, -3, -4, -3, -2, and won’t go back to 0 again. But wait, the longest subarray with equal number of 0 and 1 started and ended when count equals -2. We can plot the changes of count on a graph, as shown below. Point (0,0) indicates the initial value of count is 0, so we count the sequence starting from index 1. The longest subarray is from index 2 to 6.</p>\n<p><img src=\"https://leetcode.com/uploads/files/1487543036101-figure_1.png\" alt=\"https://leetcode.com/uploads/files/1487543036101-figure_1.png\"></p>\n<p>So, we make the time complex to O(n).</p>\n<p>Here comes the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxLength(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int count = 0;</div><div class=\"line\">            map&lt;int, vector&lt;int&gt; &gt; idxs;</div><div class=\"line\">            vector&lt;int&gt; idxlist;</div><div class=\"line\">            idxlist.push_back(0);</div><div class=\"line\">            idxs.insert(pair&lt;int, vector&lt;int&gt; &gt;(0, idxlist));</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (nums[idx] == 0) &#123;</div><div class=\"line\">                    count--;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    count++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (idxs.find(count) == idxs.end()) &#123;</div><div class=\"line\">                    vector&lt;int&gt; idxList;</div><div class=\"line\">                    idxList.push_back(idx + 1);</div><div class=\"line\">                    idxs.insert(pair&lt;int, vector&lt;int&gt; &gt;(count, idxList));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    idxs.find(count)-&gt;second.push_back(idx + 1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto p : idxs) &#123;</div><div class=\"line\">                if (p.second.size() &gt; 1) &#123;</div><div class=\"line\">                    res = max(res, p.second[p.second.size() - 1] - p.second[0]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [0,1]</li>\n<li>Output: 2</li>\n<li>Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [0,1,0]</li>\n<li>Output: 2</li>\n<li>Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.</li>\n</ul>\n<p>Note: The length of the given binary array will not exceed 50,000.</p>\n</blockquote>","more":"<p>This is Leetcode No.525. We can quickly find a solution that:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    0 1 0 0 1</div><div class=\"line\">0   1 1 2 3 3</div><div class=\"line\">1   0 1 1 1 2</div></pre></td></tr></table></figure>\n<p>We can use DP[idx][0-1] to represent the num of each index. However, we must to use DP[idx1][0-1] - DP[idx2][0-1] to find the exactly num between idx1 and idx2. So the time complex will be O(n^2).</p>\n<p>So, we must to find a better solution to solve the problem.</p>\n<p>We can use similar solution as the Best time to sell and buy stock.</p>\n<p>What if we have a sequence [0, 0, 0, 0, 1, 1]? the maximum length is 4, the count starting from 0, will equal -1, -2, -3, -4, -3, -2, and won’t go back to 0 again. But wait, the longest subarray with equal number of 0 and 1 started and ended when count equals -2. We can plot the changes of count on a graph, as shown below. Point (0,0) indicates the initial value of count is 0, so we count the sequence starting from index 1. The longest subarray is from index 2 to 6.</p>\n<p><img src=\"https://leetcode.com/uploads/files/1487543036101-figure_1.png\" alt=\"https://leetcode.com/uploads/files/1487543036101-figure_1.png\"></p>\n<p>So, we make the time complex to O(n).</p>\n<p>Here comes the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxLength(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int count = 0;</div><div class=\"line\">            map&lt;int, vector&lt;int&gt; &gt; idxs;</div><div class=\"line\">            vector&lt;int&gt; idxlist;</div><div class=\"line\">            idxlist.push_back(0);</div><div class=\"line\">            idxs.insert(pair&lt;int, vector&lt;int&gt; &gt;(0, idxlist));</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (nums[idx] == 0) &#123;</div><div class=\"line\">                    count--;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    count++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (idxs.find(count) == idxs.end()) &#123;</div><div class=\"line\">                    vector&lt;int&gt; idxList;</div><div class=\"line\">                    idxList.push_back(idx + 1);</div><div class=\"line\">                    idxs.insert(pair&lt;int, vector&lt;int&gt; &gt;(count, idxList));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    idxs.find(count)-&gt;second.push_back(idx + 1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto p : idxs) &#123;</div><div class=\"line\">                if (p.second.size() &gt; 1) &#123;</div><div class=\"line\">                    res = max(res, p.second[p.second.size() - 1] - p.second[0]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Complex Number Multiplication","date":"2017-04-02T03:13:15.000Z","_content":"\n> Given two strings representing two complex numbers.\n>\n> You need to return a string representing their multiplication. Note i2 = -1 according to the definition.\n>\n> Example 1:\n>```\nInput: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n```\n> Example 2:\n>```\nInput: \"1+-1i\", \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n```\n> Note:\n>\n> + The input strings will not have extra blank.\n> + The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.\n\n<!--more-->\n\nThis is Leetcode No.537. It is not a hard-thinking problem. You should just need to care more about the corner case.\n\nFor some reason that I recommand you to solve this problem with Java. Because I think Java has better APIs to deal with Strings.\n\nHere is my solution:\n\n```\n/**\n * @author Mike\n * @project oj.code\n * @date 02/04/2017, 1:08 PM\n * @e-mail mike@mikecoder.cn\n */\npublic class Solution {\n\n    class Num {\n        int a;\n        int b;\n\n        @Override\n        public String toString() {\n            return a + \"+\" + b + \"i\";\n        }\n    }\n\n    public Num convert(String num) {\n        int real, fake;\n        String[] nums = num.split(\"\\\\+\");\n        real = Integer.valueOf(nums[0]);\n        fake = Integer.valueOf(nums[1].substring(0, nums[1].length() - 1));\n\n        Num res = new Num();\n        res.a = real;\n        res.b = fake;\n\n        return res;\n    }\n\n    public Num calc(Num num1, Num num2) {\n        Num res = new Num();\n        res.a = num1.a * num2.a - num1.b * num2.b;\n        res.b = num1.b * num2.a + num1.a * num2.b;\n\n        return res;\n    }\n\n    public String complexNumberMultiply(String a, String b) {\n        Num num1 = convert(a);\n        Num num2 = convert(b);\n\n        Num res = calc(num1, num2);\n\n        return res.toString();\n    }\n}\n```\n\nIt is simple. I just create a new class to store the number of inputs. Then I calculate them with the rules provided by the description.\n\nIt gets AC.\n","source":"_posts/ComplexNumberMultiplication.md","raw":"---\ntitle: Complex Number Multiplication\ndate: 2017-04-02 11:13:15\ntags:\n    - Math\n    - String\n---\n\n> Given two strings representing two complex numbers.\n>\n> You need to return a string representing their multiplication. Note i2 = -1 according to the definition.\n>\n> Example 1:\n>```\nInput: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n```\n> Example 2:\n>```\nInput: \"1+-1i\", \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n```\n> Note:\n>\n> + The input strings will not have extra blank.\n> + The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.\n\n<!--more-->\n\nThis is Leetcode No.537. It is not a hard-thinking problem. You should just need to care more about the corner case.\n\nFor some reason that I recommand you to solve this problem with Java. Because I think Java has better APIs to deal with Strings.\n\nHere is my solution:\n\n```\n/**\n * @author Mike\n * @project oj.code\n * @date 02/04/2017, 1:08 PM\n * @e-mail mike@mikecoder.cn\n */\npublic class Solution {\n\n    class Num {\n        int a;\n        int b;\n\n        @Override\n        public String toString() {\n            return a + \"+\" + b + \"i\";\n        }\n    }\n\n    public Num convert(String num) {\n        int real, fake;\n        String[] nums = num.split(\"\\\\+\");\n        real = Integer.valueOf(nums[0]);\n        fake = Integer.valueOf(nums[1].substring(0, nums[1].length() - 1));\n\n        Num res = new Num();\n        res.a = real;\n        res.b = fake;\n\n        return res;\n    }\n\n    public Num calc(Num num1, Num num2) {\n        Num res = new Num();\n        res.a = num1.a * num2.a - num1.b * num2.b;\n        res.b = num1.b * num2.a + num1.a * num2.b;\n\n        return res;\n    }\n\n    public String complexNumberMultiply(String a, String b) {\n        Num num1 = convert(a);\n        Num num2 = convert(b);\n\n        Num res = calc(num1, num2);\n\n        return res.toString();\n    }\n}\n```\n\nIt is simple. I just create a new class to store the number of inputs. Then I calculate them with the rules provided by the description.\n\nIt gets AC.\n","slug":"ComplexNumberMultiplication","published":1,"updated":"2017-04-02T05:27:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpw6000rx2f4aj6yjcev","content":"<blockquote>\n<p>Given two strings representing two complex numbers.</p>\n<p>You need to return a string representing their multiplication. Note i2 = -1 according to the definition.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;1+1i&quot;, &quot;1+1i&quot;</div><div class=\"line\">Output: &quot;0+2i&quot;</div><div class=\"line\">Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;1+-1i&quot;, &quot;1+-1i&quot;</div><div class=\"line\">Output: &quot;0+-2i&quot;</div><div class=\"line\">Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The input strings will not have extra blank.</li>\n<li>The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.537. It is not a hard-thinking problem. You should just need to care more about the corner case.</p>\n<p>For some reason that I recommand you to solve this problem with Java. Because I think Java has better APIs to deal with Strings.</p>\n<p>Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * @author Mike</div><div class=\"line\"> * @project oj.code</div><div class=\"line\"> * @date 02/04/2017, 1:08 PM</div><div class=\"line\"> * @e-mail mike@mikecoder.cn</div><div class=\"line\"> */</div><div class=\"line\">public class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    class Num &#123;</div><div class=\"line\">        int a;</div><div class=\"line\">        int b;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public String toString() &#123;</div><div class=\"line\">            return a + &quot;+&quot; + b + &quot;i&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Num convert(String num) &#123;</div><div class=\"line\">        int real, fake;</div><div class=\"line\">        String[] nums = num.split(&quot;\\\\+&quot;);</div><div class=\"line\">        real = Integer.valueOf(nums[0]);</div><div class=\"line\">        fake = Integer.valueOf(nums[1].substring(0, nums[1].length() - 1));</div><div class=\"line\"></div><div class=\"line\">        Num res = new Num();</div><div class=\"line\">        res.a = real;</div><div class=\"line\">        res.b = fake;</div><div class=\"line\"></div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Num calc(Num num1, Num num2) &#123;</div><div class=\"line\">        Num res = new Num();</div><div class=\"line\">        res.a = num1.a * num2.a - num1.b * num2.b;</div><div class=\"line\">        res.b = num1.b * num2.a + num1.a * num2.b;</div><div class=\"line\"></div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String complexNumberMultiply(String a, String b) &#123;</div><div class=\"line\">        Num num1 = convert(a);</div><div class=\"line\">        Num num2 = convert(b);</div><div class=\"line\"></div><div class=\"line\">        Num res = calc(num1, num2);</div><div class=\"line\"></div><div class=\"line\">        return res.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is simple. I just create a new class to store the number of inputs. Then I calculate them with the rules provided by the description.</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given two strings representing two complex numbers.</p>\n<p>You need to return a string representing their multiplication. Note i2 = -1 according to the definition.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;1+1i&quot;, &quot;1+1i&quot;</div><div class=\"line\">Output: &quot;0+2i&quot;</div><div class=\"line\">Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;1+-1i&quot;, &quot;1+-1i&quot;</div><div class=\"line\">Output: &quot;0+-2i&quot;</div><div class=\"line\">Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The input strings will not have extra blank.</li>\n<li>The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.537. It is not a hard-thinking problem. You should just need to care more about the corner case.</p>\n<p>For some reason that I recommand you to solve this problem with Java. Because I think Java has better APIs to deal with Strings.</p>\n<p>Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * @author Mike</div><div class=\"line\"> * @project oj.code</div><div class=\"line\"> * @date 02/04/2017, 1:08 PM</div><div class=\"line\"> * @e-mail mike@mikecoder.cn</div><div class=\"line\"> */</div><div class=\"line\">public class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    class Num &#123;</div><div class=\"line\">        int a;</div><div class=\"line\">        int b;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public String toString() &#123;</div><div class=\"line\">            return a + &quot;+&quot; + b + &quot;i&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Num convert(String num) &#123;</div><div class=\"line\">        int real, fake;</div><div class=\"line\">        String[] nums = num.split(&quot;\\\\+&quot;);</div><div class=\"line\">        real = Integer.valueOf(nums[0]);</div><div class=\"line\">        fake = Integer.valueOf(nums[1].substring(0, nums[1].length() - 1));</div><div class=\"line\"></div><div class=\"line\">        Num res = new Num();</div><div class=\"line\">        res.a = real;</div><div class=\"line\">        res.b = fake;</div><div class=\"line\"></div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Num calc(Num num1, Num num2) &#123;</div><div class=\"line\">        Num res = new Num();</div><div class=\"line\">        res.a = num1.a * num2.a - num1.b * num2.b;</div><div class=\"line\">        res.b = num1.b * num2.a + num1.a * num2.b;</div><div class=\"line\"></div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String complexNumberMultiply(String a, String b) &#123;</div><div class=\"line\">        Num num1 = convert(a);</div><div class=\"line\">        Num num2 = convert(b);</div><div class=\"line\"></div><div class=\"line\">        Num res = calc(num1, num2);</div><div class=\"line\"></div><div class=\"line\">        return res.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is simple. I just create a new class to store the number of inputs. Then I calculate them with the rules provided by the description.</p>\n<p>It gets AC.</p>"},{"title":"Contains Duplicate III","date":"2017-03-27T06:24:16.000Z","_content":"\n> Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.\n\n<!--more-->\n\nThis is Leetcode No.220. It is a really fun problem. It seems like to find the number pair under these conditions. But you can transform this problem into a search problem.\n\nFor example, you can think like this: find the num1 and num2 in subarray from nums[i] to num[j] that their absolute difference between num1 and num2 is at most k.\n\nThis is my first submit code:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n            int res = false;\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int del = 1; del <= k && idx + del < (int)nums.size(); del++) {\n                    if (abs(nums[idx] - nums[idx + del]) <= t) {\n                        return true;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt has a problem that if the nums is INT_MAX and with numbers less than 0, it will overflow. So, I use long long to avoid this case.\n\nThen the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n            int res = false;\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int del = 1; del <= k && idx + del < (int)nums.size(); del++) {\n                    if (abs((long long)nums[idx] - (long long)nums[idx + del]) <= t) {\n                        return true;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt pass the test cases with a TLE.\n\nSo, I use the Binary Search to improve its performance. But it's time complex is O(nlogn). And I find a better solution in the Discuss.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n            set<int> window; // set is ordered automatically\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (i > k) window.erase(nums[i-k-1]); // keep the set contains nums i j at most k\n                // |x - nums[i]| <= t  ==> -t <= x - nums[i] <= t;\n                auto pos = window.lower_bound(nums[i] - t); // x-nums[i] >= -t ==> x >= nums[i]-t\n                // x - nums[i] <= t ==> |x - nums[i]| <= t\n                if (pos != window.end() && *pos - nums[i] <= t) return true;\n                window.insert(nums[i]);\n            }\n            return false;\n        }\n};\n```\n\nAnd its time complex is O(N), excellent job he does. It absolutely get AC.\n","source":"_posts/ContainsDuplicateIII.md","raw":"---\ntitle: Contains Duplicate III\ndate: 2017-03-27 14:24:16\ntags:\n    - Binary Search Tree\n---\n\n> Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.\n\n<!--more-->\n\nThis is Leetcode No.220. It is a really fun problem. It seems like to find the number pair under these conditions. But you can transform this problem into a search problem.\n\nFor example, you can think like this: find the num1 and num2 in subarray from nums[i] to num[j] that their absolute difference between num1 and num2 is at most k.\n\nThis is my first submit code:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n            int res = false;\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int del = 1; del <= k && idx + del < (int)nums.size(); del++) {\n                    if (abs(nums[idx] - nums[idx + del]) <= t) {\n                        return true;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt has a problem that if the nums is INT_MAX and with numbers less than 0, it will overflow. So, I use long long to avoid this case.\n\nThen the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n            int res = false;\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int del = 1; del <= k && idx + del < (int)nums.size(); del++) {\n                    if (abs((long long)nums[idx] - (long long)nums[idx + del]) <= t) {\n                        return true;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt pass the test cases with a TLE.\n\nSo, I use the Binary Search to improve its performance. But it's time complex is O(nlogn). And I find a better solution in the Discuss.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n            set<int> window; // set is ordered automatically\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (i > k) window.erase(nums[i-k-1]); // keep the set contains nums i j at most k\n                // |x - nums[i]| <= t  ==> -t <= x - nums[i] <= t;\n                auto pos = window.lower_bound(nums[i] - t); // x-nums[i] >= -t ==> x >= nums[i]-t\n                // x - nums[i] <= t ==> |x - nums[i]| <= t\n                if (pos != window.end() && *pos - nums[i] <= t) return true;\n                window.insert(nums[i]);\n            }\n            return false;\n        }\n};\n```\n\nAnd its time complex is O(N), excellent job he does. It absolutely get AC.\n","slug":"ContainsDuplicateIII","published":1,"updated":"2017-03-27T07:39:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpw7000tx2f46v3cxupk","content":"<blockquote>\n<p>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.220. It is a really fun problem. It seems like to find the number pair under these conditions. But you can transform this problem into a search problem.</p>\n<p>For example, you can think like this: find the num1 and num2 in subarray from nums[i] to num[j] that their absolute difference between num1 and num2 is at most k.</p>\n<p>This is my first submit code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) &#123;</div><div class=\"line\">            int res = false;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int del = 1; del &lt;= k &amp;&amp; idx + del &lt; (int)nums.size(); del++) &#123;</div><div class=\"line\">                    if (abs(nums[idx] - nums[idx + del]) &lt;= t) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It has a problem that if the nums is INT_MAX and with numbers less than 0, it will overflow. So, I use long long to avoid this case.</p>\n<p>Then the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) &#123;</div><div class=\"line\">            int res = false;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int del = 1; del &lt;= k &amp;&amp; idx + del &lt; (int)nums.size(); del++) &#123;</div><div class=\"line\">                    if (abs((long long)nums[idx] - (long long)nums[idx + del]) &lt;= t) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It pass the test cases with a TLE.</p>\n<p>So, I use the Binary Search to improve its performance. But it’s time complex is O(nlogn). And I find a better solution in the Discuss.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) &#123;</div><div class=\"line\">            set&lt;int&gt; window; // set is ordered automatically</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (i &gt; k) window.erase(nums[i-k-1]); // keep the set contains nums i j at most k</div><div class=\"line\">                // |x - nums[i]| &lt;= t  ==&gt; -t &lt;= x - nums[i] &lt;= t;</div><div class=\"line\">                auto pos = window.lower_bound(nums[i] - t); // x-nums[i] &gt;= -t ==&gt; x &gt;= nums[i]-t</div><div class=\"line\">                // x - nums[i] &lt;= t ==&gt; |x - nums[i]| &lt;= t</div><div class=\"line\">                if (pos != window.end() &amp;&amp; *pos - nums[i] &lt;= t) return true;</div><div class=\"line\">                window.insert(nums[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And its time complex is O(N), excellent job he does. It absolutely get AC.</p>\n","excerpt":"<blockquote>\n<p>Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.</p>\n</blockquote>","more":"<p>This is Leetcode No.220. It is a really fun problem. It seems like to find the number pair under these conditions. But you can transform this problem into a search problem.</p>\n<p>For example, you can think like this: find the num1 and num2 in subarray from nums[i] to num[j] that their absolute difference between num1 and num2 is at most k.</p>\n<p>This is my first submit code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) &#123;</div><div class=\"line\">            int res = false;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int del = 1; del &lt;= k &amp;&amp; idx + del &lt; (int)nums.size(); del++) &#123;</div><div class=\"line\">                    if (abs(nums[idx] - nums[idx + del]) &lt;= t) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It has a problem that if the nums is INT_MAX and with numbers less than 0, it will overflow. So, I use long long to avoid this case.</p>\n<p>Then the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) &#123;</div><div class=\"line\">            int res = false;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int del = 1; del &lt;= k &amp;&amp; idx + del &lt; (int)nums.size(); del++) &#123;</div><div class=\"line\">                    if (abs((long long)nums[idx] - (long long)nums[idx + del]) &lt;= t) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It pass the test cases with a TLE.</p>\n<p>So, I use the Binary Search to improve its performance. But it’s time complex is O(nlogn). And I find a better solution in the Discuss.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) &#123;</div><div class=\"line\">            set&lt;int&gt; window; // set is ordered automatically</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (i &gt; k) window.erase(nums[i-k-1]); // keep the set contains nums i j at most k</div><div class=\"line\">                // |x - nums[i]| &lt;= t  ==&gt; -t &lt;= x - nums[i] &lt;= t;</div><div class=\"line\">                auto pos = window.lower_bound(nums[i] - t); // x-nums[i] &gt;= -t ==&gt; x &gt;= nums[i]-t</div><div class=\"line\">                // x - nums[i] &lt;= t ==&gt; |x - nums[i]| &lt;= t</div><div class=\"line\">                if (pos != window.end() &amp;&amp; *pos - nums[i] &lt;= t) return true;</div><div class=\"line\">                window.insert(nums[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And its time complex is O(N), excellent job he does. It absolutely get AC.</p>"},{"title":"Continuous Subarray Sum","date":"2017-03-08T02:29:23.000Z","_content":"\n\n> Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.\n>\n> Example 1:\n>```\nInput: [23, 2, 4, 6, 7],  k=6\nOutput: True\nExplanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n```\n> Example 2:\n>```\nInput: [23, 2, 6, 4, 7],  k=6\nOutput: True\nExplanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n```\n> Note:\n>\n> + The length of the array won't exceed 10,000.\n> + You may assume the sum of all the numbers is in the range of a signed 32-bit integer.\n\n<!--more-->\n\nThis is Leetcode No.523, and I get a mistake when I write this code. I don't figure out the case when K = 0.\n\nMy code will get a divided by zero error. And I just use a no-smart solution:\n\n```\nclass Solution {\n    public:\n        bool checkSubarraySum(vector<int>& nums, int k) {\n            int sum = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                sum = sum + nums[i];\n            }\n\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                int sum = nums[idx];\n                for (int idy = idx + 1; idy < (int)nums.size(); idy++) {\n                    sum = sum + nums[idy];\n                    if (sum == 0) {\n                        return true;\n                    }\n                    if (k != 0 && sum % k == 0) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n};\n```\n\nI just to count the sum of every combination. So the time complex is O(n^2).Though it gets AC but it is not a good solution.\n\nWhen I search in the discuss. I find some better solution:\n\n```\npublic boolean checkSubarraySum(int[] nums, int k) {\n\tint n = nums.length;\n\tint[] sums = new int[n+1];\n\tfor (int i = 1; i <= n; i++) {\n\t\tsums[i] = sums[i-1] + nums[i-1];\n\t\tfor (int j = 0; j < i-1; j++) {\n\t\t\tint dif = sums[i]-sums[j];\n\t\t\tif (dif == 0 && k == 0) return true;\n\t\t\telse if (k == 0) continue;\n\t\t\telse if ((sums[i]-sums[j]) % k == 0) return true;\n\t\t}\n\t}\n\treturn false;\n}\n```\n\nIts time complex is O(n), which is much better than mine.\n","source":"_posts/ContinuousSubarraySum.md","raw":"---\ntitle: Continuous Subarray Sum\ndate: 2017-03-08 10:29:23\ntags:\n    - Dynamic Programming\n    - Math\n---\n\n\n> Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.\n>\n> Example 1:\n>```\nInput: [23, 2, 4, 6, 7],  k=6\nOutput: True\nExplanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n```\n> Example 2:\n>```\nInput: [23, 2, 6, 4, 7],  k=6\nOutput: True\nExplanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n```\n> Note:\n>\n> + The length of the array won't exceed 10,000.\n> + You may assume the sum of all the numbers is in the range of a signed 32-bit integer.\n\n<!--more-->\n\nThis is Leetcode No.523, and I get a mistake when I write this code. I don't figure out the case when K = 0.\n\nMy code will get a divided by zero error. And I just use a no-smart solution:\n\n```\nclass Solution {\n    public:\n        bool checkSubarraySum(vector<int>& nums, int k) {\n            int sum = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                sum = sum + nums[i];\n            }\n\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                int sum = nums[idx];\n                for (int idy = idx + 1; idy < (int)nums.size(); idy++) {\n                    sum = sum + nums[idy];\n                    if (sum == 0) {\n                        return true;\n                    }\n                    if (k != 0 && sum % k == 0) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n};\n```\n\nI just to count the sum of every combination. So the time complex is O(n^2).Though it gets AC but it is not a good solution.\n\nWhen I search in the discuss. I find some better solution:\n\n```\npublic boolean checkSubarraySum(int[] nums, int k) {\n\tint n = nums.length;\n\tint[] sums = new int[n+1];\n\tfor (int i = 1; i <= n; i++) {\n\t\tsums[i] = sums[i-1] + nums[i-1];\n\t\tfor (int j = 0; j < i-1; j++) {\n\t\t\tint dif = sums[i]-sums[j];\n\t\t\tif (dif == 0 && k == 0) return true;\n\t\t\telse if (k == 0) continue;\n\t\t\telse if ((sums[i]-sums[j]) % k == 0) return true;\n\t\t}\n\t}\n\treturn false;\n}\n```\n\nIts time complex is O(n), which is much better than mine.\n","slug":"ContinuousSubarraySum","published":1,"updated":"2017-03-08T05:16:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpw9000wx2f4z1l8zwpj","content":"<blockquote>\n<p>Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [23, 2, 4, 6, 7],  k=6</div><div class=\"line\">Output: True</div><div class=\"line\">Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [23, 2, 6, 4, 7],  k=6</div><div class=\"line\">Output: True</div><div class=\"line\">Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The length of the array won’t exceed 10,000.</li>\n<li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.523, and I get a mistake when I write this code. I don’t figure out the case when K = 0.</p>\n<p>My code will get a divided by zero error. And I just use a no-smart solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool checkSubarraySum(vector&lt;int&gt;&amp; nums, int k) &#123;</div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                sum = sum + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                int sum = nums[idx];</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    sum = sum + nums[idy];</div><div class=\"line\">                    if (sum == 0) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (k != 0 &amp;&amp; sum % k == 0) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I just to count the sum of every combination. So the time complex is O(n^2).Though it gets AC but it is not a good solution.</p>\n<p>When I search in the discuss. I find some better solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public boolean checkSubarraySum(int[] nums, int k) &#123;</div><div class=\"line\">\tint n = nums.length;</div><div class=\"line\">\tint[] sums = new int[n+1];</div><div class=\"line\">\tfor (int i = 1; i &lt;= n; i++) &#123;</div><div class=\"line\">\t\tsums[i] = sums[i-1] + nums[i-1];</div><div class=\"line\">\t\tfor (int j = 0; j &lt; i-1; j++) &#123;</div><div class=\"line\">\t\t\tint dif = sums[i]-sums[j];</div><div class=\"line\">\t\t\tif (dif == 0 &amp;&amp; k == 0) return true;</div><div class=\"line\">\t\t\telse if (k == 0) continue;</div><div class=\"line\">\t\t\telse if ((sums[i]-sums[j]) % k == 0) return true;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n), which is much better than mine.</p>\n","excerpt":"<blockquote>\n<p>Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [23, 2, 4, 6, 7],  k=6</div><div class=\"line\">Output: True</div><div class=\"line\">Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [23, 2, 6, 4, 7],  k=6</div><div class=\"line\">Output: True</div><div class=\"line\">Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The length of the array won’t exceed 10,000.</li>\n<li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.523, and I get a mistake when I write this code. I don’t figure out the case when K = 0.</p>\n<p>My code will get a divided by zero error. And I just use a no-smart solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool checkSubarraySum(vector&lt;int&gt;&amp; nums, int k) &#123;</div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                sum = sum + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                int sum = nums[idx];</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    sum = sum + nums[idy];</div><div class=\"line\">                    if (sum == 0) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (k != 0 &amp;&amp; sum % k == 0) &#123;</div><div class=\"line\">                        return true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I just to count the sum of every combination. So the time complex is O(n^2).Though it gets AC but it is not a good solution.</p>\n<p>When I search in the discuss. I find some better solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public boolean checkSubarraySum(int[] nums, int k) &#123;</div><div class=\"line\">\tint n = nums.length;</div><div class=\"line\">\tint[] sums = new int[n+1];</div><div class=\"line\">\tfor (int i = 1; i &lt;= n; i++) &#123;</div><div class=\"line\">\t\tsums[i] = sums[i-1] + nums[i-1];</div><div class=\"line\">\t\tfor (int j = 0; j &lt; i-1; j++) &#123;</div><div class=\"line\">\t\t\tint dif = sums[i]-sums[j];</div><div class=\"line\">\t\t\tif (dif == 0 &amp;&amp; k == 0) return true;</div><div class=\"line\">\t\t\telse if (k == 0) continue;</div><div class=\"line\">\t\t\telse if ((sums[i]-sums[j]) % k == 0) return true;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n), which is much better than mine.</p>"},{"title":"Convert BST to Greater Tree","date":"2017-04-01T14:14:27.000Z","_content":"\n\n> Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\n>\n> Example:\n>```\nInput: The root of a Binary Search Tree like this:\n   5\n /   \\\n2     13\n\nOutput: The root of a Greater Tree like this:\n   18\n  /   \\\n20     13\n```\n\n<!--more-->\n\nThis is Leetcode No.538. It is a simple problem. What you should do first is to be familiar with the Tree data structure.\n\nFirst, you should do preorder traversal of the whole tree and find the sum value.\n\nThe use the inorder traversal of the whle tree.\n\nYou will find that the inorder traversal will calc the left child first then the root one and the right one. So you can set the value of each.\n\nHere is my solution:\n\n```\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\n    public:\n        int sum;\n\n        TreeNode* convertBST(TreeNode* root) {\n            sum = 0;\n            preOrder(root);\n            setValue(root);\n\n            return root;\n        }\n\n        void setValue(TreeNode* node) {\n            if (node == NULL) {\n                return;\n            }\n            setValue(node->left);\n            int val = node->val;\n            node->val = sum;\n            sum = sum - val;\n            setValue(node->right);\n        }\n\n        void preOrder(TreeNode* node) {\n            if (node == NULL) {\n                return;\n            }\n            sum = node->val + sum;\n            preOrder(node->left);\n            preOrder(node->right);\n        }\n};\n```\n\nEasy to understand and it gets AC.\n","source":"_posts/ConvertBSTtoGreaterTree.md","raw":"---\ntitle: Convert BST to Greater Tree\ndate: 2017-04-01 22:14:27\ntags:\n    - Tree\n---\n\n\n> Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\n>\n> Example:\n>```\nInput: The root of a Binary Search Tree like this:\n   5\n /   \\\n2     13\n\nOutput: The root of a Greater Tree like this:\n   18\n  /   \\\n20     13\n```\n\n<!--more-->\n\nThis is Leetcode No.538. It is a simple problem. What you should do first is to be familiar with the Tree data structure.\n\nFirst, you should do preorder traversal of the whole tree and find the sum value.\n\nThe use the inorder traversal of the whle tree.\n\nYou will find that the inorder traversal will calc the left child first then the root one and the right one. So you can set the value of each.\n\nHere is my solution:\n\n```\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\n    public:\n        int sum;\n\n        TreeNode* convertBST(TreeNode* root) {\n            sum = 0;\n            preOrder(root);\n            setValue(root);\n\n            return root;\n        }\n\n        void setValue(TreeNode* node) {\n            if (node == NULL) {\n                return;\n            }\n            setValue(node->left);\n            int val = node->val;\n            node->val = sum;\n            sum = sum - val;\n            setValue(node->right);\n        }\n\n        void preOrder(TreeNode* node) {\n            if (node == NULL) {\n                return;\n            }\n            sum = node->val + sum;\n            preOrder(node->left);\n            preOrder(node->right);\n        }\n};\n```\n\nEasy to understand and it gets AC.\n","slug":"ConvertBSTtoGreaterTree","published":1,"updated":"2017-04-01T14:33:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwa000yx2f4vzihr5o1","content":"<blockquote>\n<p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: The root of a Binary Search Tree like this:</div><div class=\"line\">   5</div><div class=\"line\"> /   \\</div><div class=\"line\">2     13</div><div class=\"line\"></div><div class=\"line\">Output: The root of a Greater Tree like this:</div><div class=\"line\">   18</div><div class=\"line\">  /   \\</div><div class=\"line\">20     13</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.538. It is a simple problem. What you should do first is to be familiar with the Tree data structure.</p>\n<p>First, you should do preorder traversal of the whole tree and find the sum value.</p>\n<p>The use the inorder traversal of the whle tree.</p>\n<p>You will find that the inorder traversal will calc the left child first then the root one and the right one. So you can set the value of each.</p>\n<p>Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct TreeNode &#123;</div><div class=\"line\">    int val;</div><div class=\"line\">    TreeNode *left;</div><div class=\"line\">    TreeNode *right;</div><div class=\"line\">    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int sum;</div><div class=\"line\"></div><div class=\"line\">        TreeNode* convertBST(TreeNode* root) &#123;</div><div class=\"line\">            sum = 0;</div><div class=\"line\">            preOrder(root);</div><div class=\"line\">            setValue(root);</div><div class=\"line\"></div><div class=\"line\">            return root;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void setValue(TreeNode* node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            setValue(node-&gt;left);</div><div class=\"line\">            int val = node-&gt;val;</div><div class=\"line\">            node-&gt;val = sum;</div><div class=\"line\">            sum = sum - val;</div><div class=\"line\">            setValue(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void preOrder(TreeNode* node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = node-&gt;val + sum;</div><div class=\"line\">            preOrder(node-&gt;left);</div><div class=\"line\">            preOrder(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to understand and it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: The root of a Binary Search Tree like this:</div><div class=\"line\">   5</div><div class=\"line\"> /   \\</div><div class=\"line\">2     13</div><div class=\"line\"></div><div class=\"line\">Output: The root of a Greater Tree like this:</div><div class=\"line\">   18</div><div class=\"line\">  /   \\</div><div class=\"line\">20     13</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.538. It is a simple problem. What you should do first is to be familiar with the Tree data structure.</p>\n<p>First, you should do preorder traversal of the whole tree and find the sum value.</p>\n<p>The use the inorder traversal of the whle tree.</p>\n<p>You will find that the inorder traversal will calc the left child first then the root one and the right one. So you can set the value of each.</p>\n<p>Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct TreeNode &#123;</div><div class=\"line\">    int val;</div><div class=\"line\">    TreeNode *left;</div><div class=\"line\">    TreeNode *right;</div><div class=\"line\">    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int sum;</div><div class=\"line\"></div><div class=\"line\">        TreeNode* convertBST(TreeNode* root) &#123;</div><div class=\"line\">            sum = 0;</div><div class=\"line\">            preOrder(root);</div><div class=\"line\">            setValue(root);</div><div class=\"line\"></div><div class=\"line\">            return root;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void setValue(TreeNode* node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            setValue(node-&gt;left);</div><div class=\"line\">            int val = node-&gt;val;</div><div class=\"line\">            node-&gt;val = sum;</div><div class=\"line\">            sum = sum - val;</div><div class=\"line\">            setValue(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void preOrder(TreeNode* node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = node-&gt;val + sum;</div><div class=\"line\">            preOrder(node-&gt;left);</div><div class=\"line\">            preOrder(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to understand and it gets AC.</p>"},{"title":"Count Numbers with Unique Digits","date":"2017-03-24T01:25:48.000Z","_content":"\n> Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x < 10n.\n>\n> Example:\n> Given n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x < 100, excluding [11,22,33,44,55,66,77,88,99])\n>\n> Hint:\n>\n> + A direct way is to use the backtracking approach.\n> + Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10n.\n> + This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.\n> + Let f(k) = count of numbers with unique digits with length equals k.\n> + f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0].\n\n<!--more-->\n\nThis is Leetcode No.357. It is a common DP problem using backtracking.\n\nMy solution is following.\n\n```\nclass solution {\n    public:\n        int permutation(int n, int r)\n        {\n            if(r == 0)\n            {\n                return 1;\n            }else{\n                return n * permutation(n - 1, r - 1);\n            }\n        }\n        int countnumberswithuniquedigits(int n) {\n            int sum = 1;\n            if(n > 0)\n            {\n            int end = (n > 10)? 10 : n;\n            for(int i = 0; i < end; i++)\n            {\n                sum += 9 * permutation(9, i);\n            }\n            }\n            return sum;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/CountNumberswithUniqueDigits.md","raw":"---\ntitle: Count Numbers with Unique Digits\ndate: 2017-03-24 09:25:48\ntags:\n    - Math\n    - Backtracking\n    - Dynamic Programming\n---\n\n> Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x < 10n.\n>\n> Example:\n> Given n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x < 100, excluding [11,22,33,44,55,66,77,88,99])\n>\n> Hint:\n>\n> + A direct way is to use the backtracking approach.\n> + Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10n.\n> + This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.\n> + Let f(k) = count of numbers with unique digits with length equals k.\n> + f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0].\n\n<!--more-->\n\nThis is Leetcode No.357. It is a common DP problem using backtracking.\n\nMy solution is following.\n\n```\nclass solution {\n    public:\n        int permutation(int n, int r)\n        {\n            if(r == 0)\n            {\n                return 1;\n            }else{\n                return n * permutation(n - 1, r - 1);\n            }\n        }\n        int countnumberswithuniquedigits(int n) {\n            int sum = 1;\n            if(n > 0)\n            {\n            int end = (n > 10)? 10 : n;\n            for(int i = 0; i < end; i++)\n            {\n                sum += 9 * permutation(9, i);\n            }\n            }\n            return sum;\n        }\n};\n```\n\nIt gets AC.\n","slug":"CountNumberswithUniqueDigits","published":1,"updated":"2017-03-27T06:22:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwb0011x2f4xysvwrtg","content":"<blockquote>\n<p>Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x &lt; 10n.</p>\n<p>Example:<br>Given n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x &lt; 100, excluding [11,22,33,44,55,66,77,88,99])</p>\n<p>Hint:</p>\n<ul>\n<li>A direct way is to use the backtracking approach.</li>\n<li>Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10n.</li>\n<li>This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.</li>\n<li>Let f(k) = count of numbers with unique digits with length equals k.</li>\n<li>f(1) = 10, …, f(k) = 9 <em> 9 </em> 8 * … (9 - k + 2) [The first factor is 9 because a number cannot start with 0].</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.357. It is a common DP problem using backtracking.</p>\n<p>My solution is following.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int permutation(int n, int r)</div><div class=\"line\">        &#123;</div><div class=\"line\">            if(r == 0)</div><div class=\"line\">            &#123;</div><div class=\"line\">                return 1;</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                return n * permutation(n - 1, r - 1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int countnumberswithuniquedigits(int n) &#123;</div><div class=\"line\">            int sum = 1;</div><div class=\"line\">            if(n &gt; 0)</div><div class=\"line\">            &#123;</div><div class=\"line\">            int end = (n &gt; 10)? 10 : n;</div><div class=\"line\">            for(int i = 0; i &lt; end; i++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                sum += 9 * permutation(9, i);</div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x &lt; 10n.</p>\n<p>Example:<br>Given n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x &lt; 100, excluding [11,22,33,44,55,66,77,88,99])</p>\n<p>Hint:</p>\n<ul>\n<li>A direct way is to use the backtracking approach.</li>\n<li>Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10n.</li>\n<li>This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.</li>\n<li>Let f(k) = count of numbers with unique digits with length equals k.</li>\n<li>f(1) = 10, …, f(k) = 9 <em> 9 </em> 8 * … (9 - k + 2) [The first factor is 9 because a number cannot start with 0].</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.357. It is a common DP problem using backtracking.</p>\n<p>My solution is following.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int permutation(int n, int r)</div><div class=\"line\">        &#123;</div><div class=\"line\">            if(r == 0)</div><div class=\"line\">            &#123;</div><div class=\"line\">                return 1;</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                return n * permutation(n - 1, r - 1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int countnumberswithuniquedigits(int n) &#123;</div><div class=\"line\">            int sum = 1;</div><div class=\"line\">            if(n &gt; 0)</div><div class=\"line\">            &#123;</div><div class=\"line\">            int end = (n &gt; 10)? 10 : n;</div><div class=\"line\">            for(int i = 0; i &lt; end; i++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                sum += 9 * permutation(9, i);</div><div class=\"line\">            &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Course Schedule II","date":"2017-04-14T03:36:27.000Z","_content":"\n\n> There are a total of n courses you have to take, labeled from 0 to n - 1.\n>\n> Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\n>\n> Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.\n>\n> There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.\n>\n> For example:\n>```\n2, [[1,0]]\n```\n> There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]\n>```\n4, [[1,0],[2,0],[3,1],[3,2]]\n```\n> There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].\n>\n> Note:\n>\n> + The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\n> + You may assume that there are no duplicate edges in the input prerequisites.\n\n<!--more-->\n\nThis is Leetcode No.210. It is a classic Graph problem. Just using BFS or DFS, you can solve this problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> findOrder(int numCourses, vector<pair<int, int> >& prerequisites) {\n            vector<set<int> > graph = make_graph(numCourses, prerequisites);\n            vector<int> toposort;\n            vector<bool> onpath(numCourses, false), visited(numCourses, false);\n            for (int i = 0; i < numCourses; i++)\n                if (!visited[i] && dfs(graph, i, onpath, visited, toposort))\n                    return {};\n            reverse(toposort.begin(), toposort.end());\n            return toposort;\n        }\n    private:\n        vector<set<int> > make_graph(int numCourses, vector<pair<int, int> >& prerequisites) {\n            vector<set<int> > graph(numCourses);\n            for (auto pre : prerequisites)\n                graph[pre.second].insert(pre.first);\n            return graph;\n        }\n        bool dfs(vector<set<int> >& graph, int node, vector<bool>& onpath, vector<bool>& visited, vector<int>& toposort) {\n            if (visited[node]) return false;\n            onpath[node] = visited[node] = true;\n            for (int neigh : graph[node])\n                if (onpath[neigh] || dfs(graph, neigh, onpath, visited, toposort))\n                    return true;\n            toposort.push_back(node);\n            return onpath[node] = false;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/CourseScheduleII.md","raw":"---\ntitle: Course Schedule II\ndate: 2017-04-14 11:36:27\ntags:\n    - Graph\n    - Depth-first Search\n    - Breadth-first Search\n    - Topological Sort\n---\n\n\n> There are a total of n courses you have to take, labeled from 0 to n - 1.\n>\n> Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\n>\n> Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.\n>\n> There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.\n>\n> For example:\n>```\n2, [[1,0]]\n```\n> There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]\n>```\n4, [[1,0],[2,0],[3,1],[3,2]]\n```\n> There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].\n>\n> Note:\n>\n> + The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\n> + You may assume that there are no duplicate edges in the input prerequisites.\n\n<!--more-->\n\nThis is Leetcode No.210. It is a classic Graph problem. Just using BFS or DFS, you can solve this problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> findOrder(int numCourses, vector<pair<int, int> >& prerequisites) {\n            vector<set<int> > graph = make_graph(numCourses, prerequisites);\n            vector<int> toposort;\n            vector<bool> onpath(numCourses, false), visited(numCourses, false);\n            for (int i = 0; i < numCourses; i++)\n                if (!visited[i] && dfs(graph, i, onpath, visited, toposort))\n                    return {};\n            reverse(toposort.begin(), toposort.end());\n            return toposort;\n        }\n    private:\n        vector<set<int> > make_graph(int numCourses, vector<pair<int, int> >& prerequisites) {\n            vector<set<int> > graph(numCourses);\n            for (auto pre : prerequisites)\n                graph[pre.second].insert(pre.first);\n            return graph;\n        }\n        bool dfs(vector<set<int> >& graph, int node, vector<bool>& onpath, vector<bool>& visited, vector<int>& toposort) {\n            if (visited[node]) return false;\n            onpath[node] = visited[node] = true;\n            for (int neigh : graph[node])\n                if (onpath[neigh] || dfs(graph, neigh, onpath, visited, toposort))\n                    return true;\n            toposort.push_back(node);\n            return onpath[node] = false;\n        }\n};\n```\n\nIt gets AC.\n","slug":"CourseScheduleII","published":1,"updated":"2017-04-14T15:51:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwd0013x2f407owfrl6","content":"<blockquote>\n<p>There are a total of n courses you have to take, labeled from 0 to n - 1.</p>\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>\n<p>Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.</p>\n<p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2, [[1,0]]</div></pre></td></tr></table></figure></p>\n<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">4, [[1,0],[2,0],[3,1],[3,2]]</div></pre></td></tr></table></figure></p>\n<p>There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].</p>\n<p>Note:</p>\n<ul>\n<li>The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.210. It is a classic Graph problem. Just using BFS or DFS, you can solve this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findOrder(int numCourses, vector&lt;pair&lt;int, int&gt; &gt;&amp; prerequisites) &#123;</div><div class=\"line\">            vector&lt;set&lt;int&gt; &gt; graph = make_graph(numCourses, prerequisites);</div><div class=\"line\">            vector&lt;int&gt; toposort;</div><div class=\"line\">            vector&lt;bool&gt; onpath(numCourses, false), visited(numCourses, false);</div><div class=\"line\">            for (int i = 0; i &lt; numCourses; i++)</div><div class=\"line\">                if (!visited[i] &amp;&amp; dfs(graph, i, onpath, visited, toposort))</div><div class=\"line\">                    return &#123;&#125;;</div><div class=\"line\">            reverse(toposort.begin(), toposort.end());</div><div class=\"line\">            return toposort;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        vector&lt;set&lt;int&gt; &gt; make_graph(int numCourses, vector&lt;pair&lt;int, int&gt; &gt;&amp; prerequisites) &#123;</div><div class=\"line\">            vector&lt;set&lt;int&gt; &gt; graph(numCourses);</div><div class=\"line\">            for (auto pre : prerequisites)</div><div class=\"line\">                graph[pre.second].insert(pre.first);</div><div class=\"line\">            return graph;</div><div class=\"line\">        &#125;</div><div class=\"line\">        bool dfs(vector&lt;set&lt;int&gt; &gt;&amp; graph, int node, vector&lt;bool&gt;&amp; onpath, vector&lt;bool&gt;&amp; visited, vector&lt;int&gt;&amp; toposort) &#123;</div><div class=\"line\">            if (visited[node]) return false;</div><div class=\"line\">            onpath[node] = visited[node] = true;</div><div class=\"line\">            for (int neigh : graph[node])</div><div class=\"line\">                if (onpath[neigh] || dfs(graph, neigh, onpath, visited, toposort))</div><div class=\"line\">                    return true;</div><div class=\"line\">            toposort.push_back(node);</div><div class=\"line\">            return onpath[node] = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>There are a total of n courses you have to take, labeled from 0 to n - 1.</p>\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>\n<p>Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.</p>\n<p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2, [[1,0]]</div></pre></td></tr></table></figure></p>\n<p>There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">4, [[1,0],[2,0],[3,1],[3,2]]</div></pre></td></tr></table></figure></p>\n<p>There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].</p>\n<p>Note:</p>\n<ul>\n<li>The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.</li>\n<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.210. It is a classic Graph problem. Just using BFS or DFS, you can solve this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findOrder(int numCourses, vector&lt;pair&lt;int, int&gt; &gt;&amp; prerequisites) &#123;</div><div class=\"line\">            vector&lt;set&lt;int&gt; &gt; graph = make_graph(numCourses, prerequisites);</div><div class=\"line\">            vector&lt;int&gt; toposort;</div><div class=\"line\">            vector&lt;bool&gt; onpath(numCourses, false), visited(numCourses, false);</div><div class=\"line\">            for (int i = 0; i &lt; numCourses; i++)</div><div class=\"line\">                if (!visited[i] &amp;&amp; dfs(graph, i, onpath, visited, toposort))</div><div class=\"line\">                    return &#123;&#125;;</div><div class=\"line\">            reverse(toposort.begin(), toposort.end());</div><div class=\"line\">            return toposort;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        vector&lt;set&lt;int&gt; &gt; make_graph(int numCourses, vector&lt;pair&lt;int, int&gt; &gt;&amp; prerequisites) &#123;</div><div class=\"line\">            vector&lt;set&lt;int&gt; &gt; graph(numCourses);</div><div class=\"line\">            for (auto pre : prerequisites)</div><div class=\"line\">                graph[pre.second].insert(pre.first);</div><div class=\"line\">            return graph;</div><div class=\"line\">        &#125;</div><div class=\"line\">        bool dfs(vector&lt;set&lt;int&gt; &gt;&amp; graph, int node, vector&lt;bool&gt;&amp; onpath, vector&lt;bool&gt;&amp; visited, vector&lt;int&gt;&amp; toposort) &#123;</div><div class=\"line\">            if (visited[node]) return false;</div><div class=\"line\">            onpath[node] = visited[node] = true;</div><div class=\"line\">            for (int neigh : graph[node])</div><div class=\"line\">                if (onpath[neigh] || dfs(graph, neigh, onpath, visited, toposort))</div><div class=\"line\">                    return true;</div><div class=\"line\">            toposort.push_back(node);</div><div class=\"line\">            return onpath[node] = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Decode String","date":"2017-01-27T15:11:47.000Z","_content":"\n> Given an encoded string, return it's decoded string.\n>\n> The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n>\n> You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.\n>\n> Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].\n>\n> Examples:\n>\n> + s = \"3[a]2[bc]\", return \"aaabcbc\".\n> + s = \"3[a2[c]]\", return \"accaccacc\".\n> + s = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\n\n<!--more-->\n\nThis is Leetcode 394, and it's a problem with much fun. I have two solutions here. The first one is like what I use to write my own url rule parser. You can find [here - https://mikecoder.cn/post/164](https://mikecoder.cn/post/164).\n\nBut, its time complex is O(n^2). So, I should find a better solution. For example I can decode and read the string at the same time not just to find the pattern.\n\nSo, I will use two stacks to store the value:\n\n```\nclass Solution {\n    public:\n        string decodeString(string str) {\n            stack<string> chars;\n            stack<int> nums;\n            string res;\n            int num = 0;\n            for(char c: str) {\n                if(isdigit(c)) {\n                    num = num*10 + (c - '0');\n                } else if(isalpha(c)) {\n                    res.push_back(c);\n                } else if(c == '[') {\n                    chars.push(res);\n                    nums.push(num);\n                    res = \"\";\n                    num = 0;\n                } else if(c == ']') {\n                    string tmp = res;\n                    for(int i = 0; i < nums.top()-1; ++i) {\n                        res += tmp;\n                    }\n                    res = chars.top() + res;\n                    chars.pop(); nums.pop();\n                }\n            }\n            return res;\n        }\n};\n```\n\nHere is the solution and it gets AC.\n","source":"_posts/DecodeString.md","raw":"---\ntitle: Decode String\ndate: 2017-01-27 23:11:47\ntags:\n    - Stack\n    - Depth-first Search\n---\n\n> Given an encoded string, return it's decoded string.\n>\n> The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\n>\n> You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.\n>\n> Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].\n>\n> Examples:\n>\n> + s = \"3[a]2[bc]\", return \"aaabcbc\".\n> + s = \"3[a2[c]]\", return \"accaccacc\".\n> + s = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\n\n<!--more-->\n\nThis is Leetcode 394, and it's a problem with much fun. I have two solutions here. The first one is like what I use to write my own url rule parser. You can find [here - https://mikecoder.cn/post/164](https://mikecoder.cn/post/164).\n\nBut, its time complex is O(n^2). So, I should find a better solution. For example I can decode and read the string at the same time not just to find the pattern.\n\nSo, I will use two stacks to store the value:\n\n```\nclass Solution {\n    public:\n        string decodeString(string str) {\n            stack<string> chars;\n            stack<int> nums;\n            string res;\n            int num = 0;\n            for(char c: str) {\n                if(isdigit(c)) {\n                    num = num*10 + (c - '0');\n                } else if(isalpha(c)) {\n                    res.push_back(c);\n                } else if(c == '[') {\n                    chars.push(res);\n                    nums.push(num);\n                    res = \"\";\n                    num = 0;\n                } else if(c == ']') {\n                    string tmp = res;\n                    for(int i = 0; i < nums.top()-1; ++i) {\n                        res += tmp;\n                    }\n                    res = chars.top() + res;\n                    chars.pop(); nums.pop();\n                }\n            }\n            return res;\n        }\n};\n```\n\nHere is the solution and it gets AC.\n","slug":"DecodeString","published":1,"updated":"2017-01-27T14:05:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwe0016x2f4avdvk016","content":"<blockquote>\n<p>Given an encoded string, return it’s decoded string.</p>\n<p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>\n<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\n<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p>\n<p>Examples:</p>\n<ul>\n<li>s = “3[a]2[bc]”, return “aaabcbc”.</li>\n<li>s = “3[a2[c]]”, return “accaccacc”.</li>\n<li>s = “2[abc]3[cd]ef”, return “abcabccdcdcdef”.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 394, and it’s a problem with much fun. I have two solutions here. The first one is like what I use to write my own url rule parser. You can find <a href=\"https://mikecoder.cn/post/164\" target=\"_blank\" rel=\"external\">here - https://mikecoder.cn/post/164</a>.</p>\n<p>But, its time complex is O(n^2). So, I should find a better solution. For example I can decode and read the string at the same time not just to find the pattern.</p>\n<p>So, I will use two stacks to store the value:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string decodeString(string str) &#123;</div><div class=\"line\">            stack&lt;string&gt; chars;</div><div class=\"line\">            stack&lt;int&gt; nums;</div><div class=\"line\">            string res;</div><div class=\"line\">            int num = 0;</div><div class=\"line\">            for(char c: str) &#123;</div><div class=\"line\">                if(isdigit(c)) &#123;</div><div class=\"line\">                    num = num*10 + (c - &apos;0&apos;);</div><div class=\"line\">                &#125; else if(isalpha(c)) &#123;</div><div class=\"line\">                    res.push_back(c);</div><div class=\"line\">                &#125; else if(c == &apos;[&apos;) &#123;</div><div class=\"line\">                    chars.push(res);</div><div class=\"line\">                    nums.push(num);</div><div class=\"line\">                    res = &quot;&quot;;</div><div class=\"line\">                    num = 0;</div><div class=\"line\">                &#125; else if(c == &apos;]&apos;) &#123;</div><div class=\"line\">                    string tmp = res;</div><div class=\"line\">                    for(int i = 0; i &lt; nums.top()-1; ++i) &#123;</div><div class=\"line\">                        res += tmp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res = chars.top() + res;</div><div class=\"line\">                    chars.pop(); nums.pop();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Here is the solution and it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an encoded string, return it’s decoded string.</p>\n<p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>\n<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\n<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p>\n<p>Examples:</p>\n<ul>\n<li>s = “3[a]2[bc]”, return “aaabcbc”.</li>\n<li>s = “3[a2[c]]”, return “accaccacc”.</li>\n<li>s = “2[abc]3[cd]ef”, return “abcabccdcdcdef”.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 394, and it’s a problem with much fun. I have two solutions here. The first one is like what I use to write my own url rule parser. You can find <a href=\"https://mikecoder.cn/post/164\">here - https://mikecoder.cn/post/164</a>.</p>\n<p>But, its time complex is O(n^2). So, I should find a better solution. For example I can decode and read the string at the same time not just to find the pattern.</p>\n<p>So, I will use two stacks to store the value:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string decodeString(string str) &#123;</div><div class=\"line\">            stack&lt;string&gt; chars;</div><div class=\"line\">            stack&lt;int&gt; nums;</div><div class=\"line\">            string res;</div><div class=\"line\">            int num = 0;</div><div class=\"line\">            for(char c: str) &#123;</div><div class=\"line\">                if(isdigit(c)) &#123;</div><div class=\"line\">                    num = num*10 + (c - &apos;0&apos;);</div><div class=\"line\">                &#125; else if(isalpha(c)) &#123;</div><div class=\"line\">                    res.push_back(c);</div><div class=\"line\">                &#125; else if(c == &apos;[&apos;) &#123;</div><div class=\"line\">                    chars.push(res);</div><div class=\"line\">                    nums.push(num);</div><div class=\"line\">                    res = &quot;&quot;;</div><div class=\"line\">                    num = 0;</div><div class=\"line\">                &#125; else if(c == &apos;]&apos;) &#123;</div><div class=\"line\">                    string tmp = res;</div><div class=\"line\">                    for(int i = 0; i &lt; nums.top()-1; ++i) &#123;</div><div class=\"line\">                        res += tmp;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res = chars.top() + res;</div><div class=\"line\">                    chars.pop(); nums.pop();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Here is the solution and it gets AC.</p>"},{"title":"Detect Capital","date":"2017-02-25T03:26:08.000Z","_content":"\n> Given a word, you need to judge whether the usage of capitals in it is right or not.\n>\n> We define the usage of capitals in a word to be right when one of the following cases holds:\n>\n> + All letters in this word are capitals, like \"USA\".\n> + All letters in this word are not capitals, like \"leetcode\".\n> + Only the first letter in this word is capital if it has more than one letter, like \"Google\".\n>\n> Otherwise, we define that this word doesn't use capitals in a right way.\n>\n> Example 1:\n> + Input: \"USA\"\n> + Output: True\n>\n> Example 2:\n> + Input: \"FlaG\"\n> + Output: False\n>\n> Note: The input will be a non-empty word consisting of uppercase and lowercase latin letters.\n\n<!--more-->\n\nThis is leetcode No.520. It is an easy one. Just follow the steps mentioned above.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool detectCapitalUse(string word) {\n            int capitalIndex = -1;\n            for (int idx = 0; idx < (int)word.length(); idx++) {\n                if (word[idx] <= 'Z' && word[idx] >= 'A') {\n                    if (capitalIndex + 1 == idx) {\n                        capitalIndex = capitalIndex + 1;\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return capitalIndex <= 0 || capitalIndex == (int)word.length() - 1;\n        }\n};\n```\n\nWe can do such a clean solution. It gets AC.\n","source":"_posts/DetectCapital.md","raw":"---\ntitle: Detect Capital\ndate: 2017-02-25 11:26:08\ntags:\n    - String\n---\n\n> Given a word, you need to judge whether the usage of capitals in it is right or not.\n>\n> We define the usage of capitals in a word to be right when one of the following cases holds:\n>\n> + All letters in this word are capitals, like \"USA\".\n> + All letters in this word are not capitals, like \"leetcode\".\n> + Only the first letter in this word is capital if it has more than one letter, like \"Google\".\n>\n> Otherwise, we define that this word doesn't use capitals in a right way.\n>\n> Example 1:\n> + Input: \"USA\"\n> + Output: True\n>\n> Example 2:\n> + Input: \"FlaG\"\n> + Output: False\n>\n> Note: The input will be a non-empty word consisting of uppercase and lowercase latin letters.\n\n<!--more-->\n\nThis is leetcode No.520. It is an easy one. Just follow the steps mentioned above.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool detectCapitalUse(string word) {\n            int capitalIndex = -1;\n            for (int idx = 0; idx < (int)word.length(); idx++) {\n                if (word[idx] <= 'Z' && word[idx] >= 'A') {\n                    if (capitalIndex + 1 == idx) {\n                        capitalIndex = capitalIndex + 1;\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return capitalIndex <= 0 || capitalIndex == (int)word.length() - 1;\n        }\n};\n```\n\nWe can do such a clean solution. It gets AC.\n","slug":"DetectCapital","published":1,"updated":"2017-02-25T04:15:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwg0018x2f4c74fsr1w","content":"<blockquote>\n<p>Given a word, you need to judge whether the usage of capitals in it is right or not.</p>\n<p>We define the usage of capitals in a word to be right when one of the following cases holds:</p>\n<ul>\n<li>All letters in this word are capitals, like “USA”.</li>\n<li>All letters in this word are not capitals, like “leetcode”.</li>\n<li>Only the first letter in this word is capital if it has more than one letter, like “Google”.</li>\n</ul>\n<p>Otherwise, we define that this word doesn’t use capitals in a right way.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: “USA”</li>\n<li>Output: True</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: “FlaG”</li>\n<li>Output: False</li>\n</ul>\n<p>Note: The input will be a non-empty word consisting of uppercase and lowercase latin letters.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is leetcode No.520. It is an easy one. Just follow the steps mentioned above.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool detectCapitalUse(string word) &#123;</div><div class=\"line\">            int capitalIndex = -1;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)word.length(); idx++) &#123;</div><div class=\"line\">                if (word[idx] &lt;= &apos;Z&apos; &amp;&amp; word[idx] &gt;= &apos;A&apos;) &#123;</div><div class=\"line\">                    if (capitalIndex + 1 == idx) &#123;</div><div class=\"line\">                        capitalIndex = capitalIndex + 1;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        return false;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return capitalIndex &lt;= 0 || capitalIndex == (int)word.length() - 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>We can do such a clean solution. It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a word, you need to judge whether the usage of capitals in it is right or not.</p>\n<p>We define the usage of capitals in a word to be right when one of the following cases holds:</p>\n<ul>\n<li>All letters in this word are capitals, like “USA”.</li>\n<li>All letters in this word are not capitals, like “leetcode”.</li>\n<li>Only the first letter in this word is capital if it has more than one letter, like “Google”.</li>\n</ul>\n<p>Otherwise, we define that this word doesn’t use capitals in a right way.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: “USA”</li>\n<li>Output: True</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: “FlaG”</li>\n<li>Output: False</li>\n</ul>\n<p>Note: The input will be a non-empty word consisting of uppercase and lowercase latin letters.</p>\n</blockquote>","more":"<p>This is leetcode No.520. It is an easy one. Just follow the steps mentioned above.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool detectCapitalUse(string word) &#123;</div><div class=\"line\">            int capitalIndex = -1;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)word.length(); idx++) &#123;</div><div class=\"line\">                if (word[idx] &lt;= &apos;Z&apos; &amp;&amp; word[idx] &gt;= &apos;A&apos;) &#123;</div><div class=\"line\">                    if (capitalIndex + 1 == idx) &#123;</div><div class=\"line\">                        capitalIndex = capitalIndex + 1;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        return false;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return capitalIndex &lt;= 0 || capitalIndex == (int)word.length() - 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>We can do such a clean solution. It gets AC.</p>"},{"title":"Diameter of Binary Tree","date":"2017-03-20T12:21:21.000Z","_content":"\n> Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\n>\n> Example:\n> Given a binary tree\n>```\n    1\n   / \\\n  2   3\n / \\ \n4   5\n```\n> Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].\n>\n> Note: The length of path between two nodes is represented by the number of edges between them.\n\n<!--more-->\n\nDuring the three days when I was in Hefei to take part in the enter-interview of USTC. So I don't have much time to complete my promise about the daily practise.\n\nNow, I will continue to keep my promise. To be a man of my word is my life purpose.\n\nNow, this is Leetcode No.543. It is an easy one, and you can quickly finish the problem with the pre-order visit and a Path helper function.\n\nHere is my code:\n\n```\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\n    public:\n        int res;\n        int diameterOfBinaryTree(TreeNode* root) {\n            res = 0;\n            _preOrder(root);\n            return res;\n        }\n\n        void _preOrder(TreeNode *node) {\n            if (node == NULL) {\n                return;\n            }\n            res = max(res, getPathLength(node->left) + getPathLength(node->right));\n            _preOrder(node->left);\n            _preOrder(node->right);\n        }\n\n        int getPathLength(TreeNode* root) {\n            if (root == NULL) {\n                return 0;\n            } else {\n                return max(getPathLength(root->left), getPathLength(root->right)) + 1;\n            }\n        }\n\n};\n\n```\n\nSimple and clean, and easy to understand. It gets AC.\n","source":"_posts/DiameterofBinaryTree.md","raw":"---\ntitle: Diameter of Binary Tree\ndate: 2017-03-20 20:21:21\ntags:\n    - Tree\n---\n\n> Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\n>\n> Example:\n> Given a binary tree\n>```\n    1\n   / \\\n  2   3\n / \\ \n4   5\n```\n> Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].\n>\n> Note: The length of path between two nodes is represented by the number of edges between them.\n\n<!--more-->\n\nDuring the three days when I was in Hefei to take part in the enter-interview of USTC. So I don't have much time to complete my promise about the daily practise.\n\nNow, I will continue to keep my promise. To be a man of my word is my life purpose.\n\nNow, this is Leetcode No.543. It is an easy one, and you can quickly finish the problem with the pre-order visit and a Path helper function.\n\nHere is my code:\n\n```\nusing namespace std;\n\nstruct TreeNode {\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nclass Solution {\n    public:\n        int res;\n        int diameterOfBinaryTree(TreeNode* root) {\n            res = 0;\n            _preOrder(root);\n            return res;\n        }\n\n        void _preOrder(TreeNode *node) {\n            if (node == NULL) {\n                return;\n            }\n            res = max(res, getPathLength(node->left) + getPathLength(node->right));\n            _preOrder(node->left);\n            _preOrder(node->right);\n        }\n\n        int getPathLength(TreeNode* root) {\n            if (root == NULL) {\n                return 0;\n            } else {\n                return max(getPathLength(root->left), getPathLength(root->right)) + 1;\n            }\n        }\n\n};\n\n```\n\nSimple and clean, and easy to understand. It gets AC.\n","slug":"DiameterofBinaryTree","published":1,"updated":"2017-03-20T12:45:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwi001ax2f4obe5dcov","content":"<blockquote>\n<p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>\n<p>Example:<br>Given a binary tree<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    1</div><div class=\"line\">   / \\</div><div class=\"line\">  2   3</div><div class=\"line\"> / \\ </div><div class=\"line\">4   5</div></pre></td></tr></table></figure></p>\n<p>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].</p>\n<p>Note: The length of path between two nodes is represented by the number of edges between them.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>During the three days when I was in Hefei to take part in the enter-interview of USTC. So I don’t have much time to complete my promise about the daily practise.</p>\n<p>Now, I will continue to keep my promise. To be a man of my word is my life purpose.</p>\n<p>Now, this is Leetcode No.543. It is an easy one, and you can quickly finish the problem with the pre-order visit and a Path helper function.</p>\n<p>Here is my code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct TreeNode &#123;</div><div class=\"line\">    int val;</div><div class=\"line\">    TreeNode *left;</div><div class=\"line\">    TreeNode *right;</div><div class=\"line\">    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int diameterOfBinaryTree(TreeNode* root) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            _preOrder(root);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _preOrder(TreeNode *node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res = max(res, getPathLength(node-&gt;left) + getPathLength(node-&gt;right));</div><div class=\"line\">            _preOrder(node-&gt;left);</div><div class=\"line\">            _preOrder(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int getPathLength(TreeNode* root) &#123;</div><div class=\"line\">            if (root == NULL) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return max(getPathLength(root-&gt;left), getPathLength(root-&gt;right)) + 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Simple and clean, and easy to understand. It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>\n<p>Example:<br>Given a binary tree<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    1</div><div class=\"line\">   / \\</div><div class=\"line\">  2   3</div><div class=\"line\"> / \\ </div><div class=\"line\">4   5</div></pre></td></tr></table></figure></p>\n<p>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].</p>\n<p>Note: The length of path between two nodes is represented by the number of edges between them.</p>\n</blockquote>","more":"<p>During the three days when I was in Hefei to take part in the enter-interview of USTC. So I don’t have much time to complete my promise about the daily practise.</p>\n<p>Now, I will continue to keep my promise. To be a man of my word is my life purpose.</p>\n<p>Now, this is Leetcode No.543. It is an easy one, and you can quickly finish the problem with the pre-order visit and a Path helper function.</p>\n<p>Here is my code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct TreeNode &#123;</div><div class=\"line\">    int val;</div><div class=\"line\">    TreeNode *left;</div><div class=\"line\">    TreeNode *right;</div><div class=\"line\">    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int diameterOfBinaryTree(TreeNode* root) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            _preOrder(root);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _preOrder(TreeNode *node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res = max(res, getPathLength(node-&gt;left) + getPathLength(node-&gt;right));</div><div class=\"line\">            _preOrder(node-&gt;left);</div><div class=\"line\">            _preOrder(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int getPathLength(TreeNode* root) &#123;</div><div class=\"line\">            if (root == NULL) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return max(getPathLength(root-&gt;left), getPathLength(root-&gt;right)) + 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Simple and clean, and easy to understand. It gets AC.</p>"},{"title":"Diagonal Traverse","date":"2017-02-10T01:50:41.000Z","_content":"\n> Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.\n>\n> Example:\n> + Input:\n> ```\n[\n    [ 1, 2, 3 ],\n    [ 4, 5, 6 ],\n    [ 7, 8, 9 ]\n]\n```\n> + Output:  [1,2,4,7,5,3,6,8,9]\n>\n> Note:\n> + The total number of elements of the given matrix will not exceed 10,000.\n\n<!--more-->\n\nIt is Leetcode 498, and it is not such a problem which needs too much think.\n\nSo, here comes the result:\n\n```\nclass Solution {\n    public:\n        vector<int> findDiagonalOrder(vector<vector<int> >& matrix) {\n            vector<int> res;\n            if (matrix.size() == 0 || matrix[0].size() == 0) {\n                return res;\n            }\n\n            int X = matrix.size();\n            int Y = matrix[0].size();\n\n            for (int level = 0; level < X + Y - 1; level++) {\n                std::cout << level << std::endl;\n                if (level % 2 == 0) {\n                    for (int idy = 0; idy <= min(level, Y); idy++) {\n                        if (level - idy < X && level - idy >= 0 && idy < Y) {\n                            std::cout << level - idy << ':' << idy << std::endl;\n                            res.push_back(matrix[level - idy][idy]);\n                        }\n                    }\n                } else {\n                    for (int idx = 0; idx <= min(level, X); idx++) {\n                        if (level - idx < Y && level - idx >= 0 && idx < X) {\n                            std::cout << idx << ':' << level - idx << std::endl;\n                            res.push_back(matrix[idx][level - idx]);\n                        }\n                    }\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/DiagonalTraverse.md","raw":"---\ntitle: Diagonal Traverse\ndate: 2017-02-10 09:50:41\ntags:\n    - Array\n---\n\n> Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.\n>\n> Example:\n> + Input:\n> ```\n[\n    [ 1, 2, 3 ],\n    [ 4, 5, 6 ],\n    [ 7, 8, 9 ]\n]\n```\n> + Output:  [1,2,4,7,5,3,6,8,9]\n>\n> Note:\n> + The total number of elements of the given matrix will not exceed 10,000.\n\n<!--more-->\n\nIt is Leetcode 498, and it is not such a problem which needs too much think.\n\nSo, here comes the result:\n\n```\nclass Solution {\n    public:\n        vector<int> findDiagonalOrder(vector<vector<int> >& matrix) {\n            vector<int> res;\n            if (matrix.size() == 0 || matrix[0].size() == 0) {\n                return res;\n            }\n\n            int X = matrix.size();\n            int Y = matrix[0].size();\n\n            for (int level = 0; level < X + Y - 1; level++) {\n                std::cout << level << std::endl;\n                if (level % 2 == 0) {\n                    for (int idy = 0; idy <= min(level, Y); idy++) {\n                        if (level - idy < X && level - idy >= 0 && idy < Y) {\n                            std::cout << level - idy << ':' << idy << std::endl;\n                            res.push_back(matrix[level - idy][idy]);\n                        }\n                    }\n                } else {\n                    for (int idx = 0; idx <= min(level, X); idx++) {\n                        if (level - idx < Y && level - idx >= 0 && idx < X) {\n                            std::cout << idx << ':' << level - idx << std::endl;\n                            res.push_back(matrix[idx][level - idx]);\n                        }\n                    }\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"DiagonalTraverse","published":1,"updated":"2017-02-14T07:02:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwj001dx2f4e0ne8jdo","content":"<blockquote>\n<p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p>\n<p>Example:</p>\n<ul>\n<li><p>Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [ 1, 2, 3 ],</div><div class=\"line\">    [ 4, 5, 6 ],</div><div class=\"line\">    [ 7, 8, 9 ]</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n<li><p>Output:  [1,2,4,7,5,3,6,8,9]</p>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The total number of elements of the given matrix will not exceed 10,000.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode 498, and it is not such a problem which needs too much think.</p>\n<p>So, here comes the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findDiagonalOrder(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            if (matrix.size() == 0 || matrix[0].size() == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int X = matrix.size();</div><div class=\"line\">            int Y = matrix[0].size();</div><div class=\"line\"></div><div class=\"line\">            for (int level = 0; level &lt; X + Y - 1; level++) &#123;</div><div class=\"line\">                std::cout &lt;&lt; level &lt;&lt; std::endl;</div><div class=\"line\">                if (level % 2 == 0) &#123;</div><div class=\"line\">                    for (int idy = 0; idy &lt;= min(level, Y); idy++) &#123;</div><div class=\"line\">                        if (level - idy &lt; X &amp;&amp; level - idy &gt;= 0 &amp;&amp; idy &lt; Y) &#123;</div><div class=\"line\">                            std::cout &lt;&lt; level - idy &lt;&lt; &apos;:&apos; &lt;&lt; idy &lt;&lt; std::endl;</div><div class=\"line\">                            res.push_back(matrix[level - idy][idy]);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    for (int idx = 0; idx &lt;= min(level, X); idx++) &#123;</div><div class=\"line\">                        if (level - idx &lt; Y &amp;&amp; level - idx &gt;= 0 &amp;&amp; idx &lt; X) &#123;</div><div class=\"line\">                            std::cout &lt;&lt; idx &lt;&lt; &apos;:&apos; &lt;&lt; level - idx &lt;&lt; std::endl;</div><div class=\"line\">                            res.push_back(matrix[idx][level - idx]);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p>\n<p>Example:</p>\n<ul>\n<li><p>Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [ 1, 2, 3 ],</div><div class=\"line\">    [ 4, 5, 6 ],</div><div class=\"line\">    [ 7, 8, 9 ]</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n</li>\n<li><p>Output:  [1,2,4,7,5,3,6,8,9]</p>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The total number of elements of the given matrix will not exceed 10,000.</li>\n</ul>\n</blockquote>","more":"<p>It is Leetcode 498, and it is not such a problem which needs too much think.</p>\n<p>So, here comes the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findDiagonalOrder(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            if (matrix.size() == 0 || matrix[0].size() == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int X = matrix.size();</div><div class=\"line\">            int Y = matrix[0].size();</div><div class=\"line\"></div><div class=\"line\">            for (int level = 0; level &lt; X + Y - 1; level++) &#123;</div><div class=\"line\">                std::cout &lt;&lt; level &lt;&lt; std::endl;</div><div class=\"line\">                if (level % 2 == 0) &#123;</div><div class=\"line\">                    for (int idy = 0; idy &lt;= min(level, Y); idy++) &#123;</div><div class=\"line\">                        if (level - idy &lt; X &amp;&amp; level - idy &gt;= 0 &amp;&amp; idy &lt; Y) &#123;</div><div class=\"line\">                            std::cout &lt;&lt; level - idy &lt;&lt; &apos;:&apos; &lt;&lt; idy &lt;&lt; std::endl;</div><div class=\"line\">                            res.push_back(matrix[level - idy][idy]);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    for (int idx = 0; idx &lt;= min(level, X); idx++) &#123;</div><div class=\"line\">                        if (level - idx &lt; Y &amp;&amp; level - idx &gt;= 0 &amp;&amp; idx &lt; X) &#123;</div><div class=\"line\">                            std::cout &lt;&lt; idx &lt;&lt; &apos;:&apos; &lt;&lt; level - idx &lt;&lt; std::endl;</div><div class=\"line\">                            res.push_back(matrix[idx][level - idx]);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Encode and Decode Tiny URL","date":"2017-03-04T12:30:08.000Z","_content":"\n> TinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`.\n>\n> Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n>\n> Note: Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.\n\n<!--more-->\n\nThis is Leetcode No.535. This is a open-mind problem. You can just use the following code to AC:\n\n```\nclass Solution {\n    public:\n        string encode(string longUrl) {\n            return longUrl;\n        }\n\n        string decode(string shortUrl) {\n            return shortUrl;\n        }\n};\n```\n\nHowever, this is not a good solution. You can remember the Hamming code. But here we don't use the function.\n\nSo, I use this code to AC. But it is still not a good solution. I will write a blog to discuss this problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        map<string, string> urls;\n\n        string hash(string url) {\n            long long hash  = 0;\n            for (int i = 0; i < (int)url.length(); i++) {\n                hash = hash * 10 + url[i];\n            }\n            return to_string(hash);\n        }\n\n        string encode(string longUrl) {\n            string key = hash(longUrl);\n            urls.insert(pair<string, string>(key, longUrl));\n            return key;\n        }\n\n        string decode(string shortUrl) {\n            return urls.find(shortUrl)->second;\n        }\n};\n\n```\n\nHere I just use a hash function to make sure every url returns a different hash code.\n","source":"_posts/EncodeandDecodeTinyURL.md","raw":"---\ntitle: Encode and Decode Tiny URL\ndate: 2017-03-04 20:30:08\ntags:\n    - String\n---\n\n> TinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`.\n>\n> Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n>\n> Note: Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.\n\n<!--more-->\n\nThis is Leetcode No.535. This is a open-mind problem. You can just use the following code to AC:\n\n```\nclass Solution {\n    public:\n        string encode(string longUrl) {\n            return longUrl;\n        }\n\n        string decode(string shortUrl) {\n            return shortUrl;\n        }\n};\n```\n\nHowever, this is not a good solution. You can remember the Hamming code. But here we don't use the function.\n\nSo, I use this code to AC. But it is still not a good solution. I will write a blog to discuss this problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        map<string, string> urls;\n\n        string hash(string url) {\n            long long hash  = 0;\n            for (int i = 0; i < (int)url.length(); i++) {\n                hash = hash * 10 + url[i];\n            }\n            return to_string(hash);\n        }\n\n        string encode(string longUrl) {\n            string key = hash(longUrl);\n            urls.insert(pair<string, string>(key, longUrl));\n            return key;\n        }\n\n        string decode(string shortUrl) {\n            return urls.find(shortUrl)->second;\n        }\n};\n\n```\n\nHere I just use a hash function to make sure every url returns a different hash code.\n","slug":"EncodeandDecodeTinyURL","published":1,"updated":"2017-03-04T13:00:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwl001fx2f4sx8vqzbm","content":"<blockquote>\n<p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.</p>\n<p>Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p>\n<p>Note: Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.535. This is a open-mind problem. You can just use the following code to AC:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string encode(string longUrl) &#123;</div><div class=\"line\">            return longUrl;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string decode(string shortUrl) &#123;</div><div class=\"line\">            return shortUrl;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, this is not a good solution. You can remember the Hamming code. But here we don’t use the function.</p>\n<p>So, I use this code to AC. But it is still not a good solution. I will write a blog to discuss this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;string, string&gt; urls;</div><div class=\"line\"></div><div class=\"line\">        string hash(string url) &#123;</div><div class=\"line\">            long long hash  = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)url.length(); i++) &#123;</div><div class=\"line\">                hash = hash * 10 + url[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return to_string(hash);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string encode(string longUrl) &#123;</div><div class=\"line\">            string key = hash(longUrl);</div><div class=\"line\">            urls.insert(pair&lt;string, string&gt;(key, longUrl));</div><div class=\"line\">            return key;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string decode(string shortUrl) &#123;</div><div class=\"line\">            return urls.find(shortUrl)-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Here I just use a hash function to make sure every url returns a different hash code.</p>\n","excerpt":"<blockquote>\n<p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.</p>\n<p>Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p>\n<p>Note: Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</p>\n</blockquote>","more":"<p>This is Leetcode No.535. This is a open-mind problem. You can just use the following code to AC:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string encode(string longUrl) &#123;</div><div class=\"line\">            return longUrl;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string decode(string shortUrl) &#123;</div><div class=\"line\">            return shortUrl;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, this is not a good solution. You can remember the Hamming code. But here we don’t use the function.</p>\n<p>So, I use this code to AC. But it is still not a good solution. I will write a blog to discuss this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;string, string&gt; urls;</div><div class=\"line\"></div><div class=\"line\">        string hash(string url) &#123;</div><div class=\"line\">            long long hash  = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)url.length(); i++) &#123;</div><div class=\"line\">                hash = hash * 10 + url[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return to_string(hash);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string encode(string longUrl) &#123;</div><div class=\"line\">            string key = hash(longUrl);</div><div class=\"line\">            urls.insert(pair&lt;string, string&gt;(key, longUrl));</div><div class=\"line\">            return key;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string decode(string shortUrl) &#123;</div><div class=\"line\">            return urls.find(shortUrl)-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Here I just use a hash function to make sure every url returns a different hash code.</p>"},{"title":"Diligent Robots","date":"2017-04-08T13:21:28.000Z","_content":"\n> **Description**\n>\n> There are N jobs to be finished. It takes a robot 1 hour to finish one job.\n>\n> At the beginning you have only one robot. Luckily a robot may build more robots identical to itself. It takes a robot Q hours to build another robot.\n>\n> So what is the minimum number of hours to finish N jobs?\n>\n> **Note**\n> + two or more robots working on the same job or building the same robot won't accelerate the progress.\n>\n> **Input**\n>\n> The first line contains 2 integers, N and Q.\n>\n> For 70% of the data, 1 <= N <= 1000000\n>\n> For 100% of the data, 1 <= N <= 1000000000000, 1 <= Q <= 1000\n>\n> **Output**\n>\n> The minimum number of hours.\n>```\nSample Input\n    10 1\n\nSample Output\n    5\n```\n\n<!--more-->\n\nThis is the first problem of [Microsoft 2017 Campus Hiring Contest - April](https://hihocoder.com/contest/mstest2017april).\n\nFirst I use the backtracking method using a recuisious way to solve the problem:\n\n```\nusing namespace std;\n\nlong long work(long long remain, long long robots, long long Q) {\n    long long hours = 0;\n    if (robots >= remain) {\n        return 1;\n    } else {\n        if (remain % robots == 0) {\n            hours = remain / robots;\n        } else {\n            hours = remain / robots + 1;\n        }\n        return min(hours, work(remain, robots*2, Q) + Q);\n    }\n}\n```\n\nHowever, the stack is overflowed. So, I try to use a non-backtracking way by using a while loop.\n\n```\nusing namespace std;\n\nint main() {\n    long long N, Q;\n    while (cin >> N >> Q) {\n        long long idx = 0, res = N;\n        while ((long long)pow(2, idx) <= N) {\n            long long currentHour = idx * Q;\n            if ((long long)pow(2, idx) >= N) {\n                currentHour += 1;\n            } else if (N % (long long)pow(2, idx) == 0) {\n                currentHour += N / (long long)pow(2, idx);\n            } else {\n                currentHour += N / (long long)pow(2, idx) + 1;\n            }\n            res = min(res, currentHour);\n            idx++;\n        }\n        cout << res << endl;\n    }\n    return 0;\n}\n```\n\nIt gets AC.\n","source":"_posts/DiligentRobots.md","raw":"---\ntitle: Diligent Robots\ndate: 2017-04-08 21:21:28\ntags:\n    - Backtracking\n    - Math\n---\n\n> **Description**\n>\n> There are N jobs to be finished. It takes a robot 1 hour to finish one job.\n>\n> At the beginning you have only one robot. Luckily a robot may build more robots identical to itself. It takes a robot Q hours to build another robot.\n>\n> So what is the minimum number of hours to finish N jobs?\n>\n> **Note**\n> + two or more robots working on the same job or building the same robot won't accelerate the progress.\n>\n> **Input**\n>\n> The first line contains 2 integers, N and Q.\n>\n> For 70% of the data, 1 <= N <= 1000000\n>\n> For 100% of the data, 1 <= N <= 1000000000000, 1 <= Q <= 1000\n>\n> **Output**\n>\n> The minimum number of hours.\n>```\nSample Input\n    10 1\n\nSample Output\n    5\n```\n\n<!--more-->\n\nThis is the first problem of [Microsoft 2017 Campus Hiring Contest - April](https://hihocoder.com/contest/mstest2017april).\n\nFirst I use the backtracking method using a recuisious way to solve the problem:\n\n```\nusing namespace std;\n\nlong long work(long long remain, long long robots, long long Q) {\n    long long hours = 0;\n    if (robots >= remain) {\n        return 1;\n    } else {\n        if (remain % robots == 0) {\n            hours = remain / robots;\n        } else {\n            hours = remain / robots + 1;\n        }\n        return min(hours, work(remain, robots*2, Q) + Q);\n    }\n}\n```\n\nHowever, the stack is overflowed. So, I try to use a non-backtracking way by using a while loop.\n\n```\nusing namespace std;\n\nint main() {\n    long long N, Q;\n    while (cin >> N >> Q) {\n        long long idx = 0, res = N;\n        while ((long long)pow(2, idx) <= N) {\n            long long currentHour = idx * Q;\n            if ((long long)pow(2, idx) >= N) {\n                currentHour += 1;\n            } else if (N % (long long)pow(2, idx) == 0) {\n                currentHour += N / (long long)pow(2, idx);\n            } else {\n                currentHour += N / (long long)pow(2, idx) + 1;\n            }\n            res = min(res, currentHour);\n            idx++;\n        }\n        cout << res << endl;\n    }\n    return 0;\n}\n```\n\nIt gets AC.\n","slug":"DiligentRobots","published":1,"updated":"2017-04-08T13:25:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwn001ix2f4ompx1aj4","content":"<blockquote>\n<p><strong>Description</strong></p>\n<p>There are N jobs to be finished. It takes a robot 1 hour to finish one job.</p>\n<p>At the beginning you have only one robot. Luckily a robot may build more robots identical to itself. It takes a robot Q hours to build another robot.</p>\n<p>So what is the minimum number of hours to finish N jobs?</p>\n<p><strong>Note</strong></p>\n<ul>\n<li>two or more robots working on the same job or building the same robot won’t accelerate the progress.</li>\n</ul>\n<p><strong>Input</strong></p>\n<p>The first line contains 2 integers, N and Q.</p>\n<p>For 70% of the data, 1 &lt;= N &lt;= 1000000</p>\n<p>For 100% of the data, 1 &lt;= N &lt;= 1000000000000, 1 &lt;= Q &lt;= 1000</p>\n<p><strong>Output</strong></p>\n<p>The minimum number of hours.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample Input</div><div class=\"line\">    10 1</div><div class=\"line\"></div><div class=\"line\">Sample Output</div><div class=\"line\">    5</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is the first problem of <a href=\"https://hihocoder.com/contest/mstest2017april\" target=\"_blank\" rel=\"external\">Microsoft 2017 Campus Hiring Contest - April</a>.</p>\n<p>First I use the backtracking method using a recuisious way to solve the problem:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">long long work(long long remain, long long robots, long long Q) &#123;</div><div class=\"line\">    long long hours = 0;</div><div class=\"line\">    if (robots &gt;= remain) &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        if (remain % robots == 0) &#123;</div><div class=\"line\">            hours = remain / robots;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            hours = remain / robots + 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return min(hours, work(remain, robots*2, Q) + Q);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>However, the stack is overflowed. So, I try to use a non-backtracking way by using a while loop.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int main() &#123;</div><div class=\"line\">    long long N, Q;</div><div class=\"line\">    while (cin &gt;&gt; N &gt;&gt; Q) &#123;</div><div class=\"line\">        long long idx = 0, res = N;</div><div class=\"line\">        while ((long long)pow(2, idx) &lt;= N) &#123;</div><div class=\"line\">            long long currentHour = idx * Q;</div><div class=\"line\">            if ((long long)pow(2, idx) &gt;= N) &#123;</div><div class=\"line\">                currentHour += 1;</div><div class=\"line\">            &#125; else if (N % (long long)pow(2, idx) == 0) &#123;</div><div class=\"line\">                currentHour += N / (long long)pow(2, idx);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                currentHour += N / (long long)pow(2, idx) + 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res = min(res, currentHour);</div><div class=\"line\">            idx++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p><strong>Description</strong></p>\n<p>There are N jobs to be finished. It takes a robot 1 hour to finish one job.</p>\n<p>At the beginning you have only one robot. Luckily a robot may build more robots identical to itself. It takes a robot Q hours to build another robot.</p>\n<p>So what is the minimum number of hours to finish N jobs?</p>\n<p><strong>Note</strong></p>\n<ul>\n<li>two or more robots working on the same job or building the same robot won’t accelerate the progress.</li>\n</ul>\n<p><strong>Input</strong></p>\n<p>The first line contains 2 integers, N and Q.</p>\n<p>For 70% of the data, 1 &lt;= N &lt;= 1000000</p>\n<p>For 100% of the data, 1 &lt;= N &lt;= 1000000000000, 1 &lt;= Q &lt;= 1000</p>\n<p><strong>Output</strong></p>\n<p>The minimum number of hours.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample Input</div><div class=\"line\">    10 1</div><div class=\"line\"></div><div class=\"line\">Sample Output</div><div class=\"line\">    5</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is the first problem of <a href=\"https://hihocoder.com/contest/mstest2017april\">Microsoft 2017 Campus Hiring Contest - April</a>.</p>\n<p>First I use the backtracking method using a recuisious way to solve the problem:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">long long work(long long remain, long long robots, long long Q) &#123;</div><div class=\"line\">    long long hours = 0;</div><div class=\"line\">    if (robots &gt;= remain) &#123;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        if (remain % robots == 0) &#123;</div><div class=\"line\">            hours = remain / robots;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            hours = remain / robots + 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return min(hours, work(remain, robots*2, Q) + Q);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>However, the stack is overflowed. So, I try to use a non-backtracking way by using a while loop.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int main() &#123;</div><div class=\"line\">    long long N, Q;</div><div class=\"line\">    while (cin &gt;&gt; N &gt;&gt; Q) &#123;</div><div class=\"line\">        long long idx = 0, res = N;</div><div class=\"line\">        while ((long long)pow(2, idx) &lt;= N) &#123;</div><div class=\"line\">            long long currentHour = idx * Q;</div><div class=\"line\">            if ((long long)pow(2, idx) &gt;= N) &#123;</div><div class=\"line\">                currentHour += 1;</div><div class=\"line\">            &#125; else if (N % (long long)pow(2, idx) == 0) &#123;</div><div class=\"line\">                currentHour += N / (long long)pow(2, idx);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                currentHour += N / (long long)pow(2, idx) + 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res = min(res, currentHour);</div><div class=\"line\">            idx++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Evaluate Reverse Polish Notation","date":"2017-03-26T15:31:45.000Z","_content":"\n> Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n>\n> Valid operators are +, -, *, /. Each operand may be an integer or another expression.\n>\n> Some examples:\n>```\n[\"2\", \"1\", \"+\", \"3\", \"*\"] -> ((2 + 1) * 3) -> 9\n[\"4\", \"13\", \"5\", \"/\", \"+\"] -> (4 + (13 / 5)) -> 6\n```\n<!--more-->\n\nThis is Leetcode No.150. It is a common problem which using stacks.\n\nWe just need to put every number into a stack and poll them out when we meet other signal for instance: '+', '-' .etc.\n\nSo, my solution is as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int evalRPN(vector<string>& tokens) {\n            if (tokens.size() == 0) {\n                return 0;\n            } else if (tokens.size() == 1) {\n                return atoi(tokens[0].c_str());\n            }\n\n            stack<int> nums;\n            int result = 0;\n\n            for (auto token : tokens) {\n                if (token == \"-\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre - post;\n                    nums.push(result);\n                } else if (token == \"+\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre + post;\n                    nums.push(result);\n                } else if (token == \"*\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre * post;\n                    nums.push(result);\n                } else if (token == \"/\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre / post;\n                    nums.push(result);\n                } else {\n                    int num = atoi(token.c_str());\n                    nums.push(num);\n                }\n            }\n\n            return result;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/EvaluateReversePolishNotation.md","raw":"---\ntitle: Evaluate Reverse Polish Notation\ndate: 2017-03-26 23:31:45\ntags:\n    - Stack\n---\n\n> Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n>\n> Valid operators are +, -, *, /. Each operand may be an integer or another expression.\n>\n> Some examples:\n>```\n[\"2\", \"1\", \"+\", \"3\", \"*\"] -> ((2 + 1) * 3) -> 9\n[\"4\", \"13\", \"5\", \"/\", \"+\"] -> (4 + (13 / 5)) -> 6\n```\n<!--more-->\n\nThis is Leetcode No.150. It is a common problem which using stacks.\n\nWe just need to put every number into a stack and poll them out when we meet other signal for instance: '+', '-' .etc.\n\nSo, my solution is as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int evalRPN(vector<string>& tokens) {\n            if (tokens.size() == 0) {\n                return 0;\n            } else if (tokens.size() == 1) {\n                return atoi(tokens[0].c_str());\n            }\n\n            stack<int> nums;\n            int result = 0;\n\n            for (auto token : tokens) {\n                if (token == \"-\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre - post;\n                    nums.push(result);\n                } else if (token == \"+\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre + post;\n                    nums.push(result);\n                } else if (token == \"*\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre * post;\n                    nums.push(result);\n                } else if (token == \"/\") {\n                    int post = nums.top();\n                    nums.pop();\n                    int pre = nums.top();\n                    nums.pop();\n                    result = pre / post;\n                    nums.push(result);\n                } else {\n                    int num = atoi(token.c_str());\n                    nums.push(num);\n                }\n            }\n\n            return result;\n        }\n};\n```\n\nIt gets AC.\n","slug":"EvaluateReversePolishNotation","published":1,"updated":"2017-03-26T15:54:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwo001kx2f4tnsjsk5q","content":"<blockquote>\n<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>\n<p>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>\n<p>Some examples:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;] -&gt; ((2 + 1) * 3) -&gt; 9</div><div class=\"line\">[&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;] -&gt; (4 + (13 / 5)) -&gt; 6</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.150. It is a common problem which using stacks.</p>\n<p>We just need to put every number into a stack and poll them out when we meet other signal for instance: ‘+’, ‘-‘ .etc.</p>\n<p>So, my solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int evalRPN(vector&lt;string&gt;&amp; tokens) &#123;</div><div class=\"line\">            if (tokens.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else if (tokens.size() == 1) &#123;</div><div class=\"line\">                return atoi(tokens[0].c_str());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            stack&lt;int&gt; nums;</div><div class=\"line\">            int result = 0;</div><div class=\"line\"></div><div class=\"line\">            for (auto token : tokens) &#123;</div><div class=\"line\">                if (token == &quot;-&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre - post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else if (token == &quot;+&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre + post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else if (token == &quot;*&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre * post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else if (token == &quot;/&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre / post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    int num = atoi(token.c_str());</div><div class=\"line\">                    nums.push(num);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p>\n<p>Valid operators are +, -, *, /. Each operand may be an integer or another expression.</p>\n<p>Some examples:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;] -&gt; ((2 + 1) * 3) -&gt; 9</div><div class=\"line\">[&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;] -&gt; (4 + (13 / 5)) -&gt; 6</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.150. It is a common problem which using stacks.</p>\n<p>We just need to put every number into a stack and poll them out when we meet other signal for instance: ‘+’, ‘-‘ .etc.</p>\n<p>So, my solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int evalRPN(vector&lt;string&gt;&amp; tokens) &#123;</div><div class=\"line\">            if (tokens.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else if (tokens.size() == 1) &#123;</div><div class=\"line\">                return atoi(tokens[0].c_str());</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            stack&lt;int&gt; nums;</div><div class=\"line\">            int result = 0;</div><div class=\"line\"></div><div class=\"line\">            for (auto token : tokens) &#123;</div><div class=\"line\">                if (token == &quot;-&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre - post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else if (token == &quot;+&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre + post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else if (token == &quot;*&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre * post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else if (token == &quot;/&quot;) &#123;</div><div class=\"line\">                    int post = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    int pre = nums.top();</div><div class=\"line\">                    nums.pop();</div><div class=\"line\">                    result = pre / post;</div><div class=\"line\">                    nums.push(result);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    int num = atoi(token.c_str());</div><div class=\"line\">                    nums.push(num);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Find Largest Element in Each Row","date":"2017-02-12T04:27:38.000Z","_content":"\n> You need to find the largest value in each row of a binary tree.\n>\n> Example:\n>\n> Input:\n>```\n    1\n   / \\\n  3   2\n / \\   \\ \n5   3   9\n```\n> Output: [1, 3, 9]\n\n<!--more-->\n\nIt is one of Leetcode Weekly Contest 19, and also No.515. This is an easy problem.\n\nWhat we need to do is to level-order visit and find the largest value for each level.\n\nSo, here is my solution:\n\n```\nclass Solution {\n    public:\n        vector<int> findValueMostElement(TreeNode* root) {\n            vector<int> res;\n            if (root == NULL) {\n                return res;\n            }\n            map<int, int> levelValues;\n            int level = 0;\n            list<TreeNode> level1, level2;\n            level1.push_back(*root);\n\n            while (level1.size() > 0 || level2.size() > 0) {\n                if (level % 2 == 0) {\n                    while (level1.size() > 0) {\n                        TreeNode currentNode = level1.front();\n                        if (currentNode.left != NULL) {\n                            level2.push_back(*currentNode.left);\n                        }\n                        if (currentNode.right != NULL) {\n                            level2.push_back(*currentNode.right);\n                        }\n                        if (levelValues.find(level) != levelValues.end()) {\n                            if (currentNode.val > levelValues.find(level)->second) {\n                                levelValues.find(level)->second = currentNode.val;\n                            }\n                        } else {\n                            levelValues.insert(pair<int, int>(level, currentNode.val));\n                        }\n                        level1.pop_front();\n                    }\n                    level++;\n                } else {\n                    while (level2.size() > 0) {\n                        TreeNode currentNode = level2.front();\n                        if (currentNode.left != NULL) {\n                            level1.push_back(*currentNode.left);\n                        }\n                        if (currentNode.right != NULL) {\n                            level1.push_back(*currentNode.right);\n                        }\n                        if (levelValues.find(level) != levelValues.end()) {\n                            if (currentNode.val > levelValues.find(level)->second) {\n                                levelValues.find(level)->second = currentNode.val;\n                            }\n                        } else {\n                            levelValues.insert(pair<int, int>(level, currentNode.val));\n                        }\n                        level2.pop_front();\n                    }\n                    level++;\n                }\n            }\n\n            for (auto i : levelValues) {\n                res.push_back(i.second);\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/FindLargestElementinEachRow.md","raw":"---\ntitle: Find Largest Element in Each Row\ndate: 2017-02-12 12:27:38\ntags:\n    - Tree\n    - Hash Table\n---\n\n> You need to find the largest value in each row of a binary tree.\n>\n> Example:\n>\n> Input:\n>```\n    1\n   / \\\n  3   2\n / \\   \\ \n5   3   9\n```\n> Output: [1, 3, 9]\n\n<!--more-->\n\nIt is one of Leetcode Weekly Contest 19, and also No.515. This is an easy problem.\n\nWhat we need to do is to level-order visit and find the largest value for each level.\n\nSo, here is my solution:\n\n```\nclass Solution {\n    public:\n        vector<int> findValueMostElement(TreeNode* root) {\n            vector<int> res;\n            if (root == NULL) {\n                return res;\n            }\n            map<int, int> levelValues;\n            int level = 0;\n            list<TreeNode> level1, level2;\n            level1.push_back(*root);\n\n            while (level1.size() > 0 || level2.size() > 0) {\n                if (level % 2 == 0) {\n                    while (level1.size() > 0) {\n                        TreeNode currentNode = level1.front();\n                        if (currentNode.left != NULL) {\n                            level2.push_back(*currentNode.left);\n                        }\n                        if (currentNode.right != NULL) {\n                            level2.push_back(*currentNode.right);\n                        }\n                        if (levelValues.find(level) != levelValues.end()) {\n                            if (currentNode.val > levelValues.find(level)->second) {\n                                levelValues.find(level)->second = currentNode.val;\n                            }\n                        } else {\n                            levelValues.insert(pair<int, int>(level, currentNode.val));\n                        }\n                        level1.pop_front();\n                    }\n                    level++;\n                } else {\n                    while (level2.size() > 0) {\n                        TreeNode currentNode = level2.front();\n                        if (currentNode.left != NULL) {\n                            level1.push_back(*currentNode.left);\n                        }\n                        if (currentNode.right != NULL) {\n                            level1.push_back(*currentNode.right);\n                        }\n                        if (levelValues.find(level) != levelValues.end()) {\n                            if (currentNode.val > levelValues.find(level)->second) {\n                                levelValues.find(level)->second = currentNode.val;\n                            }\n                        } else {\n                            levelValues.insert(pair<int, int>(level, currentNode.val));\n                        }\n                        level2.pop_front();\n                    }\n                    level++;\n                }\n            }\n\n            for (auto i : levelValues) {\n                res.push_back(i.second);\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"FindLargestElementinEachRow","published":1,"updated":"2017-02-15T06:48:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwp001nx2f4sy0q4m59","content":"<blockquote>\n<p>You need to find the largest value in each row of a binary tree.</p>\n<p>Example:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    1</div><div class=\"line\">   / \\</div><div class=\"line\">  3   2</div><div class=\"line\"> / \\   \\ </div><div class=\"line\">5   3   9</div></pre></td></tr></table></figure></p>\n<p>Output: [1, 3, 9]</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is one of Leetcode Weekly Contest 19, and also No.515. This is an easy problem.</p>\n<p>What we need to do is to level-order visit and find the largest value for each level.</p>\n<p>So, here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findValueMostElement(TreeNode* root) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            if (root == NULL) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">            map&lt;int, int&gt; levelValues;</div><div class=\"line\">            int level = 0;</div><div class=\"line\">            list&lt;TreeNode&gt; level1, level2;</div><div class=\"line\">            level1.push_back(*root);</div><div class=\"line\"></div><div class=\"line\">            while (level1.size() &gt; 0 || level2.size() &gt; 0) &#123;</div><div class=\"line\">                if (level % 2 == 0) &#123;</div><div class=\"line\">                    while (level1.size() &gt; 0) &#123;</div><div class=\"line\">                        TreeNode currentNode = level1.front();</div><div class=\"line\">                        if (currentNode.left != NULL) &#123;</div><div class=\"line\">                            level2.push_back(*currentNode.left);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentNode.right != NULL) &#123;</div><div class=\"line\">                            level2.push_back(*currentNode.right);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (levelValues.find(level) != levelValues.end()) &#123;</div><div class=\"line\">                            if (currentNode.val &gt; levelValues.find(level)-&gt;second) &#123;</div><div class=\"line\">                                levelValues.find(level)-&gt;second = currentNode.val;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            levelValues.insert(pair&lt;int, int&gt;(level, currentNode.val));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        level1.pop_front();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    level++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    while (level2.size() &gt; 0) &#123;</div><div class=\"line\">                        TreeNode currentNode = level2.front();</div><div class=\"line\">                        if (currentNode.left != NULL) &#123;</div><div class=\"line\">                            level1.push_back(*currentNode.left);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentNode.right != NULL) &#123;</div><div class=\"line\">                            level1.push_back(*currentNode.right);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (levelValues.find(level) != levelValues.end()) &#123;</div><div class=\"line\">                            if (currentNode.val &gt; levelValues.find(level)-&gt;second) &#123;</div><div class=\"line\">                                levelValues.find(level)-&gt;second = currentNode.val;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            levelValues.insert(pair&lt;int, int&gt;(level, currentNode.val));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        level2.pop_front();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    level++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (auto i : levelValues) &#123;</div><div class=\"line\">                res.push_back(i.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>You need to find the largest value in each row of a binary tree.</p>\n<p>Example:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    1</div><div class=\"line\">   / \\</div><div class=\"line\">  3   2</div><div class=\"line\"> / \\   \\ </div><div class=\"line\">5   3   9</div></pre></td></tr></table></figure></p>\n<p>Output: [1, 3, 9]</p>\n</blockquote>","more":"<p>It is one of Leetcode Weekly Contest 19, and also No.515. This is an easy problem.</p>\n<p>What we need to do is to level-order visit and find the largest value for each level.</p>\n<p>So, here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findValueMostElement(TreeNode* root) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            if (root == NULL) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">            map&lt;int, int&gt; levelValues;</div><div class=\"line\">            int level = 0;</div><div class=\"line\">            list&lt;TreeNode&gt; level1, level2;</div><div class=\"line\">            level1.push_back(*root);</div><div class=\"line\"></div><div class=\"line\">            while (level1.size() &gt; 0 || level2.size() &gt; 0) &#123;</div><div class=\"line\">                if (level % 2 == 0) &#123;</div><div class=\"line\">                    while (level1.size() &gt; 0) &#123;</div><div class=\"line\">                        TreeNode currentNode = level1.front();</div><div class=\"line\">                        if (currentNode.left != NULL) &#123;</div><div class=\"line\">                            level2.push_back(*currentNode.left);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentNode.right != NULL) &#123;</div><div class=\"line\">                            level2.push_back(*currentNode.right);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (levelValues.find(level) != levelValues.end()) &#123;</div><div class=\"line\">                            if (currentNode.val &gt; levelValues.find(level)-&gt;second) &#123;</div><div class=\"line\">                                levelValues.find(level)-&gt;second = currentNode.val;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            levelValues.insert(pair&lt;int, int&gt;(level, currentNode.val));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        level1.pop_front();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    level++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    while (level2.size() &gt; 0) &#123;</div><div class=\"line\">                        TreeNode currentNode = level2.front();</div><div class=\"line\">                        if (currentNode.left != NULL) &#123;</div><div class=\"line\">                            level1.push_back(*currentNode.left);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentNode.right != NULL) &#123;</div><div class=\"line\">                            level1.push_back(*currentNode.right);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (levelValues.find(level) != levelValues.end()) &#123;</div><div class=\"line\">                            if (currentNode.val &gt; levelValues.find(level)-&gt;second) &#123;</div><div class=\"line\">                                levelValues.find(level)-&gt;second = currentNode.val;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            levelValues.insert(pair&lt;int, int&gt;(level, currentNode.val));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        level2.pop_front();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    level++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (auto i : levelValues) &#123;</div><div class=\"line\">                res.push_back(i.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Find K Pairs with Smallest Sums","date":"2017-03-31T01:04:50.000Z","_content":"\n> You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.\n>\n> Define a pair (u,v) which consists of one element from the first array and one element from the second array.\n>\n> Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.\n>\n> Example 1:\n>```\nGiven nums1 = [1,7,11], nums2 = [2,4,6],  k = 3\nReturn: [1,2], [1,4], [1,6]\n\nThe first 3 pairs are returned from the sequence:\n[1,2], [1,4], [1,6], [7,2], [7,4], [11,2], [7,6], [11,4], [11,6]\n```\n> Example 2:\n>```\nGiven nums1 = [1,1,2], nums2 = [1,2,3],  k = 2\nReturn: [1,1], [1,1]\n\nThe first 2 pairs are returned from the sequence:\n[1,1], [1,1], [1,2], [2,1], [1,2], [2,2], [1,3], [1,3], [2,3]\n```\n> Example 3:\n>```\nGiven nums1 = [1,2], nums2 = [3],  k = 3\nReturn: [1,3], [2,3]\n\nAll possible pairs are returned from the sequence:\n[1,3], [2,3]\n```\n\n<!--more-->\n\nThis is Leetcode No.373. It is not a hard thinking problem instead, its solution is simple. But you should figure out all corner cases.\n\nBecause of the make_heap function in C++ STL, you can quickly find the solution with heap.\n\n```\nusing namespace std;\n\nint cmp (const pair<int, int> a, const pair<int, int> b) {\n    return a.first + a.second < b.first + b.second;\n}\n\nclass Solution {\n    public:\n        vector<pair<int, int> > kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n            sort(nums1.begin(), nums1.end());\n            sort(nums2.begin(), nums2.end());\n\n            vector<pair<int, int> > res;\n\n            for (int idx = 0; idx < (int)nums1.size(); idx++) {\n                for (int idy = 0; idy < (int)nums2.size(); idy++) {\n                    pair<int, int> pair;\n                    pair.first = nums1[idx];\n                    pair.second = nums2[idy];\n\n                    res.push_back(pair);\n                    push_heap(res.begin(), res.end(), cmp);\n\n                    if ((int)res.size() > k) {\n                        pop_heap(res.begin(),res.end(), cmp);\n                        res.pop_back();\n                    }\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt is simple and gets AC.\n","source":"_posts/FindKPairswithSmallestSums.md","raw":"---\ntitle: Find K Pairs with Smallest Sums\ndate: 2017-03-31 09:04:50\ntags:\n    - Heap\n---\n\n> You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.\n>\n> Define a pair (u,v) which consists of one element from the first array and one element from the second array.\n>\n> Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.\n>\n> Example 1:\n>```\nGiven nums1 = [1,7,11], nums2 = [2,4,6],  k = 3\nReturn: [1,2], [1,4], [1,6]\n\nThe first 3 pairs are returned from the sequence:\n[1,2], [1,4], [1,6], [7,2], [7,4], [11,2], [7,6], [11,4], [11,6]\n```\n> Example 2:\n>```\nGiven nums1 = [1,1,2], nums2 = [1,2,3],  k = 2\nReturn: [1,1], [1,1]\n\nThe first 2 pairs are returned from the sequence:\n[1,1], [1,1], [1,2], [2,1], [1,2], [2,2], [1,3], [1,3], [2,3]\n```\n> Example 3:\n>```\nGiven nums1 = [1,2], nums2 = [3],  k = 3\nReturn: [1,3], [2,3]\n\nAll possible pairs are returned from the sequence:\n[1,3], [2,3]\n```\n\n<!--more-->\n\nThis is Leetcode No.373. It is not a hard thinking problem instead, its solution is simple. But you should figure out all corner cases.\n\nBecause of the make_heap function in C++ STL, you can quickly find the solution with heap.\n\n```\nusing namespace std;\n\nint cmp (const pair<int, int> a, const pair<int, int> b) {\n    return a.first + a.second < b.first + b.second;\n}\n\nclass Solution {\n    public:\n        vector<pair<int, int> > kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n            sort(nums1.begin(), nums1.end());\n            sort(nums2.begin(), nums2.end());\n\n            vector<pair<int, int> > res;\n\n            for (int idx = 0; idx < (int)nums1.size(); idx++) {\n                for (int idy = 0; idy < (int)nums2.size(); idy++) {\n                    pair<int, int> pair;\n                    pair.first = nums1[idx];\n                    pair.second = nums2[idy];\n\n                    res.push_back(pair);\n                    push_heap(res.begin(), res.end(), cmp);\n\n                    if ((int)res.size() > k) {\n                        pop_heap(res.begin(),res.end(), cmp);\n                        res.pop_back();\n                    }\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIt is simple and gets AC.\n","slug":"FindKPairswithSmallestSums","published":1,"updated":"2017-03-31T02:25:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwq001px2f4n2ps64ch","content":"<blockquote>\n<p>You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.</p>\n<p>Define a pair (u,v) which consists of one element from the first array and one element from the second array.</p>\n<p>Find the k pairs (u1,v1),(u2,v2) …(uk,vk) with the smallest sums.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3</div><div class=\"line\">Return: [1,2], [1,4], [1,6]</div><div class=\"line\"></div><div class=\"line\">The first 3 pairs are returned from the sequence:</div><div class=\"line\">[1,2], [1,4], [1,6], [7,2], [7,4], [11,2], [7,6], [11,4], [11,6]</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2</div><div class=\"line\">Return: [1,1], [1,1]</div><div class=\"line\"></div><div class=\"line\">The first 2 pairs are returned from the sequence:</div><div class=\"line\">[1,1], [1,1], [1,2], [2,1], [1,2], [2,2], [1,3], [1,3], [2,3]</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums1 = [1,2], nums2 = [3],  k = 3</div><div class=\"line\">Return: [1,3], [2,3]</div><div class=\"line\"></div><div class=\"line\">All possible pairs are returned from the sequence:</div><div class=\"line\">[1,3], [2,3]</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.373. It is not a hard thinking problem instead, its solution is simple. But you should figure out all corner cases.</p>\n<p>Because of the make_heap function in C++ STL, you can quickly find the solution with heap.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int cmp (const pair&lt;int, int&gt; a, const pair&lt;int, int&gt; b) &#123;</div><div class=\"line\">    return a.first + a.second &lt; b.first + b.second;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;pair&lt;int, int&gt; &gt; kSmallestPairs(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2, int k) &#123;</div><div class=\"line\">            sort(nums1.begin(), nums1.end());</div><div class=\"line\">            sort(nums2.begin(), nums2.end());</div><div class=\"line\"></div><div class=\"line\">            vector&lt;pair&lt;int, int&gt; &gt; res;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums1.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)nums2.size(); idy++) &#123;</div><div class=\"line\">                    pair&lt;int, int&gt; pair;</div><div class=\"line\">                    pair.first = nums1[idx];</div><div class=\"line\">                    pair.second = nums2[idy];</div><div class=\"line\"></div><div class=\"line\">                    res.push_back(pair);</div><div class=\"line\">                    push_heap(res.begin(), res.end(), cmp);</div><div class=\"line\"></div><div class=\"line\">                    if ((int)res.size() &gt; k) &#123;</div><div class=\"line\">                        pop_heap(res.begin(),res.end(), cmp);</div><div class=\"line\">                        res.pop_back();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is simple and gets AC.</p>\n","excerpt":"<blockquote>\n<p>You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.</p>\n<p>Define a pair (u,v) which consists of one element from the first array and one element from the second array.</p>\n<p>Find the k pairs (u1,v1),(u2,v2) …(uk,vk) with the smallest sums.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3</div><div class=\"line\">Return: [1,2], [1,4], [1,6]</div><div class=\"line\"></div><div class=\"line\">The first 3 pairs are returned from the sequence:</div><div class=\"line\">[1,2], [1,4], [1,6], [7,2], [7,4], [11,2], [7,6], [11,4], [11,6]</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2</div><div class=\"line\">Return: [1,1], [1,1]</div><div class=\"line\"></div><div class=\"line\">The first 2 pairs are returned from the sequence:</div><div class=\"line\">[1,1], [1,1], [1,2], [2,1], [1,2], [2,2], [1,3], [1,3], [2,3]</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums1 = [1,2], nums2 = [3],  k = 3</div><div class=\"line\">Return: [1,3], [2,3]</div><div class=\"line\"></div><div class=\"line\">All possible pairs are returned from the sequence:</div><div class=\"line\">[1,3], [2,3]</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.373. It is not a hard thinking problem instead, its solution is simple. But you should figure out all corner cases.</p>\n<p>Because of the make_heap function in C++ STL, you can quickly find the solution with heap.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int cmp (const pair&lt;int, int&gt; a, const pair&lt;int, int&gt; b) &#123;</div><div class=\"line\">    return a.first + a.second &lt; b.first + b.second;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;pair&lt;int, int&gt; &gt; kSmallestPairs(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2, int k) &#123;</div><div class=\"line\">            sort(nums1.begin(), nums1.end());</div><div class=\"line\">            sort(nums2.begin(), nums2.end());</div><div class=\"line\"></div><div class=\"line\">            vector&lt;pair&lt;int, int&gt; &gt; res;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums1.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)nums2.size(); idy++) &#123;</div><div class=\"line\">                    pair&lt;int, int&gt; pair;</div><div class=\"line\">                    pair.first = nums1[idx];</div><div class=\"line\">                    pair.second = nums2[idy];</div><div class=\"line\"></div><div class=\"line\">                    res.push_back(pair);</div><div class=\"line\">                    push_heap(res.begin(), res.end(), cmp);</div><div class=\"line\"></div><div class=\"line\">                    if ((int)res.size() &gt; k) &#123;</div><div class=\"line\">                        pop_heap(res.begin(),res.end(), cmp);</div><div class=\"line\">                        res.pop_back();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is simple and gets AC.</p>"},{"title":"Find Left Most Element","date":"2017-02-12T04:12:49.000Z","_content":"\n> Given a binary tree, find the leftmost value in the last row of the tree.\n>\n> Example 1:\n>\n> Input:\n> ```\n  2\n / \\\n1   3\n```\n> Output: 1\n>\n> Example 2:\n>\n> Input:\n> ```\n    1\n   / \\\n  2   3\n /   / \\\n4   5   6\n   /\n  7\n```\n> Output: 7\n>\n> Note: You may assume the tree (i.e., the given root node) is not NULL.\n\n<!--more-->\n\nThis is one of the Leetcode Weekly contest 19, and also No.513. It is easy, you can use the preorder visit and find the max level one.\n\n```\nclass Solution {\n    public:\n        int maxLevel, res;\n        int findLeftMostNode(TreeNode* root) {\n            res = root->val;\n            maxLevel = 0;\n            _preOrder(root, 0);\n            return res;\n        }\n\n        void _preOrder(TreeNode* node, int level) {\n            if (node == NULL) {\n                return;\n            }\n            _preOrder(node->left, level + 1);\n            if (level > maxLevel) {\n                maxLevel = level;\n                res = node->val;\n            }\n            _preOrder(node->right, level + 1);\n\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/FindLeftMostElement.md","raw":"---\ntitle: Find Left Most Element\ndate: 2017-02-12 12:12:49\ntags:\n    - Tree\n---\n\n> Given a binary tree, find the leftmost value in the last row of the tree.\n>\n> Example 1:\n>\n> Input:\n> ```\n  2\n / \\\n1   3\n```\n> Output: 1\n>\n> Example 2:\n>\n> Input:\n> ```\n    1\n   / \\\n  2   3\n /   / \\\n4   5   6\n   /\n  7\n```\n> Output: 7\n>\n> Note: You may assume the tree (i.e., the given root node) is not NULL.\n\n<!--more-->\n\nThis is one of the Leetcode Weekly contest 19, and also No.513. It is easy, you can use the preorder visit and find the max level one.\n\n```\nclass Solution {\n    public:\n        int maxLevel, res;\n        int findLeftMostNode(TreeNode* root) {\n            res = root->val;\n            maxLevel = 0;\n            _preOrder(root, 0);\n            return res;\n        }\n\n        void _preOrder(TreeNode* node, int level) {\n            if (node == NULL) {\n                return;\n            }\n            _preOrder(node->left, level + 1);\n            if (level > maxLevel) {\n                maxLevel = level;\n                res = node->val;\n            }\n            _preOrder(node->right, level + 1);\n\n        }\n};\n```\n\nIt gets AC.\n","slug":"FindLeftMostElement","published":1,"updated":"2017-02-14T07:03:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwt001sx2f4savahm4s","content":"<blockquote>\n<p>Given a binary tree, find the leftmost value in the last row of the tree.</p>\n<p>Example 1:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  2</div><div class=\"line\"> / \\</div><div class=\"line\">1   3</div></pre></td></tr></table></figure></p>\n<p>Output: 1</p>\n<p>Example 2:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">    1</div><div class=\"line\">   / \\</div><div class=\"line\">  2   3</div><div class=\"line\"> /   / \\</div><div class=\"line\">4   5   6</div><div class=\"line\">   /</div><div class=\"line\">  7</div></pre></td></tr></table></figure></p>\n<p>Output: 7</p>\n<p>Note: You may assume the tree (i.e., the given root node) is not NULL.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is one of the Leetcode Weekly contest 19, and also No.513. It is easy, you can use the preorder visit and find the max level one.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxLevel, res;</div><div class=\"line\">        int findLeftMostNode(TreeNode* root) &#123;</div><div class=\"line\">            res = root-&gt;val;</div><div class=\"line\">            maxLevel = 0;</div><div class=\"line\">            _preOrder(root, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _preOrder(TreeNode* node, int level) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _preOrder(node-&gt;left, level + 1);</div><div class=\"line\">            if (level &gt; maxLevel) &#123;</div><div class=\"line\">                maxLevel = level;</div><div class=\"line\">                res = node-&gt;val;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _preOrder(node-&gt;right, level + 1);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a binary tree, find the leftmost value in the last row of the tree.</p>\n<p>Example 1:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  2</div><div class=\"line\"> / \\</div><div class=\"line\">1   3</div></pre></td></tr></table></figure></p>\n<p>Output: 1</p>\n<p>Example 2:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">    1</div><div class=\"line\">   / \\</div><div class=\"line\">  2   3</div><div class=\"line\"> /   / \\</div><div class=\"line\">4   5   6</div><div class=\"line\">   /</div><div class=\"line\">  7</div></pre></td></tr></table></figure></p>\n<p>Output: 7</p>\n<p>Note: You may assume the tree (i.e., the given root node) is not NULL.</p>\n</blockquote>","more":"<p>This is one of the Leetcode Weekly contest 19, and also No.513. It is easy, you can use the preorder visit and find the max level one.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxLevel, res;</div><div class=\"line\">        int findLeftMostNode(TreeNode* root) &#123;</div><div class=\"line\">            res = root-&gt;val;</div><div class=\"line\">            maxLevel = 0;</div><div class=\"line\">            _preOrder(root, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _preOrder(TreeNode* node, int level) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _preOrder(node-&gt;left, level + 1);</div><div class=\"line\">            if (level &gt; maxLevel) &#123;</div><div class=\"line\">                maxLevel = level;</div><div class=\"line\">                res = node-&gt;val;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _preOrder(node-&gt;right, level + 1);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Find Mode in Binary Search Tree","date":"2017-02-01T15:59:43.000Z","_content":"\n> Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\n>\n> Assume a BST is defined as follows:\n>\n> + The left subtree of a node contains only nodes with keys less than or equal to the node's key.\n> + The right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n> + Both the left and right subtrees must also be binary search trees.\n>\n> For example:\n> + Given BST [1,null,2,2],\n> + return [2].\n>\n> Note: If a tree has more than one mode, you can return them in any order.\n>\n> Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\n\n<!--more-->\n\nThis is Leetcode 501. And it is a easy one. You can just use pre-order visit the tree and store the value and its appearances. Return the max times.\n\nSo, here comes the answer:\n\n```\nclass Solution {\n    public:\n        map<int, int> nodes;\n\n        vector<int> findMode(TreeNode* root) {\n            nodes.clear();\n\n            _preOrder(root);\n\n            int times = INT_MIN;\n            for (auto i : nodes) {\n                if (i.second > times) {\n                    times = i.second;\n                }\n            }\n\n            vector<int> res;\n            for (auto i : nodes) {\n                if (i.second == times) {\n                    res.push_back(i.first);\n                }\n            }\n\n            return res;\n        }\n\n        void _preOrder(TreeNode* node) {\n            if (node == NULL) {\n                return;\n            }\n            _visit(node);\n            _preOrder(node->left);\n            _preOrder(node->right);\n        }\n\n        void _visit(TreeNode* node) {\n            if (nodes.find(node->val) == nodes.end()) {\n                nodes.insert(pair<int, int>(node->val, 1));\n            } else {\n                nodes.find(node->val)->second++;\n            }\n        }\n};\n```\n\n**Follow up:**\n\nIt's easy to improve the code. Because we can use the BST feature, we can know the current node's value how many times.\n\nNot now for the result.\n\n\n","source":"_posts/FindModeinBinarySearchTree.md","raw":"---\ntitle: Find Mode in Binary Search Tree\ndate: 2017-02-01 23:59:43\ntags:\n    - Tree\n---\n\n> Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\n>\n> Assume a BST is defined as follows:\n>\n> + The left subtree of a node contains only nodes with keys less than or equal to the node's key.\n> + The right subtree of a node contains only nodes with keys greater than or equal to the node's key.\n> + Both the left and right subtrees must also be binary search trees.\n>\n> For example:\n> + Given BST [1,null,2,2],\n> + return [2].\n>\n> Note: If a tree has more than one mode, you can return them in any order.\n>\n> Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\n\n<!--more-->\n\nThis is Leetcode 501. And it is a easy one. You can just use pre-order visit the tree and store the value and its appearances. Return the max times.\n\nSo, here comes the answer:\n\n```\nclass Solution {\n    public:\n        map<int, int> nodes;\n\n        vector<int> findMode(TreeNode* root) {\n            nodes.clear();\n\n            _preOrder(root);\n\n            int times = INT_MIN;\n            for (auto i : nodes) {\n                if (i.second > times) {\n                    times = i.second;\n                }\n            }\n\n            vector<int> res;\n            for (auto i : nodes) {\n                if (i.second == times) {\n                    res.push_back(i.first);\n                }\n            }\n\n            return res;\n        }\n\n        void _preOrder(TreeNode* node) {\n            if (node == NULL) {\n                return;\n            }\n            _visit(node);\n            _preOrder(node->left);\n            _preOrder(node->right);\n        }\n\n        void _visit(TreeNode* node) {\n            if (nodes.find(node->val) == nodes.end()) {\n                nodes.insert(pair<int, int>(node->val, 1));\n            } else {\n                nodes.find(node->val)->second++;\n            }\n        }\n};\n```\n\n**Follow up:**\n\nIt's easy to improve the code. Because we can use the BST feature, we can know the current node's value how many times.\n\nNot now for the result.\n\n\n","slug":"FindModeinBinarySearchTree","published":1,"updated":"2017-02-01T16:15:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwu001ux2f44kqtp2uv","content":"<blockquote>\n<p>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.</p>\n<p>Assume a BST is defined as follows:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than or equal to the node’s key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>For example:</p>\n<ul>\n<li>Given BST [1,null,2,2],</li>\n<li>return [2].</li>\n</ul>\n<p>Note: If a tree has more than one mode, you can return them in any order.</p>\n<p>Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 501. And it is a easy one. You can just use pre-order visit the tree and store the value and its appearances. Return the max times.</p>\n<p>So, here comes the answer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;int, int&gt; nodes;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;int&gt; findMode(TreeNode* root) &#123;</div><div class=\"line\">            nodes.clear();</div><div class=\"line\"></div><div class=\"line\">            _preOrder(root);</div><div class=\"line\"></div><div class=\"line\">            int times = INT_MIN;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second &gt; times) &#123;</div><div class=\"line\">                    times = i.second;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second == times) &#123;</div><div class=\"line\">                    res.push_back(i.first);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _preOrder(TreeNode* node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(node);</div><div class=\"line\">            _preOrder(node-&gt;left);</div><div class=\"line\">            _preOrder(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(TreeNode* node) &#123;</div><div class=\"line\">            if (nodes.find(node-&gt;val) == nodes.end()) &#123;</div><div class=\"line\">                nodes.insert(pair&lt;int, int&gt;(node-&gt;val, 1));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                nodes.find(node-&gt;val)-&gt;second++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><strong>Follow up:</strong></p>\n<p>It’s easy to improve the code. Because we can use the BST feature, we can know the current node’s value how many times.</p>\n<p>Not now for the result.</p>\n","excerpt":"<blockquote>\n<p>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.</p>\n<p>Assume a BST is defined as follows:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than or equal to the node’s key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>For example:</p>\n<ul>\n<li>Given BST [1,null,2,2],</li>\n<li>return [2].</li>\n</ul>\n<p>Note: If a tree has more than one mode, you can return them in any order.</p>\n<p>Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p>\n</blockquote>","more":"<p>This is Leetcode 501. And it is a easy one. You can just use pre-order visit the tree and store the value and its appearances. Return the max times.</p>\n<p>So, here comes the answer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;int, int&gt; nodes;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;int&gt; findMode(TreeNode* root) &#123;</div><div class=\"line\">            nodes.clear();</div><div class=\"line\"></div><div class=\"line\">            _preOrder(root);</div><div class=\"line\"></div><div class=\"line\">            int times = INT_MIN;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second &gt; times) &#123;</div><div class=\"line\">                    times = i.second;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second == times) &#123;</div><div class=\"line\">                    res.push_back(i.first);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _preOrder(TreeNode* node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(node);</div><div class=\"line\">            _preOrder(node-&gt;left);</div><div class=\"line\">            _preOrder(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(TreeNode* node) &#123;</div><div class=\"line\">            if (nodes.find(node-&gt;val) == nodes.end()) &#123;</div><div class=\"line\">                nodes.insert(pair&lt;int, int&gt;(node-&gt;val, 1));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                nodes.find(node-&gt;val)-&gt;second++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><strong>Follow up:</strong></p>\n<p>It’s easy to improve the code. Because we can use the BST feature, we can know the current node’s value how many times.</p>\n<p>Not now for the result.</p>"},{"title":"Find the Closest Palindrome","date":"2017-04-28T01:49:04.000Z","_content":"\n> Given an integer n, find the closest integer (not including itself), which is a palindrome.\n>\n> The 'closest' is defined as absolute difference minimized between two integers.\n>\n> Example 1:\n>```\nInput: \"123\"\nOutput: \"121\"\n```\n> Note:\n> + The input n is a positive integer represented by string, whose length will not exceed 18.\n> + If there is a tie, return the smaller one as answer.\n\n<!--more-->\n\nThis is Leetcode No.564. It is a fun problem. You will think about as many corner cases as you can. For example, the case:\n\n+ 1\n+ 0\n+ 999\n+ 900\n+ 100\n+ 200\n+ 14041\n+ 1421\n+ 200\n\nThere are different solutions to deal with these cases. As 999, we should return 1001, and 0 we should return 1, and 1 we return 0. As 100, we should return 99. As 200, we should return 202 instead of 191. But when 100, we should return 99.\n\nSo, you should think about the correct solution. And I think that's why this problem is Hard Tagged too many corner cases to thinking.\n\nAs we can take these cases into consideration. We can start to write the code.\n\nSo, you can add 1 and 0 and -1 to the num when you try to simplify its logic.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        long long DELTA, RES, NUM;\n\n        void update(string current) {\n            try {\n                if (abs(NUM - stoll(current)) < DELTA && abs(NUM - stoll(current)) != 0) {\n                    RES = stoll(current);\n                    DELTA = abs(NUM - stoll(current));\n                } else if (abs(NUM - stoll(current)) == DELTA && stoll(current) < RES) {\n                    RES = stoll(current);\n                    DELTA = abs(NUM - stoll(current));\n                }\n            } catch(exception e) {}\n        }\n\n        void generate(string left) {\n            string right = left;\n            std::reverse(right.begin(), right.end());\n\n            string current = left + right;\n            update(current);\n            current = left + right.substr(1);\n            update(current);\n        }\n\n        string nearestPalindromic(string num) {\n            DELTA = std::stoll(num);\n            NUM   = std::stoll(num);\n\n            string left = num.substr(0, (num.length() + 1)/ 2);\n\n            long long _left = stoll(left);\n            generate(to_string(_left - 1));\n            generate(to_string((_left - 1) * 10 + 9));\n            generate(to_string(_left));\n            generate(to_string(_left + 1));\n            generate(to_string((_left + 1) / 10));\n\n            return std::to_string(RES);\n        }\n};\n```\n\nIt gets AC.\n\n","source":"_posts/FindtheClosestPalindrome.md","raw":"---\ntitle: Find the Closest Palindrome\ndate: 2017-04-28 09:49:04\ntags:\n    - String\n---\n\n> Given an integer n, find the closest integer (not including itself), which is a palindrome.\n>\n> The 'closest' is defined as absolute difference minimized between two integers.\n>\n> Example 1:\n>```\nInput: \"123\"\nOutput: \"121\"\n```\n> Note:\n> + The input n is a positive integer represented by string, whose length will not exceed 18.\n> + If there is a tie, return the smaller one as answer.\n\n<!--more-->\n\nThis is Leetcode No.564. It is a fun problem. You will think about as many corner cases as you can. For example, the case:\n\n+ 1\n+ 0\n+ 999\n+ 900\n+ 100\n+ 200\n+ 14041\n+ 1421\n+ 200\n\nThere are different solutions to deal with these cases. As 999, we should return 1001, and 0 we should return 1, and 1 we return 0. As 100, we should return 99. As 200, we should return 202 instead of 191. But when 100, we should return 99.\n\nSo, you should think about the correct solution. And I think that's why this problem is Hard Tagged too many corner cases to thinking.\n\nAs we can take these cases into consideration. We can start to write the code.\n\nSo, you can add 1 and 0 and -1 to the num when you try to simplify its logic.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        long long DELTA, RES, NUM;\n\n        void update(string current) {\n            try {\n                if (abs(NUM - stoll(current)) < DELTA && abs(NUM - stoll(current)) != 0) {\n                    RES = stoll(current);\n                    DELTA = abs(NUM - stoll(current));\n                } else if (abs(NUM - stoll(current)) == DELTA && stoll(current) < RES) {\n                    RES = stoll(current);\n                    DELTA = abs(NUM - stoll(current));\n                }\n            } catch(exception e) {}\n        }\n\n        void generate(string left) {\n            string right = left;\n            std::reverse(right.begin(), right.end());\n\n            string current = left + right;\n            update(current);\n            current = left + right.substr(1);\n            update(current);\n        }\n\n        string nearestPalindromic(string num) {\n            DELTA = std::stoll(num);\n            NUM   = std::stoll(num);\n\n            string left = num.substr(0, (num.length() + 1)/ 2);\n\n            long long _left = stoll(left);\n            generate(to_string(_left - 1));\n            generate(to_string((_left - 1) * 10 + 9));\n            generate(to_string(_left));\n            generate(to_string(_left + 1));\n            generate(to_string((_left + 1) / 10));\n\n            return std::to_string(RES);\n        }\n};\n```\n\nIt gets AC.\n\n","slug":"FindtheClosestPalindrome","published":1,"updated":"2017-04-28T02:41:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwv001xx2f4mdpqc2sg","content":"<blockquote>\n<p>Given an integer n, find the closest integer (not including itself), which is a palindrome.</p>\n<p>The ‘closest’ is defined as absolute difference minimized between two integers.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;123&quot;</div><div class=\"line\">Output: &quot;121&quot;</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The input n is a positive integer represented by string, whose length will not exceed 18.</li>\n<li>If there is a tie, return the smaller one as answer.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.564. It is a fun problem. You will think about as many corner cases as you can. For example, the case:</p>\n<ul>\n<li>1</li>\n<li>0</li>\n<li>999</li>\n<li>900</li>\n<li>100</li>\n<li>200</li>\n<li>14041</li>\n<li>1421</li>\n<li>200</li>\n</ul>\n<p>There are different solutions to deal with these cases. As 999, we should return 1001, and 0 we should return 1, and 1 we return 0. As 100, we should return 99. As 200, we should return 202 instead of 191. But when 100, we should return 99.</p>\n<p>So, you should think about the correct solution. And I think that’s why this problem is Hard Tagged too many corner cases to thinking.</p>\n<p>As we can take these cases into consideration. We can start to write the code.</p>\n<p>So, you can add 1 and 0 and -1 to the num when you try to simplify its logic.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        long long DELTA, RES, NUM;</div><div class=\"line\"></div><div class=\"line\">        void update(string current) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                if (abs(NUM - stoll(current)) &lt; DELTA &amp;&amp; abs(NUM - stoll(current)) != 0) &#123;</div><div class=\"line\">                    RES = stoll(current);</div><div class=\"line\">                    DELTA = abs(NUM - stoll(current));</div><div class=\"line\">                &#125; else if (abs(NUM - stoll(current)) == DELTA &amp;&amp; stoll(current) &lt; RES) &#123;</div><div class=\"line\">                    RES = stoll(current);</div><div class=\"line\">                    DELTA = abs(NUM - stoll(current));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch(exception e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void generate(string left) &#123;</div><div class=\"line\">            string right = left;</div><div class=\"line\">            std::reverse(right.begin(), right.end());</div><div class=\"line\"></div><div class=\"line\">            string current = left + right;</div><div class=\"line\">            update(current);</div><div class=\"line\">            current = left + right.substr(1);</div><div class=\"line\">            update(current);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string nearestPalindromic(string num) &#123;</div><div class=\"line\">            DELTA = std::stoll(num);</div><div class=\"line\">            NUM   = std::stoll(num);</div><div class=\"line\"></div><div class=\"line\">            string left = num.substr(0, (num.length() + 1)/ 2);</div><div class=\"line\"></div><div class=\"line\">            long long _left = stoll(left);</div><div class=\"line\">            generate(to_string(_left - 1));</div><div class=\"line\">            generate(to_string((_left - 1) * 10 + 9));</div><div class=\"line\">            generate(to_string(_left));</div><div class=\"line\">            generate(to_string(_left + 1));</div><div class=\"line\">            generate(to_string((_left + 1) / 10));</div><div class=\"line\"></div><div class=\"line\">            return std::to_string(RES);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an integer n, find the closest integer (not including itself), which is a palindrome.</p>\n<p>The ‘closest’ is defined as absolute difference minimized between two integers.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;123&quot;</div><div class=\"line\">Output: &quot;121&quot;</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The input n is a positive integer represented by string, whose length will not exceed 18.</li>\n<li>If there is a tie, return the smaller one as answer.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.564. It is a fun problem. You will think about as many corner cases as you can. For example, the case:</p>\n<ul>\n<li>1</li>\n<li>0</li>\n<li>999</li>\n<li>900</li>\n<li>100</li>\n<li>200</li>\n<li>14041</li>\n<li>1421</li>\n<li>200</li>\n</ul>\n<p>There are different solutions to deal with these cases. As 999, we should return 1001, and 0 we should return 1, and 1 we return 0. As 100, we should return 99. As 200, we should return 202 instead of 191. But when 100, we should return 99.</p>\n<p>So, you should think about the correct solution. And I think that’s why this problem is Hard Tagged too many corner cases to thinking.</p>\n<p>As we can take these cases into consideration. We can start to write the code.</p>\n<p>So, you can add 1 and 0 and -1 to the num when you try to simplify its logic.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        long long DELTA, RES, NUM;</div><div class=\"line\"></div><div class=\"line\">        void update(string current) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                if (abs(NUM - stoll(current)) &lt; DELTA &amp;&amp; abs(NUM - stoll(current)) != 0) &#123;</div><div class=\"line\">                    RES = stoll(current);</div><div class=\"line\">                    DELTA = abs(NUM - stoll(current));</div><div class=\"line\">                &#125; else if (abs(NUM - stoll(current)) == DELTA &amp;&amp; stoll(current) &lt; RES) &#123;</div><div class=\"line\">                    RES = stoll(current);</div><div class=\"line\">                    DELTA = abs(NUM - stoll(current));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch(exception e) &#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void generate(string left) &#123;</div><div class=\"line\">            string right = left;</div><div class=\"line\">            std::reverse(right.begin(), right.end());</div><div class=\"line\"></div><div class=\"line\">            string current = left + right;</div><div class=\"line\">            update(current);</div><div class=\"line\">            current = left + right.substr(1);</div><div class=\"line\">            update(current);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string nearestPalindromic(string num) &#123;</div><div class=\"line\">            DELTA = std::stoll(num);</div><div class=\"line\">            NUM   = std::stoll(num);</div><div class=\"line\"></div><div class=\"line\">            string left = num.substr(0, (num.length() + 1)/ 2);</div><div class=\"line\"></div><div class=\"line\">            long long _left = stoll(left);</div><div class=\"line\">            generate(to_string(_left - 1));</div><div class=\"line\">            generate(to_string((_left - 1) * 10 + 9));</div><div class=\"line\">            generate(to_string(_left));</div><div class=\"line\">            generate(to_string(_left + 1));</div><div class=\"line\">            generate(to_string((_left + 1) / 10));</div><div class=\"line\"></div><div class=\"line\">            return std::to_string(RES);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Find the Duplicate Number","date":"2017-02-08T01:35:17.000Z","_content":"\n> Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\n>\n> Note:\n>  + You must not modify the array (assume the array is read only).\n>  + You must use only constant, O(1) extra space.\n>  + Your runtime complexity should be less than O(n2).\n>  + There is only one duplicate number in the array, but it could be repeated more than once.\n\n<!--more-->\n\nThis is Leetcode 287, and it is easy if you can modify this array. Sort and find, O(NlogN) time complexity.\n\nIf you can use O(N) space, you can use a array to store all the num and check whether it is appeared once.\n\nHowever, you can not modify, so you need to find another solution.\n\nI don't know if I use bitset is ok? If it is good, I can finish this with O(1) space and O(n) time.\n\nAnd if I can use the O(n2) time complexity, I can use the two loops solution.\n\nIf the duplicate number can only be repeated once. U can make this problem into a Math problem.\n\nSo, I come up with such a solution:\n\n```\nclass Solution {\n    public:\n        int findDuplicate(vector<int>& nums) {\n            if (nums.size() <= 1) {\n                return -1;\n            }\n\n            int n = nums.size();\n            int slow = n;\n            int fast = n;\n            do {\n                slow = nums[slow - 1];\n                fast = nums[nums[fast - 1] - 1];\n            } while (slow != fast);\n            slow = n;\n            while (slow != fast) {\n                slow = nums[slow - 1];\n                fast = nums[fast - 1];\n            }\n            return slow;\n        }\n};\n```\n\nFor the explaination:\n\nsuppose the array is\n\n + index: 0 1 2 3 4 5\n + value: 2 5 1 1 4 3\n\nfirst subtract 1 from each element in the array, so it is much easy to understand.\nuse the value as pointer. the array becomes:\n \n + index: 0 1 2 3 4 5\n + value: 1 4 0 0 3 2\n\nenter image description here\n\n![description](http://cyukang.com/images/cycle3.png)\n\nSecond if the array is\n\n + index: 0 1 2 3 4 5\n + value: 0 1 2 4 2 3\n\nwe must choose the last element as the head of the linked list. If we choose 0, we can not detect the cycle.\n\nNow the problem is the same as find the cycle in linkedlist!\n","source":"_posts/FindtheDuplicateNumber.md","raw":"---\ntitle: Find the Duplicate Number\ndate: 2017-02-08 09:35:17\ntags:\n    - Binary Search\n    - Array\n    - Two Pointers\n---\n\n> Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\n>\n> Note:\n>  + You must not modify the array (assume the array is read only).\n>  + You must use only constant, O(1) extra space.\n>  + Your runtime complexity should be less than O(n2).\n>  + There is only one duplicate number in the array, but it could be repeated more than once.\n\n<!--more-->\n\nThis is Leetcode 287, and it is easy if you can modify this array. Sort and find, O(NlogN) time complexity.\n\nIf you can use O(N) space, you can use a array to store all the num and check whether it is appeared once.\n\nHowever, you can not modify, so you need to find another solution.\n\nI don't know if I use bitset is ok? If it is good, I can finish this with O(1) space and O(n) time.\n\nAnd if I can use the O(n2) time complexity, I can use the two loops solution.\n\nIf the duplicate number can only be repeated once. U can make this problem into a Math problem.\n\nSo, I come up with such a solution:\n\n```\nclass Solution {\n    public:\n        int findDuplicate(vector<int>& nums) {\n            if (nums.size() <= 1) {\n                return -1;\n            }\n\n            int n = nums.size();\n            int slow = n;\n            int fast = n;\n            do {\n                slow = nums[slow - 1];\n                fast = nums[nums[fast - 1] - 1];\n            } while (slow != fast);\n            slow = n;\n            while (slow != fast) {\n                slow = nums[slow - 1];\n                fast = nums[fast - 1];\n            }\n            return slow;\n        }\n};\n```\n\nFor the explaination:\n\nsuppose the array is\n\n + index: 0 1 2 3 4 5\n + value: 2 5 1 1 4 3\n\nfirst subtract 1 from each element in the array, so it is much easy to understand.\nuse the value as pointer. the array becomes:\n \n + index: 0 1 2 3 4 5\n + value: 1 4 0 0 3 2\n\nenter image description here\n\n![description](http://cyukang.com/images/cycle3.png)\n\nSecond if the array is\n\n + index: 0 1 2 3 4 5\n + value: 0 1 2 4 2 3\n\nwe must choose the last element as the head of the linked list. If we choose 0, we can not detect the cycle.\n\nNow the problem is the same as find the cycle in linkedlist!\n","slug":"FindtheDuplicateNumber","published":1,"updated":"2017-02-08T04:50:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwv001yx2f45ypmkwue","content":"<blockquote>\n<p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>\n<p>Note:</p>\n<ul>\n<li>You must not modify the array (assume the array is read only).</li>\n<li>You must use only constant, O(1) extra space.</li>\n<li>Your runtime complexity should be less than O(n2).</li>\n<li>There is only one duplicate number in the array, but it could be repeated more than once.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 287, and it is easy if you can modify this array. Sort and find, O(NlogN) time complexity.</p>\n<p>If you can use O(N) space, you can use a array to store all the num and check whether it is appeared once.</p>\n<p>However, you can not modify, so you need to find another solution.</p>\n<p>I don’t know if I use bitset is ok? If it is good, I can finish this with O(1) space and O(n) time.</p>\n<p>And if I can use the O(n2) time complexity, I can use the two loops solution.</p>\n<p>If the duplicate number can only be repeated once. U can make this problem into a Math problem.</p>\n<p>So, I come up with such a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findDuplicate(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt;= 1) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int n = nums.size();</div><div class=\"line\">            int slow = n;</div><div class=\"line\">            int fast = n;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                slow = nums[slow - 1];</div><div class=\"line\">                fast = nums[nums[fast - 1] - 1];</div><div class=\"line\">            &#125; while (slow != fast);</div><div class=\"line\">            slow = n;</div><div class=\"line\">            while (slow != fast) &#123;</div><div class=\"line\">                slow = nums[slow - 1];</div><div class=\"line\">                fast = nums[fast - 1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return slow;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>For the explaination:</p>\n<p>suppose the array is</p>\n<ul>\n<li>index: 0 1 2 3 4 5</li>\n<li>value: 2 5 1 1 4 3</li>\n</ul>\n<p>first subtract 1 from each element in the array, so it is much easy to understand.<br>use the value as pointer. the array becomes:</p>\n<ul>\n<li>index: 0 1 2 3 4 5</li>\n<li>value: 1 4 0 0 3 2</li>\n</ul>\n<p>enter image description here</p>\n<p><img src=\"http://cyukang.com/images/cycle3.png\" alt=\"description\"></p>\n<p>Second if the array is</p>\n<ul>\n<li>index: 0 1 2 3 4 5</li>\n<li>value: 0 1 2 4 2 3</li>\n</ul>\n<p>we must choose the last element as the head of the linked list. If we choose 0, we can not detect the cycle.</p>\n<p>Now the problem is the same as find the cycle in linkedlist!</p>\n","excerpt":"<blockquote>\n<p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>\n<p>Note:</p>\n<ul>\n<li>You must not modify the array (assume the array is read only).</li>\n<li>You must use only constant, O(1) extra space.</li>\n<li>Your runtime complexity should be less than O(n2).</li>\n<li>There is only one duplicate number in the array, but it could be repeated more than once.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 287, and it is easy if you can modify this array. Sort and find, O(NlogN) time complexity.</p>\n<p>If you can use O(N) space, you can use a array to store all the num and check whether it is appeared once.</p>\n<p>However, you can not modify, so you need to find another solution.</p>\n<p>I don’t know if I use bitset is ok? If it is good, I can finish this with O(1) space and O(n) time.</p>\n<p>And if I can use the O(n2) time complexity, I can use the two loops solution.</p>\n<p>If the duplicate number can only be repeated once. U can make this problem into a Math problem.</p>\n<p>So, I come up with such a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findDuplicate(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt;= 1) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int n = nums.size();</div><div class=\"line\">            int slow = n;</div><div class=\"line\">            int fast = n;</div><div class=\"line\">            do &#123;</div><div class=\"line\">                slow = nums[slow - 1];</div><div class=\"line\">                fast = nums[nums[fast - 1] - 1];</div><div class=\"line\">            &#125; while (slow != fast);</div><div class=\"line\">            slow = n;</div><div class=\"line\">            while (slow != fast) &#123;</div><div class=\"line\">                slow = nums[slow - 1];</div><div class=\"line\">                fast = nums[fast - 1];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return slow;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>For the explaination:</p>\n<p>suppose the array is</p>\n<ul>\n<li>index: 0 1 2 3 4 5</li>\n<li>value: 2 5 1 1 4 3</li>\n</ul>\n<p>first subtract 1 from each element in the array, so it is much easy to understand.<br>use the value as pointer. the array becomes:</p>\n<ul>\n<li>index: 0 1 2 3 4 5</li>\n<li>value: 1 4 0 0 3 2</li>\n</ul>\n<p>enter image description here</p>\n<p><img src=\"http://cyukang.com/images/cycle3.png\" alt=\"description\"></p>\n<p>Second if the array is</p>\n<ul>\n<li>index: 0 1 2 3 4 5</li>\n<li>value: 0 1 2 4 2 3</li>\n</ul>\n<p>we must choose the last element as the head of the linked list. If we choose 0, we can not detect the cycle.</p>\n<p>Now the problem is the same as find the cycle in linkedlist!</p>"},{"title":"Font Size","date":"2017-02-14T06:21:49.000Z","_content":"\n> **Description:**\n>\n> Steven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.\n>\n> Steven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven's phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)\n>\n> So here's the question, if Steven wants to control the number of pages no more than P, what's the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.\n>\n> **Input:**\n>\n> Input may contain multiple test cases.\n>\n> The first line is an integer TASKS, representing the number of test cases.\n>\n> For each test case, the first line contains four integers N, P, W and H, as described above.\n>\n> The second line contains N integers a1, a2, ... aN, indicating the number of characters in each paragraph.\n>\n> For all test cases,\n> + 1 <= N <= 103,\n> + 1 <= W, H, ai <= 103,\n> + 1 <= P <= 106,\n>\n> There is always a way to control the number of pages no more than P.\n>\n> **Output**\n>\n> For each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.\n>\n<!--more-->\n> + Example Input:\n> ```\n 2\n 1 10 4 3\n 10\n 2 10 4 3\n 10 103\n```\n> + Example Output:\n> ```\n 3\n 2\n```\n\n<!--more-->\n\nThis is one problem from hihocode, it is No. 1288, and it is also one of the microsoft hiring test. So, it must be fun enough to waste time to figure it out.\n\nIt actually has fun. You should find the relationship with the Maxline and Maxwordperline.\n\nIf you read my code, you will understand quickly.\n\n```\nusing namespace std;\n\nbool checkIsOk(int pageHeight, int pageWidth, int fontSize, vector<int> wordNums, int maxPageNums) {\n    int currentWordsPerLine = (int)(pageWidth / fontSize);\n    int currentLinesPerPage = (int)(pageHeight / fontSize);\n\n    int totalLineNum = currentLinesPerPage * maxPageNums;\n    for (int i = 0; i < (int)wordNums.size(); i++) {\n        if (totalLineNum < 0) {\n            return false;\n        }\n        int currentLineNum = 1;\n        while (wordNums[i] - (currentWordsPerLine * currentLineNum) > 0) {\n            currentLineNum++;\n        }\n        totalLineNum = totalLineNum - currentLineNum;\n    }\n    return totalLineNum >= 0;\n}\n\nint main() {\n    int TASKS;\n    int N, P, W, H;\n    while (cin >> TASKS) {\n        for (int i = 0; i < TASKS; i++) {\n            cin >> N >> P >> W >> H;\n            vector<int> wordNums(N);\n            for (int idx = 0; idx < N; idx++) {\n                cin >> wordNums[idx];\n            }\n\n            int low = 1, high = W, res = -1;\n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (checkIsOk(H, W, mid, wordNums, P)) {\n                    res = max(res, mid);\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            cout << res << endl;\n        }\n    }\n\n    return 0;\n}\n```\n\nIt gets AC.\n","source":"_posts/FontSize.md","raw":"---\ntitle: Font Size\ndate: 2017-02-14 14:21:49\ntags:\n    - Math\n    - Binary Search\n---\n\n> **Description:**\n>\n> Steven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.\n>\n> Steven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven's phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)\n>\n> So here's the question, if Steven wants to control the number of pages no more than P, what's the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.\n>\n> **Input:**\n>\n> Input may contain multiple test cases.\n>\n> The first line is an integer TASKS, representing the number of test cases.\n>\n> For each test case, the first line contains four integers N, P, W and H, as described above.\n>\n> The second line contains N integers a1, a2, ... aN, indicating the number of characters in each paragraph.\n>\n> For all test cases,\n> + 1 <= N <= 103,\n> + 1 <= W, H, ai <= 103,\n> + 1 <= P <= 106,\n>\n> There is always a way to control the number of pages no more than P.\n>\n> **Output**\n>\n> For each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.\n>\n<!--more-->\n> + Example Input:\n> ```\n 2\n 1 10 4 3\n 10\n 2 10 4 3\n 10 103\n```\n> + Example Output:\n> ```\n 3\n 2\n```\n\n<!--more-->\n\nThis is one problem from hihocode, it is No. 1288, and it is also one of the microsoft hiring test. So, it must be fun enough to waste time to figure it out.\n\nIt actually has fun. You should find the relationship with the Maxline and Maxwordperline.\n\nIf you read my code, you will understand quickly.\n\n```\nusing namespace std;\n\nbool checkIsOk(int pageHeight, int pageWidth, int fontSize, vector<int> wordNums, int maxPageNums) {\n    int currentWordsPerLine = (int)(pageWidth / fontSize);\n    int currentLinesPerPage = (int)(pageHeight / fontSize);\n\n    int totalLineNum = currentLinesPerPage * maxPageNums;\n    for (int i = 0; i < (int)wordNums.size(); i++) {\n        if (totalLineNum < 0) {\n            return false;\n        }\n        int currentLineNum = 1;\n        while (wordNums[i] - (currentWordsPerLine * currentLineNum) > 0) {\n            currentLineNum++;\n        }\n        totalLineNum = totalLineNum - currentLineNum;\n    }\n    return totalLineNum >= 0;\n}\n\nint main() {\n    int TASKS;\n    int N, P, W, H;\n    while (cin >> TASKS) {\n        for (int i = 0; i < TASKS; i++) {\n            cin >> N >> P >> W >> H;\n            vector<int> wordNums(N);\n            for (int idx = 0; idx < N; idx++) {\n                cin >> wordNums[idx];\n            }\n\n            int low = 1, high = W, res = -1;\n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (checkIsOk(H, W, mid, wordNums, P)) {\n                    res = max(res, mid);\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            cout << res << endl;\n        }\n    }\n\n    return 0;\n}\n```\n\nIt gets AC.\n","slug":"FontSize","published":1,"updated":"2017-02-15T05:22:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpww0020x2f49lvdmq5s","content":"<blockquote>\n<p><strong>Description:</strong></p>\n<p>Steven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.</p>\n<p>Steven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven’s phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)</p>\n<p>So here’s the question, if Steven wants to control the number of pages no more than P, what’s the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.</p>\n<p><strong>Input:</strong></p>\n<p>Input may contain multiple test cases.</p>\n<p>The first line is an integer TASKS, representing the number of test cases.</p>\n<p>For each test case, the first line contains four integers N, P, W and H, as described above.</p>\n<p>The second line contains N integers a1, a2, … aN, indicating the number of characters in each paragraph.</p>\n<p>For all test cases,</p>\n<ul>\n<li>1 &lt;= N &lt;= 103,</li>\n<li>1 &lt;= W, H, ai &lt;= 103,</li>\n<li>1 &lt;= P &lt;= 106,</li>\n</ul>\n<p>There is always a way to control the number of pages no more than P.</p>\n<p><strong>Output</strong></p>\n<p>For each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>Example Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div><div class=\"line\">1 10 4 3</div><div class=\"line\">10</div><div class=\"line\">2 10 4 3</div><div class=\"line\">10 103</div></pre></td></tr></table></figure>\n</li>\n<li><p>Example Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">3</div><div class=\"line\">2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<!--more-->\n<p>This is one problem from hihocode, it is No. 1288, and it is also one of the microsoft hiring test. So, it must be fun enough to waste time to figure it out.</p>\n<p>It actually has fun. You should find the relationship with the Maxline and Maxwordperline.</p>\n<p>If you read my code, you will understand quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">bool checkIsOk(int pageHeight, int pageWidth, int fontSize, vector&lt;int&gt; wordNums, int maxPageNums) &#123;</div><div class=\"line\">    int currentWordsPerLine = (int)(pageWidth / fontSize);</div><div class=\"line\">    int currentLinesPerPage = (int)(pageHeight / fontSize);</div><div class=\"line\"></div><div class=\"line\">    int totalLineNum = currentLinesPerPage * maxPageNums;</div><div class=\"line\">    for (int i = 0; i &lt; (int)wordNums.size(); i++) &#123;</div><div class=\"line\">        if (totalLineNum &lt; 0) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int currentLineNum = 1;</div><div class=\"line\">        while (wordNums[i] - (currentWordsPerLine * currentLineNum) &gt; 0) &#123;</div><div class=\"line\">            currentLineNum++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        totalLineNum = totalLineNum - currentLineNum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return totalLineNum &gt;= 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main() &#123;</div><div class=\"line\">    int TASKS;</div><div class=\"line\">    int N, P, W, H;</div><div class=\"line\">    while (cin &gt;&gt; TASKS) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; TASKS; i++) &#123;</div><div class=\"line\">            cin &gt;&gt; N &gt;&gt; P &gt;&gt; W &gt;&gt; H;</div><div class=\"line\">            vector&lt;int&gt; wordNums(N);</div><div class=\"line\">            for (int idx = 0; idx &lt; N; idx++) &#123;</div><div class=\"line\">                cin &gt;&gt; wordNums[idx];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int low = 1, high = W, res = -1;</div><div class=\"line\">            while (low &lt;= high) &#123;</div><div class=\"line\">                int mid = (low + high) / 2;</div><div class=\"line\">                if (checkIsOk(H, W, mid, wordNums, P)) &#123;</div><div class=\"line\">                    res = max(res, mid);</div><div class=\"line\">                    low = mid + 1;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    high = mid - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p><strong>Description:</strong></p>\n<p>Steven loves reading book on his phone. The book he reads now consists of N paragraphs and the i-th paragraph contains ai characters.</p>\n<p>Steven wants to make the characters easier to read, so he decides to increase the font size of characters. But the size of Steven’s phone screen is limited. Its width is W and height is H. As a result, if the font size of characters is S then it can only show ⌊W / S⌋ characters in a line and ⌊H / S⌋ lines in a page. (⌊x⌋ is the largest integer no more than x)</p>\n<p>So here’s the question, if Steven wants to control the number of pages no more than P, what’s the maximum font size he can set? Note that paragraphs must start in a new line and there is no empty line between paragraphs.</p>\n<p><strong>Input:</strong></p>\n<p>Input may contain multiple test cases.</p>\n<p>The first line is an integer TASKS, representing the number of test cases.</p>\n<p>For each test case, the first line contains four integers N, P, W and H, as described above.</p>\n<p>The second line contains N integers a1, a2, … aN, indicating the number of characters in each paragraph.</p>\n<p>For all test cases,</p>\n<ul>\n<li>1 &lt;= N &lt;= 103,</li>\n<li>1 &lt;= W, H, ai &lt;= 103,</li>\n<li>1 &lt;= P &lt;= 106,</li>\n</ul>\n<p>There is always a way to control the number of pages no more than P.</p>\n<p><strong>Output</strong></p>\n<p>For each testcase, output a line with an integer Ans, indicating the maximum font size Steven can set.</p>","more":"<ul>\n<li><p>Example Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">2</div><div class=\"line\">1 10 4 3</div><div class=\"line\">10</div><div class=\"line\">2 10 4 3</div><div class=\"line\">10 103</div></pre></td></tr></table></figure>\n</li>\n<li><p>Example Output:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">3</div><div class=\"line\">2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<!--more-->\n<p>This is one problem from hihocode, it is No. 1288, and it is also one of the microsoft hiring test. So, it must be fun enough to waste time to figure it out.</p>\n<p>It actually has fun. You should find the relationship with the Maxline and Maxwordperline.</p>\n<p>If you read my code, you will understand quickly.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">bool checkIsOk(int pageHeight, int pageWidth, int fontSize, vector&lt;int&gt; wordNums, int maxPageNums) &#123;</div><div class=\"line\">    int currentWordsPerLine = (int)(pageWidth / fontSize);</div><div class=\"line\">    int currentLinesPerPage = (int)(pageHeight / fontSize);</div><div class=\"line\"></div><div class=\"line\">    int totalLineNum = currentLinesPerPage * maxPageNums;</div><div class=\"line\">    for (int i = 0; i &lt; (int)wordNums.size(); i++) &#123;</div><div class=\"line\">        if (totalLineNum &lt; 0) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int currentLineNum = 1;</div><div class=\"line\">        while (wordNums[i] - (currentWordsPerLine * currentLineNum) &gt; 0) &#123;</div><div class=\"line\">            currentLineNum++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        totalLineNum = totalLineNum - currentLineNum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return totalLineNum &gt;= 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main() &#123;</div><div class=\"line\">    int TASKS;</div><div class=\"line\">    int N, P, W, H;</div><div class=\"line\">    while (cin &gt;&gt; TASKS) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; TASKS; i++) &#123;</div><div class=\"line\">            cin &gt;&gt; N &gt;&gt; P &gt;&gt; W &gt;&gt; H;</div><div class=\"line\">            vector&lt;int&gt; wordNums(N);</div><div class=\"line\">            for (int idx = 0; idx &lt; N; idx++) &#123;</div><div class=\"line\">                cin &gt;&gt; wordNums[idx];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int low = 1, high = W, res = -1;</div><div class=\"line\">            while (low &lt;= high) &#123;</div><div class=\"line\">                int mid = (low + high) / 2;</div><div class=\"line\">                if (checkIsOk(H, W, mid, wordNums, P)) &#123;</div><div class=\"line\">                    res = max(res, mid);</div><div class=\"line\">                    low = mid + 1;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    high = mid - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Fraction to Recurring Decimal","date":"2017-04-18T14:02:48.000Z","_content":"\n> Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\n>\n> If the fractional part is repeating, enclose the repeating part in parentheses.\n>\n> For example,\n>```\nGiven numerator = 1, denominator = 2, return \"0.5\".\nGiven numerator = 2, denominator = 1, return \"2\".\nGiven numerator = 2, denominator = 3, return \"0.(6)\".\n```\n\n<!--more-->\n\nThis is Leetcode No.166. And I think it is a pure math problem.\n\nAt first I write code like below:\n\n```\nusing namespace std;\n\nclass Solution {\n\n    public:\n        string fractionToDecimal(int numerator, int denominator) {\n            int integer = numerator > denominator ? numerator / denominator : 0;\n            int remain = numerator % denominator;\n\n            string res = to_string(integer);\n            if (remain == 0) {\n                return res;\n            }\n\n            res = res + \".\";\n\n            vector<int> nums;\n            map<int, int> DP;\n\n            while (DP.find(remain) == DP.end() && remain != 0) {\n                nums.push_back(remain);\n                DP.insert(pair<int, int>(remain, remain * 10 / denominator));\n                remain = (remain * 10) % denominator;\n            }\n\n            string decimal = \"\"; int idx = 0;\n            for (; idx < (int)nums.size() && remain != nums[idx]; idx++) {\n                decimal = decimal + to_string(DP.find(nums[idx])->second);\n            }\n            if (idx != (int)nums.size()) {\n                decimal += \"(\";\n                for (int idy = idx; idy < (int)nums.size(); idy++) {\n                    decimal = decimal + to_string(DP.find(nums[idy])->second);\n                }\n                decimal += \")\";\n            }\n            return res + decimal;\n        }\n};\n```\n\nBut it gets WA when the case is `-2147483648, -1` with ERROR: *division of -2147483648 by -1 cannot be represented in type 'int'*.\n\nSo, I change the number in the program from int to long. And it must be drawn attention that you must be concerned about the corner cases:\n+ numerator < 0 and denominator > 0\n+ numerator > 0 and denominator > 0\n+ numerator < 0 and denominator < 0\n+ numerator > 0 and denominator < 0\n+ numerator > 0 and denominator = 0\n+ numerator = 0 and denominator = 0\n\n```\nusing namespace std;\n\nclass Solution {\n\n    public:\n        string fractionToDecimal(int numerator, int denominator) {\n            long integer = abs((long)numerator / (long)denominator) > 0 ? abs((long)numerator / (long)denominator) : 0;\n            long remain = abs((long)numerator % (long)denominator);\n\n            string res = to_string(integer);\n            if ((long long)numerator * (long long)denominator < 0) {\n                res = \"-\" + res;\n            }\n\n            if (remain == 0) {\n                return res;\n            }\n\n            res = res + \".\";\n\n            vector<long> nums;\n            map<long, long> DP;\n\n            while (DP.find(remain) == DP.end() && remain != 0) {\n                nums.push_back(remain);\n                DP.insert(pair<long, long>(remain, abs(remain * 10 / denominator)));\n                remain = abs((remain * 10) % denominator);\n            }\n\n            string decimal = \"\"; long idx = 0;\n            for (; idx < (long)nums.size() && remain != nums[idx]; idx++) {\n                decimal = decimal + to_string(DP.find(nums[idx])->second);\n            }\n            if (idx != (long)nums.size()) {\n                decimal += \"(\";\n                for (long idy = idx; idy < (long)nums.size(); idy++) {\n                    decimal = decimal + to_string(DP.find(nums[idy])->second);\n                }\n                decimal += \")\";\n            }\n            return res + decimal;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/FractiontoRecurringDecimal.md","raw":"---\ntitle: Fraction to Recurring Decimal\ndate: 2017-04-18 22:02:48\ntags:\n    - Hash Table\n    - Math\n---\n\n> Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\n>\n> If the fractional part is repeating, enclose the repeating part in parentheses.\n>\n> For example,\n>```\nGiven numerator = 1, denominator = 2, return \"0.5\".\nGiven numerator = 2, denominator = 1, return \"2\".\nGiven numerator = 2, denominator = 3, return \"0.(6)\".\n```\n\n<!--more-->\n\nThis is Leetcode No.166. And I think it is a pure math problem.\n\nAt first I write code like below:\n\n```\nusing namespace std;\n\nclass Solution {\n\n    public:\n        string fractionToDecimal(int numerator, int denominator) {\n            int integer = numerator > denominator ? numerator / denominator : 0;\n            int remain = numerator % denominator;\n\n            string res = to_string(integer);\n            if (remain == 0) {\n                return res;\n            }\n\n            res = res + \".\";\n\n            vector<int> nums;\n            map<int, int> DP;\n\n            while (DP.find(remain) == DP.end() && remain != 0) {\n                nums.push_back(remain);\n                DP.insert(pair<int, int>(remain, remain * 10 / denominator));\n                remain = (remain * 10) % denominator;\n            }\n\n            string decimal = \"\"; int idx = 0;\n            for (; idx < (int)nums.size() && remain != nums[idx]; idx++) {\n                decimal = decimal + to_string(DP.find(nums[idx])->second);\n            }\n            if (idx != (int)nums.size()) {\n                decimal += \"(\";\n                for (int idy = idx; idy < (int)nums.size(); idy++) {\n                    decimal = decimal + to_string(DP.find(nums[idy])->second);\n                }\n                decimal += \")\";\n            }\n            return res + decimal;\n        }\n};\n```\n\nBut it gets WA when the case is `-2147483648, -1` with ERROR: *division of -2147483648 by -1 cannot be represented in type 'int'*.\n\nSo, I change the number in the program from int to long. And it must be drawn attention that you must be concerned about the corner cases:\n+ numerator < 0 and denominator > 0\n+ numerator > 0 and denominator > 0\n+ numerator < 0 and denominator < 0\n+ numerator > 0 and denominator < 0\n+ numerator > 0 and denominator = 0\n+ numerator = 0 and denominator = 0\n\n```\nusing namespace std;\n\nclass Solution {\n\n    public:\n        string fractionToDecimal(int numerator, int denominator) {\n            long integer = abs((long)numerator / (long)denominator) > 0 ? abs((long)numerator / (long)denominator) : 0;\n            long remain = abs((long)numerator % (long)denominator);\n\n            string res = to_string(integer);\n            if ((long long)numerator * (long long)denominator < 0) {\n                res = \"-\" + res;\n            }\n\n            if (remain == 0) {\n                return res;\n            }\n\n            res = res + \".\";\n\n            vector<long> nums;\n            map<long, long> DP;\n\n            while (DP.find(remain) == DP.end() && remain != 0) {\n                nums.push_back(remain);\n                DP.insert(pair<long, long>(remain, abs(remain * 10 / denominator)));\n                remain = abs((remain * 10) % denominator);\n            }\n\n            string decimal = \"\"; long idx = 0;\n            for (; idx < (long)nums.size() && remain != nums[idx]; idx++) {\n                decimal = decimal + to_string(DP.find(nums[idx])->second);\n            }\n            if (idx != (long)nums.size()) {\n                decimal += \"(\";\n                for (long idy = idx; idy < (long)nums.size(); idy++) {\n                    decimal = decimal + to_string(DP.find(nums[idy])->second);\n                }\n                decimal += \")\";\n            }\n            return res + decimal;\n        }\n};\n```\n\nIt gets AC.\n","slug":"FractiontoRecurringDecimal","published":1,"updated":"2017-04-18T14:36:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwx0022x2f4v4p41tsz","content":"<blockquote>\n<p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>\n<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\n<p>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given numerator = 1, denominator = 2, return &quot;0.5&quot;.</div><div class=\"line\">Given numerator = 2, denominator = 1, return &quot;2&quot;.</div><div class=\"line\">Given numerator = 2, denominator = 3, return &quot;0.(6)&quot;.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.166. And I think it is a pure math problem.</p>\n<p>At first I write code like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        string fractionToDecimal(int numerator, int denominator) &#123;</div><div class=\"line\">            int integer = numerator &gt; denominator ? numerator / denominator : 0;</div><div class=\"line\">            int remain = numerator % denominator;</div><div class=\"line\"></div><div class=\"line\">            string res = to_string(integer);</div><div class=\"line\">            if (remain == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            res = res + &quot;.&quot;;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; nums;</div><div class=\"line\">            map&lt;int, int&gt; DP;</div><div class=\"line\"></div><div class=\"line\">            while (DP.find(remain) == DP.end() &amp;&amp; remain != 0) &#123;</div><div class=\"line\">                nums.push_back(remain);</div><div class=\"line\">                DP.insert(pair&lt;int, int&gt;(remain, remain * 10 / denominator));</div><div class=\"line\">                remain = (remain * 10) % denominator;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            string decimal = &quot;&quot;; int idx = 0;</div><div class=\"line\">            for (; idx &lt; (int)nums.size() &amp;&amp; remain != nums[idx]; idx++) &#123;</div><div class=\"line\">                decimal = decimal + to_string(DP.find(nums[idx])-&gt;second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx != (int)nums.size()) &#123;</div><div class=\"line\">                decimal += &quot;(&quot;;</div><div class=\"line\">                for (int idy = idx; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    decimal = decimal + to_string(DP.find(nums[idy])-&gt;second);</div><div class=\"line\">                &#125;</div><div class=\"line\">                decimal += &quot;)&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res + decimal;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets WA when the case is <code>-2147483648, -1</code> with ERROR: <em>division of -2147483648 by -1 cannot be represented in type ‘int’</em>.</p>\n<p>So, I change the number in the program from int to long. And it must be drawn attention that you must be concerned about the corner cases:</p>\n<ul>\n<li>numerator &lt; 0 and denominator &gt; 0</li>\n<li>numerator &gt; 0 and denominator &gt; 0</li>\n<li>numerator &lt; 0 and denominator &lt; 0</li>\n<li>numerator &gt; 0 and denominator &lt; 0</li>\n<li>numerator &gt; 0 and denominator = 0</li>\n<li>numerator = 0 and denominator = 0</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        string fractionToDecimal(int numerator, int denominator) &#123;</div><div class=\"line\">            long integer = abs((long)numerator / (long)denominator) &gt; 0 ? abs((long)numerator / (long)denominator) : 0;</div><div class=\"line\">            long remain = abs((long)numerator % (long)denominator);</div><div class=\"line\"></div><div class=\"line\">            string res = to_string(integer);</div><div class=\"line\">            if ((long long)numerator * (long long)denominator &lt; 0) &#123;</div><div class=\"line\">                res = &quot;-&quot; + res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (remain == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            res = res + &quot;.&quot;;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;long&gt; nums;</div><div class=\"line\">            map&lt;long, long&gt; DP;</div><div class=\"line\"></div><div class=\"line\">            while (DP.find(remain) == DP.end() &amp;&amp; remain != 0) &#123;</div><div class=\"line\">                nums.push_back(remain);</div><div class=\"line\">                DP.insert(pair&lt;long, long&gt;(remain, abs(remain * 10 / denominator)));</div><div class=\"line\">                remain = abs((remain * 10) % denominator);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            string decimal = &quot;&quot;; long idx = 0;</div><div class=\"line\">            for (; idx &lt; (long)nums.size() &amp;&amp; remain != nums[idx]; idx++) &#123;</div><div class=\"line\">                decimal = decimal + to_string(DP.find(nums[idx])-&gt;second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx != (long)nums.size()) &#123;</div><div class=\"line\">                decimal += &quot;(&quot;;</div><div class=\"line\">                for (long idy = idx; idy &lt; (long)nums.size(); idy++) &#123;</div><div class=\"line\">                    decimal = decimal + to_string(DP.find(nums[idy])-&gt;second);</div><div class=\"line\">                &#125;</div><div class=\"line\">                decimal += &quot;)&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res + decimal;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>\n<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\n<p>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given numerator = 1, denominator = 2, return &quot;0.5&quot;.</div><div class=\"line\">Given numerator = 2, denominator = 1, return &quot;2&quot;.</div><div class=\"line\">Given numerator = 2, denominator = 3, return &quot;0.(6)&quot;.</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.166. And I think it is a pure math problem.</p>\n<p>At first I write code like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        string fractionToDecimal(int numerator, int denominator) &#123;</div><div class=\"line\">            int integer = numerator &gt; denominator ? numerator / denominator : 0;</div><div class=\"line\">            int remain = numerator % denominator;</div><div class=\"line\"></div><div class=\"line\">            string res = to_string(integer);</div><div class=\"line\">            if (remain == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            res = res + &quot;.&quot;;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; nums;</div><div class=\"line\">            map&lt;int, int&gt; DP;</div><div class=\"line\"></div><div class=\"line\">            while (DP.find(remain) == DP.end() &amp;&amp; remain != 0) &#123;</div><div class=\"line\">                nums.push_back(remain);</div><div class=\"line\">                DP.insert(pair&lt;int, int&gt;(remain, remain * 10 / denominator));</div><div class=\"line\">                remain = (remain * 10) % denominator;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            string decimal = &quot;&quot;; int idx = 0;</div><div class=\"line\">            for (; idx &lt; (int)nums.size() &amp;&amp; remain != nums[idx]; idx++) &#123;</div><div class=\"line\">                decimal = decimal + to_string(DP.find(nums[idx])-&gt;second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx != (int)nums.size()) &#123;</div><div class=\"line\">                decimal += &quot;(&quot;;</div><div class=\"line\">                for (int idy = idx; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    decimal = decimal + to_string(DP.find(nums[idy])-&gt;second);</div><div class=\"line\">                &#125;</div><div class=\"line\">                decimal += &quot;)&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res + decimal;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets WA when the case is <code>-2147483648, -1</code> with ERROR: <em>division of -2147483648 by -1 cannot be represented in type ‘int’</em>.</p>\n<p>So, I change the number in the program from int to long. And it must be drawn attention that you must be concerned about the corner cases:</p>\n<ul>\n<li>numerator &lt; 0 and denominator &gt; 0</li>\n<li>numerator &gt; 0 and denominator &gt; 0</li>\n<li>numerator &lt; 0 and denominator &lt; 0</li>\n<li>numerator &gt; 0 and denominator &lt; 0</li>\n<li>numerator &gt; 0 and denominator = 0</li>\n<li>numerator = 0 and denominator = 0</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        string fractionToDecimal(int numerator, int denominator) &#123;</div><div class=\"line\">            long integer = abs((long)numerator / (long)denominator) &gt; 0 ? abs((long)numerator / (long)denominator) : 0;</div><div class=\"line\">            long remain = abs((long)numerator % (long)denominator);</div><div class=\"line\"></div><div class=\"line\">            string res = to_string(integer);</div><div class=\"line\">            if ((long long)numerator * (long long)denominator &lt; 0) &#123;</div><div class=\"line\">                res = &quot;-&quot; + res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (remain == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            res = res + &quot;.&quot;;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;long&gt; nums;</div><div class=\"line\">            map&lt;long, long&gt; DP;</div><div class=\"line\"></div><div class=\"line\">            while (DP.find(remain) == DP.end() &amp;&amp; remain != 0) &#123;</div><div class=\"line\">                nums.push_back(remain);</div><div class=\"line\">                DP.insert(pair&lt;long, long&gt;(remain, abs(remain * 10 / denominator)));</div><div class=\"line\">                remain = abs((remain * 10) % denominator);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            string decimal = &quot;&quot;; long idx = 0;</div><div class=\"line\">            for (; idx &lt; (long)nums.size() &amp;&amp; remain != nums[idx]; idx++) &#123;</div><div class=\"line\">                decimal = decimal + to_string(DP.find(nums[idx])-&gt;second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx != (long)nums.size()) &#123;</div><div class=\"line\">                decimal += &quot;(&quot;;</div><div class=\"line\">                for (long idy = idx; idy &lt; (long)nums.size(); idy++) &#123;</div><div class=\"line\">                    decimal = decimal + to_string(DP.find(nums[idy])-&gt;second);</div><div class=\"line\">                &#125;</div><div class=\"line\">                decimal += &quot;)&quot;;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res + decimal;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Friend Circles","date":"2017-04-03T14:51:21.000Z","_content":"\n\n> There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.\n>\n> Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.\n>\n> Example 1:\n> ```\nInput:\n[\n    [1,1,0],\n    [1,1,0],\n    [0,0,1]\n]\nOutput: 2\n```\n> Explanation:\n> + The 0th and 1st students are direct friends, so they are in a friend circle.\n> + The 2nd student himself is in a friend circle. So return 2.\n>\n> Example 2:\n> ```\nInput:\n[\n    [1,1,0],\n    [1,1,1],\n    [0,1,1]\n]\nOutput: 1\n```\n> Explanation:\n> + The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends,\n> + So the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.\n<!--more-->\n>\n> Note:\n> + N is in range [1,200].\n> + M[i][i] = 1 for all students.\n> + If M[i][j] = 1, then M[j][i] = 1.\n\nIt is Leetcode No.547 and is a simple problem about Graph. After reading the problem description. You can understand that the solution is to find how many circles in the Graph.\n\nAt first I think the indirect friends means only your friend's friend. So, this makes me a little misunderstanding.\n\nBut once you know what you should do to solve this problem. The solution is about to come.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int findCircleNum(vector<vector<int> >& M) {\n            vector<bool> visited(M.size(), false);\n\n            int res = 0;\n            for (int uid = 0; uid < (int)M.size(); uid++) {\n                res = res + dfs(uid, M, visited);\n            }\n\n            return res;\n        }\n\n        bool dfs(int uid, vector<vector<int> > &M, vector<bool> &visited) {\n            if (visited[uid] == true) {\n                return false;\n            }\n\n            visited[uid] = true;\n            for (int fid = 0; fid < (int)M.size(); fid++) {\n                if (M[fid][uid] == 1) {\n                    dfs(fid, M, visited);\n                }\n            }\n            return true;\n        }\n};\n```\n\nA really easy problem. It gets AC.\n","source":"_posts/FriendCircles.md","raw":"---\ntitle: Friend Circles\ndate: 2017-04-03 22:51:21\ntags:\n    - Graph\n    - Depth-first Search\n---\n\n\n> There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.\n>\n> Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.\n>\n> Example 1:\n> ```\nInput:\n[\n    [1,1,0],\n    [1,1,0],\n    [0,0,1]\n]\nOutput: 2\n```\n> Explanation:\n> + The 0th and 1st students are direct friends, so they are in a friend circle.\n> + The 2nd student himself is in a friend circle. So return 2.\n>\n> Example 2:\n> ```\nInput:\n[\n    [1,1,0],\n    [1,1,1],\n    [0,1,1]\n]\nOutput: 1\n```\n> Explanation:\n> + The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends,\n> + So the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.\n<!--more-->\n>\n> Note:\n> + N is in range [1,200].\n> + M[i][i] = 1 for all students.\n> + If M[i][j] = 1, then M[j][i] = 1.\n\nIt is Leetcode No.547 and is a simple problem about Graph. After reading the problem description. You can understand that the solution is to find how many circles in the Graph.\n\nAt first I think the indirect friends means only your friend's friend. So, this makes me a little misunderstanding.\n\nBut once you know what you should do to solve this problem. The solution is about to come.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int findCircleNum(vector<vector<int> >& M) {\n            vector<bool> visited(M.size(), false);\n\n            int res = 0;\n            for (int uid = 0; uid < (int)M.size(); uid++) {\n                res = res + dfs(uid, M, visited);\n            }\n\n            return res;\n        }\n\n        bool dfs(int uid, vector<vector<int> > &M, vector<bool> &visited) {\n            if (visited[uid] == true) {\n                return false;\n            }\n\n            visited[uid] = true;\n            for (int fid = 0; fid < (int)M.size(); fid++) {\n                if (M[fid][uid] == 1) {\n                    dfs(fid, M, visited);\n                }\n            }\n            return true;\n        }\n};\n```\n\nA really easy problem. It gets AC.\n","slug":"FriendCircles","published":1,"updated":"2017-04-03T15:09:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwy0024x2f4if8y7zze","content":"<blockquote>\n<p>There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.</p>\n<p>Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [1,1,0],</div><div class=\"line\">    [1,1,0],</div><div class=\"line\">    [0,0,1]</div><div class=\"line\">]</div><div class=\"line\">Output: 2</div></pre></td></tr></table></figure></p>\n<p>Explanation:</p>\n<ul>\n<li>The 0th and 1st students are direct friends, so they are in a friend circle.</li>\n<li>The 2nd student himself is in a friend circle. So return 2.</li>\n</ul>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [1,1,0],</div><div class=\"line\">    [1,1,1],</div><div class=\"line\">    [0,1,1]</div><div class=\"line\">]</div><div class=\"line\">Output: 1</div></pre></td></tr></table></figure></p>\n<p>Explanation:</p>\n<ul>\n<li>The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends,</li>\n<li>So the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.<a id=\"more\"></a>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>N is in range [1,200].</li>\n<li>M[i][i] = 1 for all students.</li>\n<li>If M[i][j] = 1, then M[j][i] = 1.</li>\n</ul>\n</blockquote>\n<p>It is Leetcode No.547 and is a simple problem about Graph. After reading the problem description. You can understand that the solution is to find how many circles in the Graph.</p>\n<p>At first I think the indirect friends means only your friend’s friend. So, this makes me a little misunderstanding.</p>\n<p>But once you know what you should do to solve this problem. The solution is about to come.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findCircleNum(vector&lt;vector&lt;int&gt; &gt;&amp; M) &#123;</div><div class=\"line\">            vector&lt;bool&gt; visited(M.size(), false);</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int uid = 0; uid &lt; (int)M.size(); uid++) &#123;</div><div class=\"line\">                res = res + dfs(uid, M, visited);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool dfs(int uid, vector&lt;vector&lt;int&gt; &gt; &amp;M, vector&lt;bool&gt; &amp;visited) &#123;</div><div class=\"line\">            if (visited[uid] == true) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            visited[uid] = true;</div><div class=\"line\">            for (int fid = 0; fid &lt; (int)M.size(); fid++) &#123;</div><div class=\"line\">                if (M[fid][uid] == 1) &#123;</div><div class=\"line\">                    dfs(fid, M, visited);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>A really easy problem. It gets AC.</p>\n","excerpt":"<blockquote>\n<p>There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.</p>\n<p>Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [1,1,0],</div><div class=\"line\">    [1,1,0],</div><div class=\"line\">    [0,0,1]</div><div class=\"line\">]</div><div class=\"line\">Output: 2</div></pre></td></tr></table></figure></p>\n<p>Explanation:</p>\n<ul>\n<li>The 0th and 1st students are direct friends, so they are in a friend circle.</li>\n<li>The 2nd student himself is in a friend circle. So return 2.</li>\n</ul>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [1,1,0],</div><div class=\"line\">    [1,1,1],</div><div class=\"line\">    [0,1,1]</div><div class=\"line\">]</div><div class=\"line\">Output: 1</div></pre></td></tr></table></figure></p>\n<p>Explanation:</p>\n<ul>\n<li>The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends,</li>\n<li>So the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.","more":"</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>N is in range [1,200].</li>\n<li>M[i][i] = 1 for all students.</li>\n<li>If M[i][j] = 1, then M[j][i] = 1.</li>\n</ul>\n</blockquote>\n<p>It is Leetcode No.547 and is a simple problem about Graph. After reading the problem description. You can understand that the solution is to find how many circles in the Graph.</p>\n<p>At first I think the indirect friends means only your friend’s friend. So, this makes me a little misunderstanding.</p>\n<p>But once you know what you should do to solve this problem. The solution is about to come.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findCircleNum(vector&lt;vector&lt;int&gt; &gt;&amp; M) &#123;</div><div class=\"line\">            vector&lt;bool&gt; visited(M.size(), false);</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int uid = 0; uid &lt; (int)M.size(); uid++) &#123;</div><div class=\"line\">                res = res + dfs(uid, M, visited);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool dfs(int uid, vector&lt;vector&lt;int&gt; &gt; &amp;M, vector&lt;bool&gt; &amp;visited) &#123;</div><div class=\"line\">            if (visited[uid] == true) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            visited[uid] = true;</div><div class=\"line\">            for (int fid = 0; fid &lt; (int)M.size(); fid++) &#123;</div><div class=\"line\">                if (M[fid][uid] == 1) &#123;</div><div class=\"line\">                    dfs(fid, M, visited);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>A really easy problem. It gets AC.</p>"},{"title":"Group Anagrams","date":"2017-01-10T06:07:57.000Z","_content":"\n> Given an array of strings, group anagrams together.\n>\n> For example, given: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n> Return:\n> ```\n[\n    [\"ate\", \"eat\",\"tea\"],\n    [\"nat\",\"tan\"],\n    [\"bat\"]\n]\n```\n> Note: All inputs will be in lower-case.\n\n<!--more-->\n\nThis is Leetcode 49, what a easy problem. We can quickly figure out two method:\n\nThe first one is:\n> 1. choose one string as the standard one.\n> 2. for each to check if this one has the same chars as the standard.\n> 3. if same, than, mark it has been used, and store it to the result.\n\nThe time complex of this method is O(n^2*m), m is dependent on the length of the string. It's is not a fast method, but it uses the least memory.\n\nThe second one is to use the map or hash map to help.\n> 1. for each to count its structure. for example, tae can be descriped as '1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z'\n> 2. then make the key to the map and check each word which has the same structure.\n\nThe time copolex of this method is O(n*m).\n\nSo, I use the second one to write the result code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<string> > groupAnagrams(vector<string>& strs) {\n            vector<string> keys;\n            map<string, vector<string> > retMap;\n            for (int i = 0; i < (int)strs.size(); i++) {\n                int chars[26] = {0};\n                for (int j = 0; j < (int)strs[i].length(); j++) {\n                    chars[strs[i][j] - 'a']++;\n                }\n                string currentKey = \"\";\n                for (int j = 0; j < 26; j++) {\n                    currentKey = currentKey + (char)('0' + chars[j]);\n                    currentKey = currentKey + (char)('a' + j);\n                }\n\n                if (retMap.find(currentKey) != retMap.end()) {\n                    retMap[currentKey].push_back(strs[i]);\n                } else {\n                    vector<string> currentValue;\n                    currentValue.push_back(strs[i]);\n                    retMap.insert(pair<string, vector<string> >(currentKey, currentValue));\n                }\n            }\n\n            vector<vector<string> > res;\n            for (pair<string, vector<string> > values: retMap) {\n                res.push_back(values.second);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/GroupAnagrams.md","raw":"---\ntitle: Group Anagrams\ndate: 2017-01-10 14:07:57\ntags:\n    - Hash Table\n    - String\n---\n\n> Given an array of strings, group anagrams together.\n>\n> For example, given: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n> Return:\n> ```\n[\n    [\"ate\", \"eat\",\"tea\"],\n    [\"nat\",\"tan\"],\n    [\"bat\"]\n]\n```\n> Note: All inputs will be in lower-case.\n\n<!--more-->\n\nThis is Leetcode 49, what a easy problem. We can quickly figure out two method:\n\nThe first one is:\n> 1. choose one string as the standard one.\n> 2. for each to check if this one has the same chars as the standard.\n> 3. if same, than, mark it has been used, and store it to the result.\n\nThe time complex of this method is O(n^2*m), m is dependent on the length of the string. It's is not a fast method, but it uses the least memory.\n\nThe second one is to use the map or hash map to help.\n> 1. for each to count its structure. for example, tae can be descriped as '1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z'\n> 2. then make the key to the map and check each word which has the same structure.\n\nThe time copolex of this method is O(n*m).\n\nSo, I use the second one to write the result code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<string> > groupAnagrams(vector<string>& strs) {\n            vector<string> keys;\n            map<string, vector<string> > retMap;\n            for (int i = 0; i < (int)strs.size(); i++) {\n                int chars[26] = {0};\n                for (int j = 0; j < (int)strs[i].length(); j++) {\n                    chars[strs[i][j] - 'a']++;\n                }\n                string currentKey = \"\";\n                for (int j = 0; j < 26; j++) {\n                    currentKey = currentKey + (char)('0' + chars[j]);\n                    currentKey = currentKey + (char)('a' + j);\n                }\n\n                if (retMap.find(currentKey) != retMap.end()) {\n                    retMap[currentKey].push_back(strs[i]);\n                } else {\n                    vector<string> currentValue;\n                    currentValue.push_back(strs[i]);\n                    retMap.insert(pair<string, vector<string> >(currentKey, currentValue));\n                }\n            }\n\n            vector<vector<string> > res;\n            for (pair<string, vector<string> > values: retMap) {\n                res.push_back(values.second);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"GroupAnagrams","published":1,"updated":"2017-02-14T07:04:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpwz0027x2f4tn7fty1o","content":"<blockquote>\n<p>Given an array of strings, group anagrams together.</p>\n<p>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Return:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&quot;ate&quot;, &quot;eat&quot;,&quot;tea&quot;],</div><div class=\"line\">    [&quot;nat&quot;,&quot;tan&quot;],</div><div class=\"line\">    [&quot;bat&quot;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Note: All inputs will be in lower-case.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 49, what a easy problem. We can quickly figure out two method:</p>\n<p>The first one is:</p>\n<blockquote>\n<ol>\n<li>choose one string as the standard one.</li>\n<li>for each to check if this one has the same chars as the standard.</li>\n<li>if same, than, mark it has been used, and store it to the result.</li>\n</ol>\n</blockquote>\n<p>The time complex of this method is O(n^2*m), m is dependent on the length of the string. It’s is not a fast method, but it uses the least memory.</p>\n<p>The second one is to use the map or hash map to help.</p>\n<blockquote>\n<ol>\n<li>for each to count its structure. for example, tae can be descriped as ‘1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z’</li>\n<li>then make the key to the map and check each word which has the same structure.</li>\n</ol>\n</blockquote>\n<p>The time copolex of this method is O(n*m).</p>\n<p>So, I use the second one to write the result code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;string&gt; &gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">            vector&lt;string&gt; keys;</div><div class=\"line\">            map&lt;string, vector&lt;string&gt; &gt; retMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                int chars[26] = &#123;0&#125;;</div><div class=\"line\">                for (int j = 0; j &lt; (int)strs[i].length(); j++) &#123;</div><div class=\"line\">                    chars[strs[i][j] - &apos;a&apos;]++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                string currentKey = &quot;&quot;;</div><div class=\"line\">                for (int j = 0; j &lt; 26; j++) &#123;</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;0&apos; + chars[j]);</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;a&apos; + j);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (retMap.find(currentKey) != retMap.end()) &#123;</div><div class=\"line\">                    retMap[currentKey].push_back(strs[i]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    vector&lt;string&gt; currentValue;</div><div class=\"line\">                    currentValue.push_back(strs[i]);</div><div class=\"line\">                    retMap.insert(pair&lt;string, vector&lt;string&gt; &gt;(currentKey, currentValue));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;string&gt; &gt; res;</div><div class=\"line\">            for (pair&lt;string, vector&lt;string&gt; &gt; values: retMap) &#123;</div><div class=\"line\">                res.push_back(values.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an array of strings, group anagrams together.</p>\n<p>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Return:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&quot;ate&quot;, &quot;eat&quot;,&quot;tea&quot;],</div><div class=\"line\">    [&quot;nat&quot;,&quot;tan&quot;],</div><div class=\"line\">    [&quot;bat&quot;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Note: All inputs will be in lower-case.</p>\n</blockquote>","more":"<p>This is Leetcode 49, what a easy problem. We can quickly figure out two method:</p>\n<p>The first one is:</p>\n<blockquote>\n<ol>\n<li>choose one string as the standard one.</li>\n<li>for each to check if this one has the same chars as the standard.</li>\n<li>if same, than, mark it has been used, and store it to the result.</li>\n</ol>\n</blockquote>\n<p>The time complex of this method is O(n^2*m), m is dependent on the length of the string. It’s is not a fast method, but it uses the least memory.</p>\n<p>The second one is to use the map or hash map to help.</p>\n<blockquote>\n<ol>\n<li>for each to count its structure. for example, tae can be descriped as ‘1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z’</li>\n<li>then make the key to the map and check each word which has the same structure.</li>\n</ol>\n</blockquote>\n<p>The time copolex of this method is O(n*m).</p>\n<p>So, I use the second one to write the result code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;string&gt; &gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">            vector&lt;string&gt; keys;</div><div class=\"line\">            map&lt;string, vector&lt;string&gt; &gt; retMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                int chars[26] = &#123;0&#125;;</div><div class=\"line\">                for (int j = 0; j &lt; (int)strs[i].length(); j++) &#123;</div><div class=\"line\">                    chars[strs[i][j] - &apos;a&apos;]++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                string currentKey = &quot;&quot;;</div><div class=\"line\">                for (int j = 0; j &lt; 26; j++) &#123;</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;0&apos; + chars[j]);</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;a&apos; + j);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (retMap.find(currentKey) != retMap.end()) &#123;</div><div class=\"line\">                    retMap[currentKey].push_back(strs[i]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    vector&lt;string&gt; currentValue;</div><div class=\"line\">                    currentValue.push_back(strs[i]);</div><div class=\"line\">                    retMap.insert(pair&lt;string, vector&lt;string&gt; &gt;(currentKey, currentValue));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;string&gt; &gt; res;</div><div class=\"line\">            for (pair&lt;string, vector&lt;string&gt; &gt; values: retMap) &#123;</div><div class=\"line\">                res.push_back(values.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Heaters","date":"2017-01-04T05:46:25.000Z","_content":"\n> Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.\n>\n> So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.\n>\n> Note:\n>\n> + Numbers of houses and heaters you are given are non-negative and will not exceed 25000.\n> + Positions of houses and heaters you are given are non-negative and will not exceed 10^9.\n> + As long as a house is in the heaters' warm radius range, it can be warmed.\n> + All the heaters follow your radius standard and the warm radius will the same.\n>\n> Example 1:\n>\n> Input: [1,2,3],[2]\n> Output: 1\n> Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n>\n> Example 2:\n>\n> Input: [1,2,3,4],[1,4]\n> Output: 1\n> Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n\n<!-- more -->\n\nThis is Leetcode 475. As it's descripted, we can quickly find a solution. Picture this:\n\n\n```\n          h1   h2        h3\n           |    |         |\n......................................\n```\n\nIf we find the min value of the radius between every two heaters, and find the max one, which will be the result.\n\nAnd it's time complex is O(n*m), n is the num of the houses and m is the num of heaters.\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int idx;\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\n        sort(houses.begin(), houses.end());\n        sort(heaters.begin(), heaters.end());\n\n        int res = INT_MIN;\n        idx = 0;\n        for (int i = 0; i < (int)heaters.size(); i++) {\n            if (i == 0) {\n                res = max(res, findMinRadius(houses, -1, heaters[i]));\n            } else if (i == (int)heaters.size()) {\n                res = max(res, findMinRadius(houses, heaters[i - 1], -1));\n            } else {\n                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));\n            }\n            std::cout << res << std::endl;\n        }\n        return res;\n    }\n\n    int findMinRadius(vector<int> houses, int heater1, int heater2) {\n        if (heater1 == -1) { // means the first one\n            while (houses[idx] <= heater2) { idx++; }\n            return heater2 - houses[0];\n        } else if (heater2 == -1) { // means the last one\n            while (idx < (int)houses.size()) { idx++; }\n            return houses[idx - 1] - heater1;\n        } else {\n            int minRadius = INT_MAX;\n            for (int i = idx; houses[i] < heater2; i++) {\n                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);\n                // if there are (2n-1) houses, we need to use the mid one\n                // if there are (2n) houses, we should use the the mid two\n                // here is hard to decide which to use as the standard\n            }\n            return minRadius;\n        }\n    }\n};\n```\n\nHowever, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.\n\n+ For each house, find its position between those heaters (thus we need the heaters array to be sorted).\n+ Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.\n+ Get MAX value among distances in step 2. It's the answer.\n\nSo, here comes the solution:\n\n```\nclass Solution {\n    public:\n        int findRadius(vector<int>& houses, vector<int>& heaters) {\n            int house_size = houses.size();\n            if (house_size == 0) return 0;\n            sort(heaters.begin(), heaters.end());\n\n            int res = 0;\n            for (auto& c : houses) {\n\n                int idx = Bsearch(heaters, c);\n\n                if (idx == 0) {\n                    res = max(res, heaters[idx] - c);\n                } else if (idx >= (int)heaters.size()) {\n                    res = max(res, c - heaters.back());\n                } else {\n                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));\n                }\n            }\n            return res;\n        }\n\n        int Bsearch(vector<int>& nums, int val) {\n\n            int l = 0, r = nums.size() - 1;\n            while (l <= r) {\n                int mid = l + ((r - l) >> 1);\n                if (nums[mid] == val)\n                    return mid;\n                else if (nums[mid] < val)\n                    l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n            return l;\n        }\n};\n```\n\nAnd it's AC.\n","source":"_posts/Heaters.md","raw":"---\ntitle: Heaters\ndate: 2017-01-04 13:46:25\ntags:\n    - Binary Search\n---\n\n> Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.\n>\n> So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.\n>\n> Note:\n>\n> + Numbers of houses and heaters you are given are non-negative and will not exceed 25000.\n> + Positions of houses and heaters you are given are non-negative and will not exceed 10^9.\n> + As long as a house is in the heaters' warm radius range, it can be warmed.\n> + All the heaters follow your radius standard and the warm radius will the same.\n>\n> Example 1:\n>\n> Input: [1,2,3],[2]\n> Output: 1\n> Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n>\n> Example 2:\n>\n> Input: [1,2,3,4],[1,4]\n> Output: 1\n> Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n\n<!-- more -->\n\nThis is Leetcode 475. As it's descripted, we can quickly find a solution. Picture this:\n\n\n```\n          h1   h2        h3\n           |    |         |\n......................................\n```\n\nIf we find the min value of the radius between every two heaters, and find the max one, which will be the result.\n\nAnd it's time complex is O(n*m), n is the num of the houses and m is the num of heaters.\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int idx;\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\n        sort(houses.begin(), houses.end());\n        sort(heaters.begin(), heaters.end());\n\n        int res = INT_MIN;\n        idx = 0;\n        for (int i = 0; i < (int)heaters.size(); i++) {\n            if (i == 0) {\n                res = max(res, findMinRadius(houses, -1, heaters[i]));\n            } else if (i == (int)heaters.size()) {\n                res = max(res, findMinRadius(houses, heaters[i - 1], -1));\n            } else {\n                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));\n            }\n            std::cout << res << std::endl;\n        }\n        return res;\n    }\n\n    int findMinRadius(vector<int> houses, int heater1, int heater2) {\n        if (heater1 == -1) { // means the first one\n            while (houses[idx] <= heater2) { idx++; }\n            return heater2 - houses[0];\n        } else if (heater2 == -1) { // means the last one\n            while (idx < (int)houses.size()) { idx++; }\n            return houses[idx - 1] - heater1;\n        } else {\n            int minRadius = INT_MAX;\n            for (int i = idx; houses[i] < heater2; i++) {\n                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);\n                // if there are (2n-1) houses, we need to use the mid one\n                // if there are (2n) houses, we should use the the mid two\n                // here is hard to decide which to use as the standard\n            }\n            return minRadius;\n        }\n    }\n};\n```\n\nHowever, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.\n\n+ For each house, find its position between those heaters (thus we need the heaters array to be sorted).\n+ Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.\n+ Get MAX value among distances in step 2. It's the answer.\n\nSo, here comes the solution:\n\n```\nclass Solution {\n    public:\n        int findRadius(vector<int>& houses, vector<int>& heaters) {\n            int house_size = houses.size();\n            if (house_size == 0) return 0;\n            sort(heaters.begin(), heaters.end());\n\n            int res = 0;\n            for (auto& c : houses) {\n\n                int idx = Bsearch(heaters, c);\n\n                if (idx == 0) {\n                    res = max(res, heaters[idx] - c);\n                } else if (idx >= (int)heaters.size()) {\n                    res = max(res, c - heaters.back());\n                } else {\n                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));\n                }\n            }\n            return res;\n        }\n\n        int Bsearch(vector<int>& nums, int val) {\n\n            int l = 0, r = nums.size() - 1;\n            while (l <= r) {\n                int mid = l + ((r - l) >> 1);\n                if (nums[mid] == val)\n                    return mid;\n                else if (nums[mid] < val)\n                    l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n            return l;\n        }\n};\n```\n\nAnd it's AC.\n","slug":"Heaters","published":1,"updated":"2017-01-04T05:27:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpx00029x2f4u2bjj98a","content":"<blockquote>\n<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>\n<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>\n<p>Note:</p>\n<ul>\n<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>\n<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>\n<li>As long as a house is in the heaters’ warm radius range, it can be warmed.</li>\n<li>All the heaters follow your radius standard and the warm radius will the same.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1,2,3],[2]<br>Output: 1<br>Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</p>\n<p>Example 2:</p>\n<p>Input: [1,2,3,4],[1,4]<br>Output: 1<br>Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 475. As it’s descripted, we can quickly find a solution. Picture this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">          h1   h2        h3</div><div class=\"line\">           |    |         |</div><div class=\"line\">......................................</div></pre></td></tr></table></figure>\n<p>If we find the min value of the radius between every two heaters, and find the max one, which will be the result.</p>\n<p>And it’s time complex is O(n*m), n is the num of the houses and m is the num of heaters.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int idx;</div><div class=\"line\">    int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">        sort(houses.begin(), houses.end());</div><div class=\"line\">        sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">        int res = INT_MIN;</div><div class=\"line\">        idx = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)heaters.size(); i++) &#123;</div><div class=\"line\">            if (i == 0) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, -1, heaters[i]));</div><div class=\"line\">            &#125; else if (i == (int)heaters.size()) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], -1));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            std::cout &lt;&lt; res &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int findMinRadius(vector&lt;int&gt; houses, int heater1, int heater2) &#123;</div><div class=\"line\">        if (heater1 == -1) &#123; // means the first one</div><div class=\"line\">            while (houses[idx] &lt;= heater2) &#123; idx++; &#125;</div><div class=\"line\">            return heater2 - houses[0];</div><div class=\"line\">        &#125; else if (heater2 == -1) &#123; // means the last one</div><div class=\"line\">            while (idx &lt; (int)houses.size()) &#123; idx++; &#125;</div><div class=\"line\">            return houses[idx - 1] - heater1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            int minRadius = INT_MAX;</div><div class=\"line\">            for (int i = idx; houses[i] &lt; heater2; i++) &#123;</div><div class=\"line\">                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);</div><div class=\"line\">                // if there are (2n-1) houses, we need to use the mid one</div><div class=\"line\">                // if there are (2n) houses, we should use the the mid two</div><div class=\"line\">                // here is hard to decide which to use as the standard</div><div class=\"line\">            &#125;</div><div class=\"line\">            return minRadius;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.</p>\n<ul>\n<li>For each house, find its position between those heaters (thus we need the heaters array to be sorted).</li>\n<li>Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.</li>\n<li>Get MAX value among distances in step 2. It’s the answer.</li>\n</ul>\n<p>So, here comes the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">            int house_size = houses.size();</div><div class=\"line\">            if (house_size == 0) return 0;</div><div class=\"line\">            sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto&amp; c : houses) &#123;</div><div class=\"line\"></div><div class=\"line\">                int idx = Bsearch(heaters, c);</div><div class=\"line\"></div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    res = max(res, heaters[idx] - c);</div><div class=\"line\">                &#125; else if (idx &gt;= (int)heaters.size()) &#123;</div><div class=\"line\">                    res = max(res, c - heaters.back());</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int Bsearch(vector&lt;int&gt;&amp; nums, int val) &#123;</div><div class=\"line\"></div><div class=\"line\">            int l = 0, r = nums.size() - 1;</div><div class=\"line\">            while (l &lt;= r) &#123;</div><div class=\"line\">                int mid = l + ((r - l) &gt;&gt; 1);</div><div class=\"line\">                if (nums[mid] == val)</div><div class=\"line\">                    return mid;</div><div class=\"line\">                else if (nums[mid] &lt; val)</div><div class=\"line\">                    l = mid + 1;</div><div class=\"line\">                else</div><div class=\"line\">                    r = mid - 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return l;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it’s AC.</p>\n","excerpt":"<blockquote>\n<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>\n<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>\n<p>Note:</p>\n<ul>\n<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>\n<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>\n<li>As long as a house is in the heaters’ warm radius range, it can be warmed.</li>\n<li>All the heaters follow your radius standard and the warm radius will the same.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1,2,3],[2]<br>Output: 1<br>Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</p>\n<p>Example 2:</p>\n<p>Input: [1,2,3,4],[1,4]<br>Output: 1<br>Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</p>\n</blockquote>","more":"<p>This is Leetcode 475. As it’s descripted, we can quickly find a solution. Picture this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">          h1   h2        h3</div><div class=\"line\">           |    |         |</div><div class=\"line\">......................................</div></pre></td></tr></table></figure>\n<p>If we find the min value of the radius between every two heaters, and find the max one, which will be the result.</p>\n<p>And it’s time complex is O(n*m), n is the num of the houses and m is the num of heaters.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int idx;</div><div class=\"line\">    int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">        sort(houses.begin(), houses.end());</div><div class=\"line\">        sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">        int res = INT_MIN;</div><div class=\"line\">        idx = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)heaters.size(); i++) &#123;</div><div class=\"line\">            if (i == 0) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, -1, heaters[i]));</div><div class=\"line\">            &#125; else if (i == (int)heaters.size()) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], -1));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            std::cout &lt;&lt; res &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int findMinRadius(vector&lt;int&gt; houses, int heater1, int heater2) &#123;</div><div class=\"line\">        if (heater1 == -1) &#123; // means the first one</div><div class=\"line\">            while (houses[idx] &lt;= heater2) &#123; idx++; &#125;</div><div class=\"line\">            return heater2 - houses[0];</div><div class=\"line\">        &#125; else if (heater2 == -1) &#123; // means the last one</div><div class=\"line\">            while (idx &lt; (int)houses.size()) &#123; idx++; &#125;</div><div class=\"line\">            return houses[idx - 1] - heater1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            int minRadius = INT_MAX;</div><div class=\"line\">            for (int i = idx; houses[i] &lt; heater2; i++) &#123;</div><div class=\"line\">                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);</div><div class=\"line\">                // if there are (2n-1) houses, we need to use the mid one</div><div class=\"line\">                // if there are (2n) houses, we should use the the mid two</div><div class=\"line\">                // here is hard to decide which to use as the standard</div><div class=\"line\">            &#125;</div><div class=\"line\">            return minRadius;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.</p>\n<ul>\n<li>For each house, find its position between those heaters (thus we need the heaters array to be sorted).</li>\n<li>Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.</li>\n<li>Get MAX value among distances in step 2. It’s the answer.</li>\n</ul>\n<p>So, here comes the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">            int house_size = houses.size();</div><div class=\"line\">            if (house_size == 0) return 0;</div><div class=\"line\">            sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto&amp; c : houses) &#123;</div><div class=\"line\"></div><div class=\"line\">                int idx = Bsearch(heaters, c);</div><div class=\"line\"></div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    res = max(res, heaters[idx] - c);</div><div class=\"line\">                &#125; else if (idx &gt;= (int)heaters.size()) &#123;</div><div class=\"line\">                    res = max(res, c - heaters.back());</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int Bsearch(vector&lt;int&gt;&amp; nums, int val) &#123;</div><div class=\"line\"></div><div class=\"line\">            int l = 0, r = nums.size() - 1;</div><div class=\"line\">            while (l &lt;= r) &#123;</div><div class=\"line\">                int mid = l + ((r - l) &gt;&gt; 1);</div><div class=\"line\">                if (nums[mid] == val)</div><div class=\"line\">                    return mid;</div><div class=\"line\">                else if (nums[mid] &lt; val)</div><div class=\"line\">                    l = mid + 1;</div><div class=\"line\">                else</div><div class=\"line\">                    r = mid - 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return l;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it’s AC.</p>"},{"title":"House Robber II","date":"2017-04-19T15:16:39.000Z","_content":"\n> After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.\n>\n> Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\n<!--more-->\n\nThis is Leetcode No.213. And it is a extended problem of House Robber. It will be much fun.\n\nSo, you will do only one more time to check the max value that the theif can steal.\n\n```c++\nusing namespace std;\n\nclass Solution {\n    public:\n        int rob(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n            if (nums.size() == 1) {\n                return nums[0];\n            }\n            if (nums.size() == 2) {\n                return max(nums[1], nums[0]);\n            }\n            return max(_rob(nums, 0, nums.size() - 2), _rob(nums, 1, nums.size() - 1));\n        }\n\n        int _rob(vector<int> &nums, int startIdx, int endIdx) {\n            vector<int> DP(nums.size(), 0);\n            DP[startIdx] = nums[startIdx], DP[startIdx + 1] = max(nums[startIdx + 1], nums[startIdx]);\n            for (int i = startIdx + 2; i <= endIdx; i++) {\n                DP[i] = max(nums[i] + DP[i - 2], DP[i - 1]);\n            }\n            return DP[endIdx];\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/HouseRobberII.md","raw":"---\ntitle: House Robber II\ndate: 2017-04-19 23:16:39\ntags:\n    - Dynamic Programming\n---\n\n> After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.\n>\n> Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\n\n<!--more-->\n\nThis is Leetcode No.213. And it is a extended problem of House Robber. It will be much fun.\n\nSo, you will do only one more time to check the max value that the theif can steal.\n\n```c++\nusing namespace std;\n\nclass Solution {\n    public:\n        int rob(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n            if (nums.size() == 1) {\n                return nums[0];\n            }\n            if (nums.size() == 2) {\n                return max(nums[1], nums[0]);\n            }\n            return max(_rob(nums, 0, nums.size() - 2), _rob(nums, 1, nums.size() - 1));\n        }\n\n        int _rob(vector<int> &nums, int startIdx, int endIdx) {\n            vector<int> DP(nums.size(), 0);\n            DP[startIdx] = nums[startIdx], DP[startIdx + 1] = max(nums[startIdx + 1], nums[startIdx]);\n            for (int i = startIdx + 2; i <= endIdx; i++) {\n                DP[i] = max(nums[i] + DP[i - 2], DP[i - 1]);\n            }\n            return DP[endIdx];\n        }\n};\n```\n\nIt gets AC.\n","slug":"HouseRobberII","published":1,"updated":"2017-04-19T15:52:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpx1002cx2f4w1g5cdj9","content":"<blockquote>\n<p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.</p>\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.213. And it is a extended problem of House Robber. It will be much fun.</p>\n<p>So, you will do only one more time to check the max value that the theif can steal.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums.size() == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums.size() == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> max(nums[<span class=\"number\">1</span>], nums[<span class=\"number\">0</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> max(_rob(nums, <span class=\"number\">0</span>, nums.size() - <span class=\"number\">2</span>), _rob(nums, <span class=\"number\">1</span>, nums.size() - <span class=\"number\">1</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> _rob(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;nums, <span class=\"keyword\">int</span> startIdx, <span class=\"keyword\">int</span> endIdx) &#123;</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; DP(nums.size(), <span class=\"number\">0</span>);</div><div class=\"line\">            DP[startIdx] = nums[startIdx], DP[startIdx + <span class=\"number\">1</span>] = max(nums[startIdx + <span class=\"number\">1</span>], nums[startIdx]);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startIdx + <span class=\"number\">2</span>; i &lt;= endIdx; i++) &#123;</div><div class=\"line\">                DP[i] = max(nums[i] + DP[i - <span class=\"number\">2</span>], DP[i - <span class=\"number\">1</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> DP[endIdx];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.</p>\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</p>\n</blockquote>","more":"<p>This is Leetcode No.213. And it is a extended problem of House Robber. It will be much fun.</p>\n<p>So, you will do only one more time to check the max value that the theif can steal.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums.size() == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums.size() == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> max(nums[<span class=\"number\">1</span>], nums[<span class=\"number\">0</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> max(_rob(nums, <span class=\"number\">0</span>, nums.size() - <span class=\"number\">2</span>), _rob(nums, <span class=\"number\">1</span>, nums.size() - <span class=\"number\">1</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> _rob(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;nums, <span class=\"keyword\">int</span> startIdx, <span class=\"keyword\">int</span> endIdx) &#123;</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; DP(nums.size(), <span class=\"number\">0</span>);</div><div class=\"line\">            DP[startIdx] = nums[startIdx], DP[startIdx + <span class=\"number\">1</span>] = max(nums[startIdx + <span class=\"number\">1</span>], nums[startIdx]);</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startIdx + <span class=\"number\">2</span>; i &lt;= endIdx; i++) &#123;</div><div class=\"line\">                DP[i] = max(nums[i] + DP[i - <span class=\"number\">2</span>], DP[i - <span class=\"number\">1</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> DP[endIdx];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"House Robber III","date":"2017-01-21T12:45:21.000Z","_content":"\n> The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the \"root.\" Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that \"all houses in this place forms a binary tree\". It will automatically contact the police if two directly-linked houses were broken into on the same night.\n>\n> Determine the maximum amount of money the thief can rob tonight without alerting the police.\n>\n> Example 1:\n> ```\n  3\n / \\\n2   3\n \\   \\ \n  3   1\n```\n> Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n>\n> Example 2:\n> ```\n    3\n   / \\\n  4   5\n / \\   \\ \n1   3   1\n```\n> Maximum amount of money the thief can rob = 4 + 5 = 9.\n\n<!--more-->\n\nThis is Leetcode 337, I think this is a kind of DP problem or recursive solution problem. I get the recursive relationship.\n\nTo some Node, I can tell it's max value when it's robbed or not robbed:\n\n```\nif (isRobCurrent) {\n    return current->val + _rob(current->left, false) + _rob(current->right, false);\n} else {\n    return max(\n            max(_rob(current->left, false) + _rob(current->right, false),\n                _rob(current->left, false) + _rob(current->right, true)),\n            max(_rob(current->left, true) + _rob(current->right, false),\n                _rob(current->left, true) + _rob(current->right, true))\n            );\n}\n```\n\nObviously, it gets a TLE. So, I think about using a hashmap to store the value of the node's value. Because I find see some node has been counted for more than one time.\n\nSo, here is the better solution:\n\n```\nclass Solution {\n    public:\n        int rob(TreeNode* root) {\n            vector<int> res = robSub(root);\n            return max(res[0], res[1]);\n        }\n\n        vector<int> robSub(TreeNode* root) {\n            if (root == NULL) {\n                return vector<int>(2,0);\n            }\n\n            vector<int> left = robSub(root->left);\n            vector<int> right = robSub(root->right);\n\n            vector<int> res(2,0);\n            res[0] = max(left[0], left[1]) + max(right[0], right[1]);\n            res[1] = root->val + left[0] + right[0];\n\n            return res;\n        }\n};\n```\n\nAnd it's get AC.\n","source":"_posts/HouseRobberIII.md","raw":"---\ntitle: House Robber III\ndate: 2017-01-21 20:45:21\ntags:\n    - Depth-first Search\n    - Tree\n---\n\n> The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the \"root.\" Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that \"all houses in this place forms a binary tree\". It will automatically contact the police if two directly-linked houses were broken into on the same night.\n>\n> Determine the maximum amount of money the thief can rob tonight without alerting the police.\n>\n> Example 1:\n> ```\n  3\n / \\\n2   3\n \\   \\ \n  3   1\n```\n> Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n>\n> Example 2:\n> ```\n    3\n   / \\\n  4   5\n / \\   \\ \n1   3   1\n```\n> Maximum amount of money the thief can rob = 4 + 5 = 9.\n\n<!--more-->\n\nThis is Leetcode 337, I think this is a kind of DP problem or recursive solution problem. I get the recursive relationship.\n\nTo some Node, I can tell it's max value when it's robbed or not robbed:\n\n```\nif (isRobCurrent) {\n    return current->val + _rob(current->left, false) + _rob(current->right, false);\n} else {\n    return max(\n            max(_rob(current->left, false) + _rob(current->right, false),\n                _rob(current->left, false) + _rob(current->right, true)),\n            max(_rob(current->left, true) + _rob(current->right, false),\n                _rob(current->left, true) + _rob(current->right, true))\n            );\n}\n```\n\nObviously, it gets a TLE. So, I think about using a hashmap to store the value of the node's value. Because I find see some node has been counted for more than one time.\n\nSo, here is the better solution:\n\n```\nclass Solution {\n    public:\n        int rob(TreeNode* root) {\n            vector<int> res = robSub(root);\n            return max(res[0], res[1]);\n        }\n\n        vector<int> robSub(TreeNode* root) {\n            if (root == NULL) {\n                return vector<int>(2,0);\n            }\n\n            vector<int> left = robSub(root->left);\n            vector<int> right = robSub(root->right);\n\n            vector<int> res(2,0);\n            res[0] = max(left[0], left[1]) + max(right[0], right[1]);\n            res[1] = root->val + left[0] + right[0];\n\n            return res;\n        }\n};\n```\n\nAnd it's get AC.\n","slug":"HouseRobberIII","published":1,"updated":"2017-02-14T07:05:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpx2002ex2f4mazmvhep","content":"<blockquote>\n<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>\n<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">  3</div><div class=\"line\"> / \\</div><div class=\"line\">2   3</div><div class=\"line\"> \\   \\ </div><div class=\"line\">  3   1</div></pre></td></tr></table></figure></p>\n<p>Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.</p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    3</div><div class=\"line\">   / \\</div><div class=\"line\">  4   5</div><div class=\"line\"> / \\   \\ </div><div class=\"line\">1   3   1</div></pre></td></tr></table></figure></p>\n<p>Maximum amount of money the thief can rob = 4 + 5 = 9.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 337, I think this is a kind of DP problem or recursive solution problem. I get the recursive relationship.</p>\n<p>To some Node, I can tell it’s max value when it’s robbed or not robbed:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (isRobCurrent) &#123;</div><div class=\"line\">    return current-&gt;val + _rob(current-&gt;left, false) + _rob(current-&gt;right, false);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    return max(</div><div class=\"line\">            max(_rob(current-&gt;left, false) + _rob(current-&gt;right, false),</div><div class=\"line\">                _rob(current-&gt;left, false) + _rob(current-&gt;right, true)),</div><div class=\"line\">            max(_rob(current-&gt;left, true) + _rob(current-&gt;right, false),</div><div class=\"line\">                _rob(current-&gt;left, true) + _rob(current-&gt;right, true))</div><div class=\"line\">            );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Obviously, it gets a TLE. So, I think about using a hashmap to store the value of the node’s value. Because I find see some node has been counted for more than one time.</p>\n<p>So, here is the better solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int rob(TreeNode* root) &#123;</div><div class=\"line\">            vector&lt;int&gt; res = robSub(root);</div><div class=\"line\">            return max(res[0], res[1]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;int&gt; robSub(TreeNode* root) &#123;</div><div class=\"line\">            if (root == NULL) &#123;</div><div class=\"line\">                return vector&lt;int&gt;(2,0);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; left = robSub(root-&gt;left);</div><div class=\"line\">            vector&lt;int&gt; right = robSub(root-&gt;right);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; res(2,0);</div><div class=\"line\">            res[0] = max(left[0], left[1]) + max(right[0], right[1]);</div><div class=\"line\">            res[1] = root-&gt;val + left[0] + right[0];</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it’s get AC.</p>\n","excerpt":"<blockquote>\n<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the “root.” Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that “all houses in this place forms a binary tree”. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>\n<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">  3</div><div class=\"line\"> / \\</div><div class=\"line\">2   3</div><div class=\"line\"> \\   \\ </div><div class=\"line\">  3   1</div></pre></td></tr></table></figure></p>\n<p>Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.</p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    3</div><div class=\"line\">   / \\</div><div class=\"line\">  4   5</div><div class=\"line\"> / \\   \\ </div><div class=\"line\">1   3   1</div></pre></td></tr></table></figure></p>\n<p>Maximum amount of money the thief can rob = 4 + 5 = 9.</p>\n</blockquote>","more":"<p>This is Leetcode 337, I think this is a kind of DP problem or recursive solution problem. I get the recursive relationship.</p>\n<p>To some Node, I can tell it’s max value when it’s robbed or not robbed:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (isRobCurrent) &#123;</div><div class=\"line\">    return current-&gt;val + _rob(current-&gt;left, false) + _rob(current-&gt;right, false);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    return max(</div><div class=\"line\">            max(_rob(current-&gt;left, false) + _rob(current-&gt;right, false),</div><div class=\"line\">                _rob(current-&gt;left, false) + _rob(current-&gt;right, true)),</div><div class=\"line\">            max(_rob(current-&gt;left, true) + _rob(current-&gt;right, false),</div><div class=\"line\">                _rob(current-&gt;left, true) + _rob(current-&gt;right, true))</div><div class=\"line\">            );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Obviously, it gets a TLE. So, I think about using a hashmap to store the value of the node’s value. Because I find see some node has been counted for more than one time.</p>\n<p>So, here is the better solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int rob(TreeNode* root) &#123;</div><div class=\"line\">            vector&lt;int&gt; res = robSub(root);</div><div class=\"line\">            return max(res[0], res[1]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;int&gt; robSub(TreeNode* root) &#123;</div><div class=\"line\">            if (root == NULL) &#123;</div><div class=\"line\">                return vector&lt;int&gt;(2,0);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; left = robSub(root-&gt;left);</div><div class=\"line\">            vector&lt;int&gt; right = robSub(root-&gt;right);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; res(2,0);</div><div class=\"line\">            res[0] = max(left[0], left[1]) + max(right[0], right[1]);</div><div class=\"line\">            res[1] = root-&gt;val + left[0] + right[0];</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it’s get AC.</p>"},{"title":"Increasing Subsequences","date":"2017-01-29T15:16:14.000Z","_content":"\n\n> Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .\n>\n> Example:\n>\n> + Input: [4, 6, 7, 7]\n> + Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n>\n> Note:\n>\n> + The length of the given array will not exceed 15.\n> + The range of integer in the given array is [-100,100].\n> + The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.\n\n<!--more-->\n\nThis is Leetcode 491. It's a problem with much fun. You can find a solution by using a stack and a back trace.\n\nNot a clear solution, but I try to make it easy to think and easy to understand.\n\nI try to combine all the possible combination and check whether it is good to move further.\n\n```\nclass Solution {\n    public:\n        set<vector<int> > res;\n        vector<vector<int> > findSubsequences(vector<int> &nums) {\n            vector<int> current;\n            vector<vector<int> > ret;\n\n            res.clear();\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                _doIt(nums, i, current);\n            }\n\n            for (vector<int> n : res) {\n                ret.push_back(n);\n            }\n            return ret;\n        }\n\n        void _doIt(vector<int> nums, int idx, vector<int> current) {\n            for (int i = idx; i < (int)nums.size(); i++) {\n                if (current.size() > 0 && nums[i] >= current[current.size() - 1]) {\n                    current.push_back(nums[i]);\n                    if (current.size() > 1) {\n                        res.insert(vector<int>(current));\n                    }\n                    _doIt(nums, i + 1, current);\n                    current.pop_back();\n                }\n                if (current.size() == 0){\n                    current.push_back(nums[i]);\n                    _doIt(nums, i + 1, current);\n                    current.pop_back();\n                }\n            }\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/IncreasingSubsequences.md","raw":"---\ntitle: Increasing Subsequences\ndate: 2017-01-29 23:16:14\ntags:\n    - Depth-first Search\n---\n\n\n> Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .\n>\n> Example:\n>\n> + Input: [4, 6, 7, 7]\n> + Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\n>\n> Note:\n>\n> + The length of the given array will not exceed 15.\n> + The range of integer in the given array is [-100,100].\n> + The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.\n\n<!--more-->\n\nThis is Leetcode 491. It's a problem with much fun. You can find a solution by using a stack and a back trace.\n\nNot a clear solution, but I try to make it easy to think and easy to understand.\n\nI try to combine all the possible combination and check whether it is good to move further.\n\n```\nclass Solution {\n    public:\n        set<vector<int> > res;\n        vector<vector<int> > findSubsequences(vector<int> &nums) {\n            vector<int> current;\n            vector<vector<int> > ret;\n\n            res.clear();\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                _doIt(nums, i, current);\n            }\n\n            for (vector<int> n : res) {\n                ret.push_back(n);\n            }\n            return ret;\n        }\n\n        void _doIt(vector<int> nums, int idx, vector<int> current) {\n            for (int i = idx; i < (int)nums.size(); i++) {\n                if (current.size() > 0 && nums[i] >= current[current.size() - 1]) {\n                    current.push_back(nums[i]);\n                    if (current.size() > 1) {\n                        res.insert(vector<int>(current));\n                    }\n                    _doIt(nums, i + 1, current);\n                    current.pop_back();\n                }\n                if (current.size() == 0){\n                    current.push_back(nums[i]);\n                    _doIt(nums, i + 1, current);\n                    current.pop_back();\n                }\n            }\n        }\n};\n```\n\nIt gets AC.\n","slug":"IncreasingSubsequences","published":1,"updated":"2017-01-29T15:39:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxl002hx2f4ujsv849p","content":"<blockquote>\n<p>Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .</p>\n<p>Example:</p>\n<ul>\n<li>Input: [4, 6, 7, 7]</li>\n<li>Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length of the given array will not exceed 15.</li>\n<li>The range of integer in the given array is [-100,100].</li>\n<li>The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 491. It’s a problem with much fun. You can find a solution by using a stack and a back trace.</p>\n<p>Not a clear solution, but I try to make it easy to think and easy to understand.</p>\n<p>I try to combine all the possible combination and check whether it is good to move further.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; findSubsequences(vector&lt;int&gt; &amp;nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; ret;</div><div class=\"line\"></div><div class=\"line\">            res.clear();</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                _doIt(nums, i, current);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (vector&lt;int&gt; n : res) &#123;</div><div class=\"line\">                ret.push_back(n);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return ret;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _doIt(vector&lt;int&gt; nums, int idx, vector&lt;int&gt; current) &#123;</div><div class=\"line\">            for (int i = idx; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (current.size() &gt; 0 &amp;&amp; nums[i] &gt;= current[current.size() - 1]) &#123;</div><div class=\"line\">                    current.push_back(nums[i]);</div><div class=\"line\">                    if (current.size() &gt; 1) &#123;</div><div class=\"line\">                        res.insert(vector&lt;int&gt;(current));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    _doIt(nums, i + 1, current);</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (current.size() == 0)&#123;</div><div class=\"line\">                    current.push_back(nums[i]);</div><div class=\"line\">                    _doIt(nums, i + 1, current);</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .</p>\n<p>Example:</p>\n<ul>\n<li>Input: [4, 6, 7, 7]</li>\n<li>Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length of the given array will not exceed 15.</li>\n<li>The range of integer in the given array is [-100,100].</li>\n<li>The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 491. It’s a problem with much fun. You can find a solution by using a stack and a back trace.</p>\n<p>Not a clear solution, but I try to make it easy to think and easy to understand.</p>\n<p>I try to combine all the possible combination and check whether it is good to move further.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; findSubsequences(vector&lt;int&gt; &amp;nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; ret;</div><div class=\"line\"></div><div class=\"line\">            res.clear();</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                _doIt(nums, i, current);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (vector&lt;int&gt; n : res) &#123;</div><div class=\"line\">                ret.push_back(n);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return ret;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _doIt(vector&lt;int&gt; nums, int idx, vector&lt;int&gt; current) &#123;</div><div class=\"line\">            for (int i = idx; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (current.size() &gt; 0 &amp;&amp; nums[i] &gt;= current[current.size() - 1]) &#123;</div><div class=\"line\">                    current.push_back(nums[i]);</div><div class=\"line\">                    if (current.size() &gt; 1) &#123;</div><div class=\"line\">                        res.insert(vector&lt;int&gt;(current));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    _doIt(nums, i + 1, current);</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (current.size() == 0)&#123;</div><div class=\"line\">                    current.push_back(nums[i]);</div><div class=\"line\">                    _doIt(nums, i + 1, current);</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Increasing Triplet Subsequence","date":"2017-04-05T08:41:21.000Z","_content":"\n> Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\n>\n> Formally the function should:\n>\n> ```\n    Return true if there exists i, j, k\n    such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.\n```\n> Your algorithm should run in O(n) time complexity and O(1) space complexity.\n>\n> Examples:\n>```\nGiven [1, 2, 3, 4, 5],\nreturn true.\n\nGiven [5, 4, 3, 2, 1],\nreturn false.\n```\n\n<!--more-->\n\nThis is Leetcode No.334. You can quickly find the solution with O(n^3) time complex.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool increasingTriplet(vector<int>& nums) {\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int idy = idx + 1; idy < (int)nums.size(); idy++) {\n                    for (int idz = idy + 1; idz < (int)nums.size(); idz++) {\n                        if (nums[idx] < nums[idy] && nums[idy] < nums[idz]) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n};\n```\n\nBut it gets TLE without doubt.\n\nThen, I find a DP solution. Use a `map<int, int>` to store current status. This will make the time complex to O(n^2).\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool increasingTriplet(vector<int>& nums) {\n            map<int, int> DP;\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (DP.find(nums[idx]) == DP.end()) {\n                    DP.insert(pair<int, int>(nums[idx], 1));\n                }\n                for (auto i : DP) {\n                    if (i.first < nums[idx]) {\n                        DP.find(nums[idx])->second = max(i.second + 1, DP.find(nums[idx])->second);\n                    }\n                }\n                if (DP.find(nums[idx])->second == 3) {\n                    return true;\n                }\n            }\n            return false;\n        }\n};\n```\n\nBut it still gets a TLE. So, I turn to the Discuss to find out solutions. Then I find the best solution of this problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool increasingTriplet(vector<int>& nums) {\n            int minNum1 = INT_MAX, minNum2 = INT_MAX;\n            for (auto num : nums) {\n                if (num <= minNum1) {\n                    minNum1 = num;\n                } else if (num <= minNum2) {\n                    minNum2 = num;\n                } else {\n                    return true;\n                }\n            }\n            return false;\n        }\n};\n```\n\nIt use two marks to store the best item so far. Excellent solution. It gets AC.\n","source":"_posts/IncreasingTripletSubsequence.md","raw":"---\ntitle: Increasing Triplet Subsequence\ndate: 2017-04-05 16:41:21\ntags:\n    - Dynamic Programming\n    - Array\n---\n\n> Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\n>\n> Formally the function should:\n>\n> ```\n    Return true if there exists i, j, k\n    such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.\n```\n> Your algorithm should run in O(n) time complexity and O(1) space complexity.\n>\n> Examples:\n>```\nGiven [1, 2, 3, 4, 5],\nreturn true.\n\nGiven [5, 4, 3, 2, 1],\nreturn false.\n```\n\n<!--more-->\n\nThis is Leetcode No.334. You can quickly find the solution with O(n^3) time complex.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool increasingTriplet(vector<int>& nums) {\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int idy = idx + 1; idy < (int)nums.size(); idy++) {\n                    for (int idz = idy + 1; idz < (int)nums.size(); idz++) {\n                        if (nums[idx] < nums[idy] && nums[idy] < nums[idz]) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n};\n```\n\nBut it gets TLE without doubt.\n\nThen, I find a DP solution. Use a `map<int, int>` to store current status. This will make the time complex to O(n^2).\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool increasingTriplet(vector<int>& nums) {\n            map<int, int> DP;\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (DP.find(nums[idx]) == DP.end()) {\n                    DP.insert(pair<int, int>(nums[idx], 1));\n                }\n                for (auto i : DP) {\n                    if (i.first < nums[idx]) {\n                        DP.find(nums[idx])->second = max(i.second + 1, DP.find(nums[idx])->second);\n                    }\n                }\n                if (DP.find(nums[idx])->second == 3) {\n                    return true;\n                }\n            }\n            return false;\n        }\n};\n```\n\nBut it still gets a TLE. So, I turn to the Discuss to find out solutions. Then I find the best solution of this problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool increasingTriplet(vector<int>& nums) {\n            int minNum1 = INT_MAX, minNum2 = INT_MAX;\n            for (auto num : nums) {\n                if (num <= minNum1) {\n                    minNum1 = num;\n                } else if (num <= minNum2) {\n                    minNum2 = num;\n                } else {\n                    return true;\n                }\n            }\n            return false;\n        }\n};\n```\n\nIt use two marks to store the best item so far. Excellent solution. It gets AC.\n","slug":"IncreasingTripletSubsequence","published":1,"updated":"2017-04-05T15:30:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxm002jx2f47fijo4ch","content":"<blockquote>\n<p>Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.</p>\n<p>Formally the function should:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Return true if there exists i, j, k</div><div class=\"line\">such that arr[i] &lt; arr[j] &lt; arr[k] given 0 ≤ i &lt; j &lt; k ≤ n-1 else return false.</div></pre></td></tr></table></figure>\n<p>Your algorithm should run in O(n) time complexity and O(1) space complexity.</p>\n<p>Examples:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given [1, 2, 3, 4, 5],</div><div class=\"line\">return true.</div><div class=\"line\"></div><div class=\"line\">Given [5, 4, 3, 2, 1],</div><div class=\"line\">return false.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.334. You can quickly find the solution with O(n^3) time complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool increasingTriplet(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    for (int idz = idy + 1; idz &lt; (int)nums.size(); idz++) &#123;</div><div class=\"line\">                        if (nums[idx] &lt; nums[idy] &amp;&amp; nums[idy] &lt; nums[idz]) &#123;</div><div class=\"line\">                            return true;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE without doubt.</p>\n<p>Then, I find a DP solution. Use a <code>map&lt;int, int&gt;</code> to store current status. This will make the time complex to O(n^2).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool increasingTriplet(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            map&lt;int, int&gt; DP;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (DP.find(nums[idx]) == DP.end()) &#123;</div><div class=\"line\">                    DP.insert(pair&lt;int, int&gt;(nums[idx], 1));</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (auto i : DP) &#123;</div><div class=\"line\">                    if (i.first &lt; nums[idx]) &#123;</div><div class=\"line\">                        DP.find(nums[idx])-&gt;second = max(i.second + 1, DP.find(nums[idx])-&gt;second);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (DP.find(nums[idx])-&gt;second == 3) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it still gets a TLE. So, I turn to the Discuss to find out solutions. Then I find the best solution of this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool increasingTriplet(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int minNum1 = INT_MAX, minNum2 = INT_MAX;</div><div class=\"line\">            for (auto num : nums) &#123;</div><div class=\"line\">                if (num &lt;= minNum1) &#123;</div><div class=\"line\">                    minNum1 = num;</div><div class=\"line\">                &#125; else if (num &lt;= minNum2) &#123;</div><div class=\"line\">                    minNum2 = num;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It use two marks to store the best item so far. Excellent solution. It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.</p>\n<p>Formally the function should:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Return true if there exists i, j, k</div><div class=\"line\">such that arr[i] &lt; arr[j] &lt; arr[k] given 0 ≤ i &lt; j &lt; k ≤ n-1 else return false.</div></pre></td></tr></table></figure>\n<p>Your algorithm should run in O(n) time complexity and O(1) space complexity.</p>\n<p>Examples:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given [1, 2, 3, 4, 5],</div><div class=\"line\">return true.</div><div class=\"line\"></div><div class=\"line\">Given [5, 4, 3, 2, 1],</div><div class=\"line\">return false.</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.334. You can quickly find the solution with O(n^3) time complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool increasingTriplet(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    for (int idz = idy + 1; idz &lt; (int)nums.size(); idz++) &#123;</div><div class=\"line\">                        if (nums[idx] &lt; nums[idy] &amp;&amp; nums[idy] &lt; nums[idz]) &#123;</div><div class=\"line\">                            return true;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE without doubt.</p>\n<p>Then, I find a DP solution. Use a <code>map&lt;int, int&gt;</code> to store current status. This will make the time complex to O(n^2).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool increasingTriplet(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            map&lt;int, int&gt; DP;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (DP.find(nums[idx]) == DP.end()) &#123;</div><div class=\"line\">                    DP.insert(pair&lt;int, int&gt;(nums[idx], 1));</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (auto i : DP) &#123;</div><div class=\"line\">                    if (i.first &lt; nums[idx]) &#123;</div><div class=\"line\">                        DP.find(nums[idx])-&gt;second = max(i.second + 1, DP.find(nums[idx])-&gt;second);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (DP.find(nums[idx])-&gt;second == 3) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it still gets a TLE. So, I turn to the Discuss to find out solutions. Then I find the best solution of this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool increasingTriplet(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int minNum1 = INT_MAX, minNum2 = INT_MAX;</div><div class=\"line\">            for (auto num : nums) &#123;</div><div class=\"line\">                if (num &lt;= minNum1) &#123;</div><div class=\"line\">                    minNum1 = num;</div><div class=\"line\">                &#125; else if (num &lt;= minNum2) &#123;</div><div class=\"line\">                    minNum2 = num;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It use two marks to store the best item so far. Excellent solution. It gets AC.</p>"},{"title":"Intersection of Two Arrays II","date":"2017-01-08T14:36:11.000Z","_content":"\n\n> Given two arrays, write a function to compute their intersection.\n>\n> Example:\n> Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].\n>\n> Note:\n>\n>   + Each element in the result should appear as many times as it shows in both arrays.\n>   + The result can be in any order.\n>\n> Follow up:\n>\n>   + What if the given array is already sorted? How would you optimize your algorithm?\n>   + What if nums1's size is small compared to nums2's size? Which algorithm is better?\n>   + What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n<!--more-->\n\nThis is Leetcode 350. It's an easy problem, we can quickly write a solution based on hash map:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            map<int, int> nums;\n            vector<int> res;\n\n\n            for (int i = 0; i < (int)nums1.size(); i++) {\n                if (nums.find(nums1[i]) == nums.end()) {\n                    nums.insert(pair<int, int>(nums1[i], 1));\n                } else {\n                    nums.find(nums1[i])->second++;\n                }\n            }\n\n            for (int i = 0; i < (int)nums2.size(); i++) {\n                if (nums.find(nums2[i]) != nums.end() && nums.find(nums2[i])->second > 0) {\n                    res.push_back(nums2[i]);\n                    nums.find(nums2[i])->second--;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            int idx = 0, idy = 0;\n            vector<int> res;\n\n            sort(nums1.begin(), nums1.end());\n            sort(nums2.begin(), nums2.end());\n\n            while (idx < (int)nums1.size() && idy < (int)nums2.size()) {\n                if (nums1[idx] == nums2[idy]) {\n                    res.push_back(nums1[idx]);\n                    idx++; idy++;\n                } else if (nums1[idx] > nums2[idy]) {\n                    idy++;\n                } else if (nums1[idx] < nums2[idy]) {\n                    idx++;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.\n\nIf the memeory is limited such that we can't load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.\n\n","source":"_posts/IntersectionofTwoArraysII.md","raw":"---\ntitle: Intersection of Two Arrays II\ndate: 2017-01-08 22:36:11\ntags:\n    - Binary Search\n    - Hash Table\n    - Two Pointers\n    - Sort\n---\n\n\n> Given two arrays, write a function to compute their intersection.\n>\n> Example:\n> Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].\n>\n> Note:\n>\n>   + Each element in the result should appear as many times as it shows in both arrays.\n>   + The result can be in any order.\n>\n> Follow up:\n>\n>   + What if the given array is already sorted? How would you optimize your algorithm?\n>   + What if nums1's size is small compared to nums2's size? Which algorithm is better?\n>   + What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n<!--more-->\n\nThis is Leetcode 350. It's an easy problem, we can quickly write a solution based on hash map:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            map<int, int> nums;\n            vector<int> res;\n\n\n            for (int i = 0; i < (int)nums1.size(); i++) {\n                if (nums.find(nums1[i]) == nums.end()) {\n                    nums.insert(pair<int, int>(nums1[i], 1));\n                } else {\n                    nums.find(nums1[i])->second++;\n                }\n            }\n\n            for (int i = 0; i < (int)nums2.size(); i++) {\n                if (nums.find(nums2[i]) != nums.end() && nums.find(nums2[i])->second > 0) {\n                    res.push_back(nums2[i]);\n                    nums.find(nums2[i])->second--;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            int idx = 0, idy = 0;\n            vector<int> res;\n\n            sort(nums1.begin(), nums1.end());\n            sort(nums2.begin(), nums2.end());\n\n            while (idx < (int)nums1.size() && idy < (int)nums2.size()) {\n                if (nums1[idx] == nums2[idy]) {\n                    res.push_back(nums1[idx]);\n                    idx++; idy++;\n                } else if (nums1[idx] > nums2[idy]) {\n                    idy++;\n                } else if (nums1[idx] < nums2[idy]) {\n                    idx++;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.\n\nIf the memeory is limited such that we can't load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.\n\n","slug":"IntersectionofTwoArraysII","published":1,"updated":"2017-01-08T15:01:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxo002mx2f4axqq7y4y","content":"<blockquote>\n<p>Given two arrays, write a function to compute their intersection.</p>\n<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>\n<p>Note:</p>\n<ul>\n<li>Each element in the result should appear as many times as it shows in both arrays.</li>\n<li>The result can be in any order.</li>\n</ul>\n<p>Follow up:</p>\n<ul>\n<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n<li>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?</li>\n<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 350. It’s an easy problem, we can quickly write a solution based on hash map:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            map&lt;int, int&gt; nums;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums1.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums1[i]) == nums.end()) &#123;</div><div class=\"line\">                    nums.insert(pair&lt;int, int&gt;(nums1[i], 1));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    nums.find(nums1[i])-&gt;second++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums2.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums2[i]) != nums.end() &amp;&amp; nums.find(nums2[i])-&gt;second &gt; 0) &#123;</div><div class=\"line\">                    res.push_back(nums2[i]);</div><div class=\"line\">                    nums.find(nums2[i])-&gt;second--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            int idx = 0, idy = 0;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\">            sort(nums1.begin(), nums1.end());</div><div class=\"line\">            sort(nums2.begin(), nums2.end());</div><div class=\"line\"></div><div class=\"line\">            while (idx &lt; (int)nums1.size() &amp;&amp; idy &lt; (int)nums2.size()) &#123;</div><div class=\"line\">                if (nums1[idx] == nums2[idy]) &#123;</div><div class=\"line\">                    res.push_back(nums1[idx]);</div><div class=\"line\">                    idx++; idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &gt; nums2[idy]) &#123;</div><div class=\"line\">                    idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &lt; nums2[idy]) &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.</p>\n<p>If the memeory is limited such that we can’t load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.</p>\n","excerpt":"<blockquote>\n<p>Given two arrays, write a function to compute their intersection.</p>\n<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>\n<p>Note:</p>\n<ul>\n<li>Each element in the result should appear as many times as it shows in both arrays.</li>\n<li>The result can be in any order.</li>\n</ul>\n<p>Follow up:</p>\n<ul>\n<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n<li>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?</li>\n<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 350. It’s an easy problem, we can quickly write a solution based on hash map:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            map&lt;int, int&gt; nums;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums1.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums1[i]) == nums.end()) &#123;</div><div class=\"line\">                    nums.insert(pair&lt;int, int&gt;(nums1[i], 1));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    nums.find(nums1[i])-&gt;second++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums2.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums2[i]) != nums.end() &amp;&amp; nums.find(nums2[i])-&gt;second &gt; 0) &#123;</div><div class=\"line\">                    res.push_back(nums2[i]);</div><div class=\"line\">                    nums.find(nums2[i])-&gt;second--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            int idx = 0, idy = 0;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\">            sort(nums1.begin(), nums1.end());</div><div class=\"line\">            sort(nums2.begin(), nums2.end());</div><div class=\"line\"></div><div class=\"line\">            while (idx &lt; (int)nums1.size() &amp;&amp; idy &lt; (int)nums2.size()) &#123;</div><div class=\"line\">                if (nums1[idx] == nums2[idy]) &#123;</div><div class=\"line\">                    res.push_back(nums1[idx]);</div><div class=\"line\">                    idx++; idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &gt; nums2[idy]) &#123;</div><div class=\"line\">                    idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &lt; nums2[idy]) &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.</p>\n<p>If the memeory is limited such that we can’t load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.</p>"},{"title":"Integer Replacement","date":"2017-01-22T15:04:22.000Z","_content":"\n> Given a positive integer n and you can do operations as follow:\n>\n> + If n is even, replace n with n/2.\n> + If n is odd, you can replace n with either n + 1 or n - 1.\n>\n> What is the minimum number of replacements needed for n to become 1?\n>\n> Example 1:\n> + Input: 8\n> + Output: 3\n> + Explanation: 8 -> 4 -> 2 -> 1\n>\n> Example 2:\n> + Input: 7\n> + Output: 4\n> + Explanation: 7 -> 8 -> 4 -> 2 -> 1 or 7 -> 6 -> 3 -> 2 -> 1\n\n<!-- more-->\n\nThis is Leetcode 397, and we can quickly find a solution in recuisive way:\n\n```\nclass Solution {\n    public:\n        int integerReplacement(int num) {\n            return _doIt(num);\n        }\n\n        int _doIt(int num) {\n            if (num == 1) {\n                return 0;\n            } else if ((num & 1) == 0) { // even\n                return 1 + _doIt(num >> 1);\n            } else {\n                return 1 + min(_doIt(num + 1), _doIt(num - 1));\n            }\n        }\n};\n```\n\nWithout any doubt, we get a RTE.\n\nBecause, a little problem cause, when the given num is INT_MAX, the (num + 1) will get error.\n\nSo, a easy way to solve or take over the problem is using the data type long:\n\n```\nclass Solution {\n    public:\n        int integerReplacement(int num) {\n            return _doIt((long)num);\n        }\n\n        int _doIt(long num) {\n            if (num == 1) {\n                return 0;\n            } else if ((num & 1) == 0) { // even\n                return 1 + _doIt(num >> 1);\n            } else {\n                return 1 + min(_doIt(num + 1), _doIt(num - 1));\n            }\n        }\n};\n```\n\nNot a nice solution, but it gets AC.\n","source":"_posts/IntegerReplacement.md","raw":"---\ntitle: Integer Replacement\ndate: 2017-01-22 23:04:22\ntags:\n    - Math\n    - Bitmap\n---\n\n> Given a positive integer n and you can do operations as follow:\n>\n> + If n is even, replace n with n/2.\n> + If n is odd, you can replace n with either n + 1 or n - 1.\n>\n> What is the minimum number of replacements needed for n to become 1?\n>\n> Example 1:\n> + Input: 8\n> + Output: 3\n> + Explanation: 8 -> 4 -> 2 -> 1\n>\n> Example 2:\n> + Input: 7\n> + Output: 4\n> + Explanation: 7 -> 8 -> 4 -> 2 -> 1 or 7 -> 6 -> 3 -> 2 -> 1\n\n<!-- more-->\n\nThis is Leetcode 397, and we can quickly find a solution in recuisive way:\n\n```\nclass Solution {\n    public:\n        int integerReplacement(int num) {\n            return _doIt(num);\n        }\n\n        int _doIt(int num) {\n            if (num == 1) {\n                return 0;\n            } else if ((num & 1) == 0) { // even\n                return 1 + _doIt(num >> 1);\n            } else {\n                return 1 + min(_doIt(num + 1), _doIt(num - 1));\n            }\n        }\n};\n```\n\nWithout any doubt, we get a RTE.\n\nBecause, a little problem cause, when the given num is INT_MAX, the (num + 1) will get error.\n\nSo, a easy way to solve or take over the problem is using the data type long:\n\n```\nclass Solution {\n    public:\n        int integerReplacement(int num) {\n            return _doIt((long)num);\n        }\n\n        int _doIt(long num) {\n            if (num == 1) {\n                return 0;\n            } else if ((num & 1) == 0) { // even\n                return 1 + _doIt(num >> 1);\n            } else {\n                return 1 + min(_doIt(num + 1), _doIt(num - 1));\n            }\n        }\n};\n```\n\nNot a nice solution, but it gets AC.\n","slug":"IntegerReplacement","published":1,"updated":"2017-01-24T15:41:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxp002ox2f49u4e9p0h","content":"<blockquote>\n<p>Given a positive integer n and you can do operations as follow:</p>\n<ul>\n<li>If n is even, replace n with n/2.</li>\n<li>If n is odd, you can replace n with either n + 1 or n - 1.</li>\n</ul>\n<p>What is the minimum number of replacements needed for n to become 1?</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 8</li>\n<li>Output: 3</li>\n<li>Explanation: 8 -&gt; 4 -&gt; 2 -&gt; 1</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: 7</li>\n<li>Output: 4</li>\n<li>Explanation: 7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 or 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 397, and we can quickly find a solution in recuisive way:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int integerReplacement(int num) &#123;</div><div class=\"line\">            return _doIt(num);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _doIt(int num) &#123;</div><div class=\"line\">            if (num == 1) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else if ((num &amp; 1) == 0) &#123; // even</div><div class=\"line\">                return 1 + _doIt(num &gt;&gt; 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return 1 + min(_doIt(num + 1), _doIt(num - 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Without any doubt, we get a RTE.</p>\n<p>Because, a little problem cause, when the given num is INT_MAX, the (num + 1) will get error.</p>\n<p>So, a easy way to solve or take over the problem is using the data type long:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int integerReplacement(int num) &#123;</div><div class=\"line\">            return _doIt((long)num);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _doIt(long num) &#123;</div><div class=\"line\">            if (num == 1) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else if ((num &amp; 1) == 0) &#123; // even</div><div class=\"line\">                return 1 + _doIt(num &gt;&gt; 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return 1 + min(_doIt(num + 1), _doIt(num - 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Not a nice solution, but it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a positive integer n and you can do operations as follow:</p>\n<ul>\n<li>If n is even, replace n with n/2.</li>\n<li>If n is odd, you can replace n with either n + 1 or n - 1.</li>\n</ul>\n<p>What is the minimum number of replacements needed for n to become 1?</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 8</li>\n<li>Output: 3</li>\n<li>Explanation: 8 -&gt; 4 -&gt; 2 -&gt; 1</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: 7</li>\n<li>Output: 4</li>\n<li>Explanation: 7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 or 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 397, and we can quickly find a solution in recuisive way:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int integerReplacement(int num) &#123;</div><div class=\"line\">            return _doIt(num);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _doIt(int num) &#123;</div><div class=\"line\">            if (num == 1) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else if ((num &amp; 1) == 0) &#123; // even</div><div class=\"line\">                return 1 + _doIt(num &gt;&gt; 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return 1 + min(_doIt(num + 1), _doIt(num - 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Without any doubt, we get a RTE.</p>\n<p>Because, a little problem cause, when the given num is INT_MAX, the (num + 1) will get error.</p>\n<p>So, a easy way to solve or take over the problem is using the data type long:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int integerReplacement(int num) &#123;</div><div class=\"line\">            return _doIt((long)num);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _doIt(long num) &#123;</div><div class=\"line\">            if (num == 1) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; else if ((num &amp; 1) == 0) &#123; // even</div><div class=\"line\">                return 1 + _doIt(num &gt;&gt; 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return 1 + min(_doIt(num + 1), _doIt(num - 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Not a nice solution, but it gets AC.</p>"},{"title":"Integer Break","date":"2017-03-11T04:45:11.000Z","_content":"\n> Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\n>\n> For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).\n>\n> Note: You may assume that n is not less than 2 and not larger than 58.\n>\n> Hint:\n>\n> + There is a simple O(n) solution to this problem.\n> + You may check the breaking results of n ranging from 7 to 10 to discover the regularities.\n\n<!--more-->\n\nThis is Leetcode No.343. At first I thought it is a simple DP problem. But I failed once.\n\nI thought the DP array will be like this:\n\n```\nDP[num] = DP[num / 2] + DP[num - num / 2];\n```\n\nHowever, the number 9 is not following this rule. the max is 9 = 3 + 3 + 3 (27) instead of 9 = 4 + 5 (24).\n\nSo, the result becomes:\n\n```\nDP[num] = max(i - 3, DP[i - 3]);\n```\n\nThe result becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> DP;\n        int integerBreak(int num) {\n            if (DP.size() == 0) {\n                DP.push_back(0);\n                DP.push_back(1);\n                DP.push_back(1); // [0, 0, 1]\n            }\n            for (int i = DP.size(); i <= num; i++) {\n                DP.push_back(3 * DP[i - 3]);\n            }\n            return DP[num];\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/IntegerBreak.md","raw":"---\ntitle: Integer Break\ndate: 2017-03-11 12:45:11\ntags:\n    - Math\n    - Dynamic Programming\n---\n\n> Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\n>\n> For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).\n>\n> Note: You may assume that n is not less than 2 and not larger than 58.\n>\n> Hint:\n>\n> + There is a simple O(n) solution to this problem.\n> + You may check the breaking results of n ranging from 7 to 10 to discover the regularities.\n\n<!--more-->\n\nThis is Leetcode No.343. At first I thought it is a simple DP problem. But I failed once.\n\nI thought the DP array will be like this:\n\n```\nDP[num] = DP[num / 2] + DP[num - num / 2];\n```\n\nHowever, the number 9 is not following this rule. the max is 9 = 3 + 3 + 3 (27) instead of 9 = 4 + 5 (24).\n\nSo, the result becomes:\n\n```\nDP[num] = max(i - 3, DP[i - 3]);\n```\n\nThe result becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> DP;\n        int integerBreak(int num) {\n            if (DP.size() == 0) {\n                DP.push_back(0);\n                DP.push_back(1);\n                DP.push_back(1); // [0, 0, 1]\n            }\n            for (int i = DP.size(); i <= num; i++) {\n                DP.push_back(3 * DP[i - 3]);\n            }\n            return DP[num];\n        }\n};\n```\n\nIt gets AC.\n","slug":"IntegerBreak","published":1,"updated":"2017-03-11T05:35:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxq002rx2f4nbs4p9m7","content":"<blockquote>\n<p>Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.</p>\n<p>For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).</p>\n<p>Note: You may assume that n is not less than 2 and not larger than 58.</p>\n<p>Hint:</p>\n<ul>\n<li>There is a simple O(n) solution to this problem.</li>\n<li>You may check the breaking results of n ranging from 7 to 10 to discover the regularities.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.343. At first I thought it is a simple DP problem. But I failed once.</p>\n<p>I thought the DP array will be like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DP[num] = DP[num / 2] + DP[num - num / 2];</div></pre></td></tr></table></figure>\n<p>However, the number 9 is not following this rule. the max is 9 = 3 + 3 + 3 (27) instead of 9 = 4 + 5 (24).</p>\n<p>So, the result becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DP[num] = max(i - 3, DP[i - 3]);</div></pre></td></tr></table></figure>\n<p>The result becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; DP;</div><div class=\"line\">        int integerBreak(int num) &#123;</div><div class=\"line\">            if (DP.size() == 0) &#123;</div><div class=\"line\">                DP.push_back(0);</div><div class=\"line\">                DP.push_back(1);</div><div class=\"line\">                DP.push_back(1); // [0, 0, 1]</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = DP.size(); i &lt;= num; i++) &#123;</div><div class=\"line\">                DP.push_back(3 * DP[i - 3]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[num];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.</p>\n<p>For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).</p>\n<p>Note: You may assume that n is not less than 2 and not larger than 58.</p>\n<p>Hint:</p>\n<ul>\n<li>There is a simple O(n) solution to this problem.</li>\n<li>You may check the breaking results of n ranging from 7 to 10 to discover the regularities.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.343. At first I thought it is a simple DP problem. But I failed once.</p>\n<p>I thought the DP array will be like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DP[num] = DP[num / 2] + DP[num - num / 2];</div></pre></td></tr></table></figure>\n<p>However, the number 9 is not following this rule. the max is 9 = 3 + 3 + 3 (27) instead of 9 = 4 + 5 (24).</p>\n<p>So, the result becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DP[num] = max(i - 3, DP[i - 3]);</div></pre></td></tr></table></figure>\n<p>The result becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; DP;</div><div class=\"line\">        int integerBreak(int num) &#123;</div><div class=\"line\">            if (DP.size() == 0) &#123;</div><div class=\"line\">                DP.push_back(0);</div><div class=\"line\">                DP.push_back(1);</div><div class=\"line\">                DP.push_back(1); // [0, 0, 1]</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = DP.size(); i &lt;= num; i++) &#123;</div><div class=\"line\">                DP.push_back(3 * DP[i - 3]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[num];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Jump Game","date":"2017-04-20T12:52:23.000Z","_content":"\n> Given an array of non-negative integers, you are initially positioned at the first index of the array.\n\n> Each element in the array represents your maximum jump length at that position.\n>\n> Determine if you are able to reach the last index.\n>\n> For example:\n>```\nA = [2,3,1,1,4], return true.\nA = [3,2,1,0,4], return false.\n```\n\n<!--more-->\n\nThis is Leetcode No.55. It is a old problem, But it is still a classic one in Greedy.\n\nIf we don't use Greedy method, we can quickly find the solution like below:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canJump(vector<int>& nums) {\n            return _jump(0, nums);\n        }\n\n        bool _jump(int current, vector<int> nums) {\n            if (current + nums[current] >= (int)nums.size() - 1) return true;\n\n            bool res = false;\n            for (int idx = current + 1; idx <= current + nums[current]; idx++) {\n                res = res || _jump(idx, nums);\n            }\n            return res;\n        }\n};\n```\n\nEasy to think, while it takes a long time to figure out the result.\n\nSo, we should use a little DP thought. You just need to make sure that your max reach idx is larger than the nums.size() - 1\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canJump(vector<int>& nums) {\n            int reach = 0;\n            for (int i = 0; i < min((int)nums.size(), reach + 1); i++) {\n                reach = max(reach, nums[i] + i);\n            }\n            return reach >= (int)nums.size() - 1;\n        }\n}\n```\n\nThe solution is simple and clean, but the process of thinking has much fun.\n\nLast it gets AC.\n\n\n","source":"_posts/JumpGame.md","raw":"---\ntitle: Jump Game\ndate: 2017-04-20 20:52:23\ntags:\n    - Greedy\n    - Array\n---\n\n> Given an array of non-negative integers, you are initially positioned at the first index of the array.\n\n> Each element in the array represents your maximum jump length at that position.\n>\n> Determine if you are able to reach the last index.\n>\n> For example:\n>```\nA = [2,3,1,1,4], return true.\nA = [3,2,1,0,4], return false.\n```\n\n<!--more-->\n\nThis is Leetcode No.55. It is a old problem, But it is still a classic one in Greedy.\n\nIf we don't use Greedy method, we can quickly find the solution like below:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canJump(vector<int>& nums) {\n            return _jump(0, nums);\n        }\n\n        bool _jump(int current, vector<int> nums) {\n            if (current + nums[current] >= (int)nums.size() - 1) return true;\n\n            bool res = false;\n            for (int idx = current + 1; idx <= current + nums[current]; idx++) {\n                res = res || _jump(idx, nums);\n            }\n            return res;\n        }\n};\n```\n\nEasy to think, while it takes a long time to figure out the result.\n\nSo, we should use a little DP thought. You just need to make sure that your max reach idx is larger than the nums.size() - 1\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canJump(vector<int>& nums) {\n            int reach = 0;\n            for (int i = 0; i < min((int)nums.size(), reach + 1); i++) {\n                reach = max(reach, nums[i] + i);\n            }\n            return reach >= (int)nums.size() - 1;\n        }\n}\n```\n\nThe solution is simple and clean, but the process of thinking has much fun.\n\nLast it gets AC.\n\n\n","slug":"JumpGame","published":1,"updated":"2017-04-20T13:26:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxr002tx2f4u5kvhguh","content":"<blockquote>\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Determine if you are able to reach the last index.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A = [2,3,1,1,4], return true.</div><div class=\"line\">A = [3,2,1,0,4], return false.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.55. It is a old problem, But it is still a classic one in Greedy.</p>\n<p>If we don’t use Greedy method, we can quickly find the solution like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canJump(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            return _jump(0, nums);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _jump(int current, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (current + nums[current] &gt;= (int)nums.size() - 1) return true;</div><div class=\"line\"></div><div class=\"line\">            bool res = false;</div><div class=\"line\">            for (int idx = current + 1; idx &lt;= current + nums[current]; idx++) &#123;</div><div class=\"line\">                res = res || _jump(idx, nums);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to think, while it takes a long time to figure out the result.</p>\n<p>So, we should use a little DP thought. You just need to make sure that your max reach idx is larger than the nums.size() - 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canJump(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int reach = 0;</div><div class=\"line\">            for (int i = 0; i &lt; min((int)nums.size(), reach + 1); i++) &#123;</div><div class=\"line\">                reach = max(reach, nums[i] + i);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return reach &gt;= (int)nums.size() - 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The solution is simple and clean, but the process of thinking has much fun.</p>\n<p>Last it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\n<p>Each element in the array represents your maximum jump length at that position.</p>\n<p>Determine if you are able to reach the last index.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">A = [2,3,1,1,4], return true.</div><div class=\"line\">A = [3,2,1,0,4], return false.</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.55. It is a old problem, But it is still a classic one in Greedy.</p>\n<p>If we don’t use Greedy method, we can quickly find the solution like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canJump(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            return _jump(0, nums);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _jump(int current, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (current + nums[current] &gt;= (int)nums.size() - 1) return true;</div><div class=\"line\"></div><div class=\"line\">            bool res = false;</div><div class=\"line\">            for (int idx = current + 1; idx &lt;= current + nums[current]; idx++) &#123;</div><div class=\"line\">                res = res || _jump(idx, nums);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to think, while it takes a long time to figure out the result.</p>\n<p>So, we should use a little DP thought. You just need to make sure that your max reach idx is larger than the nums.size() - 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canJump(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int reach = 0;</div><div class=\"line\">            for (int i = 0; i &lt; min((int)nums.size(), reach + 1); i++) &#123;</div><div class=\"line\">                reach = max(reach, nums[i] + i);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return reach &gt;= (int)nums.size() - 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The solution is simple and clean, but the process of thinking has much fun.</p>\n<p>Last it gets AC.</p>"},{"title":"K-diff Pairs in an Array","date":"2017-03-05T13:51:13.000Z","_content":"\n> Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.\n>\n> Example 1:\n>```\nInput: [3, 1, 4, 1, 5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\n            Although we have two 1s in the input, we should only return the number of unique pairs.\n```\n> Example 2:\n>```\nInput:[1, 2, 3, 4, 5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n```\n> Example 3:\n>```\nInput: [1, 3, 1, 5, 4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\n```\n> Note:\n> + The pairs (i, j) and (j, i) count as the same pair.\n> + The length of the array won't exceed 10,000.\n> + All the integers in the given input belong to the range: [-1e7, 1e7].\n\n<!--more-->\n\nThis is Leetcode No.532. It is a easy problem. Here is my answer, using a set to store the result:\n\n```\nclass Solution {\n    public:\n        int findPairs(vector<int>& nums, int target) {\n            set<string> res;\n            sort(nums.begin(), nums.end());\n\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int idy = 0; idy < (int)nums.size(); idy++) {\n                    if (abs(nums[idx] - nums[idy]) == target) {\n                        string key = to_string(nums[idx]) + to_string(nums[idy]);\n                        if (res.find(key) == res.end()) {\n                            res.insert(key);\n                            continue;\n                        }\n                    }\n                }\n            }\n\n            return res.size();\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/K-diffPairsinanArray.md","raw":"---\ntitle: K-diff Pairs in an Array\ndate: 2017-03-05 21:51:13\ntags:\n    - Array\n    - Two Pointers\n---\n\n> Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.\n>\n> Example 1:\n>```\nInput: [3, 1, 4, 1, 5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\n            Although we have two 1s in the input, we should only return the number of unique pairs.\n```\n> Example 2:\n>```\nInput:[1, 2, 3, 4, 5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n```\n> Example 3:\n>```\nInput: [1, 3, 1, 5, 4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\n```\n> Note:\n> + The pairs (i, j) and (j, i) count as the same pair.\n> + The length of the array won't exceed 10,000.\n> + All the integers in the given input belong to the range: [-1e7, 1e7].\n\n<!--more-->\n\nThis is Leetcode No.532. It is a easy problem. Here is my answer, using a set to store the result:\n\n```\nclass Solution {\n    public:\n        int findPairs(vector<int>& nums, int target) {\n            set<string> res;\n            sort(nums.begin(), nums.end());\n\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                for (int idy = 0; idy < (int)nums.size(); idy++) {\n                    if (abs(nums[idx] - nums[idy]) == target) {\n                        string key = to_string(nums[idx]) + to_string(nums[idy]);\n                        if (res.find(key) == res.end()) {\n                            res.insert(key);\n                            continue;\n                        }\n                    }\n                }\n            }\n\n            return res.size();\n        }\n};\n```\n\nIt gets AC.\n","slug":"K-diffPairsinanArray","published":1,"updated":"2017-03-05T14:21:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxs002wx2f4roadc1oe","content":"<blockquote>\n<p>Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [3, 1, 4, 1, 5], k = 2</div><div class=\"line\">Output: 2</div><div class=\"line\">Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).</div><div class=\"line\">            Although we have two 1s in the input, we should only return the number of unique pairs.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:[1, 2, 3, 4, 5], k = 1</div><div class=\"line\">Output: 4</div><div class=\"line\">Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1, 3, 1, 5, 4], k = 0</div><div class=\"line\">Output: 1</div><div class=\"line\">Explanation: There is one 0-diff pair in the array, (1, 1).</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The pairs (i, j) and (j, i) count as the same pair.</li>\n<li>The length of the array won’t exceed 10,000.</li>\n<li>All the integers in the given input belong to the range: [-1e7, 1e7].</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.532. It is a easy problem. Here is my answer, using a set to store the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findPairs(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            set&lt;string&gt; res;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    if (abs(nums[idx] - nums[idy]) == target) &#123;</div><div class=\"line\">                        string key = to_string(nums[idx]) + to_string(nums[idy]);</div><div class=\"line\">                        if (res.find(key) == res.end()) &#123;</div><div class=\"line\">                            res.insert(key);</div><div class=\"line\">                            continue;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res.size();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [3, 1, 4, 1, 5], k = 2</div><div class=\"line\">Output: 2</div><div class=\"line\">Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).</div><div class=\"line\">            Although we have two 1s in the input, we should only return the number of unique pairs.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:[1, 2, 3, 4, 5], k = 1</div><div class=\"line\">Output: 4</div><div class=\"line\">Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1, 3, 1, 5, 4], k = 0</div><div class=\"line\">Output: 1</div><div class=\"line\">Explanation: There is one 0-diff pair in the array, (1, 1).</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The pairs (i, j) and (j, i) count as the same pair.</li>\n<li>The length of the array won’t exceed 10,000.</li>\n<li>All the integers in the given input belong to the range: [-1e7, 1e7].</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.532. It is a easy problem. Here is my answer, using a set to store the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findPairs(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            set&lt;string&gt; res;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                    if (abs(nums[idx] - nums[idy]) == target) &#123;</div><div class=\"line\">                        string key = to_string(nums[idx]) + to_string(nums[idy]);</div><div class=\"line\">                        if (res.find(key) == res.end()) &#123;</div><div class=\"line\">                            res.insert(key);</div><div class=\"line\">                            continue;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res.size();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Kth Smallest Element in a Sorted Matrix","date":"2017-04-24T15:32:17.000Z","_content":"\n> Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.\n>\n> Note that it is the kth smallest element in the sorted order, not the kth distinct element.\n>\n> Example:\n>```\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n```\n\n<!--more-->\n\nThis is Leetcode No.378. It is a easy problem. Because, its tags are Heap and Binary Search, but I submit the code with Sort method like below:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int kthSmallest(vector<vector<int> >& matrix, int kth) {\n            vector<int> nums;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    nums.push_back(matrix[idx][idy]);\n                }\n            }\n            sort(nums.begin(), nums.end());\n            return nums[kth];\n        }\n};\n```\n\nIts time complex is O(nlogn) and its space complex is O(n). So, I don't think this is a good solution.\n\n\nThe following solution using a Heap to reduce the time complex.\n\n```\nclass Solution {\n    public:\n        int kthSmallest(vector<vector<int>>& matrix, int k) {\n            int xsize = matrix.size();\n            int ysize = matrix[0].size();\n            priority_queue<Node, vector<Node>, Cmp> pq;\n            pq.push(Node(matrix[0][0], 0, 0));\n            Node tmp(-1, -1, -1);\n            while(k--){\n                tmp = pq.top();\n                pq.pop();\n                if(tmp.i + 1 < xsize){\n                    pq.push(Node(matrix[tmp.i + 1][tmp.j], tmp.i + 1, tmp.j));\n                }\n                if(tmp.i == 0 && tmp.j + 1 < ysize){\n                    pq.push(Node(matrix[tmp.i][tmp.j + 1], tmp.i, tmp.j + 1));\n                }\n            }\n            return tmp.val;\n        }\n    private:\n        struct Node {\n            int val;\n            int i;\n            int j;\n            Node(int vv, int ii,  int jj): val(vv), i(ii), j(jj){};\n        };\n        struct Cmp {\n            bool operator()(const Node& a, const Node& b){\n                return a.val > b.val;\n            }\n        };\n};\n```\n\nIt also gets AC.\n","source":"_posts/KthSmallestElementinaSortedMatrix.md","raw":"---\ntitle: Kth Smallest Element in a Sorted Matrix\ndate: 2017-04-24 23:32:17\ntags:\n    - Heap\n    - Binary Search\n---\n\n> Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.\n>\n> Note that it is the kth smallest element in the sorted order, not the kth distinct element.\n>\n> Example:\n>```\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n```\n\n<!--more-->\n\nThis is Leetcode No.378. It is a easy problem. Because, its tags are Heap and Binary Search, but I submit the code with Sort method like below:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int kthSmallest(vector<vector<int> >& matrix, int kth) {\n            vector<int> nums;\n            for (int idx = 0; idx < (int)matrix.size(); idx++) {\n                for (int idy = 0; idy < (int)matrix[0].size(); idy++) {\n                    nums.push_back(matrix[idx][idy]);\n                }\n            }\n            sort(nums.begin(), nums.end());\n            return nums[kth];\n        }\n};\n```\n\nIts time complex is O(nlogn) and its space complex is O(n). So, I don't think this is a good solution.\n\n\nThe following solution using a Heap to reduce the time complex.\n\n```\nclass Solution {\n    public:\n        int kthSmallest(vector<vector<int>>& matrix, int k) {\n            int xsize = matrix.size();\n            int ysize = matrix[0].size();\n            priority_queue<Node, vector<Node>, Cmp> pq;\n            pq.push(Node(matrix[0][0], 0, 0));\n            Node tmp(-1, -1, -1);\n            while(k--){\n                tmp = pq.top();\n                pq.pop();\n                if(tmp.i + 1 < xsize){\n                    pq.push(Node(matrix[tmp.i + 1][tmp.j], tmp.i + 1, tmp.j));\n                }\n                if(tmp.i == 0 && tmp.j + 1 < ysize){\n                    pq.push(Node(matrix[tmp.i][tmp.j + 1], tmp.i, tmp.j + 1));\n                }\n            }\n            return tmp.val;\n        }\n    private:\n        struct Node {\n            int val;\n            int i;\n            int j;\n            Node(int vv, int ii,  int jj): val(vv), i(ii), j(jj){};\n        };\n        struct Cmp {\n            bool operator()(const Node& a, const Node& b){\n                return a.val > b.val;\n            }\n        };\n};\n```\n\nIt also gets AC.\n","slug":"KthSmallestElementinaSortedMatrix","published":1,"updated":"2017-04-24T15:50:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxt002yx2f4d5rn3wzn","content":"<blockquote>\n<p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>\n<p>Note that it is the kth smallest element in the sorted order, not the kth distinct element.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix = [</div><div class=\"line\">   [ 1,  5,  9],</div><div class=\"line\">   [10, 11, 13],</div><div class=\"line\">   [12, 13, 15]</div><div class=\"line\">],</div><div class=\"line\">k = 8,</div><div class=\"line\"></div><div class=\"line\">return 13.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.378. It is a easy problem. Because, its tags are Heap and Binary Search, but I submit the code with Sort method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int kthSmallest(vector&lt;vector&lt;int&gt; &gt;&amp; matrix, int kth) &#123;</div><div class=\"line\">            vector&lt;int&gt; nums;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    nums.push_back(matrix[idx][idy]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            return nums[kth];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(nlogn) and its space complex is O(n). So, I don’t think this is a good solution.</p>\n<p>The following solution using a Heap to reduce the time complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int kthSmallest(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int k) &#123;</div><div class=\"line\">            int xsize = matrix.size();</div><div class=\"line\">            int ysize = matrix[0].size();</div><div class=\"line\">            priority_queue&lt;Node, vector&lt;Node&gt;, Cmp&gt; pq;</div><div class=\"line\">            pq.push(Node(matrix[0][0], 0, 0));</div><div class=\"line\">            Node tmp(-1, -1, -1);</div><div class=\"line\">            while(k--)&#123;</div><div class=\"line\">                tmp = pq.top();</div><div class=\"line\">                pq.pop();</div><div class=\"line\">                if(tmp.i + 1 &lt; xsize)&#123;</div><div class=\"line\">                    pq.push(Node(matrix[tmp.i + 1][tmp.j], tmp.i + 1, tmp.j));</div><div class=\"line\">                &#125;</div><div class=\"line\">                if(tmp.i == 0 &amp;&amp; tmp.j + 1 &lt; ysize)&#123;</div><div class=\"line\">                    pq.push(Node(matrix[tmp.i][tmp.j + 1], tmp.i, tmp.j + 1));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return tmp.val;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        struct Node &#123;</div><div class=\"line\">            int val;</div><div class=\"line\">            int i;</div><div class=\"line\">            int j;</div><div class=\"line\">            Node(int vv, int ii,  int jj): val(vv), i(ii), j(jj)&#123;&#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        struct Cmp &#123;</div><div class=\"line\">            bool operator()(const Node&amp; a, const Node&amp; b)&#123;</div><div class=\"line\">                return a.val &gt; b.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It also gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>\n<p>Note that it is the kth smallest element in the sorted order, not the kth distinct element.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">matrix = [</div><div class=\"line\">   [ 1,  5,  9],</div><div class=\"line\">   [10, 11, 13],</div><div class=\"line\">   [12, 13, 15]</div><div class=\"line\">],</div><div class=\"line\">k = 8,</div><div class=\"line\"></div><div class=\"line\">return 13.</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.378. It is a easy problem. Because, its tags are Heap and Binary Search, but I submit the code with Sort method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int kthSmallest(vector&lt;vector&lt;int&gt; &gt;&amp; matrix, int kth) &#123;</div><div class=\"line\">            vector&lt;int&gt; nums;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)matrix.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)matrix[0].size(); idy++) &#123;</div><div class=\"line\">                    nums.push_back(matrix[idx][idy]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            return nums[kth];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(nlogn) and its space complex is O(n). So, I don’t think this is a good solution.</p>\n<p>The following solution using a Heap to reduce the time complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int kthSmallest(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int k) &#123;</div><div class=\"line\">            int xsize = matrix.size();</div><div class=\"line\">            int ysize = matrix[0].size();</div><div class=\"line\">            priority_queue&lt;Node, vector&lt;Node&gt;, Cmp&gt; pq;</div><div class=\"line\">            pq.push(Node(matrix[0][0], 0, 0));</div><div class=\"line\">            Node tmp(-1, -1, -1);</div><div class=\"line\">            while(k--)&#123;</div><div class=\"line\">                tmp = pq.top();</div><div class=\"line\">                pq.pop();</div><div class=\"line\">                if(tmp.i + 1 &lt; xsize)&#123;</div><div class=\"line\">                    pq.push(Node(matrix[tmp.i + 1][tmp.j], tmp.i + 1, tmp.j));</div><div class=\"line\">                &#125;</div><div class=\"line\">                if(tmp.i == 0 &amp;&amp; tmp.j + 1 &lt; ysize)&#123;</div><div class=\"line\">                    pq.push(Node(matrix[tmp.i][tmp.j + 1], tmp.i, tmp.j + 1));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return tmp.val;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        struct Node &#123;</div><div class=\"line\">            int val;</div><div class=\"line\">            int i;</div><div class=\"line\">            int j;</div><div class=\"line\">            Node(int vv, int ii,  int jj): val(vv), i(ii), j(jj)&#123;&#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        struct Cmp &#123;</div><div class=\"line\">            bool operator()(const Node&amp; a, const Node&amp; b)&#123;</div><div class=\"line\">                return a.val &gt; b.val;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It also gets AC.</p>"},{"title":"Keyboard Row","date":"2017-02-20T02:12:50.000Z","_content":"\n> Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below.\n>\n> American keyboard:\n> ![keyboard](https://leetcode.com/static/images/problemset/keyboard.png)\n>\n> Example 1:\n> + Input: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\n> + Output: [\"Alaska\", \"Dad\"]\n>\n> Note:\n> + You may use one character in the keyboard more than once.\n> + You may assume the input string will only contain letters of alphabet.\n\n<!--more-->\n\nIt is Leetcode No.500, and it is a very easy problem.\n\n```\nclass Solution {\n    public:\n        vector<string> findWords(vector<string>& words) {\n            set<char> level[3];\n            vector<string> res;\n\n            level[0].insert('q');\n            level[0].insert('w');\n            level[0].insert('e');\n            level[0].insert('r');\n            level[0].insert('t');\n            level[0].insert('y');\n            level[0].insert('u');\n            level[0].insert('i');\n            level[0].insert('o');\n            level[0].insert('p');\n\n            level[0].insert('Q');\n            level[0].insert('W');\n            level[0].insert('E');\n            level[0].insert('R');\n            level[0].insert('T');\n            level[0].insert('Y');\n            level[0].insert('U');\n            level[0].insert('I');\n            level[0].insert('O');\n            level[0].insert('P');\n\n            level[1].insert('a');\n            level[1].insert('s');\n            level[1].insert('d');\n            level[1].insert('f');\n            level[1].insert('g');\n            level[1].insert('h');\n            level[1].insert('j');\n            level[1].insert('k');\n            level[1].insert('l');\n\n\n            level[1].insert('A');\n            level[1].insert('S');\n            level[1].insert('D');\n            level[1].insert('F');\n            level[1].insert('G');\n            level[1].insert('H');\n            level[1].insert('J');\n            level[1].insert('K');\n            level[1].insert('L');\n\n\n            level[2].insert('z');\n            level[2].insert('x');\n            level[2].insert('c');\n            level[2].insert('v');\n            level[2].insert('b');\n            level[2].insert('n');\n            level[2].insert('m');\n\n            level[2].insert('Z');\n            level[2].insert('X');\n            level[2].insert('C');\n            level[2].insert('V');\n            level[2].insert('B');\n            level[2].insert('N');\n            level[2].insert('M');\n\n            for (auto word : words) {\n                int idx = -1;\n                for (int i = 0; i < 3; i++) {\n                    if (level[i].find(word[0]) != level[i].end()) {\n                        idx = i;\n                        break;\n                    }\n                }\n                for (int i = 1; i < (int)word.length(); i++) {\n                    if (level[idx].find(word[i]) == level[idx].end()) {\n                        idx = -1;\n                        break;\n                    }\n                }\n                if (idx != -1) {\n                    res.push_back(word);\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/KeyboardRow.md","raw":"---\ntitle: Keyboard Row\ndate: 2017-02-20 10:12:50\ntags:\n    - Hash Table\n---\n\n> Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below.\n>\n> American keyboard:\n> ![keyboard](https://leetcode.com/static/images/problemset/keyboard.png)\n>\n> Example 1:\n> + Input: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\n> + Output: [\"Alaska\", \"Dad\"]\n>\n> Note:\n> + You may use one character in the keyboard more than once.\n> + You may assume the input string will only contain letters of alphabet.\n\n<!--more-->\n\nIt is Leetcode No.500, and it is a very easy problem.\n\n```\nclass Solution {\n    public:\n        vector<string> findWords(vector<string>& words) {\n            set<char> level[3];\n            vector<string> res;\n\n            level[0].insert('q');\n            level[0].insert('w');\n            level[0].insert('e');\n            level[0].insert('r');\n            level[0].insert('t');\n            level[0].insert('y');\n            level[0].insert('u');\n            level[0].insert('i');\n            level[0].insert('o');\n            level[0].insert('p');\n\n            level[0].insert('Q');\n            level[0].insert('W');\n            level[0].insert('E');\n            level[0].insert('R');\n            level[0].insert('T');\n            level[0].insert('Y');\n            level[0].insert('U');\n            level[0].insert('I');\n            level[0].insert('O');\n            level[0].insert('P');\n\n            level[1].insert('a');\n            level[1].insert('s');\n            level[1].insert('d');\n            level[1].insert('f');\n            level[1].insert('g');\n            level[1].insert('h');\n            level[1].insert('j');\n            level[1].insert('k');\n            level[1].insert('l');\n\n\n            level[1].insert('A');\n            level[1].insert('S');\n            level[1].insert('D');\n            level[1].insert('F');\n            level[1].insert('G');\n            level[1].insert('H');\n            level[1].insert('J');\n            level[1].insert('K');\n            level[1].insert('L');\n\n\n            level[2].insert('z');\n            level[2].insert('x');\n            level[2].insert('c');\n            level[2].insert('v');\n            level[2].insert('b');\n            level[2].insert('n');\n            level[2].insert('m');\n\n            level[2].insert('Z');\n            level[2].insert('X');\n            level[2].insert('C');\n            level[2].insert('V');\n            level[2].insert('B');\n            level[2].insert('N');\n            level[2].insert('M');\n\n            for (auto word : words) {\n                int idx = -1;\n                for (int i = 0; i < 3; i++) {\n                    if (level[i].find(word[0]) != level[i].end()) {\n                        idx = i;\n                        break;\n                    }\n                }\n                for (int i = 1; i < (int)word.length(); i++) {\n                    if (level[idx].find(word[i]) == level[idx].end()) {\n                        idx = -1;\n                        break;\n                    }\n                }\n                if (idx != -1) {\n                    res.push_back(word);\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"KeyboardRow","published":1,"updated":"2017-02-20T02:44:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxu0031x2f4h8rt60n3","content":"<blockquote>\n<p>Given a List of words, return the words that can be typed using letters of alphabet on only one row’s of American keyboard like the image below.</p>\n<p>American keyboard:<br><img src=\"https://leetcode.com/static/images/problemset/keyboard.png\" alt=\"keyboard\"></p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [“Hello”, “Alaska”, “Dad”, “Peace”]</li>\n<li>Output: [“Alaska”, “Dad”]</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>You may use one character in the keyboard more than once.</li>\n<li>You may assume the input string will only contain letters of alphabet.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode No.500, and it is a very easy problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;string&gt; findWords(vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            set&lt;char&gt; level[3];</div><div class=\"line\">            vector&lt;string&gt; res;</div><div class=\"line\"></div><div class=\"line\">            level[0].insert(&apos;q&apos;);</div><div class=\"line\">            level[0].insert(&apos;w&apos;);</div><div class=\"line\">            level[0].insert(&apos;e&apos;);</div><div class=\"line\">            level[0].insert(&apos;r&apos;);</div><div class=\"line\">            level[0].insert(&apos;t&apos;);</div><div class=\"line\">            level[0].insert(&apos;y&apos;);</div><div class=\"line\">            level[0].insert(&apos;u&apos;);</div><div class=\"line\">            level[0].insert(&apos;i&apos;);</div><div class=\"line\">            level[0].insert(&apos;o&apos;);</div><div class=\"line\">            level[0].insert(&apos;p&apos;);</div><div class=\"line\"></div><div class=\"line\">            level[0].insert(&apos;Q&apos;);</div><div class=\"line\">            level[0].insert(&apos;W&apos;);</div><div class=\"line\">            level[0].insert(&apos;E&apos;);</div><div class=\"line\">            level[0].insert(&apos;R&apos;);</div><div class=\"line\">            level[0].insert(&apos;T&apos;);</div><div class=\"line\">            level[0].insert(&apos;Y&apos;);</div><div class=\"line\">            level[0].insert(&apos;U&apos;);</div><div class=\"line\">            level[0].insert(&apos;I&apos;);</div><div class=\"line\">            level[0].insert(&apos;O&apos;);</div><div class=\"line\">            level[0].insert(&apos;P&apos;);</div><div class=\"line\"></div><div class=\"line\">            level[1].insert(&apos;a&apos;);</div><div class=\"line\">            level[1].insert(&apos;s&apos;);</div><div class=\"line\">            level[1].insert(&apos;d&apos;);</div><div class=\"line\">            level[1].insert(&apos;f&apos;);</div><div class=\"line\">            level[1].insert(&apos;g&apos;);</div><div class=\"line\">            level[1].insert(&apos;h&apos;);</div><div class=\"line\">            level[1].insert(&apos;j&apos;);</div><div class=\"line\">            level[1].insert(&apos;k&apos;);</div><div class=\"line\">            level[1].insert(&apos;l&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            level[1].insert(&apos;A&apos;);</div><div class=\"line\">            level[1].insert(&apos;S&apos;);</div><div class=\"line\">            level[1].insert(&apos;D&apos;);</div><div class=\"line\">            level[1].insert(&apos;F&apos;);</div><div class=\"line\">            level[1].insert(&apos;G&apos;);</div><div class=\"line\">            level[1].insert(&apos;H&apos;);</div><div class=\"line\">            level[1].insert(&apos;J&apos;);</div><div class=\"line\">            level[1].insert(&apos;K&apos;);</div><div class=\"line\">            level[1].insert(&apos;L&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            level[2].insert(&apos;z&apos;);</div><div class=\"line\">            level[2].insert(&apos;x&apos;);</div><div class=\"line\">            level[2].insert(&apos;c&apos;);</div><div class=\"line\">            level[2].insert(&apos;v&apos;);</div><div class=\"line\">            level[2].insert(&apos;b&apos;);</div><div class=\"line\">            level[2].insert(&apos;n&apos;);</div><div class=\"line\">            level[2].insert(&apos;m&apos;);</div><div class=\"line\"></div><div class=\"line\">            level[2].insert(&apos;Z&apos;);</div><div class=\"line\">            level[2].insert(&apos;X&apos;);</div><div class=\"line\">            level[2].insert(&apos;C&apos;);</div><div class=\"line\">            level[2].insert(&apos;V&apos;);</div><div class=\"line\">            level[2].insert(&apos;B&apos;);</div><div class=\"line\">            level[2].insert(&apos;N&apos;);</div><div class=\"line\">            level[2].insert(&apos;M&apos;);</div><div class=\"line\"></div><div class=\"line\">            for (auto word : words) &#123;</div><div class=\"line\">                int idx = -1;</div><div class=\"line\">                for (int i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">                    if (level[i].find(word[0]) != level[i].end()) &#123;</div><div class=\"line\">                        idx = i;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (int i = 1; i &lt; (int)word.length(); i++) &#123;</div><div class=\"line\">                    if (level[idx].find(word[i]) == level[idx].end()) &#123;</div><div class=\"line\">                        idx = -1;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (idx != -1) &#123;</div><div class=\"line\">                    res.push_back(word);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a List of words, return the words that can be typed using letters of alphabet on only one row’s of American keyboard like the image below.</p>\n<p>American keyboard:<br><img src=\"https://leetcode.com/static/images/problemset/keyboard.png\" alt=\"keyboard\"></p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [“Hello”, “Alaska”, “Dad”, “Peace”]</li>\n<li>Output: [“Alaska”, “Dad”]</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>You may use one character in the keyboard more than once.</li>\n<li>You may assume the input string will only contain letters of alphabet.</li>\n</ul>\n</blockquote>","more":"<p>It is Leetcode No.500, and it is a very easy problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;string&gt; findWords(vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            set&lt;char&gt; level[3];</div><div class=\"line\">            vector&lt;string&gt; res;</div><div class=\"line\"></div><div class=\"line\">            level[0].insert(&apos;q&apos;);</div><div class=\"line\">            level[0].insert(&apos;w&apos;);</div><div class=\"line\">            level[0].insert(&apos;e&apos;);</div><div class=\"line\">            level[0].insert(&apos;r&apos;);</div><div class=\"line\">            level[0].insert(&apos;t&apos;);</div><div class=\"line\">            level[0].insert(&apos;y&apos;);</div><div class=\"line\">            level[0].insert(&apos;u&apos;);</div><div class=\"line\">            level[0].insert(&apos;i&apos;);</div><div class=\"line\">            level[0].insert(&apos;o&apos;);</div><div class=\"line\">            level[0].insert(&apos;p&apos;);</div><div class=\"line\"></div><div class=\"line\">            level[0].insert(&apos;Q&apos;);</div><div class=\"line\">            level[0].insert(&apos;W&apos;);</div><div class=\"line\">            level[0].insert(&apos;E&apos;);</div><div class=\"line\">            level[0].insert(&apos;R&apos;);</div><div class=\"line\">            level[0].insert(&apos;T&apos;);</div><div class=\"line\">            level[0].insert(&apos;Y&apos;);</div><div class=\"line\">            level[0].insert(&apos;U&apos;);</div><div class=\"line\">            level[0].insert(&apos;I&apos;);</div><div class=\"line\">            level[0].insert(&apos;O&apos;);</div><div class=\"line\">            level[0].insert(&apos;P&apos;);</div><div class=\"line\"></div><div class=\"line\">            level[1].insert(&apos;a&apos;);</div><div class=\"line\">            level[1].insert(&apos;s&apos;);</div><div class=\"line\">            level[1].insert(&apos;d&apos;);</div><div class=\"line\">            level[1].insert(&apos;f&apos;);</div><div class=\"line\">            level[1].insert(&apos;g&apos;);</div><div class=\"line\">            level[1].insert(&apos;h&apos;);</div><div class=\"line\">            level[1].insert(&apos;j&apos;);</div><div class=\"line\">            level[1].insert(&apos;k&apos;);</div><div class=\"line\">            level[1].insert(&apos;l&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            level[1].insert(&apos;A&apos;);</div><div class=\"line\">            level[1].insert(&apos;S&apos;);</div><div class=\"line\">            level[1].insert(&apos;D&apos;);</div><div class=\"line\">            level[1].insert(&apos;F&apos;);</div><div class=\"line\">            level[1].insert(&apos;G&apos;);</div><div class=\"line\">            level[1].insert(&apos;H&apos;);</div><div class=\"line\">            level[1].insert(&apos;J&apos;);</div><div class=\"line\">            level[1].insert(&apos;K&apos;);</div><div class=\"line\">            level[1].insert(&apos;L&apos;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            level[2].insert(&apos;z&apos;);</div><div class=\"line\">            level[2].insert(&apos;x&apos;);</div><div class=\"line\">            level[2].insert(&apos;c&apos;);</div><div class=\"line\">            level[2].insert(&apos;v&apos;);</div><div class=\"line\">            level[2].insert(&apos;b&apos;);</div><div class=\"line\">            level[2].insert(&apos;n&apos;);</div><div class=\"line\">            level[2].insert(&apos;m&apos;);</div><div class=\"line\"></div><div class=\"line\">            level[2].insert(&apos;Z&apos;);</div><div class=\"line\">            level[2].insert(&apos;X&apos;);</div><div class=\"line\">            level[2].insert(&apos;C&apos;);</div><div class=\"line\">            level[2].insert(&apos;V&apos;);</div><div class=\"line\">            level[2].insert(&apos;B&apos;);</div><div class=\"line\">            level[2].insert(&apos;N&apos;);</div><div class=\"line\">            level[2].insert(&apos;M&apos;);</div><div class=\"line\"></div><div class=\"line\">            for (auto word : words) &#123;</div><div class=\"line\">                int idx = -1;</div><div class=\"line\">                for (int i = 0; i &lt; 3; i++) &#123;</div><div class=\"line\">                    if (level[i].find(word[0]) != level[i].end()) &#123;</div><div class=\"line\">                        idx = i;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (int i = 1; i &lt; (int)word.length(); i++) &#123;</div><div class=\"line\">                    if (level[idx].find(word[i]) == level[idx].end()) &#123;</div><div class=\"line\">                        idx = -1;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (idx != -1) &#123;</div><div class=\"line\">                    res.push_back(word);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Lonely Pixel II","date":"2017-03-06T05:44:35.000Z","_content":"\n> Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:\n>\n> + Row R and column C both contain exactly N black pixels.\n> + For all rows that have a black pixel at column C, they should be exactly the same as row R\n>\n> The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively.\n>\n> Example:\n>```\nInput:\n[\n    ['W', 'B', 'W', 'B', 'B', 'W'],\n    ['W', 'B', 'W', 'B', 'B', 'W'],\n    ['W', 'B', 'W', 'B', 'B', 'W'],\n    ['W', 'W', 'B', 'W', 'B', 'W']\n]\nN = 3\nOutput: 6\nExplanation: All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).\n          0    1    2    3    4    5         column index\n    [\n0       ['W', 'B', 'W', 'B', 'B', 'W'],\n1       ['W', 'B', 'W', 'B', 'B', 'W'],\n2       ['W', 'B', 'W', 'B', 'B', 'W'],\n3       ['W', 'W', 'B', 'W', 'B', 'W']\n    ]\nrow index\n\nTake 'B' at row R = 0 and column C = 1 as an example:\nRule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels.\nRule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.\n```\n> Note:\n> + The range of width and height of the input 2D array is [1,200].\n\n<!--more-->\n\nThis is Leetcode No.533 , and for some reason I miss the time I can submit my answer... So, here is my answer and I don't know whether it is correct...\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int findBlackPixel(vector<vector<char> >& picture, int N) {\n        int res = 0;\n        for (int idx = 0; idx < (int)picture.size(); idx++) {\n            for (int idy = 0; idy < (int)picture[0].size(); idy++) {\n                if (picture[idx][idy] == 'B' && check(picture, idx, idy, N)) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n\n    bool check(vector<vector<char> > picture, int idx, int idy, int N) {\n        int res = 0;\n        for (int i = 0; i < (int)picture.size(); i++) {\n            if (picture[idx][i] == 'B') {\n                res++;\n            }\n        }\n        if (res != N) {\n            return false;\n        }\n        res = 0;\n        for (int i = 0; i < (int)picture[0].size(); i++) {\n            if (picture[i][idy] == 'B') {\n                res++;\n            }\n        }\n        return res == N;\n    }\n};\n```\n","source":"_posts/LonelyPixelII.md","raw":"---\ntitle: Lonely Pixel II\ndate: 2017-03-06 13:44:35\ntags:\n    - Array\n    - Depth-first Search\n---\n\n> Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:\n>\n> + Row R and column C both contain exactly N black pixels.\n> + For all rows that have a black pixel at column C, they should be exactly the same as row R\n>\n> The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively.\n>\n> Example:\n>```\nInput:\n[\n    ['W', 'B', 'W', 'B', 'B', 'W'],\n    ['W', 'B', 'W', 'B', 'B', 'W'],\n    ['W', 'B', 'W', 'B', 'B', 'W'],\n    ['W', 'W', 'B', 'W', 'B', 'W']\n]\nN = 3\nOutput: 6\nExplanation: All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).\n          0    1    2    3    4    5         column index\n    [\n0       ['W', 'B', 'W', 'B', 'B', 'W'],\n1       ['W', 'B', 'W', 'B', 'B', 'W'],\n2       ['W', 'B', 'W', 'B', 'B', 'W'],\n3       ['W', 'W', 'B', 'W', 'B', 'W']\n    ]\nrow index\n\nTake 'B' at row R = 0 and column C = 1 as an example:\nRule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels.\nRule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.\n```\n> Note:\n> + The range of width and height of the input 2D array is [1,200].\n\n<!--more-->\n\nThis is Leetcode No.533 , and for some reason I miss the time I can submit my answer... So, here is my answer and I don't know whether it is correct...\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int findBlackPixel(vector<vector<char> >& picture, int N) {\n        int res = 0;\n        for (int idx = 0; idx < (int)picture.size(); idx++) {\n            for (int idy = 0; idy < (int)picture[0].size(); idy++) {\n                if (picture[idx][idy] == 'B' && check(picture, idx, idy, N)) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n\n    bool check(vector<vector<char> > picture, int idx, int idy, int N) {\n        int res = 0;\n        for (int i = 0; i < (int)picture.size(); i++) {\n            if (picture[idx][i] == 'B') {\n                res++;\n            }\n        }\n        if (res != N) {\n            return false;\n        }\n        res = 0;\n        for (int i = 0; i < (int)picture[0].size(); i++) {\n            if (picture[i][idy] == 'B') {\n                res++;\n            }\n        }\n        return res == N;\n    }\n};\n```\n","slug":"LonelyPixelII","published":1,"updated":"2017-03-08T02:22:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxu0033x2f4imv5ovt6","content":"<blockquote>\n<p>Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:</p>\n<ul>\n<li>Row R and column C both contain exactly N black pixels.</li>\n<li>For all rows that have a black pixel at column C, they should be exactly the same as row R</li>\n</ul>\n<p>The picture is represented by a 2D char array consisting of ‘B’ and ‘W’, which means black and white pixels respectively.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">    [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">    [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">    [&apos;W&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;]</div><div class=\"line\">]</div><div class=\"line\">N = 3</div><div class=\"line\">Output: 6</div><div class=\"line\">Explanation: All the bold &apos;B&apos; are the black pixels we need (all &apos;B&apos;s at column 1 and 3).</div><div class=\"line\">          0    1    2    3    4    5         column index</div><div class=\"line\">    [</div><div class=\"line\">0       [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">1       [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">2       [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">3       [&apos;W&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;]</div><div class=\"line\">    ]</div><div class=\"line\">row index</div><div class=\"line\"></div><div class=\"line\">Take &apos;B&apos; at row R = 0 and column C = 1 as an example:</div><div class=\"line\">Rule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels.</div><div class=\"line\">Rule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The range of width and height of the input 2D array is [1,200].</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.533 , and for some reason I miss the time I can submit my answer… So, here is my answer and I don’t know whether it is correct…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int findBlackPixel(vector&lt;vector&lt;char&gt; &gt;&amp; picture, int N) &#123;</div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (int idx = 0; idx &lt; (int)picture.size(); idx++) &#123;</div><div class=\"line\">            for (int idy = 0; idy &lt; (int)picture[0].size(); idy++) &#123;</div><div class=\"line\">                if (picture[idx][idy] == &apos;B&apos; &amp;&amp; check(picture, idx, idy, N)) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool check(vector&lt;vector&lt;char&gt; &gt; picture, int idx, int idy, int N) &#123;</div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)picture.size(); i++) &#123;</div><div class=\"line\">            if (picture[idx][i] == &apos;B&apos;) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (res != N) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        res = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)picture[0].size(); i++) &#123;</div><div class=\"line\">            if (picture[i][idy] == &apos;B&apos;) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res == N;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:</p>\n<ul>\n<li>Row R and column C both contain exactly N black pixels.</li>\n<li>For all rows that have a black pixel at column C, they should be exactly the same as row R</li>\n</ul>\n<p>The picture is represented by a 2D char array consisting of ‘B’ and ‘W’, which means black and white pixels respectively.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">    [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">    [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">    [&apos;W&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;]</div><div class=\"line\">]</div><div class=\"line\">N = 3</div><div class=\"line\">Output: 6</div><div class=\"line\">Explanation: All the bold &apos;B&apos; are the black pixels we need (all &apos;B&apos;s at column 1 and 3).</div><div class=\"line\">          0    1    2    3    4    5         column index</div><div class=\"line\">    [</div><div class=\"line\">0       [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">1       [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">2       [&apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;B&apos;, &apos;W&apos;],</div><div class=\"line\">3       [&apos;W&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;, &apos;B&apos;, &apos;W&apos;]</div><div class=\"line\">    ]</div><div class=\"line\">row index</div><div class=\"line\"></div><div class=\"line\">Take &apos;B&apos; at row R = 0 and column C = 1 as an example:</div><div class=\"line\">Rule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels.</div><div class=\"line\">Rule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The range of width and height of the input 2D array is [1,200].</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.533 , and for some reason I miss the time I can submit my answer… So, here is my answer and I don’t know whether it is correct…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int findBlackPixel(vector&lt;vector&lt;char&gt; &gt;&amp; picture, int N) &#123;</div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (int idx = 0; idx &lt; (int)picture.size(); idx++) &#123;</div><div class=\"line\">            for (int idy = 0; idy &lt; (int)picture[0].size(); idy++) &#123;</div><div class=\"line\">                if (picture[idx][idy] == &apos;B&apos; &amp;&amp; check(picture, idx, idy, N)) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool check(vector&lt;vector&lt;char&gt; &gt; picture, int idx, int idy, int N) &#123;</div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)picture.size(); i++) &#123;</div><div class=\"line\">            if (picture[idx][i] == &apos;B&apos;) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (res != N) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        res = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)picture[0].size(); i++) &#123;</div><div class=\"line\">            if (picture[i][idy] == &apos;B&apos;) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res == N;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"License Key Formatting","date":"2017-01-17T15:18:47.000Z","_content":"> Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.\n>\n> We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.\n>\n> So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.\n>\n>\n> Example 1:\n>   + Input: S = \"2-4A0r7-4k\", K = 4\n>   + Output: \"24A0-R74K\"\n>   + Explanation: The string S has been split into two parts, each part has 4 characters.\n>\n> Example 2:\n>   + Input: S = \"2-4A0r7-4k\", K = 3\n>   + Output: \"24-A0R-74K\"\n>   + Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.\n>\n> Note:\n> + The length of string S will not exceed 12,000, and K is a positive integer.\n> + String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).\n> + String S is non-empty.\n\n<!--more-->\n\nThis is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.\n\n```\nclass Solution {\n    public:\n        string licenseKeyFormatting(string S, int K) {\n            vector<char> strs;\n            for (int i = 0; i < (int)S.length(); i++) {\n                if (S[i] == '-') {\n                    continue;\n                } else if ('a' <= S[i] && S[i] <= 'z') {\n                    strs.push_back((char)(S[i] - 'a' + 'A'));\n                } else {\n                    strs.push_back(S[i]);\n                }\n            }\n            int firstIdx = strs.size() % K;\n            string res = \"\";\n            for (int i = 0; i < firstIdx; i++) {\n                res = res + strs[i];\n            }\n            for (int i = firstIdx; i < (int)strs.size(); i++) {\n                if (i != 0 && (i - firstIdx) % K == 0) {\n                    res = res + '-';\n                }\n                res = res + strs[i];\n            }\n            return res;\n        }\n};\n```\n\nThis code I just type and submit and get AC in the first time. Such an easy problem.\n\n","source":"_posts/LicenseKeyFormatting.md","raw":"---\ntitle: License Key Formatting\ndate: 2017-01-17 23:18:47\ntags:\n    - String\n---\n> Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.\n>\n> We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.\n>\n> So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.\n>\n>\n> Example 1:\n>   + Input: S = \"2-4A0r7-4k\", K = 4\n>   + Output: \"24A0-R74K\"\n>   + Explanation: The string S has been split into two parts, each part has 4 characters.\n>\n> Example 2:\n>   + Input: S = \"2-4A0r7-4k\", K = 3\n>   + Output: \"24-A0R-74K\"\n>   + Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.\n>\n> Note:\n> + The length of string S will not exceed 12,000, and K is a positive integer.\n> + String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).\n> + String S is non-empty.\n\n<!--more-->\n\nThis is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.\n\n```\nclass Solution {\n    public:\n        string licenseKeyFormatting(string S, int K) {\n            vector<char> strs;\n            for (int i = 0; i < (int)S.length(); i++) {\n                if (S[i] == '-') {\n                    continue;\n                } else if ('a' <= S[i] && S[i] <= 'z') {\n                    strs.push_back((char)(S[i] - 'a' + 'A'));\n                } else {\n                    strs.push_back(S[i]);\n                }\n            }\n            int firstIdx = strs.size() % K;\n            string res = \"\";\n            for (int i = 0; i < firstIdx; i++) {\n                res = res + strs[i];\n            }\n            for (int i = firstIdx; i < (int)strs.size(); i++) {\n                if (i != 0 && (i - firstIdx) % K == 0) {\n                    res = res + '-';\n                }\n                res = res + strs[i];\n            }\n            return res;\n        }\n};\n```\n\nThis code I just type and submit and get AC in the first time. Such an easy problem.\n\n","slug":"LicenseKeyFormatting","published":1,"updated":"2017-01-17T15:33:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxv0036x2f48kb4lhii","content":"<blockquote>\n<p>Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.</p>\n<p>We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.</p>\n<p>So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 4</li>\n<li>Output: “24A0-R74K”</li>\n<li>Explanation: The string S has been split into two parts, each part has 4 characters.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 3</li>\n<li>Output: “24-A0R-74K”</li>\n<li>Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>\n<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>\n<li>String S is non-empty.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string licenseKeyFormatting(string S, int K) &#123;</div><div class=\"line\">            vector&lt;char&gt; strs;</div><div class=\"line\">            for (int i = 0; i &lt; (int)S.length(); i++) &#123;</div><div class=\"line\">                if (S[i] == &apos;-&apos;) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125; else if (&apos;a&apos; &lt;= S[i] &amp;&amp; S[i] &lt;= &apos;z&apos;) &#123;</div><div class=\"line\">                    strs.push_back((char)(S[i] - &apos;a&apos; + &apos;A&apos;));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    strs.push_back(S[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int firstIdx = strs.size() % K;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            for (int i = 0; i &lt; firstIdx; i++) &#123;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = firstIdx; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                if (i != 0 &amp;&amp; (i - firstIdx) % K == 0) &#123;</div><div class=\"line\">                    res = res + &apos;-&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This code I just type and submit and get AC in the first time. Such an easy problem.</p>\n","excerpt":"<blockquote>\n<p>Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.</p>\n<p>We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.</p>\n<p>So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 4</li>\n<li>Output: “24A0-R74K”</li>\n<li>Explanation: The string S has been split into two parts, each part has 4 characters.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 3</li>\n<li>Output: “24-A0R-74K”</li>\n<li>Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>\n<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>\n<li>String S is non-empty.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string licenseKeyFormatting(string S, int K) &#123;</div><div class=\"line\">            vector&lt;char&gt; strs;</div><div class=\"line\">            for (int i = 0; i &lt; (int)S.length(); i++) &#123;</div><div class=\"line\">                if (S[i] == &apos;-&apos;) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125; else if (&apos;a&apos; &lt;= S[i] &amp;&amp; S[i] &lt;= &apos;z&apos;) &#123;</div><div class=\"line\">                    strs.push_back((char)(S[i] - &apos;a&apos; + &apos;A&apos;));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    strs.push_back(S[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int firstIdx = strs.size() % K;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            for (int i = 0; i &lt; firstIdx; i++) &#123;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = firstIdx; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                if (i != 0 &amp;&amp; (i - firstIdx) % K == 0) &#123;</div><div class=\"line\">                    res = res + &apos;-&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This code I just type and submit and get AC in the first time. Such an easy problem.</p>"},{"title":"Largest Divisible Subset","date":"2017-01-13T03:04:11.000Z","_content":"\n> Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.\n>\n> If there are multiple solutions, return any subset is fine.\n>\n> Example 1:\n> nums: [1,2,3]\n> Result: [1,2] (of course, [1,3] will also be ok)\n>\n> Example 2:\n> nums: [1,2,4,8]\n> Result: [1,2,4,8]\n\n<!--more-->\n\nThis is Leetcode 368, and it's a usual DP problem.\n\nWe use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.\n\nThen we can find the solution:\n\n```\nclass Solution {\n    public:\n        vector<int> largestDivisibleSubset(vector<int>& nums) {\n            vector<int> v;\n            if (nums.size() < 1) {\n                return v;\n            }\n            sort(nums.begin(), nums.end());\n            map<int, vector<int> > numMap;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                vector<int> vtmp;\n                vtmp.push_back(nums[i]);\n                numMap.insert(pair<int, vector<int> >(nums[i], vtmp));\n            }\n            for (int i = 0; i < (int)nums.size(); i++) {\n                for (int j = i + 1; j < (int)nums.size(); j++) {\n                    if (nums[j] % nums[i] == 0) {\n                        if (numMap.find(nums[j])->second.size() < numMap.find(nums[i])->second.size() + 1) {\n                            vector<int> vtmp;\n                            vtmp.assign(numMap.find(nums[i])->second.begin(), numMap.find(nums[i])->second.end());\n                            vtmp.push_back(nums[j]);\n                            numMap.find(nums[j])->second = vtmp;\n                        }\n                    }\n                }\n            }\n\n            int idx = 0, max = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (max < (int)numMap.find(nums[i])->second.size()) {\n                    idx = nums[i];\n                    max = numMap.find(nums[i])->second.size();\n                }\n            }\n            return  numMap.find(idx)->second;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/LargestDivisibleSubset.md","raw":"---\ntitle: Largest Divisible Subset\ndate: 2017-01-13 11:04:11\ntags:\n    - Math\n    - Dynamic Programming\n---\n\n> Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.\n>\n> If there are multiple solutions, return any subset is fine.\n>\n> Example 1:\n> nums: [1,2,3]\n> Result: [1,2] (of course, [1,3] will also be ok)\n>\n> Example 2:\n> nums: [1,2,4,8]\n> Result: [1,2,4,8]\n\n<!--more-->\n\nThis is Leetcode 368, and it's a usual DP problem.\n\nWe use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.\n\nThen we can find the solution:\n\n```\nclass Solution {\n    public:\n        vector<int> largestDivisibleSubset(vector<int>& nums) {\n            vector<int> v;\n            if (nums.size() < 1) {\n                return v;\n            }\n            sort(nums.begin(), nums.end());\n            map<int, vector<int> > numMap;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                vector<int> vtmp;\n                vtmp.push_back(nums[i]);\n                numMap.insert(pair<int, vector<int> >(nums[i], vtmp));\n            }\n            for (int i = 0; i < (int)nums.size(); i++) {\n                for (int j = i + 1; j < (int)nums.size(); j++) {\n                    if (nums[j] % nums[i] == 0) {\n                        if (numMap.find(nums[j])->second.size() < numMap.find(nums[i])->second.size() + 1) {\n                            vector<int> vtmp;\n                            vtmp.assign(numMap.find(nums[i])->second.begin(), numMap.find(nums[i])->second.end());\n                            vtmp.push_back(nums[j]);\n                            numMap.find(nums[j])->second = vtmp;\n                        }\n                    }\n                }\n            }\n\n            int idx = 0, max = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (max < (int)numMap.find(nums[i])->second.size()) {\n                    idx = nums[i];\n                    max = numMap.find(nums[i])->second.size();\n                }\n            }\n            return  numMap.find(idx)->second;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"LargestDivisibleSubset","published":1,"updated":"2017-01-14T12:11:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxw0038x2f4mpqsu6tx","content":"<blockquote>\n<p>Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.</p>\n<p>If there are multiple solutions, return any subset is fine.</p>\n<p>Example 1:<br>nums: [1,2,3]<br>Result: [1,2] (of course, [1,3] will also be ok)</p>\n<p>Example 2:<br>nums: [1,2,4,8]<br>Result: [1,2,4,8]</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 368, and it’s a usual DP problem.</p>\n<p>We use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.</p>\n<p>Then we can find the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; largestDivisibleSubset(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; v;</div><div class=\"line\">            if (nums.size() &lt; 1) &#123;</div><div class=\"line\">                return v;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            map&lt;int, vector&lt;int&gt; &gt; numMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; vtmp;</div><div class=\"line\">                vtmp.push_back(nums[i]);</div><div class=\"line\">                numMap.insert(pair&lt;int, vector&lt;int&gt; &gt;(nums[i], vtmp));</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                    if (nums[j] % nums[i] == 0) &#123;</div><div class=\"line\">                        if (numMap.find(nums[j])-&gt;second.size() &lt; numMap.find(nums[i])-&gt;second.size() + 1) &#123;</div><div class=\"line\">                            vector&lt;int&gt; vtmp;</div><div class=\"line\">                            vtmp.assign(numMap.find(nums[i])-&gt;second.begin(), numMap.find(nums[i])-&gt;second.end());</div><div class=\"line\">                            vtmp.push_back(nums[j]);</div><div class=\"line\">                            numMap.find(nums[j])-&gt;second = vtmp;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx = 0, max = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (max &lt; (int)numMap.find(nums[i])-&gt;second.size()) &#123;</div><div class=\"line\">                    idx = nums[i];</div><div class=\"line\">                    max = numMap.find(nums[i])-&gt;second.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return  numMap.find(idx)-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.</p>\n<p>If there are multiple solutions, return any subset is fine.</p>\n<p>Example 1:<br>nums: [1,2,3]<br>Result: [1,2] (of course, [1,3] will also be ok)</p>\n<p>Example 2:<br>nums: [1,2,4,8]<br>Result: [1,2,4,8]</p>\n</blockquote>","more":"<p>This is Leetcode 368, and it’s a usual DP problem.</p>\n<p>We use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.</p>\n<p>Then we can find the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; largestDivisibleSubset(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; v;</div><div class=\"line\">            if (nums.size() &lt; 1) &#123;</div><div class=\"line\">                return v;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            map&lt;int, vector&lt;int&gt; &gt; numMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; vtmp;</div><div class=\"line\">                vtmp.push_back(nums[i]);</div><div class=\"line\">                numMap.insert(pair&lt;int, vector&lt;int&gt; &gt;(nums[i], vtmp));</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                    if (nums[j] % nums[i] == 0) &#123;</div><div class=\"line\">                        if (numMap.find(nums[j])-&gt;second.size() &lt; numMap.find(nums[i])-&gt;second.size() + 1) &#123;</div><div class=\"line\">                            vector&lt;int&gt; vtmp;</div><div class=\"line\">                            vtmp.assign(numMap.find(nums[i])-&gt;second.begin(), numMap.find(nums[i])-&gt;second.end());</div><div class=\"line\">                            vtmp.push_back(nums[j]);</div><div class=\"line\">                            numMap.find(nums[j])-&gt;second = vtmp;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx = 0, max = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (max &lt; (int)numMap.find(nums[i])-&gt;second.size()) &#123;</div><div class=\"line\">                    idx = nums[i];</div><div class=\"line\">                    max = numMap.find(nums[i])-&gt;second.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return  numMap.find(idx)-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Longest Increasing Path in a Matrix","date":"2017-01-09T08:15:57.000Z","_content":"\n> Given an integer matrix, find the length of the longest increasing path.\n>\n> From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).\n>\n> Example 1:\n>\n> nums = [ [9,9,4], [6,6,8], [2,1,1] ]\n>\n> Return 4\n> The longest increasing path is [1, 2, 6, 9].\n>\n> Example 2:\n>\n> nums = [ [3,4,5], [3,2,6], [2,2,1] ]\n>\n> Return 4\n> The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\n<!-- more -->\n\nThis is Leetcode 329, it's a classic DFS problem. And you can use more space to improve its performance.\n\nFor example, you can use two maxDepth array to store the max depth in current position and its direction.\n\nSo, its solution will be as following, (we use the build-in dfs function):\n\n```\nclass Solution {\n    public:\n        int longestIncreasingPath(vector<vector<int>>& matrix) {\n            int rows = matrix.size();\n            if (!rows) return 0;\n            int cols = matrix[0].size();\n\n            vector<vector<int>> dp(rows, vector<int>(cols, 0));\n            std::function<int(int, int)> dfs = [&] (int x, int y) {\n                if (dp[x][y]) return dp[x][y];\n                vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};\n                for (auto &dir : dirs) {\n                    int xx = x + dir[0], yy = y + dir[1];\n                    if (xx < 0 || xx >= rows || yy < 0 || yy >= cols) continue;\n                    if (matrix[xx][yy] <= matrix[x][y]) continue;\n                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));\n                }\n                return ++dp[x][y];\n            };\n\n            int ret = 0;\n            for (int i = 0; i < rows; ++i) {\n                for (int j = 0; j < cols; ++j) {\n                    ret = std::max(ret, dfs(i, j));\n                }\n            }\n\n            return ret;\n        }\n};\n```\n","source":"_posts/LongestIncreasingPathinaMatrix.md","raw":"---\ntitle: Longest Increasing Path in a Matrix\ndate: 2017-01-09 16:15:57\ntags:\n    - Depth-first Search\n    - Memoization\n    - Topological sort\n---\n\n> Given an integer matrix, find the length of the longest increasing path.\n>\n> From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).\n>\n> Example 1:\n>\n> nums = [ [9,9,4], [6,6,8], [2,1,1] ]\n>\n> Return 4\n> The longest increasing path is [1, 2, 6, 9].\n>\n> Example 2:\n>\n> nums = [ [3,4,5], [3,2,6], [2,2,1] ]\n>\n> Return 4\n> The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\n<!-- more -->\n\nThis is Leetcode 329, it's a classic DFS problem. And you can use more space to improve its performance.\n\nFor example, you can use two maxDepth array to store the max depth in current position and its direction.\n\nSo, its solution will be as following, (we use the build-in dfs function):\n\n```\nclass Solution {\n    public:\n        int longestIncreasingPath(vector<vector<int>>& matrix) {\n            int rows = matrix.size();\n            if (!rows) return 0;\n            int cols = matrix[0].size();\n\n            vector<vector<int>> dp(rows, vector<int>(cols, 0));\n            std::function<int(int, int)> dfs = [&] (int x, int y) {\n                if (dp[x][y]) return dp[x][y];\n                vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};\n                for (auto &dir : dirs) {\n                    int xx = x + dir[0], yy = y + dir[1];\n                    if (xx < 0 || xx >= rows || yy < 0 || yy >= cols) continue;\n                    if (matrix[xx][yy] <= matrix[x][y]) continue;\n                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));\n                }\n                return ++dp[x][y];\n            };\n\n            int ret = 0;\n            for (int i = 0; i < rows; ++i) {\n                for (int j = 0; j < cols; ++j) {\n                    ret = std::max(ret, dfs(i, j));\n                }\n            }\n\n            return ret;\n        }\n};\n```\n","slug":"LongestIncreasingPathinaMatrix","published":1,"updated":"2017-01-09T08:24:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxy003bx2f4p5jvkih5","content":"<blockquote>\n<p>Given an integer matrix, find the length of the longest increasing path.</p>\n<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\n<p>Example 1:</p>\n<p>nums = [ [9,9,4], [6,6,8], [2,1,1] ]</p>\n<p>Return 4<br>The longest increasing path is [1, 2, 6, 9].</p>\n<p>Example 2:</p>\n<p>nums = [ [3,4,5], [3,2,6], [2,2,1] ]</p>\n<p>Return 4<br>The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 329, it’s a classic DFS problem. And you can use more space to improve its performance.</p>\n<p>For example, you can use two maxDepth array to store the max depth in current position and its direction.</p>\n<p>So, its solution will be as following, (we use the build-in dfs function):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestIncreasingPath(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</div><div class=\"line\">            int rows = matrix.size();</div><div class=\"line\">            if (!rows) return 0;</div><div class=\"line\">            int cols = matrix[0].size();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt;&gt; dp(rows, vector&lt;int&gt;(cols, 0));</div><div class=\"line\">            std::function&lt;int(int, int)&gt; dfs = [&amp;] (int x, int y) &#123;</div><div class=\"line\">                if (dp[x][y]) return dp[x][y];</div><div class=\"line\">                vector&lt;vector&lt;int&gt;&gt; dirs = &#123;&#123;-1, 0&#125;, &#123;1, 0&#125;, &#123;0, 1&#125;, &#123;0, -1&#125;&#125;;</div><div class=\"line\">                for (auto &amp;dir : dirs) &#123;</div><div class=\"line\">                    int xx = x + dir[0], yy = y + dir[1];</div><div class=\"line\">                    if (xx &lt; 0 || xx &gt;= rows || yy &lt; 0 || yy &gt;= cols) continue;</div><div class=\"line\">                    if (matrix[xx][yy] &lt;= matrix[x][y]) continue;</div><div class=\"line\">                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));</div><div class=\"line\">                &#125;</div><div class=\"line\">                return ++dp[x][y];</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            int ret = 0;</div><div class=\"line\">            for (int i = 0; i &lt; rows; ++i) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; cols; ++j) &#123;</div><div class=\"line\">                    ret = std::max(ret, dfs(i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return ret;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Given an integer matrix, find the length of the longest increasing path.</p>\n<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\n<p>Example 1:</p>\n<p>nums = [ [9,9,4], [6,6,8], [2,1,1] ]</p>\n<p>Return 4<br>The longest increasing path is [1, 2, 6, 9].</p>\n<p>Example 2:</p>\n<p>nums = [ [3,4,5], [3,2,6], [2,2,1] ]</p>\n<p>Return 4<br>The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</p>\n</blockquote>","more":"<p>This is Leetcode 329, it’s a classic DFS problem. And you can use more space to improve its performance.</p>\n<p>For example, you can use two maxDepth array to store the max depth in current position and its direction.</p>\n<p>So, its solution will be as following, (we use the build-in dfs function):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestIncreasingPath(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</div><div class=\"line\">            int rows = matrix.size();</div><div class=\"line\">            if (!rows) return 0;</div><div class=\"line\">            int cols = matrix[0].size();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt;&gt; dp(rows, vector&lt;int&gt;(cols, 0));</div><div class=\"line\">            std::function&lt;int(int, int)&gt; dfs = [&amp;] (int x, int y) &#123;</div><div class=\"line\">                if (dp[x][y]) return dp[x][y];</div><div class=\"line\">                vector&lt;vector&lt;int&gt;&gt; dirs = &#123;&#123;-1, 0&#125;, &#123;1, 0&#125;, &#123;0, 1&#125;, &#123;0, -1&#125;&#125;;</div><div class=\"line\">                for (auto &amp;dir : dirs) &#123;</div><div class=\"line\">                    int xx = x + dir[0], yy = y + dir[1];</div><div class=\"line\">                    if (xx &lt; 0 || xx &gt;= rows || yy &lt; 0 || yy &gt;= cols) continue;</div><div class=\"line\">                    if (matrix[xx][yy] &lt;= matrix[x][y]) continue;</div><div class=\"line\">                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));</div><div class=\"line\">                &#125;</div><div class=\"line\">                return ++dp[x][y];</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            int ret = 0;</div><div class=\"line\">            for (int i = 0; i &lt; rows; ++i) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; cols; ++j) &#123;</div><div class=\"line\">                    ret = std::max(ret, dfs(i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return ret;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"Longest Increasing Subsequence","date":"2017-03-22T07:49:41.000Z","_content":"\n> Given an unsorted array of integers, find the length of longest increasing subsequence.\n>\n> For example,\n> Given [10, 9, 2, 5, 3, 7, 101, 18],\n> The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.\n>\n> Your algorithm should run in O(n2) complexity.\n>\n> Follow up: Could you improve it to O(n log n) time complexity?\n\n<!--more-->\n\nThis is Leetcode No.300. It is a DP problem. So you can quickly find the O(n^3) solution.\n\nBy using for loop for three times. You can find the result. But if you use a DP array to store the result. You can improve the time complex to O(n^2).\n\nHere is my solution:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int lengthOfLIS(vector<int> nums) {\n            vector<int> DP;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                DP.push_back(1);\n            }\n            for (int i = 1; i < (int)nums.size(); i++) {\n                for (int j = 0; j < i; j++) {\n                    if (nums[i] > nums[j]) {\n                        DP[i] = max(DP[i], DP[j] + 1);\n                    }\n                }\n            }\n            int res = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                res = max(DP[i], res);\n\n            }\n            return res;\n        }\n};\n```\n\nBut I can't find the O(nlogn) method until I find the solution in the Discuss channel.\n\n```\nint lengthOfLIS(vector<int>& nums) {\n    vector<int> res;\n    for(int i=0; i<nums.size(); i++) {\n        auto it = std::lower_bound(res.begin(), res.end(), nums[i]);\n        if(it==res.end()) res.push_back(nums[i]);\n        else *it = nums[i];\n    }\n    return res.size();\n}\n```\n\nIt is a great method!\n","source":"_posts/LongestIncreasingSubsequence.md","raw":"---\ntitle: Longest Increasing Subsequence\ndate: 2017-03-22 15:49:41\ntags:\n    - Binary Search\n    - Dynamic Programming\n---\n\n> Given an unsorted array of integers, find the length of longest increasing subsequence.\n>\n> For example,\n> Given [10, 9, 2, 5, 3, 7, 101, 18],\n> The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.\n>\n> Your algorithm should run in O(n2) complexity.\n>\n> Follow up: Could you improve it to O(n log n) time complexity?\n\n<!--more-->\n\nThis is Leetcode No.300. It is a DP problem. So you can quickly find the O(n^3) solution.\n\nBy using for loop for three times. You can find the result. But if you use a DP array to store the result. You can improve the time complex to O(n^2).\n\nHere is my solution:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int lengthOfLIS(vector<int> nums) {\n            vector<int> DP;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                DP.push_back(1);\n            }\n            for (int i = 1; i < (int)nums.size(); i++) {\n                for (int j = 0; j < i; j++) {\n                    if (nums[i] > nums[j]) {\n                        DP[i] = max(DP[i], DP[j] + 1);\n                    }\n                }\n            }\n            int res = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                res = max(DP[i], res);\n\n            }\n            return res;\n        }\n};\n```\n\nBut I can't find the O(nlogn) method until I find the solution in the Discuss channel.\n\n```\nint lengthOfLIS(vector<int>& nums) {\n    vector<int> res;\n    for(int i=0; i<nums.size(); i++) {\n        auto it = std::lower_bound(res.begin(), res.end(), nums[i]);\n        if(it==res.end()) res.push_back(nums[i]);\n        else *it = nums[i];\n    }\n    return res.size();\n}\n```\n\nIt is a great method!\n","slug":"LongestIncreasingSubsequence","published":1,"updated":"2017-03-22T09:00:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpxz003dx2f4nfg4fwwf","content":"<blockquote>\n<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>\n<p>For example,<br>Given [10, 9, 2, 5, 3, 7, 101, 18],<br>The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>\n<p>Your algorithm should run in O(n2) complexity.</p>\n<p>Follow up: Could you improve it to O(n log n) time complexity?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.300. It is a DP problem. So you can quickly find the O(n^3) solution.</p>\n<p>By using for loop for three times. You can find the result. But if you use a DP array to store the result. You can improve the time complex to O(n^2).</p>\n<p>Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int lengthOfLIS(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; DP;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                DP.push_back(1);</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; i; j++) &#123;</div><div class=\"line\">                    if (nums[i] &gt; nums[j]) &#123;</div><div class=\"line\">                        DP[i] = max(DP[i], DP[j] + 1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = max(DP[i], res);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But I can’t find the O(nlogn) method until I find the solution in the Discuss channel.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int lengthOfLIS(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    vector&lt;int&gt; res;</div><div class=\"line\">    for(int i=0; i&lt;nums.size(); i++) &#123;</div><div class=\"line\">        auto it = std::lower_bound(res.begin(), res.end(), nums[i]);</div><div class=\"line\">        if(it==res.end()) res.push_back(nums[i]);</div><div class=\"line\">        else *it = nums[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res.size();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is a great method!</p>\n","excerpt":"<blockquote>\n<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>\n<p>For example,<br>Given [10, 9, 2, 5, 3, 7, 101, 18],<br>The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>\n<p>Your algorithm should run in O(n2) complexity.</p>\n<p>Follow up: Could you improve it to O(n log n) time complexity?</p>\n</blockquote>","more":"<p>This is Leetcode No.300. It is a DP problem. So you can quickly find the O(n^3) solution.</p>\n<p>By using for loop for three times. You can find the result. But if you use a DP array to store the result. You can improve the time complex to O(n^2).</p>\n<p>Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int lengthOfLIS(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; DP;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                DP.push_back(1);</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; i; j++) &#123;</div><div class=\"line\">                    if (nums[i] &gt; nums[j]) &#123;</div><div class=\"line\">                        DP[i] = max(DP[i], DP[j] + 1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = max(DP[i], res);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But I can’t find the O(nlogn) method until I find the solution in the Discuss channel.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">int lengthOfLIS(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    vector&lt;int&gt; res;</div><div class=\"line\">    for(int i=0; i&lt;nums.size(); i++) &#123;</div><div class=\"line\">        auto it = std::lower_bound(res.begin(), res.end(), nums[i]);</div><div class=\"line\">        if(it==res.end()) res.push_back(nums[i]);</div><div class=\"line\">        else *it = nums[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res.size();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It is a great method!</p>"},{"title":"Longest Line of Consecutive One in Matrix","date":"2017-04-23T12:56:57.000Z","_content":"\n> Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.\n>\n> Example:\n>```\nInput:\n[\n    [0, 1, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 0, 1]\n]\nOutput: 3\n```\n> Hint: The number of elements in the given matrix will not exceed 10,000.\n\n<!--more-->\n\nIt is one problem of LeetCode Weekly Contest 29. You may think in this way that: use tail recursion.\n\nBut it must get TLE.\n\nSo, we can use DP here. Easy one:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int RES;\n        int longestLine(vector<vector<int> >& M) {\n            vector<vector<int> > DP;\n            for (int i = 0; i < (int)M.size(); i++) {\n                vector<int> level(M[0].size(), 0);\n                DP.push_back(level);\n            }\n\n            RES = 0;\n\n            clear(DP, M);\n            for (int idx = 0; idx < (int)DP.size(); idx++) {\n                for (int idy = 1; idy < (int)DP[0].size(); idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx][idy - 1]) {\n                        DP[idx][idy] = 1 + DP[idx][idy - 1];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            clear(DP, M);\n            for (int idx = 1; idx < (int)DP.size(); idx++) {\n                for (int idy = 0; idy < (int)DP[0].size(); idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx - 1][idy]) {\n                        DP[idx][idy] = 1 + DP[idx - 1][idy];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            clear(DP, M);\n            for (int idx = 1; idx < (int)DP.size(); idx++) {\n                for (int idy = 1; idy < (int)DP[0].size(); idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx - 1][idy - 1]) {\n                        DP[idx][idy] = 1 + DP[idx - 1][idy - 1];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            clear(DP, M);\n            for (int idx = 1; idx < (int)DP.size(); idx++) {\n                for (int idy = 0; idy < (int)DP[0].size() - 1; idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx - 1][idy + 1]) {\n                        DP[idx][idy] = 1 + DP[idx - 1][idy + 1];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            return RES;\n        }\n\n        void clear(vector<vector<int> > &DP, vector<vector<int> > &M) {\n            for (int i = 0; i < (int)DP.size(); i++) {\n                for (int j = 0; j < (int)DP[0].size(); j++) {\n                    if (M[i][j] == 1) {\n                        if (RES == 0) {\n                            RES = 1;\n                        }\n                        DP[i][j] = 1;\n                    } else {\n                        DP[i][j] = 0;\n                    }\n                }\n            }\n        }\n};\n\n```\n\nIt gets AC.\n","source":"_posts/LongestLineofConsecutiveOneinMatrix.md","raw":"---\ntitle: Longest Line of Consecutive One in Matrix\ndate: 2017-04-23 20:56:57\ntags:\n    - Array\n    - Dynamic Programming\n---\n\n> Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.\n>\n> Example:\n>```\nInput:\n[\n    [0, 1, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 0, 1]\n]\nOutput: 3\n```\n> Hint: The number of elements in the given matrix will not exceed 10,000.\n\n<!--more-->\n\nIt is one problem of LeetCode Weekly Contest 29. You may think in this way that: use tail recursion.\n\nBut it must get TLE.\n\nSo, we can use DP here. Easy one:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int RES;\n        int longestLine(vector<vector<int> >& M) {\n            vector<vector<int> > DP;\n            for (int i = 0; i < (int)M.size(); i++) {\n                vector<int> level(M[0].size(), 0);\n                DP.push_back(level);\n            }\n\n            RES = 0;\n\n            clear(DP, M);\n            for (int idx = 0; idx < (int)DP.size(); idx++) {\n                for (int idy = 1; idy < (int)DP[0].size(); idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx][idy - 1]) {\n                        DP[idx][idy] = 1 + DP[idx][idy - 1];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            clear(DP, M);\n            for (int idx = 1; idx < (int)DP.size(); idx++) {\n                for (int idy = 0; idy < (int)DP[0].size(); idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx - 1][idy]) {\n                        DP[idx][idy] = 1 + DP[idx - 1][idy];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            clear(DP, M);\n            for (int idx = 1; idx < (int)DP.size(); idx++) {\n                for (int idy = 1; idy < (int)DP[0].size(); idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx - 1][idy - 1]) {\n                        DP[idx][idy] = 1 + DP[idx - 1][idy - 1];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            clear(DP, M);\n            for (int idx = 1; idx < (int)DP.size(); idx++) {\n                for (int idy = 0; idy < (int)DP[0].size() - 1; idy++) {\n                    if (M[idx][idy] == 1 && M[idx][idy] == M[idx - 1][idy + 1]) {\n                        DP[idx][idy] = 1 + DP[idx - 1][idy + 1];\n                        RES = max(RES, DP[idx][idy]);\n                    }\n                }\n            }\n\n            return RES;\n        }\n\n        void clear(vector<vector<int> > &DP, vector<vector<int> > &M) {\n            for (int i = 0; i < (int)DP.size(); i++) {\n                for (int j = 0; j < (int)DP[0].size(); j++) {\n                    if (M[i][j] == 1) {\n                        if (RES == 0) {\n                            RES = 1;\n                        }\n                        DP[i][j] = 1;\n                    } else {\n                        DP[i][j] = 0;\n                    }\n                }\n            }\n        }\n};\n\n```\n\nIt gets AC.\n","slug":"LongestLineofConsecutiveOneinMatrix","published":1,"updated":"2017-04-23T13:56:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpy1003gx2f4baix2m7l","content":"<blockquote>\n<p>Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [0, 1, 1, 0],</div><div class=\"line\">    [0, 1, 1, 0],</div><div class=\"line\">    [0, 0, 0, 1]</div><div class=\"line\">]</div><div class=\"line\">Output: 3</div></pre></td></tr></table></figure></p>\n<p>Hint: The number of elements in the given matrix will not exceed 10,000.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is one problem of LeetCode Weekly Contest 29. You may think in this way that: use tail recursion.</p>\n<p>But it must get TLE.</p>\n<p>So, we can use DP here. Easy one:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int RES;</div><div class=\"line\">        int longestLine(vector&lt;vector&lt;int&gt; &gt;&amp; M) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; DP;</div><div class=\"line\">            for (int i = 0; i &lt; (int)M.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(M[0].size(), 0);</div><div class=\"line\">                DP.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            RES = 0;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 1; idy &lt; (int)DP[0].size(); idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx][idy - 1]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx][idy - 1];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)DP[0].size(); idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx - 1][idy]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx - 1][idy];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 1; idy &lt; (int)DP[0].size(); idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx - 1][idy - 1]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx - 1][idy - 1];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)DP[0].size() - 1; idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx - 1][idy + 1]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx - 1][idy + 1];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return RES;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void clear(vector&lt;vector&lt;int&gt; &gt; &amp;DP, vector&lt;vector&lt;int&gt; &gt; &amp;M) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)DP.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)DP[0].size(); j++) &#123;</div><div class=\"line\">                    if (M[i][j] == 1) &#123;</div><div class=\"line\">                        if (RES == 0) &#123;</div><div class=\"line\">                            RES = 1;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        DP[i][j] = 1;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        DP[i][j] = 0;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">[</div><div class=\"line\">    [0, 1, 1, 0],</div><div class=\"line\">    [0, 1, 1, 0],</div><div class=\"line\">    [0, 0, 0, 1]</div><div class=\"line\">]</div><div class=\"line\">Output: 3</div></pre></td></tr></table></figure></p>\n<p>Hint: The number of elements in the given matrix will not exceed 10,000.</p>\n</blockquote>","more":"<p>It is one problem of LeetCode Weekly Contest 29. You may think in this way that: use tail recursion.</p>\n<p>But it must get TLE.</p>\n<p>So, we can use DP here. Easy one:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int RES;</div><div class=\"line\">        int longestLine(vector&lt;vector&lt;int&gt; &gt;&amp; M) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; DP;</div><div class=\"line\">            for (int i = 0; i &lt; (int)M.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; level(M[0].size(), 0);</div><div class=\"line\">                DP.push_back(level);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            RES = 0;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 1; idy &lt; (int)DP[0].size(); idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx][idy - 1]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx][idy - 1];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)DP[0].size(); idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx - 1][idy]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx - 1][idy];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 1; idy &lt; (int)DP[0].size(); idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx - 1][idy - 1]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx - 1][idy - 1];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            clear(DP, M);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)DP[0].size() - 1; idy++) &#123;</div><div class=\"line\">                    if (M[idx][idy] == 1 &amp;&amp; M[idx][idy] == M[idx - 1][idy + 1]) &#123;</div><div class=\"line\">                        DP[idx][idy] = 1 + DP[idx - 1][idy + 1];</div><div class=\"line\">                        RES = max(RES, DP[idx][idy]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return RES;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void clear(vector&lt;vector&lt;int&gt; &gt; &amp;DP, vector&lt;vector&lt;int&gt; &gt; &amp;M) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)DP.size(); i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)DP[0].size(); j++) &#123;</div><div class=\"line\">                    if (M[i][j] == 1) &#123;</div><div class=\"line\">                        if (RES == 0) &#123;</div><div class=\"line\">                            RES = 1;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        DP[i][j] = 1;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        DP[i][j] = 0;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Longest Palindromic Subsequence","date":"2017-02-22T05:41:22.000Z","_content":"\n\n> Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.\n>\n> Example 1:\n> + Input: \"bbbab\"\n> + Output: 4\n> + One possible longest palindromic subsequence is \"bbbb\".\n>\n> Example 2:\n> + Input: \"cbbd\"\n> + Output: 2\n> + One possible longest palindromic subsequence is \"bb\".\n\n<!--more-->\n\nThis is Leetcode No.516. As a DP problem the most important thing is to find out the relationship of the state transformation.\n\nSo, here we need to use a DP[idx][idy] to mark the longest palindromic subsequence between idx and idy.\n\nAnd we can find that:\n\n```\nDP[idx][idy] = (str[idx] == str[idy + 1] ? DP[idx + 1][idy - 1] + 2 : max(DP[idx][idy - 1], DP[idx + 1][idy]));\n```\n\nSo here comes our solution:\n\n```\nclass Solution {\n    public:\n        int longestPalindromeSubseq(string str) {\n            int DP[1001][1001];\n            memset(DP, 0, sizeof(DP));\n            for (int idx = str.length() - 1; idx >= 0; idx--) {\n                DP[idx][idx] = 1;\n                for (int idy = idx + 1; idy < (int)str.length(); idy++) {\n                    if (str[idx] == str[idy]) {\n                        DP[idx][idy] = DP[idx + 1][idy - 1] + 2;\n                    } else {\n                        DP[idx][idy] = max(DP[idx + 1][idy], DP[idx][idy - 1]);\n                    }\n                }\n            }\n            return DP[0][str.length() - 1];\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/LongestPalindromicSubsequence.md","raw":"---\ntitle: Longest Palindromic Subsequence\ndate: 2017-02-22 13:41:22\ntags:\n    - Dynamic Programming\n---\n\n\n> Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.\n>\n> Example 1:\n> + Input: \"bbbab\"\n> + Output: 4\n> + One possible longest palindromic subsequence is \"bbbb\".\n>\n> Example 2:\n> + Input: \"cbbd\"\n> + Output: 2\n> + One possible longest palindromic subsequence is \"bb\".\n\n<!--more-->\n\nThis is Leetcode No.516. As a DP problem the most important thing is to find out the relationship of the state transformation.\n\nSo, here we need to use a DP[idx][idy] to mark the longest palindromic subsequence between idx and idy.\n\nAnd we can find that:\n\n```\nDP[idx][idy] = (str[idx] == str[idy + 1] ? DP[idx + 1][idy - 1] + 2 : max(DP[idx][idy - 1], DP[idx + 1][idy]));\n```\n\nSo here comes our solution:\n\n```\nclass Solution {\n    public:\n        int longestPalindromeSubseq(string str) {\n            int DP[1001][1001];\n            memset(DP, 0, sizeof(DP));\n            for (int idx = str.length() - 1; idx >= 0; idx--) {\n                DP[idx][idx] = 1;\n                for (int idy = idx + 1; idy < (int)str.length(); idy++) {\n                    if (str[idx] == str[idy]) {\n                        DP[idx][idy] = DP[idx + 1][idy - 1] + 2;\n                    } else {\n                        DP[idx][idy] = max(DP[idx + 1][idy], DP[idx][idy - 1]);\n                    }\n                }\n            }\n            return DP[0][str.length() - 1];\n        }\n};\n```\n\nIt gets AC.\n","slug":"LongestPalindromicSubsequence","published":1,"updated":"2017-02-22T06:20:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpy2003ix2f48rnq9t11","content":"<blockquote>\n<p>Given a string s, find the longest palindromic subsequence’s length in s. You may assume that the maximum length of s is 1000.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: “bbbab”</li>\n<li>Output: 4</li>\n<li>One possible longest palindromic subsequence is “bbbb”.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: “cbbd”</li>\n<li>Output: 2</li>\n<li>One possible longest palindromic subsequence is “bb”.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.516. As a DP problem the most important thing is to find out the relationship of the state transformation.</p>\n<p>So, here we need to use a DP[idx][idy] to mark the longest palindromic subsequence between idx and idy.</p>\n<p>And we can find that:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DP[idx][idy] = (str[idx] == str[idy + 1] ? DP[idx + 1][idy - 1] + 2 : max(DP[idx][idy - 1], DP[idx + 1][idy]));</div></pre></td></tr></table></figure>\n<p>So here comes our solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestPalindromeSubseq(string str) &#123;</div><div class=\"line\">            int DP[1001][1001];</div><div class=\"line\">            memset(DP, 0, sizeof(DP));</div><div class=\"line\">            for (int idx = str.length() - 1; idx &gt;= 0; idx--) &#123;</div><div class=\"line\">                DP[idx][idx] = 1;</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)str.length(); idy++) &#123;</div><div class=\"line\">                    if (str[idx] == str[idy]) &#123;</div><div class=\"line\">                        DP[idx][idy] = DP[idx + 1][idy - 1] + 2;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        DP[idx][idy] = max(DP[idx + 1][idy], DP[idx][idy - 1]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[0][str.length() - 1];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a string s, find the longest palindromic subsequence’s length in s. You may assume that the maximum length of s is 1000.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: “bbbab”</li>\n<li>Output: 4</li>\n<li>One possible longest palindromic subsequence is “bbbb”.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: “cbbd”</li>\n<li>Output: 2</li>\n<li>One possible longest palindromic subsequence is “bb”.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.516. As a DP problem the most important thing is to find out the relationship of the state transformation.</p>\n<p>So, here we need to use a DP[idx][idy] to mark the longest palindromic subsequence between idx and idy.</p>\n<p>And we can find that:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DP[idx][idy] = (str[idx] == str[idy + 1] ? DP[idx + 1][idy - 1] + 2 : max(DP[idx][idy - 1], DP[idx + 1][idy]));</div></pre></td></tr></table></figure>\n<p>So here comes our solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestPalindromeSubseq(string str) &#123;</div><div class=\"line\">            int DP[1001][1001];</div><div class=\"line\">            memset(DP, 0, sizeof(DP));</div><div class=\"line\">            for (int idx = str.length() - 1; idx &gt;= 0; idx--) &#123;</div><div class=\"line\">                DP[idx][idx] = 1;</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)str.length(); idy++) &#123;</div><div class=\"line\">                    if (str[idx] == str[idy]) &#123;</div><div class=\"line\">                        DP[idx][idy] = DP[idx + 1][idy - 1] + 2;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        DP[idx][idy] = max(DP[idx + 1][idy], DP[idx][idy - 1]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[0][str.length() - 1];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Longest Substring with At Least K Repeating Characters","date":"2017-03-29T01:44:56.000Z","_content":"\n> Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.\n>\n> Example 1:\n>```\nInput:\ns = \"aaabb\", k = 3\nOutput:\n3\n```\n> + The longest substring is \"aaa\", as 'a' is repeated 3 times.\n>\n> Example 2:\n>```\nInput:\ns = \"ababbc\", k = 2\nOutput:\n5\n```\n> + The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n\n<!--more-->\n\nThis is Leetcode No.395. It is a string problem. I can quickly find this solution with O(n^2) time complex.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int longestSubstring(string str, int num) {\n            int res = 0;\n            for (int idx = 0; idx < (int)str.length(); idx++) {\n                map<char, int> chars;\n                for (int idy = idx; idy < (int)str.length(); idy++) {\n                    if (chars.find(str[idy]) != chars.end()) {\n                        chars.find(str[idy])->second++;\n                    } else {\n                        chars.insert(pair<char, int>(str[idy], 1));\n                    }\n\n                    bool isOk = true;\n                    for (auto i : chars) {\n                        if (i.second < num) {\n                            isOk = false;\n                            break;\n                        }\n                    }\n\n                    if (isOk) {\n                        res = max(res, idy - idx + 1);\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets TLE, and we can make it quicker.\n\n+ in the first pass I record counts of every character in a hashmap\n+ in the second pass I locate the first character that appear less than k times in the string. this character is definitely not included in the result, and that separates the string into two parts.\n+ keep doing this recursively and the maximum of the left/right part is the answer.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int longestSubstring(string str, int num) {\n            if(str.size() == 0 || num > (int)str.size())   return 0;\n            if(num == 0)  return str.size();\n\n            map<char,int> Map;\n            for(int i = 0; i < (int)str.size(); i++){\n                Map[str[i]]++;\n            }\n\n            int idx =0;\n            while(idx < (int)str.size() && Map[str[idx]] >= num)    idx++;\n            if(idx == (int)str.size()) return str.size();\n\n            int left = longestSubstring(str.substr(0 , idx) , num);\n            int right = longestSubstring(str.substr(idx+1) , num);\n\n            return max(left, right);\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/LongestSubstringwithAtLeastKRepeatingCharacters.md","raw":"---\ntitle: Longest Substring with At Least K Repeating Characters\ndate: 2017-03-29 09:44:56\ntags:\n    - String\n---\n\n> Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.\n>\n> Example 1:\n>```\nInput:\ns = \"aaabb\", k = 3\nOutput:\n3\n```\n> + The longest substring is \"aaa\", as 'a' is repeated 3 times.\n>\n> Example 2:\n>```\nInput:\ns = \"ababbc\", k = 2\nOutput:\n5\n```\n> + The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n\n<!--more-->\n\nThis is Leetcode No.395. It is a string problem. I can quickly find this solution with O(n^2) time complex.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int longestSubstring(string str, int num) {\n            int res = 0;\n            for (int idx = 0; idx < (int)str.length(); idx++) {\n                map<char, int> chars;\n                for (int idy = idx; idy < (int)str.length(); idy++) {\n                    if (chars.find(str[idy]) != chars.end()) {\n                        chars.find(str[idy])->second++;\n                    } else {\n                        chars.insert(pair<char, int>(str[idy], 1));\n                    }\n\n                    bool isOk = true;\n                    for (auto i : chars) {\n                        if (i.second < num) {\n                            isOk = false;\n                            break;\n                        }\n                    }\n\n                    if (isOk) {\n                        res = max(res, idy - idx + 1);\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets TLE, and we can make it quicker.\n\n+ in the first pass I record counts of every character in a hashmap\n+ in the second pass I locate the first character that appear less than k times in the string. this character is definitely not included in the result, and that separates the string into two parts.\n+ keep doing this recursively and the maximum of the left/right part is the answer.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int longestSubstring(string str, int num) {\n            if(str.size() == 0 || num > (int)str.size())   return 0;\n            if(num == 0)  return str.size();\n\n            map<char,int> Map;\n            for(int i = 0; i < (int)str.size(); i++){\n                Map[str[i]]++;\n            }\n\n            int idx =0;\n            while(idx < (int)str.size() && Map[str[idx]] >= num)    idx++;\n            if(idx == (int)str.size()) return str.size();\n\n            int left = longestSubstring(str.substr(0 , idx) , num);\n            int right = longestSubstring(str.substr(idx+1) , num);\n\n            return max(left, right);\n        }\n};\n```\n\nIt gets AC.\n","slug":"LongestSubstringwithAtLeastKRepeatingCharacters","published":1,"updated":"2017-03-29T05:50:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpy3003lx2f4unsgjgkz","content":"<blockquote>\n<p>Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;aaabb&quot;, k = 3</div><div class=\"line\">Output:</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<ul>\n<li>The longest substring is “aaa”, as ‘a’ is repeated 3 times.</li>\n</ul>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;ababbc&quot;, k = 2</div><div class=\"line\">Output:</div><div class=\"line\">5</div></pre></td></tr></table></figure></p>\n<ul>\n<li>The longest substring is “ababb”, as ‘a’ is repeated 2 times and ‘b’ is repeated 3 times.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.395. It is a string problem. I can quickly find this solution with O(n^2) time complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestSubstring(string str, int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)str.length(); idx++) &#123;</div><div class=\"line\">                map&lt;char, int&gt; chars;</div><div class=\"line\">                for (int idy = idx; idy &lt; (int)str.length(); idy++) &#123;</div><div class=\"line\">                    if (chars.find(str[idy]) != chars.end()) &#123;</div><div class=\"line\">                        chars.find(str[idy])-&gt;second++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        chars.insert(pair&lt;char, int&gt;(str[idy], 1));</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    bool isOk = true;</div><div class=\"line\">                    for (auto i : chars) &#123;</div><div class=\"line\">                        if (i.second &lt; num) &#123;</div><div class=\"line\">                            isOk = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    if (isOk) &#123;</div><div class=\"line\">                        res = max(res, idy - idx + 1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets TLE, and we can make it quicker.</p>\n<ul>\n<li>in the first pass I record counts of every character in a hashmap</li>\n<li>in the second pass I locate the first character that appear less than k times in the string. this character is definitely not included in the result, and that separates the string into two parts.</li>\n<li>keep doing this recursively and the maximum of the left/right part is the answer.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestSubstring(string str, int num) &#123;</div><div class=\"line\">            if(str.size() == 0 || num &gt; (int)str.size())   return 0;</div><div class=\"line\">            if(num == 0)  return str.size();</div><div class=\"line\"></div><div class=\"line\">            map&lt;char,int&gt; Map;</div><div class=\"line\">            for(int i = 0; i &lt; (int)str.size(); i++)&#123;</div><div class=\"line\">                Map[str[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx =0;</div><div class=\"line\">            while(idx &lt; (int)str.size() &amp;&amp; Map[str[idx]] &gt;= num)    idx++;</div><div class=\"line\">            if(idx == (int)str.size()) return str.size();</div><div class=\"line\"></div><div class=\"line\">            int left = longestSubstring(str.substr(0 , idx) , num);</div><div class=\"line\">            int right = longestSubstring(str.substr(idx+1) , num);</div><div class=\"line\"></div><div class=\"line\">            return max(left, right);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;aaabb&quot;, k = 3</div><div class=\"line\">Output:</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<ul>\n<li>The longest substring is “aaa”, as ‘a’ is repeated 3 times.</li>\n</ul>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;ababbc&quot;, k = 2</div><div class=\"line\">Output:</div><div class=\"line\">5</div></pre></td></tr></table></figure></p>\n<ul>\n<li>The longest substring is “ababb”, as ‘a’ is repeated 2 times and ‘b’ is repeated 3 times.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.395. It is a string problem. I can quickly find this solution with O(n^2) time complex.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestSubstring(string str, int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)str.length(); idx++) &#123;</div><div class=\"line\">                map&lt;char, int&gt; chars;</div><div class=\"line\">                for (int idy = idx; idy &lt; (int)str.length(); idy++) &#123;</div><div class=\"line\">                    if (chars.find(str[idy]) != chars.end()) &#123;</div><div class=\"line\">                        chars.find(str[idy])-&gt;second++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        chars.insert(pair&lt;char, int&gt;(str[idy], 1));</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    bool isOk = true;</div><div class=\"line\">                    for (auto i : chars) &#123;</div><div class=\"line\">                        if (i.second &lt; num) &#123;</div><div class=\"line\">                            isOk = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    if (isOk) &#123;</div><div class=\"line\">                        res = max(res, idy - idx + 1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets TLE, and we can make it quicker.</p>\n<ul>\n<li>in the first pass I record counts of every character in a hashmap</li>\n<li>in the second pass I locate the first character that appear less than k times in the string. this character is definitely not included in the result, and that separates the string into two parts.</li>\n<li>keep doing this recursively and the maximum of the left/right part is the answer.</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestSubstring(string str, int num) &#123;</div><div class=\"line\">            if(str.size() == 0 || num &gt; (int)str.size())   return 0;</div><div class=\"line\">            if(num == 0)  return str.size();</div><div class=\"line\"></div><div class=\"line\">            map&lt;char,int&gt; Map;</div><div class=\"line\">            for(int i = 0; i &lt; (int)str.size(); i++)&#123;</div><div class=\"line\">                Map[str[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx =0;</div><div class=\"line\">            while(idx &lt; (int)str.size() &amp;&amp; Map[str[idx]] &gt;= num)    idx++;</div><div class=\"line\">            if(idx == (int)str.size()) return str.size();</div><div class=\"line\"></div><div class=\"line\">            int left = longestSubstring(str.substr(0 , idx) , num);</div><div class=\"line\">            int right = longestSubstring(str.substr(idx+1) , num);</div><div class=\"line\"></div><div class=\"line\">            return max(left, right);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Longest Uncommon Subsequence II","date":"2017-04-07T14:04:08.000Z","_content":"\n\n> Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\n>\n> A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n>\n> The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\n>\n> Example 1:\n>```\nInput: \"aba\", \"cdc\", \"eae\"\nOutput: 3\n```\n> Note:\n>\n> + All the given strings' lengths will not exceed 10.\n> + The length of the given list will be in the range of [2, 50].\n\n<!--more-->\n\nThis is Leetcode No.522. It is a extended problem of Longest Uncommon Subsequence I. So, we can use the solution before to solve this problem.\n\nWe can use the following code to check whether the two strings have the common subsequence:\n\n```\nbool hasCommon(string a,string b){\n    int remainA = a.size();\n    int remainB = b.size();\n    for(;remainA > 0 && remainB > 0;){\n        int i = a.size() - remainA;\n        int j = b.size() - remainB;\n        if(a.at(i) == b.at(j)){\n            remainA--;\n            remainB--;\n        }else{\n            remainB--;\n        }\n    }\n    return remainA==0;\n}\n```\n\nThen, we use the O(n^2) method to check the strings one by one in the list.\n\n```\nint findLUSlength(vector<string>& strs) {\n    int res = -1;\n    for (int idx = 0; idx < (int)strs.size(); idx++) {\n        int isAll = true;\n        for (int idy = 0; idy < (int)strs.size(); idy++) {\n            if (idx != idy) {\n                if (hasCommon(strs[idx], strs[idy])) {\n                    isAll = false;\n                    break;\n                }\n            }\n        }\n        if (isAll) {\n            res = max(res, (int)strs[idx].length());\n        }\n    }\n    return res;\n}\n```\n\nSo, the solution is:\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int findLUSlength(vector<string>& strs) {\n            int res = -1;\n            for (int idx = 0; idx < (int)strs.size(); idx++) {\n                int isAll = true;\n                for (int idy = 0; idy < (int)strs.size(); idy++) {\n                    if (idx != idy) {\n                        if (hasCommon(strs[idx], strs[idy])) {\n                            isAll = false;\n                            break;\n                        }\n                    }\n                }\n                if (isAll) {\n                    res = max(res, (int)strs[idx].length());\n                }\n            }\n            return res;\n        }\n\n        //This is used to determine if a has common subsequence in b\n        bool hasCommon(string a,string b){\n            int remainA = a.size();\n            int remainB = b.size();\n            for(;remainA > 0 && remainB > 0;){\n                int i = a.size() - remainA;\n                int j = b.size() - remainB;\n                if(a.at(i) == b.at(j)){\n                    remainA--;\n                    remainB--;\n                }else{\n                    remainB--;\n                }\n            }\n            return remainA==0;\n        }\n};\n\n```\n\nIt gets AC.\n","source":"_posts/LongestUncommonSubsequenceII.md","raw":"---\ntitle: Longest Uncommon Subsequence II\ndate: 2017-04-07 22:04:08\ntags:\n    - String\n    - Hash Table\n---\n\n\n> Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\n>\n> A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n>\n> The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\n>\n> Example 1:\n>```\nInput: \"aba\", \"cdc\", \"eae\"\nOutput: 3\n```\n> Note:\n>\n> + All the given strings' lengths will not exceed 10.\n> + The length of the given list will be in the range of [2, 50].\n\n<!--more-->\n\nThis is Leetcode No.522. It is a extended problem of Longest Uncommon Subsequence I. So, we can use the solution before to solve this problem.\n\nWe can use the following code to check whether the two strings have the common subsequence:\n\n```\nbool hasCommon(string a,string b){\n    int remainA = a.size();\n    int remainB = b.size();\n    for(;remainA > 0 && remainB > 0;){\n        int i = a.size() - remainA;\n        int j = b.size() - remainB;\n        if(a.at(i) == b.at(j)){\n            remainA--;\n            remainB--;\n        }else{\n            remainB--;\n        }\n    }\n    return remainA==0;\n}\n```\n\nThen, we use the O(n^2) method to check the strings one by one in the list.\n\n```\nint findLUSlength(vector<string>& strs) {\n    int res = -1;\n    for (int idx = 0; idx < (int)strs.size(); idx++) {\n        int isAll = true;\n        for (int idy = 0; idy < (int)strs.size(); idy++) {\n            if (idx != idy) {\n                if (hasCommon(strs[idx], strs[idy])) {\n                    isAll = false;\n                    break;\n                }\n            }\n        }\n        if (isAll) {\n            res = max(res, (int)strs[idx].length());\n        }\n    }\n    return res;\n}\n```\n\nSo, the solution is:\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int findLUSlength(vector<string>& strs) {\n            int res = -1;\n            for (int idx = 0; idx < (int)strs.size(); idx++) {\n                int isAll = true;\n                for (int idy = 0; idy < (int)strs.size(); idy++) {\n                    if (idx != idy) {\n                        if (hasCommon(strs[idx], strs[idy])) {\n                            isAll = false;\n                            break;\n                        }\n                    }\n                }\n                if (isAll) {\n                    res = max(res, (int)strs[idx].length());\n                }\n            }\n            return res;\n        }\n\n        //This is used to determine if a has common subsequence in b\n        bool hasCommon(string a,string b){\n            int remainA = a.size();\n            int remainB = b.size();\n            for(;remainA > 0 && remainB > 0;){\n                int i = a.size() - remainA;\n                int j = b.size() - remainB;\n                if(a.at(i) == b.at(j)){\n                    remainA--;\n                    remainB--;\n                }else{\n                    remainB--;\n                }\n            }\n            return remainA==0;\n        }\n};\n\n```\n\nIt gets AC.\n","slug":"LongestUncommonSubsequenceII","published":1,"updated":"2017-04-08T13:20:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpy5003nx2f4re2cbodo","content":"<blockquote>\n<p>Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.</p>\n<p>A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.</p>\n<p>The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn’t exist, return -1.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;aba&quot;, &quot;cdc&quot;, &quot;eae&quot;</div><div class=\"line\">Output: 3</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>All the given strings’ lengths will not exceed 10.</li>\n<li>The length of the given list will be in the range of [2, 50].</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.522. It is a extended problem of Longest Uncommon Subsequence I. So, we can use the solution before to solve this problem.</p>\n<p>We can use the following code to check whether the two strings have the common subsequence:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool hasCommon(string a,string b)&#123;</div><div class=\"line\">    int remainA = a.size();</div><div class=\"line\">    int remainB = b.size();</div><div class=\"line\">    for(;remainA &gt; 0 &amp;&amp; remainB &gt; 0;)&#123;</div><div class=\"line\">        int i = a.size() - remainA;</div><div class=\"line\">        int j = b.size() - remainB;</div><div class=\"line\">        if(a.at(i) == b.at(j))&#123;</div><div class=\"line\">            remainA--;</div><div class=\"line\">            remainB--;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            remainB--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return remainA==0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then, we use the O(n^2) method to check the strings one by one in the list.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">int findLUSlength(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">    int res = -1;</div><div class=\"line\">    for (int idx = 0; idx &lt; (int)strs.size(); idx++) &#123;</div><div class=\"line\">        int isAll = true;</div><div class=\"line\">        for (int idy = 0; idy &lt; (int)strs.size(); idy++) &#123;</div><div class=\"line\">            if (idx != idy) &#123;</div><div class=\"line\">                if (hasCommon(strs[idx], strs[idy])) &#123;</div><div class=\"line\">                    isAll = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (isAll) &#123;</div><div class=\"line\">            res = max(res, (int)strs[idx].length());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So, the solution is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findLUSlength(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">            int res = -1;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)strs.size(); idx++) &#123;</div><div class=\"line\">                int isAll = true;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)strs.size(); idy++) &#123;</div><div class=\"line\">                    if (idx != idy) &#123;</div><div class=\"line\">                        if (hasCommon(strs[idx], strs[idy])) &#123;</div><div class=\"line\">                            isAll = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (isAll) &#123;</div><div class=\"line\">                    res = max(res, (int)strs[idx].length());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //This is used to determine if a has common subsequence in b</div><div class=\"line\">        bool hasCommon(string a,string b)&#123;</div><div class=\"line\">            int remainA = a.size();</div><div class=\"line\">            int remainB = b.size();</div><div class=\"line\">            for(;remainA &gt; 0 &amp;&amp; remainB &gt; 0;)&#123;</div><div class=\"line\">                int i = a.size() - remainA;</div><div class=\"line\">                int j = b.size() - remainB;</div><div class=\"line\">                if(a.at(i) == b.at(j))&#123;</div><div class=\"line\">                    remainA--;</div><div class=\"line\">                    remainB--;</div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    remainB--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return remainA==0;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.</p>\n<p>A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.</p>\n<p>The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn’t exist, return -1.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;aba&quot;, &quot;cdc&quot;, &quot;eae&quot;</div><div class=\"line\">Output: 3</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>All the given strings’ lengths will not exceed 10.</li>\n<li>The length of the given list will be in the range of [2, 50].</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.522. It is a extended problem of Longest Uncommon Subsequence I. So, we can use the solution before to solve this problem.</p>\n<p>We can use the following code to check whether the two strings have the common subsequence:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool hasCommon(string a,string b)&#123;</div><div class=\"line\">    int remainA = a.size();</div><div class=\"line\">    int remainB = b.size();</div><div class=\"line\">    for(;remainA &gt; 0 &amp;&amp; remainB &gt; 0;)&#123;</div><div class=\"line\">        int i = a.size() - remainA;</div><div class=\"line\">        int j = b.size() - remainB;</div><div class=\"line\">        if(a.at(i) == b.at(j))&#123;</div><div class=\"line\">            remainA--;</div><div class=\"line\">            remainB--;</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            remainB--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return remainA==0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then, we use the O(n^2) method to check the strings one by one in the list.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">int findLUSlength(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">    int res = -1;</div><div class=\"line\">    for (int idx = 0; idx &lt; (int)strs.size(); idx++) &#123;</div><div class=\"line\">        int isAll = true;</div><div class=\"line\">        for (int idy = 0; idy &lt; (int)strs.size(); idy++) &#123;</div><div class=\"line\">            if (idx != idy) &#123;</div><div class=\"line\">                if (hasCommon(strs[idx], strs[idy])) &#123;</div><div class=\"line\">                    isAll = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (isAll) &#123;</div><div class=\"line\">            res = max(res, (int)strs[idx].length());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So, the solution is:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findLUSlength(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">            int res = -1;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)strs.size(); idx++) &#123;</div><div class=\"line\">                int isAll = true;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)strs.size(); idy++) &#123;</div><div class=\"line\">                    if (idx != idy) &#123;</div><div class=\"line\">                        if (hasCommon(strs[idx], strs[idy])) &#123;</div><div class=\"line\">                            isAll = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (isAll) &#123;</div><div class=\"line\">                    res = max(res, (int)strs[idx].length());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //This is used to determine if a has common subsequence in b</div><div class=\"line\">        bool hasCommon(string a,string b)&#123;</div><div class=\"line\">            int remainA = a.size();</div><div class=\"line\">            int remainB = b.size();</div><div class=\"line\">            for(;remainA &gt; 0 &amp;&amp; remainB &gt; 0;)&#123;</div><div class=\"line\">                int i = a.size() - remainA;</div><div class=\"line\">                int j = b.size() - remainB;</div><div class=\"line\">                if(a.at(i) == b.at(j))&#123;</div><div class=\"line\">                    remainA--;</div><div class=\"line\">                    remainB--;</div><div class=\"line\">                &#125;else&#123;</div><div class=\"line\">                    remainB--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return remainA==0;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>It gets AC.</p>"},{"title":"Longest Uncommon Subsequence I","date":"2017-04-06T14:15:53.000Z","_content":"\n> Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\n>\n> A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n>\n> The input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\n>\n> Example 1:\n>```\nInput: \"aba\", \"cdc\"\nOutput: 3\nExplanation:\n    The longest uncommon subsequence is \"aba\" (or \"cdc\"),\n    because \"aba\" is a subsequence of \"aba\",\n    but not a subsequence of any other strings in the group of two strings.\n```\n> Note:\n>\n> + Both strings' lengths will not exceed 100.\n> + Only letters from a ~ z will appear in input strings.\n\n<!--more-->\n\nThis is Leetcode No.521. It is a easy problem, and it may confuse me at first.\n\nI thought about the search method, try to list all the subsequence at first then compare them one by one as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int findLUSlength(string a, string b) {\n            return _check(a, b);\n        }\n\n        int _check(string a, string b) {\n            cout << a <<':' << b << endl;\n            if (!isSubStr(a, b)) {\n                return max(a.length(), b.length());\n            } else {\n                int res = -1;\n                for (int i = 0; i < (int)a.length(); i++) {\n                    if (!_check(a.substr(0, i) + a.substr(i + 1, a.length()), b)) {\n                        res = max(res, (int)max(a.length() - 1, b.length()));\n                    }\n                }\n                for (int i = 0; i < (int)b.length(); i++) {\n                    if (!_check(b.substr(0, i) + b.substr(i + 1, a.length()), a)) {\n                        res = max(res, (int)max(b.length() - 1, a.length()));\n                    }\n                }\n                return res;\n            }\n        }\n\n        bool isSubStr(string sub, string source) {\n            if (sub.length() > source.length()) {\n                return false;\n            } else {\n                return source.find(sub, 0) != string::npos;\n            }\n        }\n};\n```\n\nHowever, it is much simpler than I thought. You can just write one-line code to solve this problem.\n\n```\nint findLUSlength(string a, string b) {\n    if(a.size() != b.size())\n        return max(a.size(),b.size());\n    if(a == b) return -1;\n    return a.size();\n}\n```\n\nEasy to understand. And it gets AC.\n","source":"_posts/LongestUncommonSubsequenceI.md","raw":"---\ntitle: Longest Uncommon Subsequence I\ndate: 2017-04-06 22:15:53\ntags:\n    - String\n---\n\n> Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\n>\n> A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n>\n> The input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\n>\n> Example 1:\n>```\nInput: \"aba\", \"cdc\"\nOutput: 3\nExplanation:\n    The longest uncommon subsequence is \"aba\" (or \"cdc\"),\n    because \"aba\" is a subsequence of \"aba\",\n    but not a subsequence of any other strings in the group of two strings.\n```\n> Note:\n>\n> + Both strings' lengths will not exceed 100.\n> + Only letters from a ~ z will appear in input strings.\n\n<!--more-->\n\nThis is Leetcode No.521. It is a easy problem, and it may confuse me at first.\n\nI thought about the search method, try to list all the subsequence at first then compare them one by one as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int findLUSlength(string a, string b) {\n            return _check(a, b);\n        }\n\n        int _check(string a, string b) {\n            cout << a <<':' << b << endl;\n            if (!isSubStr(a, b)) {\n                return max(a.length(), b.length());\n            } else {\n                int res = -1;\n                for (int i = 0; i < (int)a.length(); i++) {\n                    if (!_check(a.substr(0, i) + a.substr(i + 1, a.length()), b)) {\n                        res = max(res, (int)max(a.length() - 1, b.length()));\n                    }\n                }\n                for (int i = 0; i < (int)b.length(); i++) {\n                    if (!_check(b.substr(0, i) + b.substr(i + 1, a.length()), a)) {\n                        res = max(res, (int)max(b.length() - 1, a.length()));\n                    }\n                }\n                return res;\n            }\n        }\n\n        bool isSubStr(string sub, string source) {\n            if (sub.length() > source.length()) {\n                return false;\n            } else {\n                return source.find(sub, 0) != string::npos;\n            }\n        }\n};\n```\n\nHowever, it is much simpler than I thought. You can just write one-line code to solve this problem.\n\n```\nint findLUSlength(string a, string b) {\n    if(a.size() != b.size())\n        return max(a.size(),b.size());\n    if(a == b) return -1;\n    return a.size();\n}\n```\n\nEasy to understand. And it gets AC.\n","slug":"LongestUncommonSubsequenceI","published":1,"updated":"2017-04-06T15:52:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpy6003qx2f4lknqyyyv","content":"<blockquote>\n<p>Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.</p>\n<p>A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.</p>\n<p>The input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn’t exist, return -1.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;aba&quot;, &quot;cdc&quot;</div><div class=\"line\">Output: 3</div><div class=\"line\">Explanation:</div><div class=\"line\">    The longest uncommon subsequence is &quot;aba&quot; (or &quot;cdc&quot;),</div><div class=\"line\">    because &quot;aba&quot; is a subsequence of &quot;aba&quot;,</div><div class=\"line\">    but not a subsequence of any other strings in the group of two strings.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>Both strings’ lengths will not exceed 100.</li>\n<li>Only letters from a ~ z will appear in input strings.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.521. It is a easy problem, and it may confuse me at first.</p>\n<p>I thought about the search method, try to list all the subsequence at first then compare them one by one as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findLUSlength(string a, string b) &#123;</div><div class=\"line\">            return _check(a, b);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _check(string a, string b) &#123;</div><div class=\"line\">            cout &lt;&lt; a &lt;&lt;&apos;:&apos; &lt;&lt; b &lt;&lt; endl;</div><div class=\"line\">            if (!isSubStr(a, b)) &#123;</div><div class=\"line\">                return max(a.length(), b.length());</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                int res = -1;</div><div class=\"line\">                for (int i = 0; i &lt; (int)a.length(); i++) &#123;</div><div class=\"line\">                    if (!_check(a.substr(0, i) + a.substr(i + 1, a.length()), b)) &#123;</div><div class=\"line\">                        res = max(res, (int)max(a.length() - 1, b.length()));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (int i = 0; i &lt; (int)b.length(); i++) &#123;</div><div class=\"line\">                    if (!_check(b.substr(0, i) + b.substr(i + 1, a.length()), a)) &#123;</div><div class=\"line\">                        res = max(res, (int)max(b.length() - 1, a.length()));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool isSubStr(string sub, string source) &#123;</div><div class=\"line\">            if (sub.length() &gt; source.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return source.find(sub, 0) != string::npos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, it is much simpler than I thought. You can just write one-line code to solve this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int findLUSlength(string a, string b) &#123;</div><div class=\"line\">    if(a.size() != b.size())</div><div class=\"line\">        return max(a.size(),b.size());</div><div class=\"line\">    if(a == b) return -1;</div><div class=\"line\">    return a.size();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Easy to understand. And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.</p>\n<p>A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.</p>\n<p>The input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn’t exist, return -1.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: &quot;aba&quot;, &quot;cdc&quot;</div><div class=\"line\">Output: 3</div><div class=\"line\">Explanation:</div><div class=\"line\">    The longest uncommon subsequence is &quot;aba&quot; (or &quot;cdc&quot;),</div><div class=\"line\">    because &quot;aba&quot; is a subsequence of &quot;aba&quot;,</div><div class=\"line\">    but not a subsequence of any other strings in the group of two strings.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>Both strings’ lengths will not exceed 100.</li>\n<li>Only letters from a ~ z will appear in input strings.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.521. It is a easy problem, and it may confuse me at first.</p>\n<p>I thought about the search method, try to list all the subsequence at first then compare them one by one as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findLUSlength(string a, string b) &#123;</div><div class=\"line\">            return _check(a, b);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _check(string a, string b) &#123;</div><div class=\"line\">            cout &lt;&lt; a &lt;&lt;&apos;:&apos; &lt;&lt; b &lt;&lt; endl;</div><div class=\"line\">            if (!isSubStr(a, b)) &#123;</div><div class=\"line\">                return max(a.length(), b.length());</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                int res = -1;</div><div class=\"line\">                for (int i = 0; i &lt; (int)a.length(); i++) &#123;</div><div class=\"line\">                    if (!_check(a.substr(0, i) + a.substr(i + 1, a.length()), b)) &#123;</div><div class=\"line\">                        res = max(res, (int)max(a.length() - 1, b.length()));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                for (int i = 0; i &lt; (int)b.length(); i++) &#123;</div><div class=\"line\">                    if (!_check(b.substr(0, i) + b.substr(i + 1, a.length()), a)) &#123;</div><div class=\"line\">                        res = max(res, (int)max(b.length() - 1, a.length()));</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool isSubStr(string sub, string source) &#123;</div><div class=\"line\">            if (sub.length() &gt; source.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return source.find(sub, 0) != string::npos;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, it is much simpler than I thought. You can just write one-line code to solve this problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">int findLUSlength(string a, string b) &#123;</div><div class=\"line\">    if(a.size() != b.size())</div><div class=\"line\">        return max(a.size(),b.size());</div><div class=\"line\">    if(a == b) return -1;</div><div class=\"line\">    return a.size();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Easy to understand. And it gets AC.</p>"},{"title":"Matchsticks to Square","date":"2017-02-04T05:50:52.000Z","_content":"\n> Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n>\n> Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.\n>\n> Example 1:\n>\n> + Input: [1,1,2,2,2]\n> + Output: true\n> + Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n>\n> Example 2:\n>\n> + Input: [3,3,3,3,4]\n> + Output: false\n> + Explanation: You cannot find a way to form a square with all the matchsticks.\n>\n> Note:\n> + The length sum of the given matchsticks is in the range of 0 to 10^9.\n> + The length of the given matchstick array will not exceed 15.\n\n<!--more-->\n\nThis is Leetcode 473. It is an interesting problem. You can quickly find the condition which never make a square. When the total length can't be divided by 4. If it can be divided by 4, you also make sure the sticks can be reformed to that length.\n\nSo, the problem becomes to find that if the array can be reformed by four (total length)/4.\n\nMaybe we can use the two pointer function here to find the suitable solution, use a visited array to mark every stick we used, it may use O(NlogN + 4N) time. As following:\n\n```\nbool _calcLength(vector<int>& nums, int target, int currentNum) {\n    if (currentNum == 3) {\n        return true;\n    } else {\n        int startIdx = 0, endIdx = 0, currentSum = 0;\n        while (visited[startIdx] == 1) {\n            startIdx++;\n        }\n\n        endIdx = startIdx, currentSum = nums[startIdx];\n        visited[startIdx] = 1;\n        while (endIdx < (int)nums.size() && startIdx <= endIdx) {\n            if (visited[endIdx] == 1) {\n                endIdx++;\n                continue;\n            }\n            if (visited[startIdx] == 1) {\n                startIdx++;\n                continue;\n            }\n\n            if (currentSum > target) {\n                currentSum = currentSum - nums[startIdx];\n                visited[startIdx] = 0;\n                startIdx++;\n            } else if (currentSum == target) {\n                return _calcLength(nums, target, currentNum + 1);\n            } else {\n                currentSum = currentSum + nums[endIdx];\n                visited[endIdx] = 1;\n                endIdx++;\n            }\n        }\n        return false;\n    }\n}\n```\n\nBut I failed, because when the case is [3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], I have to find the 12, so I find [3, 3, 3, 3], and it will make the next failed.\n\nSo, it must be some other solution. Then I find a blur force solution.\n\n```\nclass Solution {\n    public:\n        bool makesquare(vector<int>& nums) {\n            if (nums.size() < 4) {\n                return false;\n            }\n\n            long long totalLength = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                totalLength = totalLength + nums[i];\n            }\n\n            int sums[4];\n            memset(sums, 0, sizeof(sums));\n\n            if (totalLength % 4 != 0) {\n                return false;\n            } else {\n                return _calcLength(nums, sums, 0, totalLength/4);\n            }\n        }\n\n        bool _calcLength(vector<int>& nums, int sums[], int idx, int target) {\n            if (idx == (int)nums.size()) {\n                if (sums[0] == target && sums[1] == target && sums[2] == target) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n\n            for (int i = 0; i < 4; i++) {\n                if (sums[i] + nums[idx] > target) {\n                    continue;\n                }\n                sums[i] = sums[i] + nums[idx];\n                if (_calcLength(nums, sums, idx + 1, target)) {\n                    return true;\n                }\n                sums[i] = sums[i] - nums[idx];\n            }\n            return false;\n        }\n};\n```\n\nIt simply gets AC.\n","source":"_posts/MatchstickstoSquare.md","raw":"---\ntitle: Matchsticks to Square\ndate: 2017-02-04 13:50:52\ntags:\n    - Depth-first Search\n---\n\n> Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\n>\n> Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.\n>\n> Example 1:\n>\n> + Input: [1,1,2,2,2]\n> + Output: true\n> + Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n>\n> Example 2:\n>\n> + Input: [3,3,3,3,4]\n> + Output: false\n> + Explanation: You cannot find a way to form a square with all the matchsticks.\n>\n> Note:\n> + The length sum of the given matchsticks is in the range of 0 to 10^9.\n> + The length of the given matchstick array will not exceed 15.\n\n<!--more-->\n\nThis is Leetcode 473. It is an interesting problem. You can quickly find the condition which never make a square. When the total length can't be divided by 4. If it can be divided by 4, you also make sure the sticks can be reformed to that length.\n\nSo, the problem becomes to find that if the array can be reformed by four (total length)/4.\n\nMaybe we can use the two pointer function here to find the suitable solution, use a visited array to mark every stick we used, it may use O(NlogN + 4N) time. As following:\n\n```\nbool _calcLength(vector<int>& nums, int target, int currentNum) {\n    if (currentNum == 3) {\n        return true;\n    } else {\n        int startIdx = 0, endIdx = 0, currentSum = 0;\n        while (visited[startIdx] == 1) {\n            startIdx++;\n        }\n\n        endIdx = startIdx, currentSum = nums[startIdx];\n        visited[startIdx] = 1;\n        while (endIdx < (int)nums.size() && startIdx <= endIdx) {\n            if (visited[endIdx] == 1) {\n                endIdx++;\n                continue;\n            }\n            if (visited[startIdx] == 1) {\n                startIdx++;\n                continue;\n            }\n\n            if (currentSum > target) {\n                currentSum = currentSum - nums[startIdx];\n                visited[startIdx] = 0;\n                startIdx++;\n            } else if (currentSum == target) {\n                return _calcLength(nums, target, currentNum + 1);\n            } else {\n                currentSum = currentSum + nums[endIdx];\n                visited[endIdx] = 1;\n                endIdx++;\n            }\n        }\n        return false;\n    }\n}\n```\n\nBut I failed, because when the case is [3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], I have to find the 12, so I find [3, 3, 3, 3], and it will make the next failed.\n\nSo, it must be some other solution. Then I find a blur force solution.\n\n```\nclass Solution {\n    public:\n        bool makesquare(vector<int>& nums) {\n            if (nums.size() < 4) {\n                return false;\n            }\n\n            long long totalLength = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                totalLength = totalLength + nums[i];\n            }\n\n            int sums[4];\n            memset(sums, 0, sizeof(sums));\n\n            if (totalLength % 4 != 0) {\n                return false;\n            } else {\n                return _calcLength(nums, sums, 0, totalLength/4);\n            }\n        }\n\n        bool _calcLength(vector<int>& nums, int sums[], int idx, int target) {\n            if (idx == (int)nums.size()) {\n                if (sums[0] == target && sums[1] == target && sums[2] == target) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n\n            for (int i = 0; i < 4; i++) {\n                if (sums[i] + nums[idx] > target) {\n                    continue;\n                }\n                sums[i] = sums[i] + nums[idx];\n                if (_calcLength(nums, sums, idx + 1, target)) {\n                    return true;\n                }\n                sums[i] = sums[i] - nums[idx];\n            }\n            return false;\n        }\n};\n```\n\nIt simply gets AC.\n","slug":"MatchstickstoSquare","published":1,"updated":"2017-02-04T07:49:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpy7003sx2f4r75aoa38","content":"<blockquote>\n<p>Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.</p>\n<p>Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1,1,2,2,2]</li>\n<li>Output: true</li>\n<li>Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [3,3,3,3,4]</li>\n<li>Output: false</li>\n<li>Explanation: You cannot find a way to form a square with all the matchsticks.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length sum of the given matchsticks is in the range of 0 to 10^9.</li>\n<li>The length of the given matchstick array will not exceed 15.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 473. It is an interesting problem. You can quickly find the condition which never make a square. When the total length can’t be divided by 4. If it can be divided by 4, you also make sure the sticks can be reformed to that length.</p>\n<p>So, the problem becomes to find that if the array can be reformed by four (total length)/4.</p>\n<p>Maybe we can use the two pointer function here to find the suitable solution, use a visited array to mark every stick we used, it may use O(NlogN + 4N) time. As following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool _calcLength(vector&lt;int&gt;&amp; nums, int target, int currentNum) &#123;</div><div class=\"line\">    if (currentNum == 3) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        int startIdx = 0, endIdx = 0, currentSum = 0;</div><div class=\"line\">        while (visited[startIdx] == 1) &#123;</div><div class=\"line\">            startIdx++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        endIdx = startIdx, currentSum = nums[startIdx];</div><div class=\"line\">        visited[startIdx] = 1;</div><div class=\"line\">        while (endIdx &lt; (int)nums.size() &amp;&amp; startIdx &lt;= endIdx) &#123;</div><div class=\"line\">            if (visited[endIdx] == 1) &#123;</div><div class=\"line\">                endIdx++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited[startIdx] == 1) &#123;</div><div class=\"line\">                startIdx++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentSum &gt; target) &#123;</div><div class=\"line\">                currentSum = currentSum - nums[startIdx];</div><div class=\"line\">                visited[startIdx] = 0;</div><div class=\"line\">                startIdx++;</div><div class=\"line\">            &#125; else if (currentSum == target) &#123;</div><div class=\"line\">                return _calcLength(nums, target, currentNum + 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                currentSum = currentSum + nums[endIdx];</div><div class=\"line\">                visited[endIdx] = 1;</div><div class=\"line\">                endIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But I failed, because when the case is [3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], I have to find the 12, so I find [3, 3, 3, 3], and it will make the next failed.</p>\n<p>So, it must be some other solution. Then I find a blur force solution.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool makesquare(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt; 4) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long long totalLength = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                totalLength = totalLength + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int sums[4];</div><div class=\"line\">            memset(sums, 0, sizeof(sums));</div><div class=\"line\"></div><div class=\"line\">            if (totalLength % 4 != 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return _calcLength(nums, sums, 0, totalLength/4);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _calcLength(vector&lt;int&gt;&amp; nums, int sums[], int idx, int target) &#123;</div><div class=\"line\">            if (idx == (int)nums.size()) &#123;</div><div class=\"line\">                if (sums[0] == target &amp;&amp; sums[1] == target &amp;&amp; sums[2] == target) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; 4; i++) &#123;</div><div class=\"line\">                if (sums[i] + nums[idx] &gt; target) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sums[i] = sums[i] + nums[idx];</div><div class=\"line\">                if (_calcLength(nums, sums, idx + 1, target)) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sums[i] = sums[i] - nums[idx];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It simply gets AC.</p>\n","excerpt":"<blockquote>\n<p>Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.</p>\n<p>Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1,1,2,2,2]</li>\n<li>Output: true</li>\n<li>Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [3,3,3,3,4]</li>\n<li>Output: false</li>\n<li>Explanation: You cannot find a way to form a square with all the matchsticks.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length sum of the given matchsticks is in the range of 0 to 10^9.</li>\n<li>The length of the given matchstick array will not exceed 15.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 473. It is an interesting problem. You can quickly find the condition which never make a square. When the total length can’t be divided by 4. If it can be divided by 4, you also make sure the sticks can be reformed to that length.</p>\n<p>So, the problem becomes to find that if the array can be reformed by four (total length)/4.</p>\n<p>Maybe we can use the two pointer function here to find the suitable solution, use a visited array to mark every stick we used, it may use O(NlogN + 4N) time. As following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool _calcLength(vector&lt;int&gt;&amp; nums, int target, int currentNum) &#123;</div><div class=\"line\">    if (currentNum == 3) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        int startIdx = 0, endIdx = 0, currentSum = 0;</div><div class=\"line\">        while (visited[startIdx] == 1) &#123;</div><div class=\"line\">            startIdx++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        endIdx = startIdx, currentSum = nums[startIdx];</div><div class=\"line\">        visited[startIdx] = 1;</div><div class=\"line\">        while (endIdx &lt; (int)nums.size() &amp;&amp; startIdx &lt;= endIdx) &#123;</div><div class=\"line\">            if (visited[endIdx] == 1) &#123;</div><div class=\"line\">                endIdx++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited[startIdx] == 1) &#123;</div><div class=\"line\">                startIdx++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentSum &gt; target) &#123;</div><div class=\"line\">                currentSum = currentSum - nums[startIdx];</div><div class=\"line\">                visited[startIdx] = 0;</div><div class=\"line\">                startIdx++;</div><div class=\"line\">            &#125; else if (currentSum == target) &#123;</div><div class=\"line\">                return _calcLength(nums, target, currentNum + 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                currentSum = currentSum + nums[endIdx];</div><div class=\"line\">                visited[endIdx] = 1;</div><div class=\"line\">                endIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But I failed, because when the case is [3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], I have to find the 12, so I find [3, 3, 3, 3], and it will make the next failed.</p>\n<p>So, it must be some other solution. Then I find a blur force solution.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool makesquare(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt; 4) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long long totalLength = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                totalLength = totalLength + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int sums[4];</div><div class=\"line\">            memset(sums, 0, sizeof(sums));</div><div class=\"line\"></div><div class=\"line\">            if (totalLength % 4 != 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return _calcLength(nums, sums, 0, totalLength/4);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _calcLength(vector&lt;int&gt;&amp; nums, int sums[], int idx, int target) &#123;</div><div class=\"line\">            if (idx == (int)nums.size()) &#123;</div><div class=\"line\">                if (sums[0] == target &amp;&amp; sums[1] == target &amp;&amp; sums[2] == target) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; 4; i++) &#123;</div><div class=\"line\">                if (sums[i] + nums[idx] &gt; target) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sums[i] = sums[i] + nums[idx];</div><div class=\"line\">                if (_calcLength(nums, sums, idx + 1, target)) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sums[i] = sums[i] - nums[idx];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It simply gets AC.</p>"},{"title":"Max Consecutive Ones II","date":"2017-01-15T06:18:18.000Z","_content":"\n> Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.\n>\n> Example 1:\n>\n> Input: [1,0,1,1,0]\n> Output: 4\n> Explanation: Flip the first zero will get the the maximum number of consecutive 1s.\n> > After flipping, the maximum number of consecutive 1s is 4.\n>\n> Note:\n> + The input array will only contain 0 and 1.\n> + The length of input array is a positive integer and will not exceed 10,000\n>\n> Follow up:\n> What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?\n\n<!--more-->\n\nThis is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.\n\nFirst, I find a bad idea, I try to combine the nums like:\n```\n1 0 1 1 0 1 => 1 0 2 0 1\n```\n\nAnd try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.\n```\nnums: 1 0 1 1 0 1\nDP 1: 1 2 3 4 0 1\nDP 2: 1 0 1 2 3 4\n```\n\nBecause only four situation will happen. 0 -> 1, 1 -> 1, 0 -> 0, 1 -> 0.\n\nSo the solution is following:\n\n```\nclass Solution {\n    public:\n        int findMaxConsecutiveOnes(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n            int res = 0, flag = 0; // flag 0 represents up use the flip\n            vector<int> flags1(nums.size() + 1), flags2(nums.size() + 1);\n            flags1.push_back(0);\n            flags2.push_back(0);\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (nums[i] == 0) {\n                    if (flag == 0) {\n                        flag = 1;\n                        flags1[i+1] = flags1[i] + 1;\n                        flags2[i+1] = 0;\n                    } else {\n                        flag = 0;\n                        flags1[i+1] = 0;\n                        flags2[i+1] = flags2[i] + 1;\n                    }\n                } else {\n                    flags1[i+1] = flags1[i] + 1;\n                    flags2[i+1] = flags2[i] + 1;\n                }\n                res = max(res, max(flags1[i+1], flags2[i+1]));\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/MaxConsecutiveOnesII.md","raw":"---\ntitle: Max Consecutive Ones II\ndate: 2017-01-15 14:18:18\ntags:\n    - Dynamic Programming\n---\n\n> Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.\n>\n> Example 1:\n>\n> Input: [1,0,1,1,0]\n> Output: 4\n> Explanation: Flip the first zero will get the the maximum number of consecutive 1s.\n> > After flipping, the maximum number of consecutive 1s is 4.\n>\n> Note:\n> + The input array will only contain 0 and 1.\n> + The length of input array is a positive integer and will not exceed 10,000\n>\n> Follow up:\n> What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?\n\n<!--more-->\n\nThis is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.\n\nFirst, I find a bad idea, I try to combine the nums like:\n```\n1 0 1 1 0 1 => 1 0 2 0 1\n```\n\nAnd try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.\n```\nnums: 1 0 1 1 0 1\nDP 1: 1 2 3 4 0 1\nDP 2: 1 0 1 2 3 4\n```\n\nBecause only four situation will happen. 0 -> 1, 1 -> 1, 0 -> 0, 1 -> 0.\n\nSo the solution is following:\n\n```\nclass Solution {\n    public:\n        int findMaxConsecutiveOnes(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n            int res = 0, flag = 0; // flag 0 represents up use the flip\n            vector<int> flags1(nums.size() + 1), flags2(nums.size() + 1);\n            flags1.push_back(0);\n            flags2.push_back(0);\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (nums[i] == 0) {\n                    if (flag == 0) {\n                        flag = 1;\n                        flags1[i+1] = flags1[i] + 1;\n                        flags2[i+1] = 0;\n                    } else {\n                        flag = 0;\n                        flags1[i+1] = 0;\n                        flags2[i+1] = flags2[i] + 1;\n                    }\n                } else {\n                    flags1[i+1] = flags1[i] + 1;\n                    flags2[i+1] = flags2[i] + 1;\n                }\n                res = max(res, max(flags1[i+1], flags2[i+1]));\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"MaxConsecutiveOnesII","published":1,"updated":"2017-01-15T06:31:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpy9003ux2f4j2ca0han","content":"<blockquote>\n<p>Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.</p>\n<p>Example 1:</p>\n<p>Input: [1,0,1,1,0]<br>Output: 4<br>Explanation: Flip the first zero will get the the maximum number of consecutive 1s.</p>\n<blockquote>\n<p>After flipping, the maximum number of consecutive 1s is 4.</p>\n</blockquote>\n<p>Note:</p>\n<ul>\n<li>The input array will only contain 0 and 1.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n<p>Follow up:<br>What if the input numbers come in one by one as an infinite stream? In other words, you can’t store all numbers coming from the stream as it’s too large to hold in memory. Could you solve it efficiently?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.</p>\n<p>First, I find a bad idea, I try to combine the nums like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 0 1 1 0 1 =&gt; 1 0 2 0 1</div></pre></td></tr></table></figure></p>\n<p>And try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nums: 1 0 1 1 0 1</div><div class=\"line\">DP 1: 1 2 3 4 0 1</div><div class=\"line\">DP 2: 1 0 1 2 3 4</div></pre></td></tr></table></figure></p>\n<p>Because only four situation will happen. 0 -&gt; 1, 1 -&gt; 1, 0 -&gt; 0, 1 -&gt; 0.</p>\n<p>So the solution is following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int res = 0, flag = 0; // flag 0 represents up use the flip</div><div class=\"line\">            vector&lt;int&gt; flags1(nums.size() + 1), flags2(nums.size() + 1);</div><div class=\"line\">            flags1.push_back(0);</div><div class=\"line\">            flags2.push_back(0);</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] == 0) &#123;</div><div class=\"line\">                    if (flag == 0) &#123;</div><div class=\"line\">                        flag = 1;</div><div class=\"line\">                        flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                        flags2[i+1] = 0;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        flag = 0;</div><div class=\"line\">                        flags1[i+1] = 0;</div><div class=\"line\">                        flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                    flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = max(res, max(flags1[i+1], flags2[i+1]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.</p>\n<p>Example 1:</p>\n<p>Input: [1,0,1,1,0]<br>Output: 4<br>Explanation: Flip the first zero will get the the maximum number of consecutive 1s.</p>\n<blockquote>\n<p>After flipping, the maximum number of consecutive 1s is 4.</p>\n</blockquote>\n<p>Note:</p>\n<ul>\n<li>The input array will only contain 0 and 1.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n<p>Follow up:<br>What if the input numbers come in one by one as an infinite stream? In other words, you can’t store all numbers coming from the stream as it’s too large to hold in memory. Could you solve it efficiently?</p>\n</blockquote>","more":"<p>This is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.</p>\n<p>First, I find a bad idea, I try to combine the nums like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 0 1 1 0 1 =&gt; 1 0 2 0 1</div></pre></td></tr></table></figure></p>\n<p>And try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nums: 1 0 1 1 0 1</div><div class=\"line\">DP 1: 1 2 3 4 0 1</div><div class=\"line\">DP 2: 1 0 1 2 3 4</div></pre></td></tr></table></figure></p>\n<p>Because only four situation will happen. 0 -&gt; 1, 1 -&gt; 1, 0 -&gt; 0, 1 -&gt; 0.</p>\n<p>So the solution is following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int res = 0, flag = 0; // flag 0 represents up use the flip</div><div class=\"line\">            vector&lt;int&gt; flags1(nums.size() + 1), flags2(nums.size() + 1);</div><div class=\"line\">            flags1.push_back(0);</div><div class=\"line\">            flags2.push_back(0);</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] == 0) &#123;</div><div class=\"line\">                    if (flag == 0) &#123;</div><div class=\"line\">                        flag = 1;</div><div class=\"line\">                        flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                        flags2[i+1] = 0;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        flag = 0;</div><div class=\"line\">                        flags1[i+1] = 0;</div><div class=\"line\">                        flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                    flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = max(res, max(flags1[i+1], flags2[i+1]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Longest Word in Dictionary through Deleting","date":"2017-03-01T01:19:18.000Z","_content":"\n> Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n>\n> Example 1:\n>```\nInput:\ns = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n\nOutput:\n\"apple\"\n```\n> Example 2:\n>```\nInput:\ns = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\n\nOutput:\n\"a\"\n```\n> Note:\n>\n>  + All the strings in the input will only contain lower-case letters.\n>  + The size of the dictionary won't exceed 1,000.\n>  + The length of all the strings in the input won't exceed 1,000.\n\n<!--more-->\n\nThis is Leetcode No.524, at first I thought that the problem is find the result string can be formed by the characters in the given str. So, I write this answer:\n\n```\nclass Solution {\n    public:\n        string findLongestWord(string str, vector<string>& dic) {\n            sort(dic.begin(), dic.end());\n\n            int chars[26] = {0}, maxLen = INT_MAX;\n            string res;\n\n            for (int i = 0; i < (int)str.length(); i++) {\n                chars[str[i] - 'a']++;\n            }\n\n            int tmp[26] = {0}, flag = 0;\n            for (int i = 0; i < (int)dic.size(); i++) {\n                flag = 1;\n                memset(tmp, 0, sizeof(tmp));\n                for (int j = 0; j < (int)dic[i].length(); j++) {\n                    tmp[dic[i][j] - 'a']++;\n                }\n\n                for (int j = 0; j < 26; j++) {\n                    if (tmp[j] > chars[j]) {\n                        flag = -1;\n                        break;\n                    } else {\n                        flag = flag + chars[j] - tmp[j];\n                    }\n                }\n\n                if (flag >= 0 && flag < maxLen) {\n                    maxLen = flag;\n                    res = dic[i];\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nBut, it get WA of cause. So I realize that I can only delete chars instead of change its order.\n\nSo, here you can use the two-pointers method. To make the code clean:\n\n```\nclass Solution {\n    public:\n        string findLongestWord(string str, vector<string>& dic) {\n            sort(dic.begin(), dic.end());\n\n            int chars[26] = {0}, maxLen = INT_MIN;\n            string res;\n\n            for (int i = 0; i < (int)str.length(); i++) {\n                chars[str[i] - 'a']++;\n            }\n\n            for (int i = 0; i < (int)dic.size(); i++) {\n                if (checkStr(str, dic[i], 0, 0)) {\n                    res = (int)dic[i].length() > maxLen ? dic[i] : res;\n                    maxLen = max((int)dic[i].length(), maxLen);\n                }\n            }\n\n            return res;\n        }\n\n        bool checkStr(string src, string des, int idx, int idy) {\n            if (des.length() > src.length()) {\n                return false;\n            }\n            if (idy == (int)des.length()) {\n                return true;\n            }\n            if (idx == (int)src.length()) {\n                return false;\n            }\n            if (src[idx] == des[idy]) {\n                return checkStr(src, des, idx + 1, idy + 1);\n            } else {\n                return checkStr(src, des, idx + 1, idy);\n            }\n        }\n};\n```\n\nI write code like this, but it gets a MLE... Absolutly the stack is overflow. So, I should improve the check method.\n\n```\nclass Solution {\n    public:\n        string findLongestWord(string str, vector<string>& dic) {\n            sort(dic.begin(), dic.end());\n\n            int chars[26] = {0}, maxLen = INT_MIN;\n            string res;\n\n            for (int i = 0; i < (int)str.length(); i++) {\n                chars[str[i] - 'a']++;\n            }\n\n            for (int i = 0; i < (int)dic.size(); i++) {\n                if (checkStr(str, dic[i], 0, 0)) {\n                    res = (int)dic[i].length() > maxLen ? dic[i] : res;\n                    maxLen = max((int)dic[i].length(), maxLen);\n                }\n            }\n\n            return res;\n        }\n\n        bool checkStr(string src, string des, int idx, int idy) {\n            if (des.length() > src.length()) {\n                return false;\n            }\n\n            while (idy < (int)des.length() && idx < (int)src.length()) {\n                if (src[idx] == des[idy]) {\n                    idx++;\n                    idy++;\n                } else {\n                    idx++;\n                }\n            }\n\n            if (idy == (int)des.length()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n};\n```\n\nIt gets AC...\n","source":"_posts/LongestWordinDictionarythroughDeleting.md","raw":"---\ntitle: Longest Word in Dictionary through Deleting\ndate: 2017-03-01 09:19:18\ntags:\n    - Two Pointers\n    - Sort\n---\n\n> Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n>\n> Example 1:\n>```\nInput:\ns = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n\nOutput:\n\"apple\"\n```\n> Example 2:\n>```\nInput:\ns = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\n\nOutput:\n\"a\"\n```\n> Note:\n>\n>  + All the strings in the input will only contain lower-case letters.\n>  + The size of the dictionary won't exceed 1,000.\n>  + The length of all the strings in the input won't exceed 1,000.\n\n<!--more-->\n\nThis is Leetcode No.524, at first I thought that the problem is find the result string can be formed by the characters in the given str. So, I write this answer:\n\n```\nclass Solution {\n    public:\n        string findLongestWord(string str, vector<string>& dic) {\n            sort(dic.begin(), dic.end());\n\n            int chars[26] = {0}, maxLen = INT_MAX;\n            string res;\n\n            for (int i = 0; i < (int)str.length(); i++) {\n                chars[str[i] - 'a']++;\n            }\n\n            int tmp[26] = {0}, flag = 0;\n            for (int i = 0; i < (int)dic.size(); i++) {\n                flag = 1;\n                memset(tmp, 0, sizeof(tmp));\n                for (int j = 0; j < (int)dic[i].length(); j++) {\n                    tmp[dic[i][j] - 'a']++;\n                }\n\n                for (int j = 0; j < 26; j++) {\n                    if (tmp[j] > chars[j]) {\n                        flag = -1;\n                        break;\n                    } else {\n                        flag = flag + chars[j] - tmp[j];\n                    }\n                }\n\n                if (flag >= 0 && flag < maxLen) {\n                    maxLen = flag;\n                    res = dic[i];\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nBut, it get WA of cause. So I realize that I can only delete chars instead of change its order.\n\nSo, here you can use the two-pointers method. To make the code clean:\n\n```\nclass Solution {\n    public:\n        string findLongestWord(string str, vector<string>& dic) {\n            sort(dic.begin(), dic.end());\n\n            int chars[26] = {0}, maxLen = INT_MIN;\n            string res;\n\n            for (int i = 0; i < (int)str.length(); i++) {\n                chars[str[i] - 'a']++;\n            }\n\n            for (int i = 0; i < (int)dic.size(); i++) {\n                if (checkStr(str, dic[i], 0, 0)) {\n                    res = (int)dic[i].length() > maxLen ? dic[i] : res;\n                    maxLen = max((int)dic[i].length(), maxLen);\n                }\n            }\n\n            return res;\n        }\n\n        bool checkStr(string src, string des, int idx, int idy) {\n            if (des.length() > src.length()) {\n                return false;\n            }\n            if (idy == (int)des.length()) {\n                return true;\n            }\n            if (idx == (int)src.length()) {\n                return false;\n            }\n            if (src[idx] == des[idy]) {\n                return checkStr(src, des, idx + 1, idy + 1);\n            } else {\n                return checkStr(src, des, idx + 1, idy);\n            }\n        }\n};\n```\n\nI write code like this, but it gets a MLE... Absolutly the stack is overflow. So, I should improve the check method.\n\n```\nclass Solution {\n    public:\n        string findLongestWord(string str, vector<string>& dic) {\n            sort(dic.begin(), dic.end());\n\n            int chars[26] = {0}, maxLen = INT_MIN;\n            string res;\n\n            for (int i = 0; i < (int)str.length(); i++) {\n                chars[str[i] - 'a']++;\n            }\n\n            for (int i = 0; i < (int)dic.size(); i++) {\n                if (checkStr(str, dic[i], 0, 0)) {\n                    res = (int)dic[i].length() > maxLen ? dic[i] : res;\n                    maxLen = max((int)dic[i].length(), maxLen);\n                }\n            }\n\n            return res;\n        }\n\n        bool checkStr(string src, string des, int idx, int idy) {\n            if (des.length() > src.length()) {\n                return false;\n            }\n\n            while (idy < (int)des.length() && idx < (int)src.length()) {\n                if (src[idx] == des[idy]) {\n                    idx++;\n                    idy++;\n                } else {\n                    idx++;\n                }\n            }\n\n            if (idy == (int)des.length()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n};\n```\n\nIt gets AC...\n","slug":"LongestWordinDictionarythroughDeleting","published":1,"updated":"2017-03-01T02:02:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyb003xx2f4znz0o7dg","content":"<blockquote>\n<p>Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</div><div class=\"line\"></div><div class=\"line\">Output:</div><div class=\"line\">&quot;apple&quot;</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</div><div class=\"line\"></div><div class=\"line\">Output:</div><div class=\"line\">&quot;a&quot;</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>All the strings in the input will only contain lower-case letters.</li>\n<li>The size of the dictionary won’t exceed 1,000.</li>\n<li>The length of all the strings in the input won’t exceed 1,000.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.524, at first I thought that the problem is find the result string can be formed by the characters in the given str. So, I write this answer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string findLongestWord(string str, vector&lt;string&gt;&amp; dic) &#123;</div><div class=\"line\">            sort(dic.begin(), dic.end());</div><div class=\"line\"></div><div class=\"line\">            int chars[26] = &#123;0&#125;, maxLen = INT_MAX;</div><div class=\"line\">            string res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)str.length(); i++) &#123;</div><div class=\"line\">                chars[str[i] - &apos;a&apos;]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int tmp[26] = &#123;0&#125;, flag = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)dic.size(); i++) &#123;</div><div class=\"line\">                flag = 1;</div><div class=\"line\">                memset(tmp, 0, sizeof(tmp));</div><div class=\"line\">                for (int j = 0; j &lt; (int)dic[i].length(); j++) &#123;</div><div class=\"line\">                    tmp[dic[i][j] - &apos;a&apos;]++;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                for (int j = 0; j &lt; 26; j++) &#123;</div><div class=\"line\">                    if (tmp[j] &gt; chars[j]) &#123;</div><div class=\"line\">                        flag = -1;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        flag = flag + chars[j] - tmp[j];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (flag &gt;= 0 &amp;&amp; flag &lt; maxLen) &#123;</div><div class=\"line\">                    maxLen = flag;</div><div class=\"line\">                    res = dic[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it get WA of cause. So I realize that I can only delete chars instead of change its order.</p>\n<p>So, here you can use the two-pointers method. To make the code clean:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string findLongestWord(string str, vector&lt;string&gt;&amp; dic) &#123;</div><div class=\"line\">            sort(dic.begin(), dic.end());</div><div class=\"line\"></div><div class=\"line\">            int chars[26] = &#123;0&#125;, maxLen = INT_MIN;</div><div class=\"line\">            string res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)str.length(); i++) &#123;</div><div class=\"line\">                chars[str[i] - &apos;a&apos;]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)dic.size(); i++) &#123;</div><div class=\"line\">                if (checkStr(str, dic[i], 0, 0)) &#123;</div><div class=\"line\">                    res = (int)dic[i].length() &gt; maxLen ? dic[i] : res;</div><div class=\"line\">                    maxLen = max((int)dic[i].length(), maxLen);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkStr(string src, string des, int idx, int idy) &#123;</div><div class=\"line\">            if (des.length() &gt; src.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idy == (int)des.length()) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx == (int)src.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (src[idx] == des[idy]) &#123;</div><div class=\"line\">                return checkStr(src, des, idx + 1, idy + 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return checkStr(src, des, idx + 1, idy);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I write code like this, but it gets a MLE… Absolutly the stack is overflow. So, I should improve the check method.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string findLongestWord(string str, vector&lt;string&gt;&amp; dic) &#123;</div><div class=\"line\">            sort(dic.begin(), dic.end());</div><div class=\"line\"></div><div class=\"line\">            int chars[26] = &#123;0&#125;, maxLen = INT_MIN;</div><div class=\"line\">            string res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)str.length(); i++) &#123;</div><div class=\"line\">                chars[str[i] - &apos;a&apos;]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)dic.size(); i++) &#123;</div><div class=\"line\">                if (checkStr(str, dic[i], 0, 0)) &#123;</div><div class=\"line\">                    res = (int)dic[i].length() &gt; maxLen ? dic[i] : res;</div><div class=\"line\">                    maxLen = max((int)dic[i].length(), maxLen);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkStr(string src, string des, int idx, int idy) &#123;</div><div class=\"line\">            if (des.length() &gt; src.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            while (idy &lt; (int)des.length() &amp;&amp; idx &lt; (int)src.length()) &#123;</div><div class=\"line\">                if (src[idx] == des[idy]) &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                    idy++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (idy == (int)des.length()) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC…</p>\n","excerpt":"<blockquote>\n<p>Given a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]</div><div class=\"line\"></div><div class=\"line\">Output:</div><div class=\"line\">&quot;apple&quot;</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">s = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</div><div class=\"line\"></div><div class=\"line\">Output:</div><div class=\"line\">&quot;a&quot;</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>All the strings in the input will only contain lower-case letters.</li>\n<li>The size of the dictionary won’t exceed 1,000.</li>\n<li>The length of all the strings in the input won’t exceed 1,000.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.524, at first I thought that the problem is find the result string can be formed by the characters in the given str. So, I write this answer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string findLongestWord(string str, vector&lt;string&gt;&amp; dic) &#123;</div><div class=\"line\">            sort(dic.begin(), dic.end());</div><div class=\"line\"></div><div class=\"line\">            int chars[26] = &#123;0&#125;, maxLen = INT_MAX;</div><div class=\"line\">            string res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)str.length(); i++) &#123;</div><div class=\"line\">                chars[str[i] - &apos;a&apos;]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int tmp[26] = &#123;0&#125;, flag = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)dic.size(); i++) &#123;</div><div class=\"line\">                flag = 1;</div><div class=\"line\">                memset(tmp, 0, sizeof(tmp));</div><div class=\"line\">                for (int j = 0; j &lt; (int)dic[i].length(); j++) &#123;</div><div class=\"line\">                    tmp[dic[i][j] - &apos;a&apos;]++;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                for (int j = 0; j &lt; 26; j++) &#123;</div><div class=\"line\">                    if (tmp[j] &gt; chars[j]) &#123;</div><div class=\"line\">                        flag = -1;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        flag = flag + chars[j] - tmp[j];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (flag &gt;= 0 &amp;&amp; flag &lt; maxLen) &#123;</div><div class=\"line\">                    maxLen = flag;</div><div class=\"line\">                    res = dic[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it get WA of cause. So I realize that I can only delete chars instead of change its order.</p>\n<p>So, here you can use the two-pointers method. To make the code clean:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string findLongestWord(string str, vector&lt;string&gt;&amp; dic) &#123;</div><div class=\"line\">            sort(dic.begin(), dic.end());</div><div class=\"line\"></div><div class=\"line\">            int chars[26] = &#123;0&#125;, maxLen = INT_MIN;</div><div class=\"line\">            string res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)str.length(); i++) &#123;</div><div class=\"line\">                chars[str[i] - &apos;a&apos;]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)dic.size(); i++) &#123;</div><div class=\"line\">                if (checkStr(str, dic[i], 0, 0)) &#123;</div><div class=\"line\">                    res = (int)dic[i].length() &gt; maxLen ? dic[i] : res;</div><div class=\"line\">                    maxLen = max((int)dic[i].length(), maxLen);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkStr(string src, string des, int idx, int idy) &#123;</div><div class=\"line\">            if (des.length() &gt; src.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idy == (int)des.length()) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx == (int)src.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (src[idx] == des[idy]) &#123;</div><div class=\"line\">                return checkStr(src, des, idx + 1, idy + 1);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return checkStr(src, des, idx + 1, idy);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I write code like this, but it gets a MLE… Absolutly the stack is overflow. So, I should improve the check method.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string findLongestWord(string str, vector&lt;string&gt;&amp; dic) &#123;</div><div class=\"line\">            sort(dic.begin(), dic.end());</div><div class=\"line\"></div><div class=\"line\">            int chars[26] = &#123;0&#125;, maxLen = INT_MIN;</div><div class=\"line\">            string res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)str.length(); i++) &#123;</div><div class=\"line\">                chars[str[i] - &apos;a&apos;]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)dic.size(); i++) &#123;</div><div class=\"line\">                if (checkStr(str, dic[i], 0, 0)) &#123;</div><div class=\"line\">                    res = (int)dic[i].length() &gt; maxLen ? dic[i] : res;</div><div class=\"line\">                    maxLen = max((int)dic[i].length(), maxLen);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkStr(string src, string des, int idx, int idy) &#123;</div><div class=\"line\">            if (des.length() &gt; src.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            while (idy &lt; (int)des.length() &amp;&amp; idx &lt; (int)src.length()) &#123;</div><div class=\"line\">                if (src[idx] == des[idy]) &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                    idy++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (idy == (int)des.length()) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC…</p>"},{"title":"Max Consecutive Ones","date":"2017-02-19T08:58:58.000Z","_content":"\n> Given a binary array, find the maximum number of consecutive 1s in this array.\n>\n> Example 1:\n>\n> Input: [1,1,0,1,1,1]\n>\n> Output: 3\n>\n> Explanation:\n>  + The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n>\n> Note:\n>\n> + The input array will only contain 0 and 1.\n> + The length of input array is a positive integer and will not exceed 10,000\n\n<!--more-->\n\nThis is Leetcode No.485, and it is an easy problem. Here is my solution:\n\n```\nclass Solution {\n    public:\n        int findMaxConsecutiveOnes(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n\n            int res = 0, current = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (nums[i] == 0) {\n                    current = 0;\n                } else {\n                    current = current + 1;\n                }\n                res = max(res, current);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/MaxConsecutiveOnes.md","raw":"---\ntitle: Max Consecutive Ones\ndate: 2017-02-19 16:58:58\ntags:\n    - Array\n---\n\n> Given a binary array, find the maximum number of consecutive 1s in this array.\n>\n> Example 1:\n>\n> Input: [1,1,0,1,1,1]\n>\n> Output: 3\n>\n> Explanation:\n>  + The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n>\n> Note:\n>\n> + The input array will only contain 0 and 1.\n> + The length of input array is a positive integer and will not exceed 10,000\n\n<!--more-->\n\nThis is Leetcode No.485, and it is an easy problem. Here is my solution:\n\n```\nclass Solution {\n    public:\n        int findMaxConsecutiveOnes(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n\n            int res = 0, current = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (nums[i] == 0) {\n                    current = 0;\n                } else {\n                    current = current + 1;\n                }\n                res = max(res, current);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"MaxConsecutiveOnes","published":1,"updated":"2017-02-19T09:09:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyc003zx2f4yp3l34ig","content":"<blockquote>\n<p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>\n<p>Example 1:</p>\n<p>Input: [1,1,0,1,1,1]</p>\n<p>Output: 3</p>\n<p>Explanation:</p>\n<ul>\n<li>The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The input array will only contain 0 and 1.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.485, and it is an easy problem. Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0, current = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] == 0) &#123;</div><div class=\"line\">                    current = 0;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    current = current + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = max(res, current);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>\n<p>Example 1:</p>\n<p>Input: [1,1,0,1,1,1]</p>\n<p>Output: 3</p>\n<p>Explanation:</p>\n<ul>\n<li>The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The input array will only contain 0 and 1.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.485, and it is an easy problem. Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0, current = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] == 0) &#123;</div><div class=\"line\">                    current = 0;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    current = current + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = max(res, current);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Maximum Product of Word Lengths","date":"2017-01-18T14:23:09.000Z","_content":"\n> Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.\n>\n> Example 1:\n>\n> + Given [\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"]\n> + Return 16 The two words can be \"abcw\", \"xtfn\".\n>\n> Example 2:\n>\n> + Given [\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]\n> + Return 4 The two words can be \"ab\", \"cd\".\n>\n> Example 3:\n>\n> + Given [\"a\", \"aa\", \"aaa\", \"aaaa\"]\n> + Return 0 No such pair of words.\n\n<!--more-->\n\nThis is Leetcode 318, and it is just a change from the common simulation problem(add some conditions).\n\nI just use the simplest method to get AC...\n\n```\nclass Solution {\n    public:\n        int maxProduct(vector<string>& words) {\n            if (words.size() == 0) {\n                return 0;\n            }\n            vector<bitset<26> > wordsets;\n            for (unsigned int i = 0; i < words.size(); i++) {\n                wordsets.push_back(bitset<26>());\n                for (unsigned int j = 0; j < words[i].length(); j++) {\n                    wordsets[i][words[i][j] - 'a'] = 1;\n                }\n            }\n\n            int result = 0;\n            for (unsigned int i = 0; i < words.size() - 1; i++) {\n                for (unsigned int j = i + 1; j < words.size(); j++) {\n                    bitset<26> res = wordsets[i] ^ wordsets[j];\n                    if (res.count() == wordsets[i].count() + wordsets[j].count()) {\n                        result = max(int(words[i].length() * words[j].length()), result);\n                    }\n                }\n            }\n            return result;\n        }\n};\n```\n\nThat's so easy...\n","source":"_posts/MaximumProductofWordLengths.md","raw":"---\ntitle: Maximum Product of Word Lengths\ndate: 2017-01-18 22:23:09\ntags:\n    - Bitmap\n---\n\n> Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.\n>\n> Example 1:\n>\n> + Given [\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"]\n> + Return 16 The two words can be \"abcw\", \"xtfn\".\n>\n> Example 2:\n>\n> + Given [\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]\n> + Return 4 The two words can be \"ab\", \"cd\".\n>\n> Example 3:\n>\n> + Given [\"a\", \"aa\", \"aaa\", \"aaaa\"]\n> + Return 0 No such pair of words.\n\n<!--more-->\n\nThis is Leetcode 318, and it is just a change from the common simulation problem(add some conditions).\n\nI just use the simplest method to get AC...\n\n```\nclass Solution {\n    public:\n        int maxProduct(vector<string>& words) {\n            if (words.size() == 0) {\n                return 0;\n            }\n            vector<bitset<26> > wordsets;\n            for (unsigned int i = 0; i < words.size(); i++) {\n                wordsets.push_back(bitset<26>());\n                for (unsigned int j = 0; j < words[i].length(); j++) {\n                    wordsets[i][words[i][j] - 'a'] = 1;\n                }\n            }\n\n            int result = 0;\n            for (unsigned int i = 0; i < words.size() - 1; i++) {\n                for (unsigned int j = i + 1; j < words.size(); j++) {\n                    bitset<26> res = wordsets[i] ^ wordsets[j];\n                    if (res.count() == wordsets[i].count() + wordsets[j].count()) {\n                        result = max(int(words[i].length() * words[j].length()), result);\n                    }\n                }\n            }\n            return result;\n        }\n};\n```\n\nThat's so easy...\n","slug":"MaximumProductofWordLengths","published":1,"updated":"2017-01-27T14:08:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpye0042x2f4jchup175","content":"<blockquote>\n<p>Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.</p>\n<p>Example 1:</p>\n<ul>\n<li>Given [“abcw”, “baz”, “foo”, “bar”, “xtfn”, “abcdef”]</li>\n<li>Return 16 The two words can be “abcw”, “xtfn”.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Given [“a”, “ab”, “abc”, “d”, “cd”, “bcd”, “abcd”]</li>\n<li>Return 4 The two words can be “ab”, “cd”.</li>\n</ul>\n<p>Example 3:</p>\n<ul>\n<li>Given [“a”, “aa”, “aaa”, “aaaa”]</li>\n<li>Return 0 No such pair of words.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 318, and it is just a change from the common simulation problem(add some conditions).</p>\n<p>I just use the simplest method to get AC…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxProduct(vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            if (words.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            vector&lt;bitset&lt;26&gt; &gt; wordsets;</div><div class=\"line\">            for (unsigned int i = 0; i &lt; words.size(); i++) &#123;</div><div class=\"line\">                wordsets.push_back(bitset&lt;26&gt;());</div><div class=\"line\">                for (unsigned int j = 0; j &lt; words[i].length(); j++) &#123;</div><div class=\"line\">                    wordsets[i][words[i][j] - &apos;a&apos;] = 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int result = 0;</div><div class=\"line\">            for (unsigned int i = 0; i &lt; words.size() - 1; i++) &#123;</div><div class=\"line\">                for (unsigned int j = i + 1; j &lt; words.size(); j++) &#123;</div><div class=\"line\">                    bitset&lt;26&gt; res = wordsets[i] ^ wordsets[j];</div><div class=\"line\">                    if (res.count() == wordsets[i].count() + wordsets[j].count()) &#123;</div><div class=\"line\">                        result = max(int(words[i].length() * words[j].length()), result);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>That’s so easy…</p>\n","excerpt":"<blockquote>\n<p>Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.</p>\n<p>Example 1:</p>\n<ul>\n<li>Given [“abcw”, “baz”, “foo”, “bar”, “xtfn”, “abcdef”]</li>\n<li>Return 16 The two words can be “abcw”, “xtfn”.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Given [“a”, “ab”, “abc”, “d”, “cd”, “bcd”, “abcd”]</li>\n<li>Return 4 The two words can be “ab”, “cd”.</li>\n</ul>\n<p>Example 3:</p>\n<ul>\n<li>Given [“a”, “aa”, “aaa”, “aaaa”]</li>\n<li>Return 0 No such pair of words.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 318, and it is just a change from the common simulation problem(add some conditions).</p>\n<p>I just use the simplest method to get AC…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxProduct(vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            if (words.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            vector&lt;bitset&lt;26&gt; &gt; wordsets;</div><div class=\"line\">            for (unsigned int i = 0; i &lt; words.size(); i++) &#123;</div><div class=\"line\">                wordsets.push_back(bitset&lt;26&gt;());</div><div class=\"line\">                for (unsigned int j = 0; j &lt; words[i].length(); j++) &#123;</div><div class=\"line\">                    wordsets[i][words[i][j] - &apos;a&apos;] = 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int result = 0;</div><div class=\"line\">            for (unsigned int i = 0; i &lt; words.size() - 1; i++) &#123;</div><div class=\"line\">                for (unsigned int j = i + 1; j &lt; words.size(); j++) &#123;</div><div class=\"line\">                    bitset&lt;26&gt; res = wordsets[i] ^ wordsets[j];</div><div class=\"line\">                    if (res.count() == wordsets[i].count() + wordsets[j].count()) &#123;</div><div class=\"line\">                        result = max(int(words[i].length() * words[j].length()), result);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>That’s so easy…</p>"},{"title":"Maximum Vacation Days","date":"2017-05-01T05:50:51.000Z","_content":"\n> LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\n>\n> Rules and restrictions:\n>\n> + You can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.\n> + The cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.\n> + You totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we don't consider the impact of flight time.\n> + For each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.\n>\n> You're given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.\n> <!--more-->\n> Example 1:\n```\nInput:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]\nOutput: 12\nExplanation:\nAns = 6 + 3 + 3 = 12.\n\nOne of the best strategies is:\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day.\n(Although you start at city 0, we could also fly to and start at other cities since it is Monday.)\n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\n3rd week : stay at city 2, and play 3 days and work 4 days.\n```\n> Example 2:\n```\nInput:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]\nOutput: 3\nExplanation:\nAns = 1 + 1 + 1 = 3.\n\nSince there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks.\nFor each week, you only have one day to play and six days to work.\nSo the maximum number of vacation days is 3.\n```\n> Example 3:\n```\nInput:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]\nOutput: 21\nExplanation:\nAns = 7 + 7 + 7 = 21\n\nOne of the best strategies is:\n1st week : stay at city 0, and play 7 days.\n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\n```\n> Note:\n>\n> + N and K are positive integers, which are in the range of [1, 100].\n> + In the matrix flights, all the values are integers in the range of [0, 1].\n> + In the matrix days, all the values are integers in the range [0, 7].\n> + You could stay at a city beyond the number of vacation days, but you should work on the extra days, which won't be counted as vacation days.\n> + If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\n> + We don't consider the impact of flight hours towards the calculation of vacation days.\n\nThis is Leetcode No.568, and it is also the last problem of Leetcode Weekly contest 30. I don't have enough time to figure this problem out in the contest. So, here I will use the holiday to solve the problem.\n\nFirst, you can quickly find a DFS solution to solve the problem:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > MAP, DAYS;\n        int WEEK, RES, CITY_NUM;\n        int maxVacationDays(vector<vector<int> >& flights, vector<vector<int> >& days) {\n            RES = 0;\n            MAP = flights;\n            DAYS = days;\n            WEEK = days[0].size();\n            CITY_NUM = days.size();\n\n            for (int currentCity = 0; currentCity < CITY_NUM; currentCity++) {\n                if (MAP[0][currentCity] == 1 || currentCity == 0) {\n                    visit(currentCity, 0, 0);\n                }\n            }\n\n            return RES;\n        }\n\n        void visit(int currentCity, int currentWeek, int currentVacation) {\n            if (currentWeek == WEEK) {\n                RES = max(currentVacation, RES);\n                return;\n            }\n\n            currentVacation = currentVacation + DAYS[currentCity][currentWeek];\n            for (int nextCity = 0; nextCity < CITY_NUM; nextCity++) {\n                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) {\n                    visit(nextCity, currentWeek + 1, currentVacation);\n                }\n            }\n        }\n};\n```\n\nBut for the largest case, the code is TLE. I don't feel strange because I haven't use any performance-improvement, if I pass the problem so easy, it will not be so much fun.\n\nThen, I use the DP method to improve the performance. Try to use a `Map<pair<city, week>, maxVacation>` to reduce branches.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        map<pair<int, int>, int> DP;\n        vector<vector<int> > MAP, DAYS;\n        int WEEK, RES, CITY_NUM;\n        int maxVacationDays(vector<vector<int> >& flights, vector<vector<int> >& days) {\n            DP.clear();\n            RES = 0;\n            MAP = flights;\n            DAYS = days;\n            WEEK = days[0].size();\n            CITY_NUM = days.size();\n\n            for (int currentCity = 0; currentCity < CITY_NUM; currentCity++) {\n                if (MAP[0][currentCity] == 1 || currentCity == 0) {\n                    visit(currentCity, 0, 0);\n                }\n            }\n\n            return RES;\n        }\n\n        void visit(int currentCity, int currentWeek, int currentVacation) {\n            if (currentWeek == WEEK) {\n                RES = max(currentVacation, RES);\n                return;\n            }\n\n            currentVacation = currentVacation + DAYS[currentCity][currentWeek];\n            if (DP.find(pair<int, int>(currentCity, currentWeek)) != DP.end()\n                    && DP.find(pair<int, int>(currentCity, currentWeek))->second >= currentVacation)\n            {\n                return;\n            } else {\n                DP.insert(pair<pair<int, int>, int>(pair<int, int>(currentCity, currentWeek), currentVacation));\n            }\n            for (int nextCity = 0; nextCity < CITY_NUM; nextCity++) {\n                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) {\n                    visit(nextCity, currentWeek + 1, currentVacation);\n                }\n            }\n        }\n};\n```\n\nBut, it still gets TLE. WTF!\n\nSo, I try to think another way. Maybe Greedy method.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int maxVacationDays(vector<vector<int> >& flights, vector<vector<int> >& days) {\n            vector<vector<int> > DP;\n            for (int i = 0; i < (int)days.size(); i++) {\n                vector<int> cityDay;\n                for (int j = 0; j < (int)days[0].size(); j++) {\n                    cityDay.push_back(-1);\n                }\n                DP.push_back(cityDay);\n            }\n\n            for (int city = 0; city < (int)days.size(); city++) {\n                if (city == 0 || flights[0][city] == 1) {\n                    DP[city][0] = days[city][0];\n                }\n            }\n            for (int week = 1; week < (int)days[0].size(); week++) {\n                for (int currentCity = 0; currentCity < (int)days.size(); currentCity++) {\n                    for (int nextCity = 0; nextCity < (int)days.size(); nextCity++) {\n                        if (DP[currentCity][week - 1] != -1) {\n                            if (flights[currentCity][nextCity] || (currentCity == nextCity)) {\n                                DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            int res = 0;\n            for (int city = 0; city < (int)days.size(); city++) {\n                res = max(res, DP[city][days[0].size() - 1]);\n            }\n            return res;\n        }\n};\n```\n\nThen I find a DP way that using a DP[city][week] to mark the max vacation in week in city.\n\nThen using the DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);\n\nIt gets AC.\n","source":"_posts/MaximumVacationDays.md","raw":"---\ntitle: Maximum Vacation Days\ndate: 2017-05-01 13:50:51\ntags:\n    - Dynamic Programming\n    - Depth-first Search\n---\n\n> LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\n>\n> Rules and restrictions:\n>\n> + You can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.\n> + The cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.\n> + You totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we don't consider the impact of flight time.\n> + For each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.\n>\n> You're given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.\n> <!--more-->\n> Example 1:\n```\nInput:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]\nOutput: 12\nExplanation:\nAns = 6 + 3 + 3 = 12.\n\nOne of the best strategies is:\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day.\n(Although you start at city 0, we could also fly to and start at other cities since it is Monday.)\n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\n3rd week : stay at city 2, and play 3 days and work 4 days.\n```\n> Example 2:\n```\nInput:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]\nOutput: 3\nExplanation:\nAns = 1 + 1 + 1 = 3.\n\nSince there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks.\nFor each week, you only have one day to play and six days to work.\nSo the maximum number of vacation days is 3.\n```\n> Example 3:\n```\nInput:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]\nOutput: 21\nExplanation:\nAns = 7 + 7 + 7 = 21\n\nOne of the best strategies is:\n1st week : stay at city 0, and play 7 days.\n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\n```\n> Note:\n>\n> + N and K are positive integers, which are in the range of [1, 100].\n> + In the matrix flights, all the values are integers in the range of [0, 1].\n> + In the matrix days, all the values are integers in the range [0, 7].\n> + You could stay at a city beyond the number of vacation days, but you should work on the extra days, which won't be counted as vacation days.\n> + If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.\n> + We don't consider the impact of flight hours towards the calculation of vacation days.\n\nThis is Leetcode No.568, and it is also the last problem of Leetcode Weekly contest 30. I don't have enough time to figure this problem out in the contest. So, here I will use the holiday to solve the problem.\n\nFirst, you can quickly find a DFS solution to solve the problem:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<int> > MAP, DAYS;\n        int WEEK, RES, CITY_NUM;\n        int maxVacationDays(vector<vector<int> >& flights, vector<vector<int> >& days) {\n            RES = 0;\n            MAP = flights;\n            DAYS = days;\n            WEEK = days[0].size();\n            CITY_NUM = days.size();\n\n            for (int currentCity = 0; currentCity < CITY_NUM; currentCity++) {\n                if (MAP[0][currentCity] == 1 || currentCity == 0) {\n                    visit(currentCity, 0, 0);\n                }\n            }\n\n            return RES;\n        }\n\n        void visit(int currentCity, int currentWeek, int currentVacation) {\n            if (currentWeek == WEEK) {\n                RES = max(currentVacation, RES);\n                return;\n            }\n\n            currentVacation = currentVacation + DAYS[currentCity][currentWeek];\n            for (int nextCity = 0; nextCity < CITY_NUM; nextCity++) {\n                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) {\n                    visit(nextCity, currentWeek + 1, currentVacation);\n                }\n            }\n        }\n};\n```\n\nBut for the largest case, the code is TLE. I don't feel strange because I haven't use any performance-improvement, if I pass the problem so easy, it will not be so much fun.\n\nThen, I use the DP method to improve the performance. Try to use a `Map<pair<city, week>, maxVacation>` to reduce branches.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        map<pair<int, int>, int> DP;\n        vector<vector<int> > MAP, DAYS;\n        int WEEK, RES, CITY_NUM;\n        int maxVacationDays(vector<vector<int> >& flights, vector<vector<int> >& days) {\n            DP.clear();\n            RES = 0;\n            MAP = flights;\n            DAYS = days;\n            WEEK = days[0].size();\n            CITY_NUM = days.size();\n\n            for (int currentCity = 0; currentCity < CITY_NUM; currentCity++) {\n                if (MAP[0][currentCity] == 1 || currentCity == 0) {\n                    visit(currentCity, 0, 0);\n                }\n            }\n\n            return RES;\n        }\n\n        void visit(int currentCity, int currentWeek, int currentVacation) {\n            if (currentWeek == WEEK) {\n                RES = max(currentVacation, RES);\n                return;\n            }\n\n            currentVacation = currentVacation + DAYS[currentCity][currentWeek];\n            if (DP.find(pair<int, int>(currentCity, currentWeek)) != DP.end()\n                    && DP.find(pair<int, int>(currentCity, currentWeek))->second >= currentVacation)\n            {\n                return;\n            } else {\n                DP.insert(pair<pair<int, int>, int>(pair<int, int>(currentCity, currentWeek), currentVacation));\n            }\n            for (int nextCity = 0; nextCity < CITY_NUM; nextCity++) {\n                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) {\n                    visit(nextCity, currentWeek + 1, currentVacation);\n                }\n            }\n        }\n};\n```\n\nBut, it still gets TLE. WTF!\n\nSo, I try to think another way. Maybe Greedy method.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int maxVacationDays(vector<vector<int> >& flights, vector<vector<int> >& days) {\n            vector<vector<int> > DP;\n            for (int i = 0; i < (int)days.size(); i++) {\n                vector<int> cityDay;\n                for (int j = 0; j < (int)days[0].size(); j++) {\n                    cityDay.push_back(-1);\n                }\n                DP.push_back(cityDay);\n            }\n\n            for (int city = 0; city < (int)days.size(); city++) {\n                if (city == 0 || flights[0][city] == 1) {\n                    DP[city][0] = days[city][0];\n                }\n            }\n            for (int week = 1; week < (int)days[0].size(); week++) {\n                for (int currentCity = 0; currentCity < (int)days.size(); currentCity++) {\n                    for (int nextCity = 0; nextCity < (int)days.size(); nextCity++) {\n                        if (DP[currentCity][week - 1] != -1) {\n                            if (flights[currentCity][nextCity] || (currentCity == nextCity)) {\n                                DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);\n                            }\n                        }\n                    }\n                }\n            }\n\n            int res = 0;\n            for (int city = 0; city < (int)days.size(); city++) {\n                res = max(res, DP[city][days[0].size() - 1]);\n            }\n            return res;\n        }\n};\n```\n\nThen I find a DP way that using a DP[city][week] to mark the max vacation in week in city.\n\nThen using the DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);\n\nIt gets AC.\n","slug":"MaximumVacationDays","published":1,"updated":"2017-05-01T06:44:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyf0044x2f4kulv6xlk","content":"<blockquote>\n<p>LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.</p>\n<p>Rules and restrictions:</p>\n<ul>\n<li>You can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.</li>\n<li>The cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.</li>\n<li>You totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week’s Monday morning. Since flight time is so short, we don’t consider the impact of flight time.</li>\n<li>For each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.</li>\n</ul>\n<p>You’re given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.<br><a id=\"more\"></a><br>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]</div><div class=\"line\">Output: 12</div><div class=\"line\">Explanation:</div><div class=\"line\">Ans = 6 + 3 + 3 = 12.</div><div class=\"line\"></div><div class=\"line\">One of the best strategies is:</div><div class=\"line\">1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day.</div><div class=\"line\">(Although you start at city 0, we could also fly to and start at other cities since it is Monday.)</div><div class=\"line\">2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.</div><div class=\"line\">3rd week : stay at city 2, and play 3 days and work 4 days.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]</div><div class=\"line\">Output: 3</div><div class=\"line\">Explanation:</div><div class=\"line\">Ans = 1 + 1 + 1 = 3.</div><div class=\"line\"></div><div class=\"line\">Since there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks.</div><div class=\"line\">For each week, you only have one day to play and six days to work.</div><div class=\"line\">So the maximum number of vacation days is 3.</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]</div><div class=\"line\">Output: 21</div><div class=\"line\">Explanation:</div><div class=\"line\">Ans = 7 + 7 + 7 = 21</div><div class=\"line\"></div><div class=\"line\">One of the best strategies is:</div><div class=\"line\">1st week : stay at city 0, and play 7 days.</div><div class=\"line\">2nd week : fly from city 0 to city 1 on Monday, and play 7 days.</div><div class=\"line\">3rd week : fly from city 1 to city 2 on Monday, and play 7 days.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>N and K are positive integers, which are in the range of [1, 100].</li>\n<li>In the matrix flights, all the values are integers in the range of [0, 1].</li>\n<li>In the matrix days, all the values are integers in the range [0, 7].</li>\n<li>You could stay at a city beyond the number of vacation days, but you should work on the extra days, which won’t be counted as vacation days.</li>\n<li>If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.</li>\n<li>We don’t consider the impact of flight hours towards the calculation of vacation days.</li>\n</ul>\n</blockquote>\n<p>This is Leetcode No.568, and it is also the last problem of Leetcode Weekly contest 30. I don’t have enough time to figure this problem out in the contest. So, here I will use the holiday to solve the problem.</p>\n<p>First, you can quickly find a DFS solution to solve the problem:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; MAP, DAYS;</div><div class=\"line\">        int WEEK, RES, CITY_NUM;</div><div class=\"line\">        int maxVacationDays(vector&lt;vector&lt;int&gt; &gt;&amp; flights, vector&lt;vector&lt;int&gt; &gt;&amp; days) &#123;</div><div class=\"line\">            RES = 0;</div><div class=\"line\">            MAP = flights;</div><div class=\"line\">            DAYS = days;</div><div class=\"line\">            WEEK = days[0].size();</div><div class=\"line\">            CITY_NUM = days.size();</div><div class=\"line\"></div><div class=\"line\">            for (int currentCity = 0; currentCity &lt; CITY_NUM; currentCity++) &#123;</div><div class=\"line\">                if (MAP[0][currentCity] == 1 || currentCity == 0) &#123;</div><div class=\"line\">                    visit(currentCity, 0, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return RES;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void visit(int currentCity, int currentWeek, int currentVacation) &#123;</div><div class=\"line\">            if (currentWeek == WEEK) &#123;</div><div class=\"line\">                RES = max(currentVacation, RES);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            currentVacation = currentVacation + DAYS[currentCity][currentWeek];</div><div class=\"line\">            for (int nextCity = 0; nextCity &lt; CITY_NUM; nextCity++) &#123;</div><div class=\"line\">                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) &#123;</div><div class=\"line\">                    visit(nextCity, currentWeek + 1, currentVacation);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But for the largest case, the code is TLE. I don’t feel strange because I haven’t use any performance-improvement, if I pass the problem so easy, it will not be so much fun.</p>\n<p>Then, I use the DP method to improve the performance. Try to use a <code>Map&lt;pair&lt;city, week&gt;, maxVacation&gt;</code> to reduce branches.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;pair&lt;int, int&gt;, int&gt; DP;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; MAP, DAYS;</div><div class=\"line\">        int WEEK, RES, CITY_NUM;</div><div class=\"line\">        int maxVacationDays(vector&lt;vector&lt;int&gt; &gt;&amp; flights, vector&lt;vector&lt;int&gt; &gt;&amp; days) &#123;</div><div class=\"line\">            DP.clear();</div><div class=\"line\">            RES = 0;</div><div class=\"line\">            MAP = flights;</div><div class=\"line\">            DAYS = days;</div><div class=\"line\">            WEEK = days[0].size();</div><div class=\"line\">            CITY_NUM = days.size();</div><div class=\"line\"></div><div class=\"line\">            for (int currentCity = 0; currentCity &lt; CITY_NUM; currentCity++) &#123;</div><div class=\"line\">                if (MAP[0][currentCity] == 1 || currentCity == 0) &#123;</div><div class=\"line\">                    visit(currentCity, 0, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return RES;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void visit(int currentCity, int currentWeek, int currentVacation) &#123;</div><div class=\"line\">            if (currentWeek == WEEK) &#123;</div><div class=\"line\">                RES = max(currentVacation, RES);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            currentVacation = currentVacation + DAYS[currentCity][currentWeek];</div><div class=\"line\">            if (DP.find(pair&lt;int, int&gt;(currentCity, currentWeek)) != DP.end()</div><div class=\"line\">                    &amp;&amp; DP.find(pair&lt;int, int&gt;(currentCity, currentWeek))-&gt;second &gt;= currentVacation)</div><div class=\"line\">            &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                DP.insert(pair&lt;pair&lt;int, int&gt;, int&gt;(pair&lt;int, int&gt;(currentCity, currentWeek), currentVacation));</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int nextCity = 0; nextCity &lt; CITY_NUM; nextCity++) &#123;</div><div class=\"line\">                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) &#123;</div><div class=\"line\">                    visit(nextCity, currentWeek + 1, currentVacation);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it still gets TLE. WTF!</p>\n<p>So, I try to think another way. Maybe Greedy method.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxVacationDays(vector&lt;vector&lt;int&gt; &gt;&amp; flights, vector&lt;vector&lt;int&gt; &gt;&amp; days) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; DP;</div><div class=\"line\">            for (int i = 0; i &lt; (int)days.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; cityDay;</div><div class=\"line\">                for (int j = 0; j &lt; (int)days[0].size(); j++) &#123;</div><div class=\"line\">                    cityDay.push_back(-1);</div><div class=\"line\">                &#125;</div><div class=\"line\">                DP.push_back(cityDay);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int city = 0; city &lt; (int)days.size(); city++) &#123;</div><div class=\"line\">                if (city == 0 || flights[0][city] == 1) &#123;</div><div class=\"line\">                    DP[city][0] = days[city][0];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int week = 1; week &lt; (int)days[0].size(); week++) &#123;</div><div class=\"line\">                for (int currentCity = 0; currentCity &lt; (int)days.size(); currentCity++) &#123;</div><div class=\"line\">                    for (int nextCity = 0; nextCity &lt; (int)days.size(); nextCity++) &#123;</div><div class=\"line\">                        if (DP[currentCity][week - 1] != -1) &#123;</div><div class=\"line\">                            if (flights[currentCity][nextCity] || (currentCity == nextCity)) &#123;</div><div class=\"line\">                                DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int city = 0; city &lt; (int)days.size(); city++) &#123;</div><div class=\"line\">                res = max(res, DP[city][days[0].size() - 1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Then I find a DP way that using a DP[city][week] to mark the max vacation in week in city.</p>\n<p>Then using the DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.</p>\n<p>Rules and restrictions:</p>\n<ul>\n<li>You can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.</li>\n<li>The cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.</li>\n<li>You totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week’s Monday morning. Since flight time is so short, we don’t consider the impact of flight time.</li>\n<li>For each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.</li>\n</ul>\n<p>You’re given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.<br>","more":"<br>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]</div><div class=\"line\">Output: 12</div><div class=\"line\">Explanation:</div><div class=\"line\">Ans = 6 + 3 + 3 = 12.</div><div class=\"line\"></div><div class=\"line\">One of the best strategies is:</div><div class=\"line\">1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day.</div><div class=\"line\">(Although you start at city 0, we could also fly to and start at other cities since it is Monday.)</div><div class=\"line\">2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.</div><div class=\"line\">3rd week : stay at city 2, and play 3 days and work 4 days.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]</div><div class=\"line\">Output: 3</div><div class=\"line\">Explanation:</div><div class=\"line\">Ans = 1 + 1 + 1 = 3.</div><div class=\"line\"></div><div class=\"line\">Since there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks.</div><div class=\"line\">For each week, you only have one day to play and six days to work.</div><div class=\"line\">So the maximum number of vacation days is 3.</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]</div><div class=\"line\">Output: 21</div><div class=\"line\">Explanation:</div><div class=\"line\">Ans = 7 + 7 + 7 = 21</div><div class=\"line\"></div><div class=\"line\">One of the best strategies is:</div><div class=\"line\">1st week : stay at city 0, and play 7 days.</div><div class=\"line\">2nd week : fly from city 0 to city 1 on Monday, and play 7 days.</div><div class=\"line\">3rd week : fly from city 1 to city 2 on Monday, and play 7 days.</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>N and K are positive integers, which are in the range of [1, 100].</li>\n<li>In the matrix flights, all the values are integers in the range of [0, 1].</li>\n<li>In the matrix days, all the values are integers in the range [0, 7].</li>\n<li>You could stay at a city beyond the number of vacation days, but you should work on the extra days, which won’t be counted as vacation days.</li>\n<li>If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.</li>\n<li>We don’t consider the impact of flight hours towards the calculation of vacation days.</li>\n</ul>\n</blockquote>\n<p>This is Leetcode No.568, and it is also the last problem of Leetcode Weekly contest 30. I don’t have enough time to figure this problem out in the contest. So, here I will use the holiday to solve the problem.</p>\n<p>First, you can quickly find a DFS solution to solve the problem:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; MAP, DAYS;</div><div class=\"line\">        int WEEK, RES, CITY_NUM;</div><div class=\"line\">        int maxVacationDays(vector&lt;vector&lt;int&gt; &gt;&amp; flights, vector&lt;vector&lt;int&gt; &gt;&amp; days) &#123;</div><div class=\"line\">            RES = 0;</div><div class=\"line\">            MAP = flights;</div><div class=\"line\">            DAYS = days;</div><div class=\"line\">            WEEK = days[0].size();</div><div class=\"line\">            CITY_NUM = days.size();</div><div class=\"line\"></div><div class=\"line\">            for (int currentCity = 0; currentCity &lt; CITY_NUM; currentCity++) &#123;</div><div class=\"line\">                if (MAP[0][currentCity] == 1 || currentCity == 0) &#123;</div><div class=\"line\">                    visit(currentCity, 0, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return RES;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void visit(int currentCity, int currentWeek, int currentVacation) &#123;</div><div class=\"line\">            if (currentWeek == WEEK) &#123;</div><div class=\"line\">                RES = max(currentVacation, RES);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            currentVacation = currentVacation + DAYS[currentCity][currentWeek];</div><div class=\"line\">            for (int nextCity = 0; nextCity &lt; CITY_NUM; nextCity++) &#123;</div><div class=\"line\">                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) &#123;</div><div class=\"line\">                    visit(nextCity, currentWeek + 1, currentVacation);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But for the largest case, the code is TLE. I don’t feel strange because I haven’t use any performance-improvement, if I pass the problem so easy, it will not be so much fun.</p>\n<p>Then, I use the DP method to improve the performance. Try to use a <code>Map&lt;pair&lt;city, week&gt;, maxVacation&gt;</code> to reduce branches.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;pair&lt;int, int&gt;, int&gt; DP;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; MAP, DAYS;</div><div class=\"line\">        int WEEK, RES, CITY_NUM;</div><div class=\"line\">        int maxVacationDays(vector&lt;vector&lt;int&gt; &gt;&amp; flights, vector&lt;vector&lt;int&gt; &gt;&amp; days) &#123;</div><div class=\"line\">            DP.clear();</div><div class=\"line\">            RES = 0;</div><div class=\"line\">            MAP = flights;</div><div class=\"line\">            DAYS = days;</div><div class=\"line\">            WEEK = days[0].size();</div><div class=\"line\">            CITY_NUM = days.size();</div><div class=\"line\"></div><div class=\"line\">            for (int currentCity = 0; currentCity &lt; CITY_NUM; currentCity++) &#123;</div><div class=\"line\">                if (MAP[0][currentCity] == 1 || currentCity == 0) &#123;</div><div class=\"line\">                    visit(currentCity, 0, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return RES;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void visit(int currentCity, int currentWeek, int currentVacation) &#123;</div><div class=\"line\">            if (currentWeek == WEEK) &#123;</div><div class=\"line\">                RES = max(currentVacation, RES);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            currentVacation = currentVacation + DAYS[currentCity][currentWeek];</div><div class=\"line\">            if (DP.find(pair&lt;int, int&gt;(currentCity, currentWeek)) != DP.end()</div><div class=\"line\">                    &amp;&amp; DP.find(pair&lt;int, int&gt;(currentCity, currentWeek))-&gt;second &gt;= currentVacation)</div><div class=\"line\">            &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                DP.insert(pair&lt;pair&lt;int, int&gt;, int&gt;(pair&lt;int, int&gt;(currentCity, currentWeek), currentVacation));</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int nextCity = 0; nextCity &lt; CITY_NUM; nextCity++) &#123;</div><div class=\"line\">                if (nextCity == currentCity || MAP[currentCity][nextCity] == 1) &#123;</div><div class=\"line\">                    visit(nextCity, currentWeek + 1, currentVacation);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it still gets TLE. WTF!</p>\n<p>So, I try to think another way. Maybe Greedy method.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int maxVacationDays(vector&lt;vector&lt;int&gt; &gt;&amp; flights, vector&lt;vector&lt;int&gt; &gt;&amp; days) &#123;</div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; DP;</div><div class=\"line\">            for (int i = 0; i &lt; (int)days.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; cityDay;</div><div class=\"line\">                for (int j = 0; j &lt; (int)days[0].size(); j++) &#123;</div><div class=\"line\">                    cityDay.push_back(-1);</div><div class=\"line\">                &#125;</div><div class=\"line\">                DP.push_back(cityDay);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int city = 0; city &lt; (int)days.size(); city++) &#123;</div><div class=\"line\">                if (city == 0 || flights[0][city] == 1) &#123;</div><div class=\"line\">                    DP[city][0] = days[city][0];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int week = 1; week &lt; (int)days[0].size(); week++) &#123;</div><div class=\"line\">                for (int currentCity = 0; currentCity &lt; (int)days.size(); currentCity++) &#123;</div><div class=\"line\">                    for (int nextCity = 0; nextCity &lt; (int)days.size(); nextCity++) &#123;</div><div class=\"line\">                        if (DP[currentCity][week - 1] != -1) &#123;</div><div class=\"line\">                            if (flights[currentCity][nextCity] || (currentCity == nextCity)) &#123;</div><div class=\"line\">                                DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int city = 0; city &lt; (int)days.size(); city++) &#123;</div><div class=\"line\">                res = max(res, DP[city][days[0].size() - 1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Then I find a DP way that using a DP[city][week] to mark the max vacation in week in city.</p>\n<p>Then using the DP[nextCity][week] = max(DP[nextCity][week], DP[currentCity][week - 1] + days[nextCity][week]);</p>\n<p>It gets AC.</p>"},{"title":"Merge Intervals","date":"2017-03-30T02:09:26.000Z","_content":"\n> Given a collection of intervals, merge all overlapping intervals.\n>\n> For example:\n>```\nGiven [1,3],[2,6],[8,10],[15,18],\nreturn [1,6],[8,10],[15,18].\n```\n\n<!--more-->\n\nThis is Leetcode No.56. I think this is a easy-thought problem. The solution is simple but the corner cases are many.\n\nSo, what I do first is to sort the intervals first (by the start idx).\n\nFor example, [2, 3], [1, 4] I will make them [1, 4], [2, 3] order.\n\nThen, I start to merge them one by one until no one can be merged.\n\n```\nusing namespace std;\n\nstruct Interval {\n    int start;\n    int end;\n    Interval() : start(0), end(0) {}\n    Interval(int s, int e) : start(s), end(e) {}\n};\n\nint cmp(const Interval a, const Interval b) {\n    if (a.start == b.start && a.end == b.end) {\n        return 0;\n    } else {\n        return a.start < b.start;\n    }\n}\n\nclass Solution {\n    public:\n        vector<Interval> merge(vector<Interval>& intervals) {\n            sort(intervals.begin(), intervals.end(), cmp);\n            vector<Interval> current;\n\n            if (intervals.size() == 0) {\n                return current;\n            }\n\n            bool canMerge = false;\n\n            for (int idx = 0; idx < (int)intervals.size() - 1; idx++) {\n                if (intervals[idx].end >= intervals[idx + 1].start) {\n                    canMerge = true;\n                    intervals[idx].start = min(intervals[idx].start, intervals[idx + 1].start);\n                    intervals[idx + 1].start = min(intervals[idx].start, intervals[idx + 1].start);\n                    intervals[idx + 1].end = max(intervals[idx].end, intervals[idx + 1].end);\n                    intervals[idx].end = max(intervals[idx].end, intervals[idx + 1].end);\n                }\n            }\n\n            current.push_back(intervals[0]);\n            for (int idx = 1; idx < (int)intervals.size(); idx++) {\n                if (intervals[idx].start == current.back().start && intervals[idx].end == current.back().end) {\n                    continue;\n                } else {\n                    current.push_back(intervals[idx]);\n                }\n            }\n\n            if (canMerge) {\n                return merge(current);\n            } else {\n                return current;\n            }\n        }\n};\n```\n\nIt gets AC. However, if I can modify the class code block, I can overide the '==' operator then use set to keep Interval unique.\n\n\n","source":"_posts/MergeIntervals.md","raw":"---\ntitle: Merge Intervals\ndate: 2017-03-30 10:09:26\ntags:\n    - Array\n    - Sort\n---\n\n> Given a collection of intervals, merge all overlapping intervals.\n>\n> For example:\n>```\nGiven [1,3],[2,6],[8,10],[15,18],\nreturn [1,6],[8,10],[15,18].\n```\n\n<!--more-->\n\nThis is Leetcode No.56. I think this is a easy-thought problem. The solution is simple but the corner cases are many.\n\nSo, what I do first is to sort the intervals first (by the start idx).\n\nFor example, [2, 3], [1, 4] I will make them [1, 4], [2, 3] order.\n\nThen, I start to merge them one by one until no one can be merged.\n\n```\nusing namespace std;\n\nstruct Interval {\n    int start;\n    int end;\n    Interval() : start(0), end(0) {}\n    Interval(int s, int e) : start(s), end(e) {}\n};\n\nint cmp(const Interval a, const Interval b) {\n    if (a.start == b.start && a.end == b.end) {\n        return 0;\n    } else {\n        return a.start < b.start;\n    }\n}\n\nclass Solution {\n    public:\n        vector<Interval> merge(vector<Interval>& intervals) {\n            sort(intervals.begin(), intervals.end(), cmp);\n            vector<Interval> current;\n\n            if (intervals.size() == 0) {\n                return current;\n            }\n\n            bool canMerge = false;\n\n            for (int idx = 0; idx < (int)intervals.size() - 1; idx++) {\n                if (intervals[idx].end >= intervals[idx + 1].start) {\n                    canMerge = true;\n                    intervals[idx].start = min(intervals[idx].start, intervals[idx + 1].start);\n                    intervals[idx + 1].start = min(intervals[idx].start, intervals[idx + 1].start);\n                    intervals[idx + 1].end = max(intervals[idx].end, intervals[idx + 1].end);\n                    intervals[idx].end = max(intervals[idx].end, intervals[idx + 1].end);\n                }\n            }\n\n            current.push_back(intervals[0]);\n            for (int idx = 1; idx < (int)intervals.size(); idx++) {\n                if (intervals[idx].start == current.back().start && intervals[idx].end == current.back().end) {\n                    continue;\n                } else {\n                    current.push_back(intervals[idx]);\n                }\n            }\n\n            if (canMerge) {\n                return merge(current);\n            } else {\n                return current;\n            }\n        }\n};\n```\n\nIt gets AC. However, if I can modify the class code block, I can overide the '==' operator then use set to keep Interval unique.\n\n\n","slug":"MergeIntervals","published":1,"updated":"2017-03-30T04:41:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyh0047x2f4jqzyrjvn","content":"<blockquote>\n<p>Given a collection of intervals, merge all overlapping intervals.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given [1,3],[2,6],[8,10],[15,18],</div><div class=\"line\">return [1,6],[8,10],[15,18].</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.56. I think this is a easy-thought problem. The solution is simple but the corner cases are many.</p>\n<p>So, what I do first is to sort the intervals first (by the start idx).</p>\n<p>For example, [2, 3], [1, 4] I will make them [1, 4], [2, 3] order.</p>\n<p>Then, I start to merge them one by one until no one can be merged.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct Interval &#123;</div><div class=\"line\">    int start;</div><div class=\"line\">    int end;</div><div class=\"line\">    Interval() : start(0), end(0) &#123;&#125;</div><div class=\"line\">    Interval(int s, int e) : start(s), end(e) &#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int cmp(const Interval a, const Interval b) &#123;</div><div class=\"line\">    if (a.start == b.start &amp;&amp; a.end == b.end) &#123;</div><div class=\"line\">        return 0;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return a.start &lt; b.start;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;Interval&gt; merge(vector&lt;Interval&gt;&amp; intervals) &#123;</div><div class=\"line\">            sort(intervals.begin(), intervals.end(), cmp);</div><div class=\"line\">            vector&lt;Interval&gt; current;</div><div class=\"line\"></div><div class=\"line\">            if (intervals.size() == 0) &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool canMerge = false;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)intervals.size() - 1; idx++) &#123;</div><div class=\"line\">                if (intervals[idx].end &gt;= intervals[idx + 1].start) &#123;</div><div class=\"line\">                    canMerge = true;</div><div class=\"line\">                    intervals[idx].start = min(intervals[idx].start, intervals[idx + 1].start);</div><div class=\"line\">                    intervals[idx + 1].start = min(intervals[idx].start, intervals[idx + 1].start);</div><div class=\"line\">                    intervals[idx + 1].end = max(intervals[idx].end, intervals[idx + 1].end);</div><div class=\"line\">                    intervals[idx].end = max(intervals[idx].end, intervals[idx + 1].end);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            current.push_back(intervals[0]);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)intervals.size(); idx++) &#123;</div><div class=\"line\">                if (intervals[idx].start == current.back().start &amp;&amp; intervals[idx].end == current.back().end) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    current.push_back(intervals[idx]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (canMerge) &#123;</div><div class=\"line\">                return merge(current);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. However, if I can modify the class code block, I can overide the ‘==’ operator then use set to keep Interval unique.</p>\n","excerpt":"<blockquote>\n<p>Given a collection of intervals, merge all overlapping intervals.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given [1,3],[2,6],[8,10],[15,18],</div><div class=\"line\">return [1,6],[8,10],[15,18].</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.56. I think this is a easy-thought problem. The solution is simple but the corner cases are many.</p>\n<p>So, what I do first is to sort the intervals first (by the start idx).</p>\n<p>For example, [2, 3], [1, 4] I will make them [1, 4], [2, 3] order.</p>\n<p>Then, I start to merge them one by one until no one can be merged.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct Interval &#123;</div><div class=\"line\">    int start;</div><div class=\"line\">    int end;</div><div class=\"line\">    Interval() : start(0), end(0) &#123;&#125;</div><div class=\"line\">    Interval(int s, int e) : start(s), end(e) &#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int cmp(const Interval a, const Interval b) &#123;</div><div class=\"line\">    if (a.start == b.start &amp;&amp; a.end == b.end) &#123;</div><div class=\"line\">        return 0;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return a.start &lt; b.start;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;Interval&gt; merge(vector&lt;Interval&gt;&amp; intervals) &#123;</div><div class=\"line\">            sort(intervals.begin(), intervals.end(), cmp);</div><div class=\"line\">            vector&lt;Interval&gt; current;</div><div class=\"line\"></div><div class=\"line\">            if (intervals.size() == 0) &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool canMerge = false;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)intervals.size() - 1; idx++) &#123;</div><div class=\"line\">                if (intervals[idx].end &gt;= intervals[idx + 1].start) &#123;</div><div class=\"line\">                    canMerge = true;</div><div class=\"line\">                    intervals[idx].start = min(intervals[idx].start, intervals[idx + 1].start);</div><div class=\"line\">                    intervals[idx + 1].start = min(intervals[idx].start, intervals[idx + 1].start);</div><div class=\"line\">                    intervals[idx + 1].end = max(intervals[idx].end, intervals[idx + 1].end);</div><div class=\"line\">                    intervals[idx].end = max(intervals[idx].end, intervals[idx + 1].end);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            current.push_back(intervals[0]);</div><div class=\"line\">            for (int idx = 1; idx &lt; (int)intervals.size(); idx++) &#123;</div><div class=\"line\">                if (intervals[idx].start == current.back().start &amp;&amp; intervals[idx].end == current.back().end) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    current.push_back(intervals[idx]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (canMerge) &#123;</div><div class=\"line\">                return merge(current);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return current;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. However, if I can modify the class code block, I can overide the ‘==’ operator then use set to keep Interval unique.</p>"},{"title":"Maximum XOR of Two Numbers in an Array","date":"2017-02-09T15:05:44.000Z","_content":"\n> Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.\n>\n> Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.\n>\n> Could you do this in O(n) runtime?\n>\n> Example:\n>\n> + Input: [3, 10, 5, 25, 2, 8]\n> + Output: 28\n> + Explanation: The maximum result is 5 ^ 25 = 28.\n\n<!--more-->\n\nThis is Leetcode 421, and it is such a Trie problem. So, this is the result:\n\n```\nclass Solution {\n    public:\n        class TreeNode {\n        public:\n            TreeNode* next[2];\n            TreeNode () {next[0] = NULL; next[1] = NULL;};\n        };\n        TreeNode* buildTree(vector<int>& nums) {\n            TreeNode* root = new TreeNode(), *cur;\n            int n = nums.size();\n            for (int i = 0; i < n; i++) {\n                int num = nums[i];\n                cur = root;\n                for (int j = 31; j >= 0; j--) {\n                    int index = ((num >> j) & 1);\n                    if (cur->next[index] ==  NULL)\n                        cur->next[index] = new TreeNode();\n                    cur = cur->next[index];\n                }\n            }\n            return root;\n        }\n\n        int helper(TreeNode* cur, int num) {\n            int res = 0;\n            for (int i = 31; i >= 0; i--) {\n                int index = ((num >> i) & 1) ? 0 : 1;\n                if (cur->next[index]) {\n                    res <<= 1;\n                    res |= 1;\n                    cur = cur->next[index];\n                } else {\n                    res <<= 1;\n                    res |= 0;\n                    cur = cur->next[index ? 0 : 1];\n                }\n            }\n            return res;\n        }\n\n        int findMaximumXOR(vector<int>& nums) {\n            int res = 0;\n            TreeNode* root = buildTree(nums);\n\n            for (auto i : nums) {\n                res = max(res, helper(root, i));\n            }\n\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/MaximumXORofTwoNumbersinanArray.md","raw":"---\ntitle: Maximum XOR of Two Numbers in an Array\ndate: 2017-02-09 23:05:44\ntags:\n    - Trie\n    - Bit Manipulation\n---\n\n> Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.\n>\n> Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.\n>\n> Could you do this in O(n) runtime?\n>\n> Example:\n>\n> + Input: [3, 10, 5, 25, 2, 8]\n> + Output: 28\n> + Explanation: The maximum result is 5 ^ 25 = 28.\n\n<!--more-->\n\nThis is Leetcode 421, and it is such a Trie problem. So, this is the result:\n\n```\nclass Solution {\n    public:\n        class TreeNode {\n        public:\n            TreeNode* next[2];\n            TreeNode () {next[0] = NULL; next[1] = NULL;};\n        };\n        TreeNode* buildTree(vector<int>& nums) {\n            TreeNode* root = new TreeNode(), *cur;\n            int n = nums.size();\n            for (int i = 0; i < n; i++) {\n                int num = nums[i];\n                cur = root;\n                for (int j = 31; j >= 0; j--) {\n                    int index = ((num >> j) & 1);\n                    if (cur->next[index] ==  NULL)\n                        cur->next[index] = new TreeNode();\n                    cur = cur->next[index];\n                }\n            }\n            return root;\n        }\n\n        int helper(TreeNode* cur, int num) {\n            int res = 0;\n            for (int i = 31; i >= 0; i--) {\n                int index = ((num >> i) & 1) ? 0 : 1;\n                if (cur->next[index]) {\n                    res <<= 1;\n                    res |= 1;\n                    cur = cur->next[index];\n                } else {\n                    res <<= 1;\n                    res |= 0;\n                    cur = cur->next[index ? 0 : 1];\n                }\n            }\n            return res;\n        }\n\n        int findMaximumXOR(vector<int>& nums) {\n            int res = 0;\n            TreeNode* root = buildTree(nums);\n\n            for (auto i : nums) {\n                res = max(res, helper(root, i));\n            }\n\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"MaximumXORofTwoNumbersinanArray","published":1,"updated":"2017-02-09T15:11:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyi0049x2f405q3a92k","content":"<blockquote>\n<p>Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai &lt; 231.</p>\n<p>Find the maximum result of ai XOR aj, where 0 ≤ i, j &lt; n.</p>\n<p>Could you do this in O(n) runtime?</p>\n<p>Example:</p>\n<ul>\n<li>Input: [3, 10, 5, 25, 2, 8]</li>\n<li>Output: 28</li>\n<li>Explanation: The maximum result is 5 ^ 25 = 28.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 421, and it is such a Trie problem. So, this is the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        class TreeNode &#123;</div><div class=\"line\">        public:</div><div class=\"line\">            TreeNode* next[2];</div><div class=\"line\">            TreeNode () &#123;next[0] = NULL; next[1] = NULL;&#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        TreeNode* buildTree(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            TreeNode* root = new TreeNode(), *cur;</div><div class=\"line\">            int n = nums.size();</div><div class=\"line\">            for (int i = 0; i &lt; n; i++) &#123;</div><div class=\"line\">                int num = nums[i];</div><div class=\"line\">                cur = root;</div><div class=\"line\">                for (int j = 31; j &gt;= 0; j--) &#123;</div><div class=\"line\">                    int index = ((num &gt;&gt; j) &amp; 1);</div><div class=\"line\">                    if (cur-&gt;next[index] ==  NULL)</div><div class=\"line\">                        cur-&gt;next[index] = new TreeNode();</div><div class=\"line\">                    cur = cur-&gt;next[index];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return root;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int helper(TreeNode* cur, int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int i = 31; i &gt;= 0; i--) &#123;</div><div class=\"line\">                int index = ((num &gt;&gt; i) &amp; 1) ? 0 : 1;</div><div class=\"line\">                if (cur-&gt;next[index]) &#123;</div><div class=\"line\">                    res &lt;&lt;= 1;</div><div class=\"line\">                    res |= 1;</div><div class=\"line\">                    cur = cur-&gt;next[index];</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res &lt;&lt;= 1;</div><div class=\"line\">                    res |= 0;</div><div class=\"line\">                    cur = cur-&gt;next[index ? 0 : 1];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int findMaximumXOR(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            TreeNode* root = buildTree(nums);</div><div class=\"line\"></div><div class=\"line\">            for (auto i : nums) &#123;</div><div class=\"line\">                res = max(res, helper(root, i));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai &lt; 231.</p>\n<p>Find the maximum result of ai XOR aj, where 0 ≤ i, j &lt; n.</p>\n<p>Could you do this in O(n) runtime?</p>\n<p>Example:</p>\n<ul>\n<li>Input: [3, 10, 5, 25, 2, 8]</li>\n<li>Output: 28</li>\n<li>Explanation: The maximum result is 5 ^ 25 = 28.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 421, and it is such a Trie problem. So, this is the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        class TreeNode &#123;</div><div class=\"line\">        public:</div><div class=\"line\">            TreeNode* next[2];</div><div class=\"line\">            TreeNode () &#123;next[0] = NULL; next[1] = NULL;&#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        TreeNode* buildTree(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            TreeNode* root = new TreeNode(), *cur;</div><div class=\"line\">            int n = nums.size();</div><div class=\"line\">            for (int i = 0; i &lt; n; i++) &#123;</div><div class=\"line\">                int num = nums[i];</div><div class=\"line\">                cur = root;</div><div class=\"line\">                for (int j = 31; j &gt;= 0; j--) &#123;</div><div class=\"line\">                    int index = ((num &gt;&gt; j) &amp; 1);</div><div class=\"line\">                    if (cur-&gt;next[index] ==  NULL)</div><div class=\"line\">                        cur-&gt;next[index] = new TreeNode();</div><div class=\"line\">                    cur = cur-&gt;next[index];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return root;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int helper(TreeNode* cur, int num) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int i = 31; i &gt;= 0; i--) &#123;</div><div class=\"line\">                int index = ((num &gt;&gt; i) &amp; 1) ? 0 : 1;</div><div class=\"line\">                if (cur-&gt;next[index]) &#123;</div><div class=\"line\">                    res &lt;&lt;= 1;</div><div class=\"line\">                    res |= 1;</div><div class=\"line\">                    cur = cur-&gt;next[index];</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res &lt;&lt;= 1;</div><div class=\"line\">                    res |= 0;</div><div class=\"line\">                    cur = cur-&gt;next[index ? 0 : 1];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int findMaximumXOR(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            TreeNode* root = buildTree(nums);</div><div class=\"line\"></div><div class=\"line\">            for (auto i : nums) &#123;</div><div class=\"line\">                res = max(res, helper(root, i));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Minesweeper","date":"2017-02-28T01:45:22.000Z","_content":"\n> You are given a 2D char matrix representing the game board. 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and finally 'X' represents a revealed mine.\n>\n> Now given the next click position (row and column indices) among all the unrevealed squares ('M' or 'E'), return the board after revealing this position according to the following rules:\n>\n>  + If a mine ('M') is revealed, then the game is over - change it to 'X'.\n>  + If an empty square ('E') with no adjacent mines is revealed, then change it to revealed blank ('B') and all of its adjacent unrevealed squares should be revealed recursively.\n>  + If an empty square ('E') with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.\n>  + Return the board when no more squares will be revealed.\n>\n<!--more-->\n>\n> Example 1:\n>\n> Input:\n>```\n[\n    ['E', 'E', 'E', 'E', 'E'],\n    ['E', 'E', 'M', 'E', 'E'],\n    ['E', 'E', 'E', 'E', 'E'],\n    ['E', 'E', 'E', 'E', 'E']\n]\n```\n> Click : [3,0]\n>\n> Output:\n>```\n[\n    ['B', '1', 'E', '1', 'B'],\n    ['B', '1', 'M', '1', 'B'],\n    ['B', '1', '1', '1', 'B'],\n    ['B', 'B', 'B', 'B', 'B']\n]\n```\n> Example 2:\n>\n> Input:\n>```\n[\n    ['B', '1', 'E', '1', 'B'],\n    ['B', '1', 'M', '1', 'B'],\n    ['B', '1', '1', '1', 'B'],\n    ['B', 'B', 'B', 'B', 'B']\n]\n```\n> Click : [1,2]\n>\n> Output:\n>```\n[\n    ['B', '1', 'E', '1', 'B'],\n    ['B', '1', 'X', '1', 'B'],\n    ['B', '1', '1', '1', 'B'],\n    ['B', 'B', 'B', 'B', 'B']\n]\n```\n> Note:\n>\n>  + The range of the input matrix's height and width is [1,50].\n>  + The click position will only be an unrevealed square ('M' or 'E'), which also means the input board contains at least one clickable square.\n>  + The input board won't be a stage when game is over (some mines have been revealed).\n>  + For simplicity, not mentioned rules should be ignored in this problem. For example, you don't need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.\n\nThis is Leetcode No.529, and it is really a fun problem. Because you should find the way to discover the mines.\n\nThe most important thing is to find the order to do the steps.\n\n1. count the mines around the cell.\n2. if the mines is zero, you should check the cells around the cell.\n3. then, do 1 until the mines is not zero.\n\nSo, the solution is as following:\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<char>> updateBoard(vector<vector<char> >& board, vector<int>& click) {\n        int idx = click[0];\n        int idy = click[1];\n\n        markBoard(idx, idy, board);\n\n        return board;\n    }\n\n    void markBoard(int x, int y, vector<vector<char> > &board) {\n        if (x < 0 || x >= (int)board.size() || y < 0 || y >= (int)board[0].size()) {\n            return;\n        }\n        if (board[x][y] != 'E' && board[x][y] != 'M') {\n            return;\n        }\n        int num = checkAround(x, y, board);\n        if (num == 0) {\n            board[x][y] = 'B';\n            markBoard(x - 1, y - 1, board);\n            markBoard(x - 1, y, board);\n            markBoard(x - 1, y + 1, board);\n            markBoard(x, y - 1, board);\n            markBoard(x, y + 1, board);\n            markBoard(x + 1, y - 1, board);\n            markBoard(x + 1, y, board);\n            markBoard(x + 1, y + 1, board);\n        } else if (num == -1) {\n            board[x][y] = 'X';\n            return;\n        } else {\n            board[x][y] = '0' + num;\n        }\n    }\n\n    int checkAround(int x, int y, vector<vector<char> > board) {\n        if (board[x][y] == 'M') {\n            return -1;\n        }\n        int num = 0;\n        for (int i = -1; i <= 1; i++) {\n            int idx = x + i;\n            for (int j = -1; j <= 1; j++) {\n                int idy = y + j;\n\n                if (idx >= 0 && idx < (int)board.size() && idy >= 0 && idy < (int)board[0].size()) {\n                    if (board[idx][idy] == 'M') {\n                        num++;\n                    }\n                }\n            }\n        }\n        return num;\n    }\n};\n```\n\nIt gets AC.\n","source":"_posts/Minesweeper.md","raw":"---\ntitle: Minesweeper\ndate: 2017-02-28 09:45:22\ntags:\n    - Depth-first Search\n    - Breadth-first Search\n---\n\n> You are given a 2D char matrix representing the game board. 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and finally 'X' represents a revealed mine.\n>\n> Now given the next click position (row and column indices) among all the unrevealed squares ('M' or 'E'), return the board after revealing this position according to the following rules:\n>\n>  + If a mine ('M') is revealed, then the game is over - change it to 'X'.\n>  + If an empty square ('E') with no adjacent mines is revealed, then change it to revealed blank ('B') and all of its adjacent unrevealed squares should be revealed recursively.\n>  + If an empty square ('E') with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.\n>  + Return the board when no more squares will be revealed.\n>\n<!--more-->\n>\n> Example 1:\n>\n> Input:\n>```\n[\n    ['E', 'E', 'E', 'E', 'E'],\n    ['E', 'E', 'M', 'E', 'E'],\n    ['E', 'E', 'E', 'E', 'E'],\n    ['E', 'E', 'E', 'E', 'E']\n]\n```\n> Click : [3,0]\n>\n> Output:\n>```\n[\n    ['B', '1', 'E', '1', 'B'],\n    ['B', '1', 'M', '1', 'B'],\n    ['B', '1', '1', '1', 'B'],\n    ['B', 'B', 'B', 'B', 'B']\n]\n```\n> Example 2:\n>\n> Input:\n>```\n[\n    ['B', '1', 'E', '1', 'B'],\n    ['B', '1', 'M', '1', 'B'],\n    ['B', '1', '1', '1', 'B'],\n    ['B', 'B', 'B', 'B', 'B']\n]\n```\n> Click : [1,2]\n>\n> Output:\n>```\n[\n    ['B', '1', 'E', '1', 'B'],\n    ['B', '1', 'X', '1', 'B'],\n    ['B', '1', '1', '1', 'B'],\n    ['B', 'B', 'B', 'B', 'B']\n]\n```\n> Note:\n>\n>  + The range of the input matrix's height and width is [1,50].\n>  + The click position will only be an unrevealed square ('M' or 'E'), which also means the input board contains at least one clickable square.\n>  + The input board won't be a stage when game is over (some mines have been revealed).\n>  + For simplicity, not mentioned rules should be ignored in this problem. For example, you don't need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.\n\nThis is Leetcode No.529, and it is really a fun problem. Because you should find the way to discover the mines.\n\nThe most important thing is to find the order to do the steps.\n\n1. count the mines around the cell.\n2. if the mines is zero, you should check the cells around the cell.\n3. then, do 1 until the mines is not zero.\n\nSo, the solution is as following:\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<char>> updateBoard(vector<vector<char> >& board, vector<int>& click) {\n        int idx = click[0];\n        int idy = click[1];\n\n        markBoard(idx, idy, board);\n\n        return board;\n    }\n\n    void markBoard(int x, int y, vector<vector<char> > &board) {\n        if (x < 0 || x >= (int)board.size() || y < 0 || y >= (int)board[0].size()) {\n            return;\n        }\n        if (board[x][y] != 'E' && board[x][y] != 'M') {\n            return;\n        }\n        int num = checkAround(x, y, board);\n        if (num == 0) {\n            board[x][y] = 'B';\n            markBoard(x - 1, y - 1, board);\n            markBoard(x - 1, y, board);\n            markBoard(x - 1, y + 1, board);\n            markBoard(x, y - 1, board);\n            markBoard(x, y + 1, board);\n            markBoard(x + 1, y - 1, board);\n            markBoard(x + 1, y, board);\n            markBoard(x + 1, y + 1, board);\n        } else if (num == -1) {\n            board[x][y] = 'X';\n            return;\n        } else {\n            board[x][y] = '0' + num;\n        }\n    }\n\n    int checkAround(int x, int y, vector<vector<char> > board) {\n        if (board[x][y] == 'M') {\n            return -1;\n        }\n        int num = 0;\n        for (int i = -1; i <= 1; i++) {\n            int idx = x + i;\n            for (int j = -1; j <= 1; j++) {\n                int idy = y + j;\n\n                if (idx >= 0 && idx < (int)board.size() && idy >= 0 && idy < (int)board[0].size()) {\n                    if (board[idx][idy] == 'M') {\n                        num++;\n                    }\n                }\n            }\n        }\n        return num;\n    }\n};\n```\n\nIt gets AC.\n","slug":"Minesweeper","published":1,"updated":"2017-02-28T02:24:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyj004cx2f4favc1oom","content":"<blockquote>\n<p>You are given a 2D char matrix representing the game board. ‘M’ represents an unrevealed mine, ‘E’ represents an unrevealed empty square, ‘B’ represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit (‘1’ to ‘8’) represents how many mines are adjacent to this revealed square, and finally ‘X’ represents a revealed mine.</p>\n<p>Now given the next click position (row and column indices) among all the unrevealed squares (‘M’ or ‘E’), return the board after revealing this position according to the following rules:</p>\n<ul>\n<li>If a mine (‘M’) is revealed, then the game is over - change it to ‘X’.</li>\n<li>If an empty square (‘E’) with no adjacent mines is revealed, then change it to revealed blank (‘B’) and all of its adjacent unrevealed squares should be revealed recursively.</li>\n<li>If an empty square (‘E’) with at least one adjacent mine is revealed, then change it to a digit (‘1’ to ‘8’) representing the number of adjacent mines.</li>\n<li>Return the board when no more squares will be revealed.</li>\n</ul>\n<a id=\"more\"></a>\n<p>Example 1:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;],</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;M&apos;, &apos;E&apos;, &apos;E&apos;],</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;],</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Click : [3,0]</p>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;E&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;M&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Example 2:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;E&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;M&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Click : [1,2]</p>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;E&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;X&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The range of the input matrix’s height and width is [1,50].</li>\n<li>The click position will only be an unrevealed square (‘M’ or ‘E’), which also means the input board contains at least one clickable square.</li>\n<li>The input board won’t be a stage when game is over (some mines have been revealed).</li>\n<li>For simplicity, not mentioned rules should be ignored in this problem. For example, you don’t need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.</li>\n</ul>\n</blockquote>\n<p>This is Leetcode No.529, and it is really a fun problem. Because you should find the way to discover the mines.</p>\n<p>The most important thing is to find the order to do the steps.</p>\n<ol>\n<li>count the mines around the cell.</li>\n<li>if the mines is zero, you should check the cells around the cell.</li>\n<li>then, do 1 until the mines is not zero.</li>\n</ol>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    vector&lt;vector&lt;char&gt;&gt; updateBoard(vector&lt;vector&lt;char&gt; &gt;&amp; board, vector&lt;int&gt;&amp; click) &#123;</div><div class=\"line\">        int idx = click[0];</div><div class=\"line\">        int idy = click[1];</div><div class=\"line\"></div><div class=\"line\">        markBoard(idx, idy, board);</div><div class=\"line\"></div><div class=\"line\">        return board;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void markBoard(int x, int y, vector&lt;vector&lt;char&gt; &gt; &amp;board) &#123;</div><div class=\"line\">        if (x &lt; 0 || x &gt;= (int)board.size() || y &lt; 0 || y &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (board[x][y] != &apos;E&apos; &amp;&amp; board[x][y] != &apos;M&apos;) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int num = checkAround(x, y, board);</div><div class=\"line\">        if (num == 0) &#123;</div><div class=\"line\">            board[x][y] = &apos;B&apos;;</div><div class=\"line\">            markBoard(x - 1, y - 1, board);</div><div class=\"line\">            markBoard(x - 1, y, board);</div><div class=\"line\">            markBoard(x - 1, y + 1, board);</div><div class=\"line\">            markBoard(x, y - 1, board);</div><div class=\"line\">            markBoard(x, y + 1, board);</div><div class=\"line\">            markBoard(x + 1, y - 1, board);</div><div class=\"line\">            markBoard(x + 1, y, board);</div><div class=\"line\">            markBoard(x + 1, y + 1, board);</div><div class=\"line\">        &#125; else if (num == -1) &#123;</div><div class=\"line\">            board[x][y] = &apos;X&apos;;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            board[x][y] = &apos;0&apos; + num;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int checkAround(int x, int y, vector&lt;vector&lt;char&gt; &gt; board) &#123;</div><div class=\"line\">        if (board[x][y] == &apos;M&apos;) &#123;</div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int num = 0;</div><div class=\"line\">        for (int i = -1; i &lt;= 1; i++) &#123;</div><div class=\"line\">            int idx = x + i;</div><div class=\"line\">            for (int j = -1; j &lt;= 1; j++) &#123;</div><div class=\"line\">                int idy = y + j;</div><div class=\"line\"></div><div class=\"line\">                if (idx &gt;= 0 &amp;&amp; idx &lt; (int)board.size() &amp;&amp; idy &gt;= 0 &amp;&amp; idy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;M&apos;) &#123;</div><div class=\"line\">                        num++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>You are given a 2D char matrix representing the game board. ‘M’ represents an unrevealed mine, ‘E’ represents an unrevealed empty square, ‘B’ represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit (‘1’ to ‘8’) represents how many mines are adjacent to this revealed square, and finally ‘X’ represents a revealed mine.</p>\n<p>Now given the next click position (row and column indices) among all the unrevealed squares (‘M’ or ‘E’), return the board after revealing this position according to the following rules:</p>\n<ul>\n<li>If a mine (‘M’) is revealed, then the game is over - change it to ‘X’.</li>\n<li>If an empty square (‘E’) with no adjacent mines is revealed, then change it to revealed blank (‘B’) and all of its adjacent unrevealed squares should be revealed recursively.</li>\n<li>If an empty square (‘E’) with at least one adjacent mine is revealed, then change it to a digit (‘1’ to ‘8’) representing the number of adjacent mines.</li>\n<li>Return the board when no more squares will be revealed.</li>\n</ul>","more":"<p>Example 1:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;],</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;M&apos;, &apos;E&apos;, &apos;E&apos;],</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;],</div><div class=\"line\">    [&apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;, &apos;E&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Click : [3,0]</p>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;E&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;M&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Example 2:</p>\n<p>Input:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;E&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;M&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Click : [1,2]</p>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;E&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;X&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;1&apos;, &apos;1&apos;, &apos;1&apos;, &apos;B&apos;],</div><div class=\"line\">    [&apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;, &apos;B&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The range of the input matrix’s height and width is [1,50].</li>\n<li>The click position will only be an unrevealed square (‘M’ or ‘E’), which also means the input board contains at least one clickable square.</li>\n<li>The input board won’t be a stage when game is over (some mines have been revealed).</li>\n<li>For simplicity, not mentioned rules should be ignored in this problem. For example, you don’t need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.</li>\n</ul>\n</blockquote>\n<p>This is Leetcode No.529, and it is really a fun problem. Because you should find the way to discover the mines.</p>\n<p>The most important thing is to find the order to do the steps.</p>\n<ol>\n<li>count the mines around the cell.</li>\n<li>if the mines is zero, you should check the cells around the cell.</li>\n<li>then, do 1 until the mines is not zero.</li>\n</ol>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    vector&lt;vector&lt;char&gt;&gt; updateBoard(vector&lt;vector&lt;char&gt; &gt;&amp; board, vector&lt;int&gt;&amp; click) &#123;</div><div class=\"line\">        int idx = click[0];</div><div class=\"line\">        int idy = click[1];</div><div class=\"line\"></div><div class=\"line\">        markBoard(idx, idy, board);</div><div class=\"line\"></div><div class=\"line\">        return board;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void markBoard(int x, int y, vector&lt;vector&lt;char&gt; &gt; &amp;board) &#123;</div><div class=\"line\">        if (x &lt; 0 || x &gt;= (int)board.size() || y &lt; 0 || y &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (board[x][y] != &apos;E&apos; &amp;&amp; board[x][y] != &apos;M&apos;) &#123;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int num = checkAround(x, y, board);</div><div class=\"line\">        if (num == 0) &#123;</div><div class=\"line\">            board[x][y] = &apos;B&apos;;</div><div class=\"line\">            markBoard(x - 1, y - 1, board);</div><div class=\"line\">            markBoard(x - 1, y, board);</div><div class=\"line\">            markBoard(x - 1, y + 1, board);</div><div class=\"line\">            markBoard(x, y - 1, board);</div><div class=\"line\">            markBoard(x, y + 1, board);</div><div class=\"line\">            markBoard(x + 1, y - 1, board);</div><div class=\"line\">            markBoard(x + 1, y, board);</div><div class=\"line\">            markBoard(x + 1, y + 1, board);</div><div class=\"line\">        &#125; else if (num == -1) &#123;</div><div class=\"line\">            board[x][y] = &apos;X&apos;;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            board[x][y] = &apos;0&apos; + num;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int checkAround(int x, int y, vector&lt;vector&lt;char&gt; &gt; board) &#123;</div><div class=\"line\">        if (board[x][y] == &apos;M&apos;) &#123;</div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int num = 0;</div><div class=\"line\">        for (int i = -1; i &lt;= 1; i++) &#123;</div><div class=\"line\">            int idx = x + i;</div><div class=\"line\">            for (int j = -1; j &lt;= 1; j++) &#123;</div><div class=\"line\">                int idy = y + j;</div><div class=\"line\"></div><div class=\"line\">                if (idx &gt;= 0 &amp;&amp; idx &lt; (int)board.size() &amp;&amp; idy &gt;= 0 &amp;&amp; idy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;M&apos;) &#123;</div><div class=\"line\">                        num++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return num;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Minimum Absolute Difference in BST","date":"2017-03-03T02:00:29.000Z","_content":"\n> Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.\n>\n> Example:\n>\n>```\nInput:\n1\n \\\n  3\n /\n2\nOutput:\n1\n```\n> Explanation:\n> The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\n>\n> Note: There are at least two nodes in this BST.\n\n<!--more-->\n\nThis is Leetcode No.530. At first I thought this problem wants us to find out the minimum absolute difference between in the neighbour nodes.\n\nSo the wrong result is as following:\n\n```\nclass Solution {\n    public:\n        int res;\n\n        int getMinimumDifference(TreeNode* root) {\n            res = INT_MAX;\n\n            _visit(root->left, root->val);\n            _visit(root->right, root->val);\n\n            return res;\n        }\n\n        void _visit(TreeNode *node, int pre) {\n            if (node == NULL) {\n                return;\n            }\n            if (abs(node->val - pre) < res) {\n                res = abs(node->val - pre);\n            }\n            _visit(node->left, node->val);\n            _visit(node->right, node->val);\n        }\n};\n```\n\nSo, I found the target is to find the minimum result between any node. So the result is:\n\n```\nclass Solution {\n    public:\n        int res;\n        vector<int> nodes;\n\n        int getMinimumDifference(TreeNode* root) {\n            res = INT_MAX;\n            nodes.clear();\n\n            _visit(root);\n\n            sort(nodes.begin(), nodes.end());\n\n            for (int i = 0; i < (int)nodes.size() - 1; i++) {\n                res = min(res, abs(nodes[i] - nodes[i + 1]));\n            }\n\n            return res;\n        }\n\n        void _visit(TreeNode *node) {\n            if (node == NULL) {\n                return;\n            }\n            nodes.push_back(node->val);\n            _visit(node->left);\n            _visit(node->right);\n        }\n};\n```\n\nHere I use a vector to store every node. Its time complex is O(nlogn), it's fast but I can be better. to use the feature of BST. to find the array in order.\n\nBut it already gets AC.\n","source":"_posts/MinimumAbsoluteDifferenceinBST.md","raw":"---\ntitle: Minimum Absolute Difference in BST\ndate: 2017-03-03 10:00:29\ntags:\n    - Binary Search Tree\n---\n\n> Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.\n>\n> Example:\n>\n>```\nInput:\n1\n \\\n  3\n /\n2\nOutput:\n1\n```\n> Explanation:\n> The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\n>\n> Note: There are at least two nodes in this BST.\n\n<!--more-->\n\nThis is Leetcode No.530. At first I thought this problem wants us to find out the minimum absolute difference between in the neighbour nodes.\n\nSo the wrong result is as following:\n\n```\nclass Solution {\n    public:\n        int res;\n\n        int getMinimumDifference(TreeNode* root) {\n            res = INT_MAX;\n\n            _visit(root->left, root->val);\n            _visit(root->right, root->val);\n\n            return res;\n        }\n\n        void _visit(TreeNode *node, int pre) {\n            if (node == NULL) {\n                return;\n            }\n            if (abs(node->val - pre) < res) {\n                res = abs(node->val - pre);\n            }\n            _visit(node->left, node->val);\n            _visit(node->right, node->val);\n        }\n};\n```\n\nSo, I found the target is to find the minimum result between any node. So the result is:\n\n```\nclass Solution {\n    public:\n        int res;\n        vector<int> nodes;\n\n        int getMinimumDifference(TreeNode* root) {\n            res = INT_MAX;\n            nodes.clear();\n\n            _visit(root);\n\n            sort(nodes.begin(), nodes.end());\n\n            for (int i = 0; i < (int)nodes.size() - 1; i++) {\n                res = min(res, abs(nodes[i] - nodes[i + 1]));\n            }\n\n            return res;\n        }\n\n        void _visit(TreeNode *node) {\n            if (node == NULL) {\n                return;\n            }\n            nodes.push_back(node->val);\n            _visit(node->left);\n            _visit(node->right);\n        }\n};\n```\n\nHere I use a vector to store every node. Its time complex is O(nlogn), it's fast but I can be better. to use the feature of BST. to find the array in order.\n\nBut it already gets AC.\n","slug":"MinimumAbsoluteDifferenceinBST","published":1,"updated":"2017-03-03T03:02:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyk004ex2f4y7kjvtlj","content":"<blockquote>\n<p>Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">1</div><div class=\"line\"> \\</div><div class=\"line\">  3</div><div class=\"line\"> /</div><div class=\"line\">2</div><div class=\"line\">Output:</div><div class=\"line\">1</div></pre></td></tr></table></figure>\n<p>Explanation:<br>The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).</p>\n<p>Note: There are at least two nodes in this BST.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.530. At first I thought this problem wants us to find out the minimum absolute difference between in the neighbour nodes.</p>\n<p>So the wrong result is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\"></div><div class=\"line\">        int getMinimumDifference(TreeNode* root) &#123;</div><div class=\"line\">            res = INT_MAX;</div><div class=\"line\"></div><div class=\"line\">            _visit(root-&gt;left, root-&gt;val);</div><div class=\"line\">            _visit(root-&gt;right, root-&gt;val);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(TreeNode *node, int pre) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (abs(node-&gt;val - pre) &lt; res) &#123;</div><div class=\"line\">                res = abs(node-&gt;val - pre);</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(node-&gt;left, node-&gt;val);</div><div class=\"line\">            _visit(node-&gt;right, node-&gt;val);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>So, I found the target is to find the minimum result between any node. So the result is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        vector&lt;int&gt; nodes;</div><div class=\"line\"></div><div class=\"line\">        int getMinimumDifference(TreeNode* root) &#123;</div><div class=\"line\">            res = INT_MAX;</div><div class=\"line\">            nodes.clear();</div><div class=\"line\"></div><div class=\"line\">            _visit(root);</div><div class=\"line\"></div><div class=\"line\">            sort(nodes.begin(), nodes.end());</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nodes.size() - 1; i++) &#123;</div><div class=\"line\">                res = min(res, abs(nodes[i] - nodes[i + 1]));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(TreeNode *node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            nodes.push_back(node-&gt;val);</div><div class=\"line\">            _visit(node-&gt;left);</div><div class=\"line\">            _visit(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Here I use a vector to store every node. Its time complex is O(nlogn), it’s fast but I can be better. to use the feature of BST. to find the array in order.</p>\n<p>But it already gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:</div><div class=\"line\">1</div><div class=\"line\"> \\</div><div class=\"line\">  3</div><div class=\"line\"> /</div><div class=\"line\">2</div><div class=\"line\">Output:</div><div class=\"line\">1</div></pre></td></tr></table></figure>\n<p>Explanation:<br>The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).</p>\n<p>Note: There are at least two nodes in this BST.</p>\n</blockquote>","more":"<p>This is Leetcode No.530. At first I thought this problem wants us to find out the minimum absolute difference between in the neighbour nodes.</p>\n<p>So the wrong result is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\"></div><div class=\"line\">        int getMinimumDifference(TreeNode* root) &#123;</div><div class=\"line\">            res = INT_MAX;</div><div class=\"line\"></div><div class=\"line\">            _visit(root-&gt;left, root-&gt;val);</div><div class=\"line\">            _visit(root-&gt;right, root-&gt;val);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(TreeNode *node, int pre) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (abs(node-&gt;val - pre) &lt; res) &#123;</div><div class=\"line\">                res = abs(node-&gt;val - pre);</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(node-&gt;left, node-&gt;val);</div><div class=\"line\">            _visit(node-&gt;right, node-&gt;val);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>So, I found the target is to find the minimum result between any node. So the result is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        vector&lt;int&gt; nodes;</div><div class=\"line\"></div><div class=\"line\">        int getMinimumDifference(TreeNode* root) &#123;</div><div class=\"line\">            res = INT_MAX;</div><div class=\"line\">            nodes.clear();</div><div class=\"line\"></div><div class=\"line\">            _visit(root);</div><div class=\"line\"></div><div class=\"line\">            sort(nodes.begin(), nodes.end());</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nodes.size() - 1; i++) &#123;</div><div class=\"line\">                res = min(res, abs(nodes[i] - nodes[i + 1]));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(TreeNode *node) &#123;</div><div class=\"line\">            if (node == NULL) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            nodes.push_back(node-&gt;val);</div><div class=\"line\">            _visit(node-&gt;left);</div><div class=\"line\">            _visit(node-&gt;right);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Here I use a vector to store every node. Its time complex is O(nlogn), it’s fast but I can be better. to use the feature of BST. to find the array in order.</p>\n<p>But it already gets AC.</p>"},{"title":"Minimum Moves to Equal Array Elements II","date":"2017-01-26T14:41:39.000Z","_content":"\n> Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.\n>\n> You may assume the array's length is at most 10,000.\n>\n> Example:\n> + Input: [1,2,3]\n>\n> + Output: 2\n>\n> + Explanation: Only two moves are needed (remember each move increments or decrements one element):\n>  > [1,2,3]  =>  [2,2,3]  =>  [2,2,2]\n\n<!--more-->\n\nThis is Leetcode 462, it is a fun problem. You can quick find a solution by using hashmap to store the number and its appearance times and calculate the result one by one.\n\nBut, it's actually a Math problem, you can find the min result always is the mid one.\n\nSo, here comes a solution:\n\n```\nclass Solution {\n    public:\n        int minMoves2(vector<int>& nums) {\n            int res = 0;\n            sort(nums.begin(), nums.end());\n            int standard = nums[nums.size() / 2];\n            for (int i = 0; i < (int)nums.size(); i++) {\n                res = res + abs(nums[i] - standard);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/MinimumMovestoEqualArrayElementsII.md","raw":"---\ntitle: Minimum Moves to Equal Array Elements II\ndate: 2017-01-26 22:41:39\ntags:\n    - Math\n---\n\n> Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.\n>\n> You may assume the array's length is at most 10,000.\n>\n> Example:\n> + Input: [1,2,3]\n>\n> + Output: 2\n>\n> + Explanation: Only two moves are needed (remember each move increments or decrements one element):\n>  > [1,2,3]  =>  [2,2,3]  =>  [2,2,2]\n\n<!--more-->\n\nThis is Leetcode 462, it is a fun problem. You can quick find a solution by using hashmap to store the number and its appearance times and calculate the result one by one.\n\nBut, it's actually a Math problem, you can find the min result always is the mid one.\n\nSo, here comes a solution:\n\n```\nclass Solution {\n    public:\n        int minMoves2(vector<int>& nums) {\n            int res = 0;\n            sort(nums.begin(), nums.end());\n            int standard = nums[nums.size() / 2];\n            for (int i = 0; i < (int)nums.size(); i++) {\n                res = res + abs(nums[i] - standard);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"MinimumMovestoEqualArrayElementsII","published":1,"updated":"2017-01-26T14:52:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyl004hx2f440npjmq3","content":"<blockquote>\n<p>Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.</p>\n<p>You may assume the array’s length is at most 10,000.</p>\n<p>Example:</p>\n<ul>\n<li><p>Input: [1,2,3]</p>\n</li>\n<li><p>Output: 2</p>\n</li>\n<li><p>Explanation: Only two moves are needed (remember each move increments or decrements one element):</p>\n<blockquote>\n<p>[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 462, it is a fun problem. You can quick find a solution by using hashmap to store the number and its appearance times and calculate the result one by one.</p>\n<p>But, it’s actually a Math problem, you can find the min result always is the mid one.</p>\n<p>So, here comes a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int minMoves2(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            int standard = nums[nums.size() / 2];</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = res + abs(nums[i] - standard);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.</p>\n<p>You may assume the array’s length is at most 10,000.</p>\n<p>Example:</p>\n<ul>\n<li><p>Input: [1,2,3]</p>\n</li>\n<li><p>Output: 2</p>\n</li>\n<li><p>Explanation: Only two moves are needed (remember each move increments or decrements one element):</p>\n<blockquote>\n<p>[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 462, it is a fun problem. You can quick find a solution by using hashmap to store the number and its appearance times and calculate the result one by one.</p>\n<p>But, it’s actually a Math problem, you can find the min result always is the mid one.</p>\n<p>So, here comes a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int minMoves2(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            int standard = nums[nums.size() / 2];</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = res + abs(nums[i] - standard);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Minimum Time Difference","date":"2017-03-14T07:50:10.000Z","_content":"\n\n> Given a list of 24-hour clock time points in \"Hour:Minutes\" format, find the minimum minutes difference between any two time points in the list.\n>\n> Example 1:\n>```\nInput: [\"23:59\",\"00:00\"]\nOutput: 1\n```\n> Note:\n>\n> + The number of time points in the given list is at least 2 and won't exceed 20000.\n> + The input time is legal and ranges from 00:00 to 23:59.\n\n<!--more-->\n\nThis is Leetcode No.539. It is an esay problem, the most thing I think is that we should pay attention to the time convertion.\n\nI make the timestamp into minutes. So that I can find the order between them.\n\nThen, I sort the array and try to find the minimum value of the distance.\n\nI can make the solution more quick by just counting the neighbour and the head and tail value instead of count every pair.\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMinDifference(vector<string>& timePoints) {\n        vector<int> mins;\n\n        int res = INT_MAX;\n\n        for (int i = 0; i < (int)timePoints.size(); i++) {\n            int hour = atoi(timePoints[i].substr(0, 2).c_str()) * 60;\n            int minutes = atoi(timePoints[i].substr(3, 5).c_str()) + hour;\n            mins.push_back(minutes);\n        }\n\n        sort(mins.begin(), mins.end());\n\n        for (int idx = 0; idx < (int)mins.size(); idx++) {\n            for (int idy = idx + 1; idy < (int)mins.size(); idy++) {\n                res = min(res, mins[idy] - mins[idx]);\n                res = min(res, 60 * 24 - (mins[idy] - mins[idx]));\n            }\n        }\n\n        return res;\n    }\n};\n```\n\nBut, I AC the problem, the improvement? who cares.\n","source":"_posts/MinimumTimeDifference.md","raw":"---\ntitle: Minimum Time Difference\ndate: 2017-03-14 15:50:10\ntags:\n    - String\n---\n\n\n> Given a list of 24-hour clock time points in \"Hour:Minutes\" format, find the minimum minutes difference between any two time points in the list.\n>\n> Example 1:\n>```\nInput: [\"23:59\",\"00:00\"]\nOutput: 1\n```\n> Note:\n>\n> + The number of time points in the given list is at least 2 and won't exceed 20000.\n> + The input time is legal and ranges from 00:00 to 23:59.\n\n<!--more-->\n\nThis is Leetcode No.539. It is an esay problem, the most thing I think is that we should pay attention to the time convertion.\n\nI make the timestamp into minutes. So that I can find the order between them.\n\nThen, I sort the array and try to find the minimum value of the distance.\n\nI can make the solution more quick by just counting the neighbour and the head and tail value instead of count every pair.\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMinDifference(vector<string>& timePoints) {\n        vector<int> mins;\n\n        int res = INT_MAX;\n\n        for (int i = 0; i < (int)timePoints.size(); i++) {\n            int hour = atoi(timePoints[i].substr(0, 2).c_str()) * 60;\n            int minutes = atoi(timePoints[i].substr(3, 5).c_str()) + hour;\n            mins.push_back(minutes);\n        }\n\n        sort(mins.begin(), mins.end());\n\n        for (int idx = 0; idx < (int)mins.size(); idx++) {\n            for (int idy = idx + 1; idy < (int)mins.size(); idy++) {\n                res = min(res, mins[idy] - mins[idx]);\n                res = min(res, 60 * 24 - (mins[idy] - mins[idx]));\n            }\n        }\n\n        return res;\n    }\n};\n```\n\nBut, I AC the problem, the improvement? who cares.\n","slug":"MinimumTimeDifference","published":1,"updated":"2017-03-14T08:07:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpym004jx2f4s66e6hak","content":"<blockquote>\n<p>Given a list of 24-hour clock time points in “Hour:Minutes” format, find the minimum minutes difference between any two time points in the list.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [&quot;23:59&quot;,&quot;00:00&quot;]</div><div class=\"line\">Output: 1</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The number of time points in the given list is at least 2 and won’t exceed 20000.</li>\n<li>The input time is legal and ranges from 00:00 to 23:59.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.539. It is an esay problem, the most thing I think is that we should pay attention to the time convertion.</p>\n<p>I make the timestamp into minutes. So that I can find the order between them.</p>\n<p>Then, I sort the array and try to find the minimum value of the distance.</p>\n<p>I can make the solution more quick by just counting the neighbour and the head and tail value instead of count every pair.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int findMinDifference(vector&lt;string&gt;&amp; timePoints) &#123;</div><div class=\"line\">        vector&lt;int&gt; mins;</div><div class=\"line\"></div><div class=\"line\">        int res = INT_MAX;</div><div class=\"line\"></div><div class=\"line\">        for (int i = 0; i &lt; (int)timePoints.size(); i++) &#123;</div><div class=\"line\">            int hour = atoi(timePoints[i].substr(0, 2).c_str()) * 60;</div><div class=\"line\">            int minutes = atoi(timePoints[i].substr(3, 5).c_str()) + hour;</div><div class=\"line\">            mins.push_back(minutes);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        sort(mins.begin(), mins.end());</div><div class=\"line\"></div><div class=\"line\">        for (int idx = 0; idx &lt; (int)mins.size(); idx++) &#123;</div><div class=\"line\">            for (int idy = idx + 1; idy &lt; (int)mins.size(); idy++) &#123;</div><div class=\"line\">                res = min(res, mins[idy] - mins[idx]);</div><div class=\"line\">                res = min(res, 60 * 24 - (mins[idy] - mins[idx]));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, I AC the problem, the improvement? who cares.</p>\n","excerpt":"<blockquote>\n<p>Given a list of 24-hour clock time points in “Hour:Minutes” format, find the minimum minutes difference between any two time points in the list.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [&quot;23:59&quot;,&quot;00:00&quot;]</div><div class=\"line\">Output: 1</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The number of time points in the given list is at least 2 and won’t exceed 20000.</li>\n<li>The input time is legal and ranges from 00:00 to 23:59.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.539. It is an esay problem, the most thing I think is that we should pay attention to the time convertion.</p>\n<p>I make the timestamp into minutes. So that I can find the order between them.</p>\n<p>Then, I sort the array and try to find the minimum value of the distance.</p>\n<p>I can make the solution more quick by just counting the neighbour and the head and tail value instead of count every pair.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int findMinDifference(vector&lt;string&gt;&amp; timePoints) &#123;</div><div class=\"line\">        vector&lt;int&gt; mins;</div><div class=\"line\"></div><div class=\"line\">        int res = INT_MAX;</div><div class=\"line\"></div><div class=\"line\">        for (int i = 0; i &lt; (int)timePoints.size(); i++) &#123;</div><div class=\"line\">            int hour = atoi(timePoints[i].substr(0, 2).c_str()) * 60;</div><div class=\"line\">            int minutes = atoi(timePoints[i].substr(3, 5).c_str()) + hour;</div><div class=\"line\">            mins.push_back(minutes);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        sort(mins.begin(), mins.end());</div><div class=\"line\"></div><div class=\"line\">        for (int idx = 0; idx &lt; (int)mins.size(); idx++) &#123;</div><div class=\"line\">            for (int idy = idx + 1; idy &lt; (int)mins.size(); idy++) &#123;</div><div class=\"line\">                res = min(res, mins[idy] - mins[idx]);</div><div class=\"line\">                res = min(res, 60 * 24 - (mins[idy] - mins[idx]));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, I AC the problem, the improvement? who cares.</p>"},{"title":"Most Frequent Subtree Sum","date":"2017-02-07T01:23:57.000Z","_content":"\n> Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.\n>\n> Examples 1\n> + Input:\n> ```\n  5\n / \\\n2  -3\n```\n> + return [2, -3, 4], since all the values happen only once, return all of them in any order.\n>\n> Examples 2\n> + Input:\n> ```\n  5\n / \\\n2  -5\n```\n> + return [2], since 2 happens twice, however -5 only occur once.\n>\n> Note: You may assume the sum of values in any subtree is in the range of 32-bit signed integer.\n\n<!--more-->\n\nThis is Leetcode 508, and it is a standard problem based on Tree. We just need to mark the last condition of the subTree.\n\nSo, the code is as following:\n\n```\nclass Solution {\n    map<int, int> nodes;\n    public:\n        vector<int> findFrequentTreeSum(TreeNode* root) {\n            nodes.clear();\n            _visit(root);\n\n            int maxTimes = INT_MIN;\n            for (auto i : nodes) {\n                if (i.second > maxTimes) {\n                    maxTimes = i.second;\n                }\n            }\n\n            vector<int> res;\n            for (auto i : nodes) {\n                if (i.second == maxTimes) {\n                    res.push_back(i.first);\n                }\n            }\n\n            return res;\n        }\n\n        int _visit(TreeNode* currentNode) {\n            if (currentNode == NULL) {\n                return 0;\n            }\n\n            if (currentNode->left == NULL && currentNode->right == NULL) {\n                _record(currentNode->val);\n                return currentNode->val;\n            }\n\n            if (currentNode->left != NULL && currentNode->right == NULL) {\n                int value = currentNode->val + _visit(currentNode->left);\n                _record(value);\n                return value;\n            }\n\n            if (currentNode->left == NULL && currentNode->right != NULL) {\n                int value = currentNode->val + _visit(currentNode->right);\n                _record(value);\n                return value;\n            }\n\n            if (currentNode->left != NULL && currentNode->right != NULL) {\n                int value = currentNode->val + _visit(currentNode->left) + _visit(currentNode->right);\n                _record(value);\n                return value;\n            }\n\n            return 0;\n        }\n\n        void _record(int value) {\n            if (nodes.find(value) != nodes.end()) {\n                nodes.find(value)->second++;\n            } else {\n                nodes.insert(pair<int, int>(value, 1));\n            }\n        }\n};\n```\n\nDone, it gets AC.\n","source":"_posts/MostFrequentSubtreeSum.md","raw":"---\ntitle: Most Frequent Subtree Sum\ndate: 2017-02-07 09:23:57\ntags:\n    - Tree\n    - Hash Table\n---\n\n> Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.\n>\n> Examples 1\n> + Input:\n> ```\n  5\n / \\\n2  -3\n```\n> + return [2, -3, 4], since all the values happen only once, return all of them in any order.\n>\n> Examples 2\n> + Input:\n> ```\n  5\n / \\\n2  -5\n```\n> + return [2], since 2 happens twice, however -5 only occur once.\n>\n> Note: You may assume the sum of values in any subtree is in the range of 32-bit signed integer.\n\n<!--more-->\n\nThis is Leetcode 508, and it is a standard problem based on Tree. We just need to mark the last condition of the subTree.\n\nSo, the code is as following:\n\n```\nclass Solution {\n    map<int, int> nodes;\n    public:\n        vector<int> findFrequentTreeSum(TreeNode* root) {\n            nodes.clear();\n            _visit(root);\n\n            int maxTimes = INT_MIN;\n            for (auto i : nodes) {\n                if (i.second > maxTimes) {\n                    maxTimes = i.second;\n                }\n            }\n\n            vector<int> res;\n            for (auto i : nodes) {\n                if (i.second == maxTimes) {\n                    res.push_back(i.first);\n                }\n            }\n\n            return res;\n        }\n\n        int _visit(TreeNode* currentNode) {\n            if (currentNode == NULL) {\n                return 0;\n            }\n\n            if (currentNode->left == NULL && currentNode->right == NULL) {\n                _record(currentNode->val);\n                return currentNode->val;\n            }\n\n            if (currentNode->left != NULL && currentNode->right == NULL) {\n                int value = currentNode->val + _visit(currentNode->left);\n                _record(value);\n                return value;\n            }\n\n            if (currentNode->left == NULL && currentNode->right != NULL) {\n                int value = currentNode->val + _visit(currentNode->right);\n                _record(value);\n                return value;\n            }\n\n            if (currentNode->left != NULL && currentNode->right != NULL) {\n                int value = currentNode->val + _visit(currentNode->left) + _visit(currentNode->right);\n                _record(value);\n                return value;\n            }\n\n            return 0;\n        }\n\n        void _record(int value) {\n            if (nodes.find(value) != nodes.end()) {\n                nodes.find(value)->second++;\n            } else {\n                nodes.insert(pair<int, int>(value, 1));\n            }\n        }\n};\n```\n\nDone, it gets AC.\n","slug":"MostFrequentSubtreeSum","published":1,"updated":"2017-02-14T07:06:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyn004mx2f4skdngme9","content":"<blockquote>\n<p>Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.</p>\n<p>Examples 1</p>\n<ul>\n<li><p>Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  5</div><div class=\"line\"> / \\</div><div class=\"line\">2  -3</div></pre></td></tr></table></figure>\n</li>\n<li><p>return [2, -3, 4], since all the values happen only once, return all of them in any order.</p>\n</li>\n</ul>\n<p>Examples 2</p>\n<ul>\n<li><p>Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  5</div><div class=\"line\"> / \\</div><div class=\"line\">2  -5</div></pre></td></tr></table></figure>\n</li>\n<li><p>return [2], since 2 happens twice, however -5 only occur once.</p>\n</li>\n</ul>\n<p>Note: You may assume the sum of values in any subtree is in the range of 32-bit signed integer.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 508, and it is a standard problem based on Tree. We just need to mark the last condition of the subTree.</p>\n<p>So, the code is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    map&lt;int, int&gt; nodes;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findFrequentTreeSum(TreeNode* root) &#123;</div><div class=\"line\">            nodes.clear();</div><div class=\"line\">            _visit(root);</div><div class=\"line\"></div><div class=\"line\">            int maxTimes = INT_MIN;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second &gt; maxTimes) &#123;</div><div class=\"line\">                    maxTimes = i.second;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second == maxTimes) &#123;</div><div class=\"line\">                    res.push_back(i.first);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _visit(TreeNode* currentNode) &#123;</div><div class=\"line\">            if (currentNode == NULL) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left == NULL &amp;&amp; currentNode-&gt;right == NULL) &#123;</div><div class=\"line\">                _record(currentNode-&gt;val);</div><div class=\"line\">                return currentNode-&gt;val;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left != NULL &amp;&amp; currentNode-&gt;right == NULL) &#123;</div><div class=\"line\">                int value = currentNode-&gt;val + _visit(currentNode-&gt;left);</div><div class=\"line\">                _record(value);</div><div class=\"line\">                return value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left == NULL &amp;&amp; currentNode-&gt;right != NULL) &#123;</div><div class=\"line\">                int value = currentNode-&gt;val + _visit(currentNode-&gt;right);</div><div class=\"line\">                _record(value);</div><div class=\"line\">                return value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left != NULL &amp;&amp; currentNode-&gt;right != NULL) &#123;</div><div class=\"line\">                int value = currentNode-&gt;val + _visit(currentNode-&gt;left) + _visit(currentNode-&gt;right);</div><div class=\"line\">                _record(value);</div><div class=\"line\">                return value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _record(int value) &#123;</div><div class=\"line\">            if (nodes.find(value) != nodes.end()) &#123;</div><div class=\"line\">                nodes.find(value)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                nodes.insert(pair&lt;int, int&gt;(value, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Done, it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.</p>\n<p>Examples 1</p>\n<ul>\n<li><p>Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  5</div><div class=\"line\"> / \\</div><div class=\"line\">2  -3</div></pre></td></tr></table></figure>\n</li>\n<li><p>return [2, -3, 4], since all the values happen only once, return all of them in any order.</p>\n</li>\n</ul>\n<p>Examples 2</p>\n<ul>\n<li><p>Input:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  5</div><div class=\"line\"> / \\</div><div class=\"line\">2  -5</div></pre></td></tr></table></figure>\n</li>\n<li><p>return [2], since 2 happens twice, however -5 only occur once.</p>\n</li>\n</ul>\n<p>Note: You may assume the sum of values in any subtree is in the range of 32-bit signed integer.</p>\n</blockquote>","more":"<p>This is Leetcode 508, and it is a standard problem based on Tree. We just need to mark the last condition of the subTree.</p>\n<p>So, the code is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    map&lt;int, int&gt; nodes;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; findFrequentTreeSum(TreeNode* root) &#123;</div><div class=\"line\">            nodes.clear();</div><div class=\"line\">            _visit(root);</div><div class=\"line\"></div><div class=\"line\">            int maxTimes = INT_MIN;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second &gt; maxTimes) &#123;</div><div class=\"line\">                    maxTimes = i.second;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            for (auto i : nodes) &#123;</div><div class=\"line\">                if (i.second == maxTimes) &#123;</div><div class=\"line\">                    res.push_back(i.first);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int _visit(TreeNode* currentNode) &#123;</div><div class=\"line\">            if (currentNode == NULL) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left == NULL &amp;&amp; currentNode-&gt;right == NULL) &#123;</div><div class=\"line\">                _record(currentNode-&gt;val);</div><div class=\"line\">                return currentNode-&gt;val;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left != NULL &amp;&amp; currentNode-&gt;right == NULL) &#123;</div><div class=\"line\">                int value = currentNode-&gt;val + _visit(currentNode-&gt;left);</div><div class=\"line\">                _record(value);</div><div class=\"line\">                return value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left == NULL &amp;&amp; currentNode-&gt;right != NULL) &#123;</div><div class=\"line\">                int value = currentNode-&gt;val + _visit(currentNode-&gt;right);</div><div class=\"line\">                _record(value);</div><div class=\"line\">                return value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (currentNode-&gt;left != NULL &amp;&amp; currentNode-&gt;right != NULL) &#123;</div><div class=\"line\">                int value = currentNode-&gt;val + _visit(currentNode-&gt;left) + _visit(currentNode-&gt;right);</div><div class=\"line\">                _record(value);</div><div class=\"line\">                return value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _record(int value) &#123;</div><div class=\"line\">            if (nodes.find(value) != nodes.end()) &#123;</div><div class=\"line\">                nodes.find(value)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                nodes.insert(pair&lt;int, int&gt;(value, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Done, it gets AC.</p>"},{"title":"New Start","date":"2017-01-01T05:46:25.000Z","_content":"\nAs I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.\n\n<!--more-->\n","source":"_posts/NewStart.md","raw":"---\ntitle: New Start\ndate: 2017-01-01 13:46:25\ntags: \n    - Description\n---\n\nAs I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.\n\n<!--more-->\n","slug":"NewStart","published":1,"updated":"2017-01-03T06:47:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyn004ox2f4d4le6wxh","content":"<p>As I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.</p>\n<a id=\"more\"></a>\n","excerpt":"<p>As I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.</p>","more":""},{"title":"Next Greater Element I","date":"2017-02-05T06:24:59.000Z","_content":"\n\n> You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.\n>\n> The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.\n>\n> Example 1:\n> + Input: nums1 = [4,1,2], nums2 = [1,3,4,2].\n> + Output: [-1,3,-1]\n> + Explanation:\n>     + For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\n>     + For number 1 in the first array, the next greater number for it in the second array is 3.\n>     + For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\n>\n> Example 2:\n> + Input: nums1 = [2,4], nums2 = [1,2,3,4].\n> + Output: [3,-1]\n> + Explanation:\n>     + For number 2 in the first array, the next greater number for it in the second array is 3.\n>     + For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\n>\n> Note:\n> + All elements in nums1 and nums2 are unique.\n> + The length of both nums1 and nums2 would not exceed 1000.\n\n<!--more-->\n\nThis is Leetcode 496, and it is leetcode weekly contest in this week. Such an easy problem.\n\n```\nclass Solution {\n    public:\n        vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {\n            vector<int> res;\n            for (int i = 0; i < (int)findNums.size(); i++) {\n                int standard = -1;\n                bool isOk = false;\n                for (int j = 0; j < (int)nums.size(); j++) {\n                    if (findNums[i] == nums[j]) {\n                        standard = j;\n                    }\n                    if (standard != -1 && j > standard && nums[j] > findNums[i]) {\n                        res.push_back(nums[j]);\n                        isOk = true;\n                        break;\n                    }\n                }\n                if (!isOk) {\n                    res.push_back(-1);\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/NextGreaterElementI.md","raw":"---\ntitle: Next Greater Element I\ndate: 2017-02-05 14:24:59\ntags:\n    - Array\n---\n\n\n> You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.\n>\n> The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.\n>\n> Example 1:\n> + Input: nums1 = [4,1,2], nums2 = [1,3,4,2].\n> + Output: [-1,3,-1]\n> + Explanation:\n>     + For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\n>     + For number 1 in the first array, the next greater number for it in the second array is 3.\n>     + For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\n>\n> Example 2:\n> + Input: nums1 = [2,4], nums2 = [1,2,3,4].\n> + Output: [3,-1]\n> + Explanation:\n>     + For number 2 in the first array, the next greater number for it in the second array is 3.\n>     + For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\n>\n> Note:\n> + All elements in nums1 and nums2 are unique.\n> + The length of both nums1 and nums2 would not exceed 1000.\n\n<!--more-->\n\nThis is Leetcode 496, and it is leetcode weekly contest in this week. Such an easy problem.\n\n```\nclass Solution {\n    public:\n        vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {\n            vector<int> res;\n            for (int i = 0; i < (int)findNums.size(); i++) {\n                int standard = -1;\n                bool isOk = false;\n                for (int j = 0; j < (int)nums.size(); j++) {\n                    if (findNums[i] == nums[j]) {\n                        standard = j;\n                    }\n                    if (standard != -1 && j > standard && nums[j] > findNums[i]) {\n                        res.push_back(nums[j]);\n                        isOk = true;\n                        break;\n                    }\n                }\n                if (!isOk) {\n                    res.push_back(-1);\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"NextGreaterElementI","published":1,"updated":"2017-02-05T06:27:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyp004rx2f4ydfi0lmr","content":"<blockquote>\n<p>You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1’s elements in the corresponding places of nums2.</p>\n<p>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: nums1 = [4,1,2], nums2 = [1,3,4,2].</li>\n<li>Output: [-1,3,-1]</li>\n<li>Explanation:<ul>\n<li>For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.</li>\n<li>For number 1 in the first array, the next greater number for it in the second array is 3.</li>\n<li>For number 2 in the first array, there is no next greater number for it in the second array, so output -1.</li>\n</ul>\n</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: nums1 = [2,4], nums2 = [1,2,3,4].</li>\n<li>Output: [3,-1]</li>\n<li>Explanation:<ul>\n<li>For number 2 in the first array, the next greater number for it in the second array is 3.</li>\n<li>For number 4 in the first array, there is no next greater number for it in the second array, so output -1.</li>\n</ul>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>All elements in nums1 and nums2 are unique.</li>\n<li>The length of both nums1 and nums2 would not exceed 1000.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 496, and it is leetcode weekly contest in this week. Such an easy problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; findNums, vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            for (int i = 0; i &lt; (int)findNums.size(); i++) &#123;</div><div class=\"line\">                int standard = -1;</div><div class=\"line\">                bool isOk = false;</div><div class=\"line\">                for (int j = 0; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                    if (findNums[i] == nums[j]) &#123;</div><div class=\"line\">                        standard = j;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (standard != -1 &amp;&amp; j &gt; standard &amp;&amp; nums[j] &gt; findNums[i]) &#123;</div><div class=\"line\">                        res.push_back(nums[j]);</div><div class=\"line\">                        isOk = true;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (!isOk) &#123;</div><div class=\"line\">                    res.push_back(-1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1’s elements in the corresponding places of nums2.</p>\n<p>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: nums1 = [4,1,2], nums2 = [1,3,4,2].</li>\n<li>Output: [-1,3,-1]</li>\n<li>Explanation:<ul>\n<li>For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.</li>\n<li>For number 1 in the first array, the next greater number for it in the second array is 3.</li>\n<li>For number 2 in the first array, there is no next greater number for it in the second array, so output -1.</li>\n</ul>\n</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: nums1 = [2,4], nums2 = [1,2,3,4].</li>\n<li>Output: [3,-1]</li>\n<li>Explanation:<ul>\n<li>For number 2 in the first array, the next greater number for it in the second array is 3.</li>\n<li>For number 4 in the first array, there is no next greater number for it in the second array, so output -1.</li>\n</ul>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>All elements in nums1 and nums2 are unique.</li>\n<li>The length of both nums1 and nums2 would not exceed 1000.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 496, and it is leetcode weekly contest in this week. Such an easy problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; findNums, vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            for (int i = 0; i &lt; (int)findNums.size(); i++) &#123;</div><div class=\"line\">                int standard = -1;</div><div class=\"line\">                bool isOk = false;</div><div class=\"line\">                for (int j = 0; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                    if (findNums[i] == nums[j]) &#123;</div><div class=\"line\">                        standard = j;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (standard != -1 &amp;&amp; j &gt; standard &amp;&amp; nums[j] &gt; findNums[i]) &#123;</div><div class=\"line\">                        res.push_back(nums[j]);</div><div class=\"line\">                        isOk = true;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (!isOk) &#123;</div><div class=\"line\">                    res.push_back(-1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Next Greater Element II","date":"2017-02-27T06:15:55.000Z","_content":"\n> Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.\n>\n> Example 1:\n>\n> + Input: [1,2,1]\n> + Output: [2,-1,2]\n> + Explanation:\n>   - The first 1's next greater number is 2;\n>   - The number 2 can't find next greater number;\n>   - The second 1's next greater number needs to search circularly, which is also 2.\n>\n> Note: The length of given array won't exceed 10000.\n\n<!--more-->\n\nThis is Leetcode No.503, it seems like its brother problem \"Next Greater Element I\". The different thing is that if you can't find the greater elment at the end of the array, you should start from the beginning.\n\nSo, I can quickly find the solution as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> nextGreaterElements(vector<int>& nums) {\n            vector<int> res;\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                res.push_back(findNextGreaterElement(i, nums));\n            }\n\n            return res;\n        }\n\n        int findNextGreaterElement(int idx, vector<int> nums) {\n            for (int i = idx + 1; i < (int)nums.size(); i++) {\n                if (nums[i] > nums[idx]) {\n                    return nums[i];\n                }\n            }\n\n            for (int i = 0; i < idx; i++) {\n                if (nums[i] > nums[idx]) {\n                    return nums[i];\n                }\n            }\n\n            return -1;\n        }\n};\n```\n\nIt obsolutly gets a AC... I thought it will be a TLE...\n","source":"_posts/NextGreaterElementII.md","raw":"---\ntitle: Next Greater Element II\ndate: 2017-02-27 14:15:55\ntags:\n    - Stack\n---\n\n> Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.\n>\n> Example 1:\n>\n> + Input: [1,2,1]\n> + Output: [2,-1,2]\n> + Explanation:\n>   - The first 1's next greater number is 2;\n>   - The number 2 can't find next greater number;\n>   - The second 1's next greater number needs to search circularly, which is also 2.\n>\n> Note: The length of given array won't exceed 10000.\n\n<!--more-->\n\nThis is Leetcode No.503, it seems like its brother problem \"Next Greater Element I\". The different thing is that if you can't find the greater elment at the end of the array, you should start from the beginning.\n\nSo, I can quickly find the solution as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> nextGreaterElements(vector<int>& nums) {\n            vector<int> res;\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                res.push_back(findNextGreaterElement(i, nums));\n            }\n\n            return res;\n        }\n\n        int findNextGreaterElement(int idx, vector<int> nums) {\n            for (int i = idx + 1; i < (int)nums.size(); i++) {\n                if (nums[i] > nums[idx]) {\n                    return nums[i];\n                }\n            }\n\n            for (int i = 0; i < idx; i++) {\n                if (nums[i] > nums[idx]) {\n                    return nums[i];\n                }\n            }\n\n            return -1;\n        }\n};\n```\n\nIt obsolutly gets a AC... I thought it will be a TLE...\n","slug":"NextGreaterElementII","published":1,"updated":"2017-02-27T06:55:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyp004tx2f4p8e6cmgp","content":"<blockquote>\n<p>Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, output -1 for this number.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1,2,1]</li>\n<li>Output: [2,-1,2]</li>\n<li>Explanation:<ul>\n<li>The first 1’s next greater number is 2;</li>\n<li>The number 2 can’t find next greater number;</li>\n<li>The second 1’s next greater number needs to search circularly, which is also 2.</li>\n</ul>\n</li>\n</ul>\n<p>Note: The length of given array won’t exceed 10000.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.503, it seems like its brother problem “Next Greater Element I”. The different thing is that if you can’t find the greater elment at the end of the array, you should start from the beginning.</p>\n<p>So, I can quickly find the solution as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res.push_back(findNextGreaterElement(i, nums));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int findNextGreaterElement(int idx, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            for (int i = idx + 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] &gt; nums[idx]) &#123;</div><div class=\"line\">                    return nums[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; idx; i++) &#123;</div><div class=\"line\">                if (nums[i] &gt; nums[idx]) &#123;</div><div class=\"line\">                    return nums[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It obsolutly gets a AC… I thought it will be a TLE…</p>\n","excerpt":"<blockquote>\n<p>Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, output -1 for this number.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1,2,1]</li>\n<li>Output: [2,-1,2]</li>\n<li>Explanation:<ul>\n<li>The first 1’s next greater number is 2;</li>\n<li>The number 2 can’t find next greater number;</li>\n<li>The second 1’s next greater number needs to search circularly, which is also 2.</li>\n</ul>\n</li>\n</ul>\n<p>Note: The length of given array won’t exceed 10000.</p>\n</blockquote>","more":"<p>This is Leetcode No.503, it seems like its brother problem “Next Greater Element I”. The different thing is that if you can’t find the greater elment at the end of the array, you should start from the beginning.</p>\n<p>So, I can quickly find the solution as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res.push_back(findNextGreaterElement(i, nums));</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int findNextGreaterElement(int idx, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            for (int i = idx + 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] &gt; nums[idx]) &#123;</div><div class=\"line\">                    return nums[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; idx; i++) &#123;</div><div class=\"line\">                if (nums[i] &gt; nums[idx]) &#123;</div><div class=\"line\">                    return nums[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It obsolutly gets a AC… I thought it will be a TLE…</p>"},{"title":"Next Greater Element III","date":"2017-04-09T16:11:47.000Z","_content":"\n> Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.\n>\n> Example 1:\n> ```\nInput: 12\nOutput: 21\n```\n> Example 2:\n> ```\nInput: 21\nOutput: -1\n```\n\n<!--more-->\n\nThis is Leetcode No.556. It is a middle problem. At first I think about to mark every number in the num and try to list all the combinations.\n\nThen sort its result and find the result. It's time complex is huge. And I think it must be TLE. So, I don't use the method.\n\nThen, I think about another solution that, try to swap two number to make the number larger than the original.\n\nFor instance, '123456' => '123465', that mean we just need to swap the last two number to make the number larger than the original.\n\nSo, what if we just swap the last two number which meet the need that num[idx] > num[idx - 1].\n\nHere is my code coming:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int nextGreaterElement(int n) {\n            string res = \"\";\n            while (n > 0) {\n                res = (char)('0' + n % 10) + res;\n                n = n / 10;\n            }\n\n            bool flag = false;\n            for (int i = res.length() - 1; i > 0 ; i--) {\n                if (res[i] > res[i - 1]) {\n                    flag = true;\n                    char tmp = res[i - 1];\n                    res[i - 1] = res[i];\n                    res[i] = tmp;\n                    break;\n                }\n            }\n\n            int num = 0;\n            for (int i = 0; i < (int)res.length(); i++) {\n                num = (res[i] - '0') + num * 10;\n            }\n            return flag ? num : -1;\n        }\n};\n```\n\nHowever, I meet that 12443322 case. My code return 14243322 which is wrong. So, the new solution is as following.\n\n+ mark the first number location which numStr[idx] < numStr[idx + 1]\n+ reverse the string\n+ swap the location with the first larger number\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int nextGreaterElement(int num) {\n            string numStr = to_string(num);\n            int idx = numStr.length() - 2;\n            for (; idx >= 0 && numStr[idx] >= numStr[idx + 1]; idx--) {}\n            if (idx == -1) {\n                return -1;\n            }\n\n            reverse(numStr.begin() + idx + 1, numStr.end());\n            for (int i = idx + 1; i < (int)numStr.size(); i++) {\n                if (numStr[idx] < numStr[i]) {\n                    swap(numStr[idx], numStr[i]);\n                    break;\n                }\n            }\n\n            long long res = stol(numStr);\n\n            return res > INT_MAX || res == num ? -1 : res;\n        }\n};\n```\n\nBTW: we should use the **stol** function instead of **ctoi** due to that the given number may be larger than the INT_MAX.\n\nIt gets AC.\n","source":"_posts/NextGreaterElementIII.md","raw":"---\ntitle: Next Greater Element III\ndate: 2017-04-10 00:11:47\ntags:\n    - String\n---\n\n> Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.\n>\n> Example 1:\n> ```\nInput: 12\nOutput: 21\n```\n> Example 2:\n> ```\nInput: 21\nOutput: -1\n```\n\n<!--more-->\n\nThis is Leetcode No.556. It is a middle problem. At first I think about to mark every number in the num and try to list all the combinations.\n\nThen sort its result and find the result. It's time complex is huge. And I think it must be TLE. So, I don't use the method.\n\nThen, I think about another solution that, try to swap two number to make the number larger than the original.\n\nFor instance, '123456' => '123465', that mean we just need to swap the last two number to make the number larger than the original.\n\nSo, what if we just swap the last two number which meet the need that num[idx] > num[idx - 1].\n\nHere is my code coming:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int nextGreaterElement(int n) {\n            string res = \"\";\n            while (n > 0) {\n                res = (char)('0' + n % 10) + res;\n                n = n / 10;\n            }\n\n            bool flag = false;\n            for (int i = res.length() - 1; i > 0 ; i--) {\n                if (res[i] > res[i - 1]) {\n                    flag = true;\n                    char tmp = res[i - 1];\n                    res[i - 1] = res[i];\n                    res[i] = tmp;\n                    break;\n                }\n            }\n\n            int num = 0;\n            for (int i = 0; i < (int)res.length(); i++) {\n                num = (res[i] - '0') + num * 10;\n            }\n            return flag ? num : -1;\n        }\n};\n```\n\nHowever, I meet that 12443322 case. My code return 14243322 which is wrong. So, the new solution is as following.\n\n+ mark the first number location which numStr[idx] < numStr[idx + 1]\n+ reverse the string\n+ swap the location with the first larger number\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int nextGreaterElement(int num) {\n            string numStr = to_string(num);\n            int idx = numStr.length() - 2;\n            for (; idx >= 0 && numStr[idx] >= numStr[idx + 1]; idx--) {}\n            if (idx == -1) {\n                return -1;\n            }\n\n            reverse(numStr.begin() + idx + 1, numStr.end());\n            for (int i = idx + 1; i < (int)numStr.size(); i++) {\n                if (numStr[idx] < numStr[i]) {\n                    swap(numStr[idx], numStr[i]);\n                    break;\n                }\n            }\n\n            long long res = stol(numStr);\n\n            return res > INT_MAX || res == num ? -1 : res;\n        }\n};\n```\n\nBTW: we should use the **stol** function instead of **ctoi** due to that the given number may be larger than the INT_MAX.\n\nIt gets AC.\n","slug":"NextGreaterElementIII","published":1,"updated":"2017-04-10T13:47:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyq004wx2f4i9i53rce","content":"<blockquote>\n<p>Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: 12</div><div class=\"line\">Output: 21</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: 21</div><div class=\"line\">Output: -1</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.556. It is a middle problem. At first I think about to mark every number in the num and try to list all the combinations.</p>\n<p>Then sort its result and find the result. It’s time complex is huge. And I think it must be TLE. So, I don’t use the method.</p>\n<p>Then, I think about another solution that, try to swap two number to make the number larger than the original.</p>\n<p>For instance, ‘123456’ =&gt; ‘123465’, that mean we just need to swap the last two number to make the number larger than the original.</p>\n<p>So, what if we just swap the last two number which meet the need that num[idx] &gt; num[idx - 1].</p>\n<p>Here is my code coming:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int nextGreaterElement(int n) &#123;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            while (n &gt; 0) &#123;</div><div class=\"line\">                res = (char)(&apos;0&apos; + n % 10) + res;</div><div class=\"line\">                n = n / 10;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool flag = false;</div><div class=\"line\">            for (int i = res.length() - 1; i &gt; 0 ; i--) &#123;</div><div class=\"line\">                if (res[i] &gt; res[i - 1]) &#123;</div><div class=\"line\">                    flag = true;</div><div class=\"line\">                    char tmp = res[i - 1];</div><div class=\"line\">                    res[i - 1] = res[i];</div><div class=\"line\">                    res[i] = tmp;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int num = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)res.length(); i++) &#123;</div><div class=\"line\">                num = (res[i] - &apos;0&apos;) + num * 10;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return flag ? num : -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, I meet that 12443322 case. My code return 14243322 which is wrong. So, the new solution is as following.</p>\n<ul>\n<li>mark the first number location which numStr[idx] &lt; numStr[idx + 1]</li>\n<li>reverse the string</li>\n<li>swap the location with the first larger number</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int nextGreaterElement(int num) &#123;</div><div class=\"line\">            string numStr = to_string(num);</div><div class=\"line\">            int idx = numStr.length() - 2;</div><div class=\"line\">            for (; idx &gt;= 0 &amp;&amp; numStr[idx] &gt;= numStr[idx + 1]; idx--) &#123;&#125;</div><div class=\"line\">            if (idx == -1) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            reverse(numStr.begin() + idx + 1, numStr.end());</div><div class=\"line\">            for (int i = idx + 1; i &lt; (int)numStr.size(); i++) &#123;</div><div class=\"line\">                if (numStr[idx] &lt; numStr[i]) &#123;</div><div class=\"line\">                    swap(numStr[idx], numStr[i]);</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long long res = stol(numStr);</div><div class=\"line\"></div><div class=\"line\">            return res &gt; INT_MAX || res == num ? -1 : res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>BTW: we should use the <strong>stol</strong> function instead of <strong>ctoi</strong> due to that the given number may be larger than the INT_MAX.</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: 12</div><div class=\"line\">Output: 21</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: 21</div><div class=\"line\">Output: -1</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.556. It is a middle problem. At first I think about to mark every number in the num and try to list all the combinations.</p>\n<p>Then sort its result and find the result. It’s time complex is huge. And I think it must be TLE. So, I don’t use the method.</p>\n<p>Then, I think about another solution that, try to swap two number to make the number larger than the original.</p>\n<p>For instance, ‘123456’ =&gt; ‘123465’, that mean we just need to swap the last two number to make the number larger than the original.</p>\n<p>So, what if we just swap the last two number which meet the need that num[idx] &gt; num[idx - 1].</p>\n<p>Here is my code coming:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int nextGreaterElement(int n) &#123;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            while (n &gt; 0) &#123;</div><div class=\"line\">                res = (char)(&apos;0&apos; + n % 10) + res;</div><div class=\"line\">                n = n / 10;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool flag = false;</div><div class=\"line\">            for (int i = res.length() - 1; i &gt; 0 ; i--) &#123;</div><div class=\"line\">                if (res[i] &gt; res[i - 1]) &#123;</div><div class=\"line\">                    flag = true;</div><div class=\"line\">                    char tmp = res[i - 1];</div><div class=\"line\">                    res[i - 1] = res[i];</div><div class=\"line\">                    res[i] = tmp;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int num = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)res.length(); i++) &#123;</div><div class=\"line\">                num = (res[i] - &apos;0&apos;) + num * 10;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return flag ? num : -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, I meet that 12443322 case. My code return 14243322 which is wrong. So, the new solution is as following.</p>\n<ul>\n<li>mark the first number location which numStr[idx] &lt; numStr[idx + 1]</li>\n<li>reverse the string</li>\n<li>swap the location with the first larger number</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int nextGreaterElement(int num) &#123;</div><div class=\"line\">            string numStr = to_string(num);</div><div class=\"line\">            int idx = numStr.length() - 2;</div><div class=\"line\">            for (; idx &gt;= 0 &amp;&amp; numStr[idx] &gt;= numStr[idx + 1]; idx--) &#123;&#125;</div><div class=\"line\">            if (idx == -1) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            reverse(numStr.begin() + idx + 1, numStr.end());</div><div class=\"line\">            for (int i = idx + 1; i &lt; (int)numStr.size(); i++) &#123;</div><div class=\"line\">                if (numStr[idx] &lt; numStr[i]) &#123;</div><div class=\"line\">                    swap(numStr[idx], numStr[i]);</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long long res = stol(numStr);</div><div class=\"line\"></div><div class=\"line\">            return res &gt; INT_MAX || res == num ? -1 : res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>BTW: we should use the <strong>stol</strong> function instead of <strong>ctoi</strong> due to that the given number may be larger than the INT_MAX.</p>\n<p>It gets AC.</p>"},{"title":"Next Permutation","date":"2017-04-29T09:34:02.000Z","_content":"\n> Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n> \n> If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\n> \n> The replacement must be in-place, do not allocate extra memory.\n> \n> Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n>```\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n```\n\n<!--more-->\n\nThis is Leetcode NO.31. If I can use the extra memory, I can quickly write the code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> mark, res, first;\n        void nextPermutation(vector<int>& nums) {\n            res.clear();\n            mark = nums;\n            sort(nums.begin(), nums.end());\n            vector<bool> visited(nums.size(), false);\n\n            vector<int> current;\n            _generate(nums, visited, current);\n            if (isNext) {\n                nums = first;\n            } else {\n                nums = res;\n            }\n        }\n\n        bool isNext = false, isFirst = true;\n        void _generate(vector<int> nums, vector<bool> visited, vector<int> current) {\n            if (res.size() > 0 && res != mark) {\n                return;\n            }\n            int isFinish = true;\n            for (int idx = 0; idx < (int)visited.size(); idx++) {\n                if (!visited[idx]) {\n                    isFinish = false;\n                }\n            }\n            if (isFinish) {\n                if (isFirst) {\n                    first = current;\n                    isFirst = false;\n                }\n                if (isNext) {\n                    res = current;\n                    isNext = false;\n                    return;\n                }\n                if (current == mark) {\n                    isNext = true;\n                    res = current;\n                }\n            }\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (!visited[idx]) {\n                    current.push_back(nums[idx]);\n                    visited[idx] = true;\n                    _generate(nums, visited, current);\n                    visited[idx] = false;\n                    current.pop_back();\n                }\n            }\n        }\n};\n```\n\nIt can pass some short cases and cases without depulite numbers. But when the number array is too long, the solution will get TLE.\n\nSo, I must to figure out the solution wihich will not use the extra memory space.\n\nLook at the cases:\n\n+ 1, 2, 3\n+ 3, 2, 1\n\nThen I figure out this solution:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void nextPermutation(vector<int>& nums) {\n            for (int idx = nums.size() - 1; idx >= 1; idx--) {\n                if (nums[idx] > nums[idx - 1]) {\n                    swap(nums[idx], nums[idx - 1]);\n                    sort(nums.begin() + idx, nums.end());\n                    return;\n                }\n            }\n            sort(nums.begin(), nums.end());\n            return;\n        }\n};\n```\n\nEasy to understand but it gets wrong answer on `1, 3, 2` case. The output is `312` instead of the correct one `213`.\n\nSo, I change the order that I use to change the number array, I sort the remain numbers earlier and find the minual number that larger than the nums[idx] instead of the one after it:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void nextPermutation(vector<int>& nums) {\n            for (int idx = nums.size() - 1; idx >= 1; idx--) {\n                if (nums[idx] > nums[idx - 1]) {\n                    sort(nums.begin() + idx, nums.end());\n                    for (int idy = idx; idy < (int)nums.size(); idy++) {\n                        if (nums[idy] > nums[idx - 1]) {\n                            swap(nums[idy], nums[idx - 1]);\n                            break;\n                        }\n                    }\n                    return;\n                }\n            }\n            sort(nums.begin(), nums.end());\n            return;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/NextPermutation.md","raw":"---\ntitle: Next Permutation\ndate: 2017-04-29 17:34:02\ntags:\n    - Array\n---\n\n> Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\n> \n> If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\n> \n> The replacement must be in-place, do not allocate extra memory.\n> \n> Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n>```\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n```\n\n<!--more-->\n\nThis is Leetcode NO.31. If I can use the extra memory, I can quickly write the code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> mark, res, first;\n        void nextPermutation(vector<int>& nums) {\n            res.clear();\n            mark = nums;\n            sort(nums.begin(), nums.end());\n            vector<bool> visited(nums.size(), false);\n\n            vector<int> current;\n            _generate(nums, visited, current);\n            if (isNext) {\n                nums = first;\n            } else {\n                nums = res;\n            }\n        }\n\n        bool isNext = false, isFirst = true;\n        void _generate(vector<int> nums, vector<bool> visited, vector<int> current) {\n            if (res.size() > 0 && res != mark) {\n                return;\n            }\n            int isFinish = true;\n            for (int idx = 0; idx < (int)visited.size(); idx++) {\n                if (!visited[idx]) {\n                    isFinish = false;\n                }\n            }\n            if (isFinish) {\n                if (isFirst) {\n                    first = current;\n                    isFirst = false;\n                }\n                if (isNext) {\n                    res = current;\n                    isNext = false;\n                    return;\n                }\n                if (current == mark) {\n                    isNext = true;\n                    res = current;\n                }\n            }\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (!visited[idx]) {\n                    current.push_back(nums[idx]);\n                    visited[idx] = true;\n                    _generate(nums, visited, current);\n                    visited[idx] = false;\n                    current.pop_back();\n                }\n            }\n        }\n};\n```\n\nIt can pass some short cases and cases without depulite numbers. But when the number array is too long, the solution will get TLE.\n\nSo, I must to figure out the solution wihich will not use the extra memory space.\n\nLook at the cases:\n\n+ 1, 2, 3\n+ 3, 2, 1\n\nThen I figure out this solution:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void nextPermutation(vector<int>& nums) {\n            for (int idx = nums.size() - 1; idx >= 1; idx--) {\n                if (nums[idx] > nums[idx - 1]) {\n                    swap(nums[idx], nums[idx - 1]);\n                    sort(nums.begin() + idx, nums.end());\n                    return;\n                }\n            }\n            sort(nums.begin(), nums.end());\n            return;\n        }\n};\n```\n\nEasy to understand but it gets wrong answer on `1, 3, 2` case. The output is `312` instead of the correct one `213`.\n\nSo, I change the order that I use to change the number array, I sort the remain numbers earlier and find the minual number that larger than the nums[idx] instead of the one after it:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void nextPermutation(vector<int>& nums) {\n            for (int idx = nums.size() - 1; idx >= 1; idx--) {\n                if (nums[idx] > nums[idx - 1]) {\n                    sort(nums.begin() + idx, nums.end());\n                    for (int idy = idx; idy < (int)nums.size(); idy++) {\n                        if (nums[idy] > nums[idx - 1]) {\n                            swap(nums[idy], nums[idx - 1]);\n                            break;\n                        }\n                    }\n                    return;\n                }\n            }\n            sort(nums.begin(), nums.end());\n            return;\n        }\n};\n```\n\nIt gets AC.\n","slug":"NextPermutation","published":1,"updated":"2017-04-29T10:06:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyr004yx2f4ruv5jo7p","content":"<blockquote>\n<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\n<p>The replacement must be in-place, do not allocate extra memory.</p>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1,2,3 → 1,3,2</div><div class=\"line\">3,2,1 → 1,2,3</div><div class=\"line\">1,1,5 → 1,5,1</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode NO.31. If I can use the extra memory, I can quickly write the code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; mark, res, first;</div><div class=\"line\">        void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            res.clear();</div><div class=\"line\">            mark = nums;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            vector&lt;bool&gt; visited(nums.size(), false);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            _generate(nums, visited, current);</div><div class=\"line\">            if (isNext) &#123;</div><div class=\"line\">                nums = first;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                nums = res;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool isNext = false, isFirst = true;</div><div class=\"line\">        void _generate(vector&lt;int&gt; nums, vector&lt;bool&gt; visited, vector&lt;int&gt; current) &#123;</div><div class=\"line\">            if (res.size() &gt; 0 &amp;&amp; res != mark) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int isFinish = true;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)visited.size(); idx++) &#123;</div><div class=\"line\">                if (!visited[idx]) &#123;</div><div class=\"line\">                    isFinish = false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (isFinish) &#123;</div><div class=\"line\">                if (isFirst) &#123;</div><div class=\"line\">                    first = current;</div><div class=\"line\">                    isFirst = false;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (isNext) &#123;</div><div class=\"line\">                    res = current;</div><div class=\"line\">                    isNext = false;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (current == mark) &#123;</div><div class=\"line\">                    isNext = true;</div><div class=\"line\">                    res = current;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (!visited[idx]) &#123;</div><div class=\"line\">                    current.push_back(nums[idx]);</div><div class=\"line\">                    visited[idx] = true;</div><div class=\"line\">                    _generate(nums, visited, current);</div><div class=\"line\">                    visited[idx] = false;</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It can pass some short cases and cases without depulite numbers. But when the number array is too long, the solution will get TLE.</p>\n<p>So, I must to figure out the solution wihich will not use the extra memory space.</p>\n<p>Look at the cases:</p>\n<ul>\n<li>1, 2, 3</li>\n<li>3, 2, 1</li>\n</ul>\n<p>Then I figure out this solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int idx = nums.size() - 1; idx &gt;= 1; idx--) &#123;</div><div class=\"line\">                if (nums[idx] &gt; nums[idx - 1]) &#123;</div><div class=\"line\">                    swap(nums[idx], nums[idx - 1]);</div><div class=\"line\">                    sort(nums.begin() + idx, nums.end());</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to understand but it gets wrong answer on <code>1, 3, 2</code> case. The output is <code>312</code> instead of the correct one <code>213</code>.</p>\n<p>So, I change the order that I use to change the number array, I sort the remain numbers earlier and find the minual number that larger than the nums[idx] instead of the one after it:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int idx = nums.size() - 1; idx &gt;= 1; idx--) &#123;</div><div class=\"line\">                if (nums[idx] &gt; nums[idx - 1]) &#123;</div><div class=\"line\">                    sort(nums.begin() + idx, nums.end());</div><div class=\"line\">                    for (int idy = idx; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                        if (nums[idy] &gt; nums[idx - 1]) &#123;</div><div class=\"line\">                            swap(nums[idy], nums[idx - 1]);</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\n<p>The replacement must be in-place, do not allocate extra memory.</p>\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1,2,3 → 1,3,2</div><div class=\"line\">3,2,1 → 1,2,3</div><div class=\"line\">1,1,5 → 1,5,1</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode NO.31. If I can use the extra memory, I can quickly write the code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; mark, res, first;</div><div class=\"line\">        void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            res.clear();</div><div class=\"line\">            mark = nums;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            vector&lt;bool&gt; visited(nums.size(), false);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            _generate(nums, visited, current);</div><div class=\"line\">            if (isNext) &#123;</div><div class=\"line\">                nums = first;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                nums = res;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool isNext = false, isFirst = true;</div><div class=\"line\">        void _generate(vector&lt;int&gt; nums, vector&lt;bool&gt; visited, vector&lt;int&gt; current) &#123;</div><div class=\"line\">            if (res.size() &gt; 0 &amp;&amp; res != mark) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int isFinish = true;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)visited.size(); idx++) &#123;</div><div class=\"line\">                if (!visited[idx]) &#123;</div><div class=\"line\">                    isFinish = false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (isFinish) &#123;</div><div class=\"line\">                if (isFirst) &#123;</div><div class=\"line\">                    first = current;</div><div class=\"line\">                    isFirst = false;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (isNext) &#123;</div><div class=\"line\">                    res = current;</div><div class=\"line\">                    isNext = false;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (current == mark) &#123;</div><div class=\"line\">                    isNext = true;</div><div class=\"line\">                    res = current;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (!visited[idx]) &#123;</div><div class=\"line\">                    current.push_back(nums[idx]);</div><div class=\"line\">                    visited[idx] = true;</div><div class=\"line\">                    _generate(nums, visited, current);</div><div class=\"line\">                    visited[idx] = false;</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It can pass some short cases and cases without depulite numbers. But when the number array is too long, the solution will get TLE.</p>\n<p>So, I must to figure out the solution wihich will not use the extra memory space.</p>\n<p>Look at the cases:</p>\n<ul>\n<li>1, 2, 3</li>\n<li>3, 2, 1</li>\n</ul>\n<p>Then I figure out this solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int idx = nums.size() - 1; idx &gt;= 1; idx--) &#123;</div><div class=\"line\">                if (nums[idx] &gt; nums[idx - 1]) &#123;</div><div class=\"line\">                    swap(nums[idx], nums[idx - 1]);</div><div class=\"line\">                    sort(nums.begin() + idx, nums.end());</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Easy to understand but it gets wrong answer on <code>1, 3, 2</code> case. The output is <code>312</code> instead of the correct one <code>213</code>.</p>\n<p>So, I change the order that I use to change the number array, I sort the remain numbers earlier and find the minual number that larger than the nums[idx] instead of the one after it:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int idx = nums.size() - 1; idx &gt;= 1; idx--) &#123;</div><div class=\"line\">                if (nums[idx] &gt; nums[idx - 1]) &#123;</div><div class=\"line\">                    sort(nums.begin() + idx, nums.end());</div><div class=\"line\">                    for (int idy = idx; idy &lt; (int)nums.size(); idy++) &#123;</div><div class=\"line\">                        if (nums[idy] &gt; nums[idx - 1]) &#123;</div><div class=\"line\">                            swap(nums[idy], nums[idx - 1]);</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Number Complement","date":"2017-01-24T15:33:22.000Z","_content":"\n> Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.\n>\n> Note:\n>\n>   + The given integer is guaranteed to fit within the range of a 32-bit signed integer.\n>   + You could assume no leading zero bit in the integer’s binary representation.\n>\n> Example 1:\n> + Input: 5 Output: 2\n> + Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n>\n> Example 2:\n> + Input: 1 Output: 0\n> + Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n\n<!--more-->\n\nThis is Leetcode 476. Easy problem. But here are many solutions.\n\nYou can divide the num by 2 and find the 1 bit and sum on the other hand.\n\nIt may cost O(logN) time complex.\n\nBut here I use another way:\n\n```\nclass Solution {\n    public:\n        int findComplement(int num) {\n            int level = 0;\n            while (pow(2, level) <= num) {\n                level++;\n            }\n            return (int)(pow(2, level) - 1) ^ num;\n        }\n};\n```\n\nYou can find that 0x101 ^ 0x111 = 0x010\n\nSo, That's what I use. And it gets AC.\n","source":"_posts/NumberComplement.md","raw":"---\ntitle: Number Complement\ndate: 2017-01-24 23:33:22\ntags:\n    - Bitmap\n---\n\n> Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.\n>\n> Note:\n>\n>   + The given integer is guaranteed to fit within the range of a 32-bit signed integer.\n>   + You could assume no leading zero bit in the integer’s binary representation.\n>\n> Example 1:\n> + Input: 5 Output: 2\n> + Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n>\n> Example 2:\n> + Input: 1 Output: 0\n> + Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n\n<!--more-->\n\nThis is Leetcode 476. Easy problem. But here are many solutions.\n\nYou can divide the num by 2 and find the 1 bit and sum on the other hand.\n\nIt may cost O(logN) time complex.\n\nBut here I use another way:\n\n```\nclass Solution {\n    public:\n        int findComplement(int num) {\n            int level = 0;\n            while (pow(2, level) <= num) {\n                level++;\n            }\n            return (int)(pow(2, level) - 1) ^ num;\n        }\n};\n```\n\nYou can find that 0x101 ^ 0x111 = 0x010\n\nSo, That's what I use. And it gets AC.\n","slug":"NumberComplement","published":1,"updated":"2017-01-24T15:51:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpys0051x2f4lxnznvit","content":"<blockquote>\n<p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>\n<p>Note:</p>\n<ul>\n<li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>\n<li>You could assume no leading zero bit in the integer’s binary representation.</li>\n</ul>\n<p>Example 1:</p>\n<ul>\n<li>Input: 5 Output: 2</li>\n<li>Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: 1 Output: 0</li>\n<li>Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 476. Easy problem. But here are many solutions.</p>\n<p>You can divide the num by 2 and find the 1 bit and sum on the other hand.</p>\n<p>It may cost O(logN) time complex.</p>\n<p>But here I use another way:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findComplement(int num) &#123;</div><div class=\"line\">            int level = 0;</div><div class=\"line\">            while (pow(2, level) &lt;= num) &#123;</div><div class=\"line\">                level++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return (int)(pow(2, level) - 1) ^ num;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>You can find that 0x101 ^ 0x111 = 0x010</p>\n<p>So, That’s what I use. And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>\n<p>Note:</p>\n<ul>\n<li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>\n<li>You could assume no leading zero bit in the integer’s binary representation.</li>\n</ul>\n<p>Example 1:</p>\n<ul>\n<li>Input: 5 Output: 2</li>\n<li>Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: 1 Output: 0</li>\n<li>Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 476. Easy problem. But here are many solutions.</p>\n<p>You can divide the num by 2 and find the 1 bit and sum on the other hand.</p>\n<p>It may cost O(logN) time complex.</p>\n<p>But here I use another way:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findComplement(int num) &#123;</div><div class=\"line\">            int level = 0;</div><div class=\"line\">            while (pow(2, level) &lt;= num) &#123;</div><div class=\"line\">                level++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return (int)(pow(2, level) - 1) ^ num;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>You can find that 0x101 ^ 0x111 = 0x010</p>\n<p>So, That’s what I use. And it gets AC.</p>"},{"title":"Ones and Zeroes","date":"2017-01-20T15:51:54.000Z","_content":"\n> In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.\n>\n> For now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.\n>\n> Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.\n>\n> Note:\n> + The given numbers of 0s and 1s will both not exceed 100\n> + The size of given string array won't exceed 600.\n>\n> Example 1:\n> + Input: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3;\n> + Output: 4\n>\n> Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”\n>\n> Example 2:\n> + Input: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\n> + Output: 2\n>\n> Explanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n\n<!-- more -->\nThis is Leetcode 474. As a noraml DP problem, the most important thing is to find the relationship.\n\nIn this case, we can find the relationship:\n\nwe can use `m` 0s and `n` 1s to make the max(DP[x][y], DP[x-i][y-j] + 1) as `i` and `j` means how many 1s and 0s of the current num.\n\nWhat we should do next is to find the `m to x` and `n to y` to make sure we consider every conditions.\n\nSo, the solution is coming:\n\n```\nclass Solution {\n    public:\n        int findMaxForm(vector<string>& strs, int m, int n) {\n            int DP[600][600];\n            for (int i = 0; i < 600; i++) {\n                for (int j = 0; j < 600; j++) {\n                    DP[i][j] = 0;\n                }\n            }\n            for (int i = 0; i < (int)strs.size(); i++) {\n                int num0 = 0;\n                int num1 = 0;\n                for (int j = 0; j < (int)strs[i].length(); j++) {\n                    if (strs[i][j] == '0') {\n                        num0++;\n                    } else {\n                        num1++;\n                    }\n                }\n\n                for (int i = m; i >= num0; i--) {\n                    for (int j = n; j >= num1; j--) {\n                        DP[i][j] = max(DP[i][j], DP[i-num0][j-num1] + 1);\n                    }\n                }\n            }\n            return DP[m][n];\n        }\n};\n```\n","source":"_posts/OnesandZeroes.md","raw":"---\ntitle: Ones and Zeroes\ndate: 2017-01-20 23:51:54\ntags:\n    - Dynamic Programming\n---\n\n> In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.\n>\n> For now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.\n>\n> Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.\n>\n> Note:\n> + The given numbers of 0s and 1s will both not exceed 100\n> + The size of given string array won't exceed 600.\n>\n> Example 1:\n> + Input: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3;\n> + Output: 4\n>\n> Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”\n>\n> Example 2:\n> + Input: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\n> + Output: 2\n>\n> Explanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n\n<!-- more -->\nThis is Leetcode 474. As a noraml DP problem, the most important thing is to find the relationship.\n\nIn this case, we can find the relationship:\n\nwe can use `m` 0s and `n` 1s to make the max(DP[x][y], DP[x-i][y-j] + 1) as `i` and `j` means how many 1s and 0s of the current num.\n\nWhat we should do next is to find the `m to x` and `n to y` to make sure we consider every conditions.\n\nSo, the solution is coming:\n\n```\nclass Solution {\n    public:\n        int findMaxForm(vector<string>& strs, int m, int n) {\n            int DP[600][600];\n            for (int i = 0; i < 600; i++) {\n                for (int j = 0; j < 600; j++) {\n                    DP[i][j] = 0;\n                }\n            }\n            for (int i = 0; i < (int)strs.size(); i++) {\n                int num0 = 0;\n                int num1 = 0;\n                for (int j = 0; j < (int)strs[i].length(); j++) {\n                    if (strs[i][j] == '0') {\n                        num0++;\n                    } else {\n                        num1++;\n                    }\n                }\n\n                for (int i = m; i >= num0; i--) {\n                    for (int j = n; j >= num1; j--) {\n                        DP[i][j] = max(DP[i][j], DP[i-num0][j-num1] + 1);\n                    }\n                }\n            }\n            return DP[m][n];\n        }\n};\n```\n","slug":"OnesandZeroes","published":1,"updated":"2017-01-20T16:23:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyt0053x2f4mgruc9xn","content":"<blockquote>\n<p>In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.</p>\n<p>For now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.</p>\n<p>Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.</p>\n<p>Note:</p>\n<ul>\n<li>The given numbers of 0s and 1s will both not exceed 100</li>\n<li>The size of given string array won’t exceed 600.</li>\n</ul>\n<p>Example 1:</p>\n<ul>\n<li>Input: Array = {“10”, “0001”, “111001”, “1”, “0”}, m = 5, n = 3;</li>\n<li>Output: 4</li>\n</ul>\n<p>Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”</p>\n<p>Example 2:</p>\n<ul>\n<li>Input: Array = {“10”, “0”, “1”}, m = 1, n = 1</li>\n<li>Output: 2</li>\n</ul>\n<p>Explanation: You could form “10”, but then you’d have nothing left. Better form “0” and “1”.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 474. As a noraml DP problem, the most important thing is to find the relationship.</p>\n<p>In this case, we can find the relationship:</p>\n<p>we can use <code>m</code> 0s and <code>n</code> 1s to make the max(DP[x][y], DP[x-i][y-j] + 1) as <code>i</code> and <code>j</code> means how many 1s and 0s of the current num.</p>\n<p>What we should do next is to find the <code>m to x</code> and <code>n to y</code> to make sure we consider every conditions.</p>\n<p>So, the solution is coming:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxForm(vector&lt;string&gt;&amp; strs, int m, int n) &#123;</div><div class=\"line\">            int DP[600][600];</div><div class=\"line\">            for (int i = 0; i &lt; 600; i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; 600; j++) &#123;</div><div class=\"line\">                    DP[i][j] = 0;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                int num0 = 0;</div><div class=\"line\">                int num1 = 0;</div><div class=\"line\">                for (int j = 0; j &lt; (int)strs[i].length(); j++) &#123;</div><div class=\"line\">                    if (strs[i][j] == &apos;0&apos;) &#123;</div><div class=\"line\">                        num0++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        num1++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                for (int i = m; i &gt;= num0; i--) &#123;</div><div class=\"line\">                    for (int j = n; j &gt;= num1; j--) &#123;</div><div class=\"line\">                        DP[i][j] = max(DP[i][j], DP[i-num0][j-num1] + 1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[m][n];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.</p>\n<p>For now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.</p>\n<p>Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.</p>\n<p>Note:</p>\n<ul>\n<li>The given numbers of 0s and 1s will both not exceed 100</li>\n<li>The size of given string array won’t exceed 600.</li>\n</ul>\n<p>Example 1:</p>\n<ul>\n<li>Input: Array = {“10”, “0001”, “111001”, “1”, “0”}, m = 5, n = 3;</li>\n<li>Output: 4</li>\n</ul>\n<p>Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”</p>\n<p>Example 2:</p>\n<ul>\n<li>Input: Array = {“10”, “0”, “1”}, m = 1, n = 1</li>\n<li>Output: 2</li>\n</ul>\n<p>Explanation: You could form “10”, but then you’d have nothing left. Better form “0” and “1”.</p>\n</blockquote>","more":"<p>This is Leetcode 474. As a noraml DP problem, the most important thing is to find the relationship.</p>\n<p>In this case, we can find the relationship:</p>\n<p>we can use <code>m</code> 0s and <code>n</code> 1s to make the max(DP[x][y], DP[x-i][y-j] + 1) as <code>i</code> and <code>j</code> means how many 1s and 0s of the current num.</p>\n<p>What we should do next is to find the <code>m to x</code> and <code>n to y</code> to make sure we consider every conditions.</p>\n<p>So, the solution is coming:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxForm(vector&lt;string&gt;&amp; strs, int m, int n) &#123;</div><div class=\"line\">            int DP[600][600];</div><div class=\"line\">            for (int i = 0; i &lt; 600; i++) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; 600; j++) &#123;</div><div class=\"line\">                    DP[i][j] = 0;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                int num0 = 0;</div><div class=\"line\">                int num1 = 0;</div><div class=\"line\">                for (int j = 0; j &lt; (int)strs[i].length(); j++) &#123;</div><div class=\"line\">                    if (strs[i][j] == &apos;0&apos;) &#123;</div><div class=\"line\">                        num0++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        num1++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                for (int i = m; i &gt;= num0; i--) &#123;</div><div class=\"line\">                    for (int j = n; j &gt;= num1; j--) &#123;</div><div class=\"line\">                        DP[i][j] = max(DP[i][j], DP[i-num0][j-num1] + 1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[m][n];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"Optimal Division","date":"2017-04-16T03:02:32.000Z","_content":"\n> Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.\n>\n> However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.\n>\n> Example:\n```\nInput: [1000,100,10,2]\nOutput: \"1000/(100/10/2)\"\nExplanation:\n    1000/(100/10/2) = 1000/((100/10)/2) = 200\n    However, the bold parenthesis in \"1000/((100/10)/2)\" are redundant,\n    since they don't influence the operation priority. So you should return \"1000/(100/10/2)\".\n\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n```\n<!--more-->\n> Note:\n>\n> + The length of the input array is [1, 10].\n> + Elements in the given array will be in range [2, 1000].\n> + There is only one optimal division for each test case.\n\nThis is one problem of Leetcode weekly constest 28. And it is also No.553. It is a Math problem.\n\nAt first, I thought I should generate all the possible combination of the division expression.\n\nBut I find that if you change the operator from '/' to '*', you can calculate the result without the parentesis.\n\nFor example:  1000 / (100 / 10) = 100 / 100 * 10\n\nThen, you can quickly find the max result. It always be num[0] / num[1] * num[2] * num[3] ...\n\nSo, the expression will only be num[0] / ( num[1] / num[2] / num[3] ... )\n\nThen here comes the result:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        string optimalDivision(vector<int>& nums) {\n            string res = \"\";\n            if (nums.size() == 0) {\n                return res;\n            }\n            if (nums.size() == 1) {\n                return to_string(nums[0]);\n            }\n            if (nums.size() == 2) {\n                return to_string(nums[0]) + '/' + to_string(nums[1]);\n            }\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (idx == 0) {\n                    res = res + to_string(nums[0]) + '/' + '(';\n                } else if (idx == (int)nums.size() - 1){\n                    res = res + to_string(nums[idx]) + ')';\n                } else {\n                    res = res + to_string(nums[idx]) + '/';\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/OptimalDivision.md","raw":"---\ntitle: Optimal Division\ndate: 2017-04-16 11:02:32\ntags:\n    - Math\n---\n\n> Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.\n>\n> However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.\n>\n> Example:\n```\nInput: [1000,100,10,2]\nOutput: \"1000/(100/10/2)\"\nExplanation:\n    1000/(100/10/2) = 1000/((100/10)/2) = 200\n    However, the bold parenthesis in \"1000/((100/10)/2)\" are redundant,\n    since they don't influence the operation priority. So you should return \"1000/(100/10/2)\".\n\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n```\n<!--more-->\n> Note:\n>\n> + The length of the input array is [1, 10].\n> + Elements in the given array will be in range [2, 1000].\n> + There is only one optimal division for each test case.\n\nThis is one problem of Leetcode weekly constest 28. And it is also No.553. It is a Math problem.\n\nAt first, I thought I should generate all the possible combination of the division expression.\n\nBut I find that if you change the operator from '/' to '*', you can calculate the result without the parentesis.\n\nFor example:  1000 / (100 / 10) = 100 / 100 * 10\n\nThen, you can quickly find the max result. It always be num[0] / num[1] * num[2] * num[3] ...\n\nSo, the expression will only be num[0] / ( num[1] / num[2] / num[3] ... )\n\nThen here comes the result:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        string optimalDivision(vector<int>& nums) {\n            string res = \"\";\n            if (nums.size() == 0) {\n                return res;\n            }\n            if (nums.size() == 1) {\n                return to_string(nums[0]);\n            }\n            if (nums.size() == 2) {\n                return to_string(nums[0]) + '/' + to_string(nums[1]);\n            }\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                if (idx == 0) {\n                    res = res + to_string(nums[0]) + '/' + '(';\n                } else if (idx == (int)nums.size() - 1){\n                    res = res + to_string(nums[idx]) + ')';\n                } else {\n                    res = res + to_string(nums[idx]) + '/';\n                }\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"OptimalDivision","published":1,"updated":"2017-04-16T03:08:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyt0056x2f487j028p5","content":"<blockquote>\n<p>Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -&gt; 2 / 3 / 4.</p>\n<p>However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1000,100,10,2]</div><div class=\"line\">Output: &quot;1000/(100/10/2)&quot;</div><div class=\"line\">Explanation:</div><div class=\"line\">    1000/(100/10/2) = 1000/((100/10)/2) = 200</div><div class=\"line\">    However, the bold parenthesis in &quot;1000/((100/10)/2)&quot; are redundant,</div><div class=\"line\">    since they don&apos;t influence the operation priority. So you should return &quot;1000/(100/10/2)&quot;.</div><div class=\"line\"></div><div class=\"line\">Other cases:</div><div class=\"line\">1000/(100/10)/2 = 50</div><div class=\"line\">1000/(100/(10/2)) = 50</div><div class=\"line\">1000/100/10/2 = 0.5</div><div class=\"line\">1000/100/(10/2) = 2</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>Note:</p>\n<ul>\n<li>The length of the input array is [1, 10].</li>\n<li>Elements in the given array will be in range [2, 1000].</li>\n<li>There is only one optimal division for each test case.</li>\n</ul>\n</blockquote>\n<p>This is one problem of Leetcode weekly constest 28. And it is also No.553. It is a Math problem.</p>\n<p>At first, I thought I should generate all the possible combination of the division expression.</p>\n<p>But I find that if you change the operator from ‘/‘ to ‘*’, you can calculate the result without the parentesis.</p>\n<p>For example:  1000 / (100 / 10) = 100 / 100 * 10</p>\n<p>Then, you can quickly find the max result. It always be num[0] / num[1] <em> num[2] </em> num[3] …</p>\n<p>So, the expression will only be num[0] / ( num[1] / num[2] / num[3] … )</p>\n<p>Then here comes the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string optimalDivision(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (nums.size() == 1) &#123;</div><div class=\"line\">                return to_string(nums[0]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (nums.size() == 2) &#123;</div><div class=\"line\">                return to_string(nums[0]) + &apos;/&apos; + to_string(nums[1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    res = res + to_string(nums[0]) + &apos;/&apos; + &apos;(&apos;;</div><div class=\"line\">                &#125; else if (idx == (int)nums.size() - 1)&#123;</div><div class=\"line\">                    res = res + to_string(nums[idx]) + &apos;)&apos;;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = res + to_string(nums[idx]) + &apos;/&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -&gt; 2 / 3 / 4.</p>\n<p>However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1000,100,10,2]</div><div class=\"line\">Output: &quot;1000/(100/10/2)&quot;</div><div class=\"line\">Explanation:</div><div class=\"line\">    1000/(100/10/2) = 1000/((100/10)/2) = 200</div><div class=\"line\">    However, the bold parenthesis in &quot;1000/((100/10)/2)&quot; are redundant,</div><div class=\"line\">    since they don&apos;t influence the operation priority. So you should return &quot;1000/(100/10/2)&quot;.</div><div class=\"line\"></div><div class=\"line\">Other cases:</div><div class=\"line\">1000/(100/10)/2 = 50</div><div class=\"line\">1000/(100/(10/2)) = 50</div><div class=\"line\">1000/100/10/2 = 0.5</div><div class=\"line\">1000/100/(10/2) = 2</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<blockquote>\n<p>Note:</p>\n<ul>\n<li>The length of the input array is [1, 10].</li>\n<li>Elements in the given array will be in range [2, 1000].</li>\n<li>There is only one optimal division for each test case.</li>\n</ul>\n</blockquote>\n<p>This is one problem of Leetcode weekly constest 28. And it is also No.553. It is a Math problem.</p>\n<p>At first, I thought I should generate all the possible combination of the division expression.</p>\n<p>But I find that if you change the operator from ‘/‘ to ‘*’, you can calculate the result without the parentesis.</p>\n<p>For example:  1000 / (100 / 10) = 100 / 100 * 10</p>\n<p>Then, you can quickly find the max result. It always be num[0] / num[1] <em> num[2] </em> num[3] …</p>\n<p>So, the expression will only be num[0] / ( num[1] / num[2] / num[3] … )</p>\n<p>Then here comes the result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string optimalDivision(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (nums.size() == 1) &#123;</div><div class=\"line\">                return to_string(nums[0]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (nums.size() == 2) &#123;</div><div class=\"line\">                return to_string(nums[0]) + &apos;/&apos; + to_string(nums[1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    res = res + to_string(nums[0]) + &apos;/&apos; + &apos;(&apos;;</div><div class=\"line\">                &#125; else if (idx == (int)nums.size() - 1)&#123;</div><div class=\"line\">                    res = res + to_string(nums[idx]) + &apos;)&apos;;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = res + to_string(nums[idx]) + &apos;/&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Partition Equal Subset Sum","date":"2017-01-06T05:46:25.000Z","_content":"\n> Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n>\n> Note:\n>\n> + Each of the array element will not exceed 100.\n> + The array size will not exceed 200.\n>\n> Example 1:\n>\n> Input: [1, 5, 11, 5]\n> Output: true\n>\n> Explanation: The array can be partitioned as [1, 5, 5] and [11].\n>\n> Example 2:\n>\n> Input: [1, 2, 3, 5]\n> Output: false\n>\n> Explanation: The array cannot be partitioned into equal sum subsets.\n\n<!-- more -->\n\nThis is Leetcode 416, and it is a leetweek problem. My last pass code like these:\n```\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            if (nums.size() < 2) {\n                return false;\n            }\n            int sum = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                sum = sum + nums[i];\n            }\n            if (sum % 2 != 0) {\n                return false;\n            }\n            return check(0, 0, nums, sum);\n        }\n\n        bool check(int start, int current, vector<int> nums, int sum) {\n            bool res = false;\n            if (current > sum / 2) {\n                return false;\n            }\n            if (current == sum / 2) {\n                return true;\n            }\n            for (int i = start + 1; i < (int)nums.size(); i++) {\n                res = res || check(i, current + nums[i], nums, sum);\n            }\n            return res;\n        }\n};\n```\nBecause the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.\n\nFind a set of the subarray which its sum is sum / 2. And we can use the DP solution.\n\nBecause we know the sum of the array, so we make a array **dp** in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:\n```\nfor (auto num : nums) {\n    for(int i = target; i >= num; i--) { // to be quick we don't visit the whole dp array\n        dp[i] = dp[i] || dp[i - num];\n    }\n}\n```\n\nSo, here comes a better solution based on DP:\n\n```\nusing namespace std;\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            int sum = accumulate(nums.begin(), nums.end(), 0);\n            if (sum & 1) return false;\n            int half = sum >> 1;\n\n            vector<bool> accessibility(half + 1, false);\n            accessibility[0] = true;    // '0' is always reachable\n            //For all num in nums, check the accessibility from half - num to 0.\n            //If 'i' is accessible by former numbers, then 'i + num' is also accessible. (DP Algorithm)\n            for(int num: nums)\n                //Below here we must start from 'half' downto 'num', otherwise current 'num' might be multiply used.\n                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.\n                for(int i = half; i >= num; i--){\n                    if (accessibility[i - num] == true){\n                        accessibility[i] = true;\n                    }\n                }\n            return accessibility[half];\n        }\n};\n```\n\nHowever it's space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.\n\n```\nbool canPartition(vector<int>& nums) {\n    bitset<5001> bits(1);\n    int sum = accumulate(nums.begin(), nums.end(), 0);\n    for (auto n : nums) bits |= bits << n;\n    return !(sum & 1) && bits[sum >> 1];\n}\n```\nWhy and how it works, remaining unknown.\n","source":"_posts/PartitionEqualSubsetSum.md","raw":"---\ntitle: Partition Equal Subset Sum\ndate: 2017-01-06 13:46:25\ntags:\n    - Dynamic Programming\n---\n\n> Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n>\n> Note:\n>\n> + Each of the array element will not exceed 100.\n> + The array size will not exceed 200.\n>\n> Example 1:\n>\n> Input: [1, 5, 11, 5]\n> Output: true\n>\n> Explanation: The array can be partitioned as [1, 5, 5] and [11].\n>\n> Example 2:\n>\n> Input: [1, 2, 3, 5]\n> Output: false\n>\n> Explanation: The array cannot be partitioned into equal sum subsets.\n\n<!-- more -->\n\nThis is Leetcode 416, and it is a leetweek problem. My last pass code like these:\n```\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            if (nums.size() < 2) {\n                return false;\n            }\n            int sum = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                sum = sum + nums[i];\n            }\n            if (sum % 2 != 0) {\n                return false;\n            }\n            return check(0, 0, nums, sum);\n        }\n\n        bool check(int start, int current, vector<int> nums, int sum) {\n            bool res = false;\n            if (current > sum / 2) {\n                return false;\n            }\n            if (current == sum / 2) {\n                return true;\n            }\n            for (int i = start + 1; i < (int)nums.size(); i++) {\n                res = res || check(i, current + nums[i], nums, sum);\n            }\n            return res;\n        }\n};\n```\nBecause the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.\n\nFind a set of the subarray which its sum is sum / 2. And we can use the DP solution.\n\nBecause we know the sum of the array, so we make a array **dp** in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:\n```\nfor (auto num : nums) {\n    for(int i = target; i >= num; i--) { // to be quick we don't visit the whole dp array\n        dp[i] = dp[i] || dp[i - num];\n    }\n}\n```\n\nSo, here comes a better solution based on DP:\n\n```\nusing namespace std;\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            int sum = accumulate(nums.begin(), nums.end(), 0);\n            if (sum & 1) return false;\n            int half = sum >> 1;\n\n            vector<bool> accessibility(half + 1, false);\n            accessibility[0] = true;    // '0' is always reachable\n            //For all num in nums, check the accessibility from half - num to 0.\n            //If 'i' is accessible by former numbers, then 'i + num' is also accessible. (DP Algorithm)\n            for(int num: nums)\n                //Below here we must start from 'half' downto 'num', otherwise current 'num' might be multiply used.\n                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.\n                for(int i = half; i >= num; i--){\n                    if (accessibility[i - num] == true){\n                        accessibility[i] = true;\n                    }\n                }\n            return accessibility[half];\n        }\n};\n```\n\nHowever it's space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.\n\n```\nbool canPartition(vector<int>& nums) {\n    bitset<5001> bits(1);\n    int sum = accumulate(nums.begin(), nums.end(), 0);\n    for (auto n : nums) bits |= bits << n;\n    return !(sum & 1) && bits[sum >> 1];\n}\n```\nWhy and how it works, remaining unknown.\n","slug":"PartitionEqualSubsetSum","published":1,"updated":"2017-01-13T03:10:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyu0058x2f4odwgdy8l","content":"<blockquote>\n<p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>\n<p>Note:</p>\n<ul>\n<li>Each of the array element will not exceed 100.</li>\n<li>The array size will not exceed 200.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1, 5, 11, 5]<br>Output: true</p>\n<p>Explanation: The array can be partitioned as [1, 5, 5] and [11].</p>\n<p>Example 2:</p>\n<p>Input: [1, 2, 3, 5]<br>Output: false</p>\n<p>Explanation: The array cannot be partitioned into equal sum subsets.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 416, and it is a leetweek problem. My last pass code like these:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt; 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                sum = sum + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum % 2 != 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return check(0, 0, nums, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(int start, int current, vector&lt;int&gt; nums, int sum) &#123;</div><div class=\"line\">            bool res = false;</div><div class=\"line\">            if (current &gt; sum / 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current == sum / 2) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = start + 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = res || check(i, current + nums[i], nums, sum);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Because the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.</p>\n<p>Find a set of the subarray which its sum is sum / 2. And we can use the DP solution.</p>\n<p>Because we know the sum of the array, so we make a array <strong>dp</strong> in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (auto num : nums) &#123;</div><div class=\"line\">    for(int i = target; i &gt;= num; i--) &#123; // to be quick we don&apos;t visit the whole dp array</div><div class=\"line\">        dp[i] = dp[i] || dp[i - num];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>So, here comes a better solution based on DP:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">            if (sum &amp; 1) return false;</div><div class=\"line\">            int half = sum &gt;&gt; 1;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;bool&gt; accessibility(half + 1, false);</div><div class=\"line\">            accessibility[0] = true;    // &apos;0&apos; is always reachable</div><div class=\"line\">            //For all num in nums, check the accessibility from half - num to 0.</div><div class=\"line\">            //If &apos;i&apos; is accessible by former numbers, then &apos;i + num&apos; is also accessible. (DP Algorithm)</div><div class=\"line\">            for(int num: nums)</div><div class=\"line\">                //Below here we must start from &apos;half&apos; downto &apos;num&apos;, otherwise current &apos;num&apos; might be multiply used.</div><div class=\"line\">                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.</div><div class=\"line\">                for(int i = half; i &gt;= num; i--)&#123;</div><div class=\"line\">                    if (accessibility[i - num] == true)&#123;</div><div class=\"line\">                        accessibility[i] = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            return accessibility[half];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However it’s space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    bitset&lt;5001&gt; bits(1);</div><div class=\"line\">    int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">    for (auto n : nums) bits |= bits &lt;&lt; n;</div><div class=\"line\">    return !(sum &amp; 1) &amp;&amp; bits[sum &gt;&gt; 1];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Why and how it works, remaining unknown.</p>\n","excerpt":"<blockquote>\n<p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>\n<p>Note:</p>\n<ul>\n<li>Each of the array element will not exceed 100.</li>\n<li>The array size will not exceed 200.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1, 5, 11, 5]<br>Output: true</p>\n<p>Explanation: The array can be partitioned as [1, 5, 5] and [11].</p>\n<p>Example 2:</p>\n<p>Input: [1, 2, 3, 5]<br>Output: false</p>\n<p>Explanation: The array cannot be partitioned into equal sum subsets.</p>\n</blockquote>","more":"<p>This is Leetcode 416, and it is a leetweek problem. My last pass code like these:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt; 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                sum = sum + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum % 2 != 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return check(0, 0, nums, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(int start, int current, vector&lt;int&gt; nums, int sum) &#123;</div><div class=\"line\">            bool res = false;</div><div class=\"line\">            if (current &gt; sum / 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current == sum / 2) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = start + 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = res || check(i, current + nums[i], nums, sum);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Because the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.</p>\n<p>Find a set of the subarray which its sum is sum / 2. And we can use the DP solution.</p>\n<p>Because we know the sum of the array, so we make a array <strong>dp</strong> in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (auto num : nums) &#123;</div><div class=\"line\">    for(int i = target; i &gt;= num; i--) &#123; // to be quick we don&apos;t visit the whole dp array</div><div class=\"line\">        dp[i] = dp[i] || dp[i - num];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>So, here comes a better solution based on DP:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">            if (sum &amp; 1) return false;</div><div class=\"line\">            int half = sum &gt;&gt; 1;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;bool&gt; accessibility(half + 1, false);</div><div class=\"line\">            accessibility[0] = true;    // &apos;0&apos; is always reachable</div><div class=\"line\">            //For all num in nums, check the accessibility from half - num to 0.</div><div class=\"line\">            //If &apos;i&apos; is accessible by former numbers, then &apos;i + num&apos; is also accessible. (DP Algorithm)</div><div class=\"line\">            for(int num: nums)</div><div class=\"line\">                //Below here we must start from &apos;half&apos; downto &apos;num&apos;, otherwise current &apos;num&apos; might be multiply used.</div><div class=\"line\">                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.</div><div class=\"line\">                for(int i = half; i &gt;= num; i--)&#123;</div><div class=\"line\">                    if (accessibility[i - num] == true)&#123;</div><div class=\"line\">                        accessibility[i] = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            return accessibility[half];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However it’s space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    bitset&lt;5001&gt; bits(1);</div><div class=\"line\">    int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">    for (auto n : nums) bits |= bits &lt;&lt; n;</div><div class=\"line\">    return !(sum &amp; 1) &amp;&amp; bits[sum &gt;&gt; 1];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Why and how it works, remaining unknown.</p>"},{"title":"Path Sum III","date":"2017-01-07T11:46:25.000Z","_content":"\n> You are given a binary tree in which each node contains an integer value.\n>\n> Find the number of paths that sum to a given value.\n>\n> The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n>\n> The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n>\n> Example:\n>\n> root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n> ```\n      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n```\n> Return 3. The paths that sum to 8 are:\n>\n> 1.  5 -> 3\n> 2.  5 -> 2 -> 1\n> 3. -3 -> 11\n\n<!-- more -->\n\n\nThis is Leetcode 437, easy problem, and it's solution as following:\n\n```\nclass Solution {\n    public:\n        int pathSum(TreeNode* root, int sum) {\n            if(root == NULL)\n                return 0;\n            return visit(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);\n        }\n\n        int visit(TreeNode* node, int sum) {\n            int res = 0;\n            if(node == NULL)\n                return res;\n            if(sum == node->val)\n                res++;\n            res += visit(node->left, sum - node->val);\n            res += visit(node->right, sum - node->val);\n            return res;\n        }\n};\n```\n\nIt's time complex is O(nlogn) if it's a balanced tree while O(n^2) in the worst case.\n\nThe better solution is the DP solution using a map to store all the value of the tree node.\n\n```\nclass Solution {\n    public:\n        int help(TreeNode* root, int sum, unordered_map<int, int>& store, int pre) {\n            if (!root) return 0;\n            root->val += pre;\n            int res = (root->val == sum) + (store.count(root->val - sum) ? store[root->val - sum] : 0);\n            store[root->val]++;\n            res += help(root->left, sum, store, root->val) + help(root->right, sum, store, root->val);\n            store[root->val]--;\n            return res;\n        }\n\n        int pathSum(TreeNode* root, int sum) {\n            unordered_map<int, int> store;\n            return help(root, sum, store, 0);\n        }\n};\n```\n\nThat's it.\n","source":"_posts/PathSumIII.md","raw":"---\ntitle: Path Sum III\ndate: 2017-01-07 19:46:25\ntags:\n    - Tree\n---\n\n> You are given a binary tree in which each node contains an integer value.\n>\n> Find the number of paths that sum to a given value.\n>\n> The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n>\n> The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n>\n> Example:\n>\n> root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n> ```\n      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n```\n> Return 3. The paths that sum to 8 are:\n>\n> 1.  5 -> 3\n> 2.  5 -> 2 -> 1\n> 3. -3 -> 11\n\n<!-- more -->\n\n\nThis is Leetcode 437, easy problem, and it's solution as following:\n\n```\nclass Solution {\n    public:\n        int pathSum(TreeNode* root, int sum) {\n            if(root == NULL)\n                return 0;\n            return visit(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);\n        }\n\n        int visit(TreeNode* node, int sum) {\n            int res = 0;\n            if(node == NULL)\n                return res;\n            if(sum == node->val)\n                res++;\n            res += visit(node->left, sum - node->val);\n            res += visit(node->right, sum - node->val);\n            return res;\n        }\n};\n```\n\nIt's time complex is O(nlogn) if it's a balanced tree while O(n^2) in the worst case.\n\nThe better solution is the DP solution using a map to store all the value of the tree node.\n\n```\nclass Solution {\n    public:\n        int help(TreeNode* root, int sum, unordered_map<int, int>& store, int pre) {\n            if (!root) return 0;\n            root->val += pre;\n            int res = (root->val == sum) + (store.count(root->val - sum) ? store[root->val - sum] : 0);\n            store[root->val]++;\n            res += help(root->left, sum, store, root->val) + help(root->right, sum, store, root->val);\n            store[root->val]--;\n            return res;\n        }\n\n        int pathSum(TreeNode* root, int sum) {\n            unordered_map<int, int> store;\n            return help(root, sum, store, 0);\n        }\n};\n```\n\nThat's it.\n","slug":"PathSumIII","published":1,"updated":"2017-02-14T07:07:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyv005bx2f4hpvptxlz","content":"<blockquote>\n<p>You are given a binary tree in which each node contains an integer value.</p>\n<p>Find the number of paths that sum to a given value.</p>\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>\n<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>\n<p>Example:</p>\n<p>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">      10</div><div class=\"line\">     /  \\</div><div class=\"line\">    5   -3</div><div class=\"line\">   / \\    \\</div><div class=\"line\">  3   2   11</div><div class=\"line\"> / \\   \\</div><div class=\"line\">3  -2   1</div></pre></td></tr></table></figure></p>\n<p>Return 3. The paths that sum to 8 are:</p>\n<ol>\n<li>5 -&gt; 3</li>\n<li>5 -&gt; 2 -&gt; 1</li>\n<li>-3 -&gt; 11</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 437, easy problem, and it’s solution as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            if(root == NULL)</div><div class=\"line\">                return 0;</div><div class=\"line\">            return visit(root, sum) + pathSum(root-&gt;left, sum) + pathSum(root-&gt;right, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int visit(TreeNode* node, int sum) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            if(node == NULL)</div><div class=\"line\">                return res;</div><div class=\"line\">            if(sum == node-&gt;val)</div><div class=\"line\">                res++;</div><div class=\"line\">            res += visit(node-&gt;left, sum - node-&gt;val);</div><div class=\"line\">            res += visit(node-&gt;right, sum - node-&gt;val);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It’s time complex is O(nlogn) if it’s a balanced tree while O(n^2) in the worst case.</p>\n<p>The better solution is the DP solution using a map to store all the value of the tree node.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int help(TreeNode* root, int sum, unordered_map&lt;int, int&gt;&amp; store, int pre) &#123;</div><div class=\"line\">            if (!root) return 0;</div><div class=\"line\">            root-&gt;val += pre;</div><div class=\"line\">            int res = (root-&gt;val == sum) + (store.count(root-&gt;val - sum) ? store[root-&gt;val - sum] : 0);</div><div class=\"line\">            store[root-&gt;val]++;</div><div class=\"line\">            res += help(root-&gt;left, sum, store, root-&gt;val) + help(root-&gt;right, sum, store, root-&gt;val);</div><div class=\"line\">            store[root-&gt;val]--;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            unordered_map&lt;int, int&gt; store;</div><div class=\"line\">            return help(root, sum, store, 0);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>That’s it.</p>\n","excerpt":"<blockquote>\n<p>You are given a binary tree in which each node contains an integer value.</p>\n<p>Find the number of paths that sum to a given value.</p>\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>\n<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>\n<p>Example:</p>\n<p>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">      10</div><div class=\"line\">     /  \\</div><div class=\"line\">    5   -3</div><div class=\"line\">   / \\    \\</div><div class=\"line\">  3   2   11</div><div class=\"line\"> / \\   \\</div><div class=\"line\">3  -2   1</div></pre></td></tr></table></figure></p>\n<p>Return 3. The paths that sum to 8 are:</p>\n<ol>\n<li>5 -&gt; 3</li>\n<li>5 -&gt; 2 -&gt; 1</li>\n<li>-3 -&gt; 11</li>\n</ol>\n</blockquote>","more":"<p>This is Leetcode 437, easy problem, and it’s solution as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            if(root == NULL)</div><div class=\"line\">                return 0;</div><div class=\"line\">            return visit(root, sum) + pathSum(root-&gt;left, sum) + pathSum(root-&gt;right, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int visit(TreeNode* node, int sum) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            if(node == NULL)</div><div class=\"line\">                return res;</div><div class=\"line\">            if(sum == node-&gt;val)</div><div class=\"line\">                res++;</div><div class=\"line\">            res += visit(node-&gt;left, sum - node-&gt;val);</div><div class=\"line\">            res += visit(node-&gt;right, sum - node-&gt;val);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It’s time complex is O(nlogn) if it’s a balanced tree while O(n^2) in the worst case.</p>\n<p>The better solution is the DP solution using a map to store all the value of the tree node.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int help(TreeNode* root, int sum, unordered_map&lt;int, int&gt;&amp; store, int pre) &#123;</div><div class=\"line\">            if (!root) return 0;</div><div class=\"line\">            root-&gt;val += pre;</div><div class=\"line\">            int res = (root-&gt;val == sum) + (store.count(root-&gt;val - sum) ? store[root-&gt;val - sum] : 0);</div><div class=\"line\">            store[root-&gt;val]++;</div><div class=\"line\">            res += help(root-&gt;left, sum, store, root-&gt;val) + help(root-&gt;right, sum, store, root-&gt;val);</div><div class=\"line\">            store[root-&gt;val]--;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            unordered_map&lt;int, int&gt; store;</div><div class=\"line\">            return help(root, sum, store, 0);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>That’s it.</p>"},{"title":"Perfect Squares","date":"2017-01-16T07:31:29.000Z","_content":"\n>  Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n>\n>  For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.\n\n<!--more-->\n\nIt is Leetcode 279 and a quite easy DP problem.\n\nI used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,\n\nI will find 2(1+1), 5(1+4), 10(1+9)... are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.\n\nHowever, this solution gets a TLE. And, I just find another way to solve:\n\n```\nclass Solution {\n    public:\n        int numSquares(int n) {\n            vector<long> DP(n + 1, INT_MAX);\n            DP[0] = 0;\n            for (int i = 0; i <= n; i++) {\n                for (int idx = 0; idx <= (int)sqrt(i); idx++) {\n                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);\n                }\n            }\n            return DP[n];\n        }\n};\n```\n\nMuch easier than the former one. And it gets AC.\n","source":"_posts/PerfectSquares.md","raw":"---\ntitle: Perfect Squares\ndate: 2017-01-16 15:31:29\ntags:\n    - Dynamic Programming\n    - Math\n    - Breadth-first Search\n---\n\n>  Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n>\n>  For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.\n\n<!--more-->\n\nIt is Leetcode 279 and a quite easy DP problem.\n\nI used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,\n\nI will find 2(1+1), 5(1+4), 10(1+9)... are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.\n\nHowever, this solution gets a TLE. And, I just find another way to solve:\n\n```\nclass Solution {\n    public:\n        int numSquares(int n) {\n            vector<long> DP(n + 1, INT_MAX);\n            DP[0] = 0;\n            for (int i = 0; i <= n; i++) {\n                for (int idx = 0; idx <= (int)sqrt(i); idx++) {\n                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);\n                }\n            }\n            return DP[n];\n        }\n};\n```\n\nMuch easier than the former one. And it gets AC.\n","slug":"PerfectSquares","published":1,"updated":"2017-01-16T08:11:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyw005dx2f45mteslbe","content":"<blockquote>\n<p> Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.</p>\n<p> For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode 279 and a quite easy DP problem.</p>\n<p>I used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,</p>\n<p>I will find 2(1+1), 5(1+4), 10(1+9)… are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.</p>\n<p>However, this solution gets a TLE. And, I just find another way to solve:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int numSquares(int n) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(n + 1, INT_MAX);</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int i = 0; i &lt;= n; i++) &#123;</div><div class=\"line\">                for (int idx = 0; idx &lt;= (int)sqrt(i); idx++) &#123;</div><div class=\"line\">                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[n];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Much easier than the former one. And it gets AC.</p>\n","excerpt":"<blockquote>\n<p> Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.</p>\n<p> For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.</p>\n</blockquote>","more":"<p>It is Leetcode 279 and a quite easy DP problem.</p>\n<p>I used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,</p>\n<p>I will find 2(1+1), 5(1+4), 10(1+9)… are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.</p>\n<p>However, this solution gets a TLE. And, I just find another way to solve:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int numSquares(int n) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(n + 1, INT_MAX);</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int i = 0; i &lt;= n; i++) &#123;</div><div class=\"line\">                for (int idx = 0; idx &lt;= (int)sqrt(i); idx++) &#123;</div><div class=\"line\">                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[n];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Much easier than the former one. And it gets AC.</p>"},{"title":"Permutation in String","date":"2017-04-30T02:47:21.000Z","_content":"\n\n> Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.\n>\n> Example 1:\n>```\nInput:s1 = \"ab\" s2 = \"eidbaooo\"\nOutput:True\nExplanation: s2 contains one permutation of s1 (\"ba\").\n```\n> Example 2:\n>```\nInput:s1= \"ab\" s2 = \"eidboaoo\"\nOutput: False\n```\n> Note:\n>\n> + The input strings only contain lower case letters.\n> + The length of both given strings is in range [1, 10,000].\n\n<!--more-->\n\nThis is Leetcode No.567 and also one of the Leetcode contest weekly 30.\n\nI first come up with the solution with Trie Tree. But I find that the length is more than 10000. So, the tree may be larger than what I think.\n\nSo, I come up with the idea that using Two pointers. Which means that I can think in another way: if the substring of s2 is one permutation of s1?\n\nThe code comes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool checkInclusion(string s1, string s2) {\n            if (s1.length() > s2.length()) {\n                return false;\n            }\n\n            vector<int> DP(256, 0);\n            for (int i = 0; i < (int)s1.length(); i++) {\n                DP[s1[i]]++;\n            }\n\n            vector<int> standard(256, 0);\n            int startIdx = 0, endIdx = 0;\n            while (standard != DP && endIdx < (int)s2.length()) {\n                if (standard[s2[endIdx]] < DP[s2[endIdx]]) {\n                    standard[s2[endIdx]]++;\n                    endIdx++;\n                    continue;\n                }\n                if (DP[s2[endIdx]] == 0) {\n                    for (int i = 0; i < 256; i++) standard[i] = 0;\n\n                    endIdx++;\n                    startIdx = endIdx;\n                    continue;\n                }\n                if (standard[s2[endIdx]] == DP[s2[endIdx]]) {\n                    while (s2[startIdx] != s2[endIdx]) {\n                        standard[s2[startIdx]]--;\n                        startIdx++;\n                    }\n                    startIdx++;\n                    endIdx++;\n                    continue;\n                }\n                endIdx++;\n            }\n            if (standard == DP) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/PermutationinString.md","raw":"---\ntitle: Permutation in String\ndate: 2017-04-30 10:47:21\ntags:\n    - Two Pointers\n    - String\n---\n\n\n> Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.\n>\n> Example 1:\n>```\nInput:s1 = \"ab\" s2 = \"eidbaooo\"\nOutput:True\nExplanation: s2 contains one permutation of s1 (\"ba\").\n```\n> Example 2:\n>```\nInput:s1= \"ab\" s2 = \"eidboaoo\"\nOutput: False\n```\n> Note:\n>\n> + The input strings only contain lower case letters.\n> + The length of both given strings is in range [1, 10,000].\n\n<!--more-->\n\nThis is Leetcode No.567 and also one of the Leetcode contest weekly 30.\n\nI first come up with the solution with Trie Tree. But I find that the length is more than 10000. So, the tree may be larger than what I think.\n\nSo, I come up with the idea that using Two pointers. Which means that I can think in another way: if the substring of s2 is one permutation of s1?\n\nThe code comes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool checkInclusion(string s1, string s2) {\n            if (s1.length() > s2.length()) {\n                return false;\n            }\n\n            vector<int> DP(256, 0);\n            for (int i = 0; i < (int)s1.length(); i++) {\n                DP[s1[i]]++;\n            }\n\n            vector<int> standard(256, 0);\n            int startIdx = 0, endIdx = 0;\n            while (standard != DP && endIdx < (int)s2.length()) {\n                if (standard[s2[endIdx]] < DP[s2[endIdx]]) {\n                    standard[s2[endIdx]]++;\n                    endIdx++;\n                    continue;\n                }\n                if (DP[s2[endIdx]] == 0) {\n                    for (int i = 0; i < 256; i++) standard[i] = 0;\n\n                    endIdx++;\n                    startIdx = endIdx;\n                    continue;\n                }\n                if (standard[s2[endIdx]] == DP[s2[endIdx]]) {\n                    while (s2[startIdx] != s2[endIdx]) {\n                        standard[s2[startIdx]]--;\n                        startIdx++;\n                    }\n                    startIdx++;\n                    endIdx++;\n                    continue;\n                }\n                endIdx++;\n            }\n            if (standard == DP) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n};\n```\n\nIt gets AC.\n","slug":"PermutationinString","published":1,"updated":"2017-04-30T02:50:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpyz005gx2f4lqtrtq7s","content":"<blockquote>\n<p>Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string’s permutations is the substring of the second string.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;</div><div class=\"line\">Output:True</div><div class=\"line\">Explanation: s2 contains one permutation of s1 (&quot;ba&quot;).</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;</div><div class=\"line\">Output: False</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The input strings only contain lower case letters.</li>\n<li>The length of both given strings is in range [1, 10,000].</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.567 and also one of the Leetcode contest weekly 30.</p>\n<p>I first come up with the solution with Trie Tree. But I find that the length is more than 10000. So, the tree may be larger than what I think.</p>\n<p>So, I come up with the idea that using Two pointers. Which means that I can think in another way: if the substring of s2 is one permutation of s1?</p>\n<p>The code comes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool checkInclusion(string s1, string s2) &#123;</div><div class=\"line\">            if (s1.length() &gt; s2.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; DP(256, 0);</div><div class=\"line\">            for (int i = 0; i &lt; (int)s1.length(); i++) &#123;</div><div class=\"line\">                DP[s1[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; standard(256, 0);</div><div class=\"line\">            int startIdx = 0, endIdx = 0;</div><div class=\"line\">            while (standard != DP &amp;&amp; endIdx &lt; (int)s2.length()) &#123;</div><div class=\"line\">                if (standard[s2[endIdx]] &lt; DP[s2[endIdx]]) &#123;</div><div class=\"line\">                    standard[s2[endIdx]]++;</div><div class=\"line\">                    endIdx++;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (DP[s2[endIdx]] == 0) &#123;</div><div class=\"line\">                    for (int i = 0; i &lt; 256; i++) standard[i] = 0;</div><div class=\"line\"></div><div class=\"line\">                    endIdx++;</div><div class=\"line\">                    startIdx = endIdx;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (standard[s2[endIdx]] == DP[s2[endIdx]]) &#123;</div><div class=\"line\">                    while (s2[startIdx] != s2[endIdx]) &#123;</div><div class=\"line\">                        standard[s2[startIdx]]--;</div><div class=\"line\">                        startIdx++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    startIdx++;</div><div class=\"line\">                    endIdx++;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                endIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (standard == DP) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string’s permutations is the substring of the second string.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;</div><div class=\"line\">Output:True</div><div class=\"line\">Explanation: s2 contains one permutation of s1 (&quot;ba&quot;).</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;</div><div class=\"line\">Output: False</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The input strings only contain lower case letters.</li>\n<li>The length of both given strings is in range [1, 10,000].</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.567 and also one of the Leetcode contest weekly 30.</p>\n<p>I first come up with the solution with Trie Tree. But I find that the length is more than 10000. So, the tree may be larger than what I think.</p>\n<p>So, I come up with the idea that using Two pointers. Which means that I can think in another way: if the substring of s2 is one permutation of s1?</p>\n<p>The code comes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool checkInclusion(string s1, string s2) &#123;</div><div class=\"line\">            if (s1.length() &gt; s2.length()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; DP(256, 0);</div><div class=\"line\">            for (int i = 0; i &lt; (int)s1.length(); i++) &#123;</div><div class=\"line\">                DP[s1[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; standard(256, 0);</div><div class=\"line\">            int startIdx = 0, endIdx = 0;</div><div class=\"line\">            while (standard != DP &amp;&amp; endIdx &lt; (int)s2.length()) &#123;</div><div class=\"line\">                if (standard[s2[endIdx]] &lt; DP[s2[endIdx]]) &#123;</div><div class=\"line\">                    standard[s2[endIdx]]++;</div><div class=\"line\">                    endIdx++;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (DP[s2[endIdx]] == 0) &#123;</div><div class=\"line\">                    for (int i = 0; i &lt; 256; i++) standard[i] = 0;</div><div class=\"line\"></div><div class=\"line\">                    endIdx++;</div><div class=\"line\">                    startIdx = endIdx;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (standard[s2[endIdx]] == DP[s2[endIdx]]) &#123;</div><div class=\"line\">                    while (s2[startIdx] != s2[endIdx]) &#123;</div><div class=\"line\">                        standard[s2[startIdx]]--;</div><div class=\"line\">                        startIdx++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    startIdx++;</div><div class=\"line\">                    endIdx++;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125;</div><div class=\"line\">                endIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (standard == DP) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Permutations","date":"2017-02-13T02:00:16.000Z","_content":"\n> Given a collection of distinct numbers, return all possible permutations.\n>\n> For example:\n>\n> [1,2,3] have the following permutations:\n> ```\n[\n    [1,2,3],\n    [1,3,2],\n    [2,1,3],\n    [2,3,1],\n    [3,1,2],\n    [3,2,1]\n]\n```\n\n<!--more-->\n\nIt is leetcode No.46, and it is a simple backtracking problem.\n\nYou can just do such a tail reversation to solve the problem.\n\n```\nclass Solution {\n    public:\n        set<int> visited;\n        vector<vector<int> > res;\n        vector<vector<int> > permute(vector<int>& nums) {\n            vector<int> current;\n            backTrace(current, nums);\n            return res;\n        }\n\n        void backTrace(vector<int> current, vector<int> nums) {\n            if (current.size() == nums.size()) {\n                res.push_back(current);\n            }\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (visited.find(nums[i]) == visited.end()) {\n                    current.push_back(nums[i]);\n                    visited.insert(nums[i]);\n                    backTrace(current, nums);\n                    visited.erase(nums[i]);\n                    current.pop_back();\n                }\n            }\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/Permutations.md","raw":"---\ntitle: Permutations\ndate: 2017-02-13 10:00:16\ntags:\n    - Backtracking\n---\n\n> Given a collection of distinct numbers, return all possible permutations.\n>\n> For example:\n>\n> [1,2,3] have the following permutations:\n> ```\n[\n    [1,2,3],\n    [1,3,2],\n    [2,1,3],\n    [2,3,1],\n    [3,1,2],\n    [3,2,1]\n]\n```\n\n<!--more-->\n\nIt is leetcode No.46, and it is a simple backtracking problem.\n\nYou can just do such a tail reversation to solve the problem.\n\n```\nclass Solution {\n    public:\n        set<int> visited;\n        vector<vector<int> > res;\n        vector<vector<int> > permute(vector<int>& nums) {\n            vector<int> current;\n            backTrace(current, nums);\n            return res;\n        }\n\n        void backTrace(vector<int> current, vector<int> nums) {\n            if (current.size() == nums.size()) {\n                res.push_back(current);\n            }\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (visited.find(nums[i]) == visited.end()) {\n                    current.push_back(nums[i]);\n                    visited.insert(nums[i]);\n                    backTrace(current, nums);\n                    visited.erase(nums[i]);\n                    current.pop_back();\n                }\n            }\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"Permutations","published":1,"updated":"2017-02-14T07:08:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpz0005ix2f4vtbsieu3","content":"<blockquote>\n<p>Given a collection of distinct numbers, return all possible permutations.</p>\n<p>For example:</p>\n<p>[1,2,3] have the following permutations:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [1,2,3],</div><div class=\"line\">    [1,3,2],</div><div class=\"line\">    [2,1,3],</div><div class=\"line\">    [2,3,1],</div><div class=\"line\">    [3,1,2],</div><div class=\"line\">    [3,2,1]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is leetcode No.46, and it is a simple backtracking problem.</p>\n<p>You can just do such a tail reversation to solve the problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;int&gt; visited;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; permute(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            backTrace(current, nums);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void backTrace(vector&lt;int&gt; current, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (current.size() == nums.size()) &#123;</div><div class=\"line\">                res.push_back(current);</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (visited.find(nums[i]) == visited.end()) &#123;</div><div class=\"line\">                    current.push_back(nums[i]);</div><div class=\"line\">                    visited.insert(nums[i]);</div><div class=\"line\">                    backTrace(current, nums);</div><div class=\"line\">                    visited.erase(nums[i]);</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a collection of distinct numbers, return all possible permutations.</p>\n<p>For example:</p>\n<p>[1,2,3] have the following permutations:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [1,2,3],</div><div class=\"line\">    [1,3,2],</div><div class=\"line\">    [2,1,3],</div><div class=\"line\">    [2,3,1],</div><div class=\"line\">    [3,1,2],</div><div class=\"line\">    [3,2,1]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>It is leetcode No.46, and it is a simple backtracking problem.</p>\n<p>You can just do such a tail reversation to solve the problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;int&gt; visited;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; permute(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            backTrace(current, nums);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void backTrace(vector&lt;int&gt; current, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (current.size() == nums.size()) &#123;</div><div class=\"line\">                res.push_back(current);</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (visited.find(nums[i]) == visited.end()) &#123;</div><div class=\"line\">                    current.push_back(nums[i]);</div><div class=\"line\">                    visited.insert(nums[i]);</div><div class=\"line\">                    backTrace(current, nums);</div><div class=\"line\">                    visited.erase(nums[i]);</div><div class=\"line\">                    current.pop_back();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Power of Four","date":"2017-03-23T12:39:55.000Z","_content":"\n> Given an integer (signed 32 bits), write a function to check whether it is a power of 4.\n>\n> Example:\n>\n> Given num = 16, return true. Given num = 5, return false.\n>\n> Follow up: Could you solve it without loops/recursion?\n\n<!--more-->\n\nThis is Leetcode No.342. Due to the surprise the USTC prepared for me. I have no attention to focus on my promise to solve one problem a day. \n\nSo, today I just finish one Easy problem. Here is my solution for the problem.\n\n```\nusing namaspace std;\n\nclass Solution {\n    public:\n        boolean isPowerOfFour(int num) {\n            return (num > 0) && ((num & (num - 1)) == 0) && ((num & 0x55555555) == num);\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/PowerofFour.md","raw":"---\ntitle: Power of Four\ndate: 2017-03-23 20:39:55\ntags:\n    - Bit Manipulation\n---\n\n> Given an integer (signed 32 bits), write a function to check whether it is a power of 4.\n>\n> Example:\n>\n> Given num = 16, return true. Given num = 5, return false.\n>\n> Follow up: Could you solve it without loops/recursion?\n\n<!--more-->\n\nThis is Leetcode No.342. Due to the surprise the USTC prepared for me. I have no attention to focus on my promise to solve one problem a day. \n\nSo, today I just finish one Easy problem. Here is my solution for the problem.\n\n```\nusing namaspace std;\n\nclass Solution {\n    public:\n        boolean isPowerOfFour(int num) {\n            return (num > 0) && ((num & (num - 1)) == 0) && ((num & 0x55555555) == num);\n        }\n};\n```\n\nIt gets AC.\n","slug":"PowerofFour","published":1,"updated":"2017-03-23T13:41:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpz2005lx2f4j8h7829e","content":"<blockquote>\n<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>\n<p>Example:</p>\n<p>Given num = 16, return true. Given num = 5, return false.</p>\n<p>Follow up: Could you solve it without loops/recursion?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.342. Due to the surprise the USTC prepared for me. I have no attention to focus on my promise to solve one problem a day. </p>\n<p>So, today I just finish one Easy problem. Here is my solution for the problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namaspace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        boolean isPowerOfFour(int num) &#123;</div><div class=\"line\">            return (num &gt; 0) &amp;&amp; ((num &amp; (num - 1)) == 0) &amp;&amp; ((num &amp; 0x55555555) == num);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>\n<p>Example:</p>\n<p>Given num = 16, return true. Given num = 5, return false.</p>\n<p>Follow up: Could you solve it without loops/recursion?</p>\n</blockquote>","more":"<p>This is Leetcode No.342. Due to the surprise the USTC prepared for me. I have no attention to focus on my promise to solve one problem a day. </p>\n<p>So, today I just finish one Easy problem. Here is my solution for the problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namaspace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        boolean isPowerOfFour(int num) &#123;</div><div class=\"line\">            return (num &gt; 0) &amp;&amp; ((num &amp; (num - 1)) == 0) &amp;&amp; ((num &amp; 0x55555555) == num);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Permutations II","date":"2017-04-21T15:16:09.000Z","_content":"\n\n> Given a collection of numbers that might contain duplicates, return all possible unique permutations.\n>\n> For example,\n> [1,1,2] have the following unique permutations:\n```\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n```\n\n<!--more-->\n\nIt is Leetcode No.47. It is an old problem. And we can quickly find the solution based on the easy-to-think Backtracking way:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        set<vector<int> > SET;\n\n        vector<vector<int> > permuteUnique(vector<int>& nums) {\n            SET.clear();\n\n            vector<int> current(nums.size());\n            vector<bool> visited(nums.size(), false);\n            _generate(current, nums, visited);\n\n            vector<vector<int> > res;\n            for (auto i : SET) {\n                res.push_back(i);\n            }\n\n            return res;\n        }\n\n        bool isFinish(vector<bool> visited) {\n            for (auto i : visited) {\n                if (i == false) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        void _generate(vector<int> &current, vector<int> &nums, vector<bool> &visited) {\n            if (isFinish(visited)) {\n                vector<int> tmp(current);\n                SET.insert(tmp);\n            } else {\n                for (int i = 0; i < (int)nums.size(); i++) {\n                    if (!visited[i]) {\n                        visited[i] = true;\n                        current.push_back(nums[i]);\n                        _generate(current, nums, visited);\n                        current.pop_back();\n                        visited[i] = false;\n                    }\n                }\n            }\n        }\n};\n```\n\nHowever, it gets TLE on the case which has many same numbers `[3,3,0,0,2,3,2]` for example.\n\nSo, we can improve this situation by use map to store the nums;\n\nThen the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        set<vector<int> > SET;\n        map<int, int> NUMS;\n\n        vector<vector<int> > permuteUnique(vector<int>& nums) {\n            SET.clear();\n            NUMS.clear();\n\n            for (auto i : nums) {\n                if (NUMS.find(i) != NUMS.end()) {\n                    NUMS.find(i)->second++;\n                } else {\n                    NUMS.insert(pair<int, int>(i, 1));\n                }\n            }\n\n            vector<int> current;\n            vector<bool> visited(nums.size(), false);\n            _generate(current, nums.size());\n\n            vector<vector<int> > res;\n            for (auto i : SET) {\n                res.push_back(i);\n            }\n\n            return res;\n        }\n\n        void _generate(vector<int> &current, int len) {\n            if ((int)current.size() == (int)len) {\n                vector<int> tmp(current);\n                SET.insert(tmp);\n            } else {\n                for (auto i : NUMS) {\n                    if (i.second > 0) {\n                        current.push_back(i.first);\n                        NUMS.find(i.first)->second--;\n                        _generate(current, len);\n                        current.pop_back();\n                        NUMS.find(i.first)->second++;\n                    }\n                }\n            }\n        }\n};\n```\n\nBy using O(n) more space, we can reduce the time cost. Easy one.\n\nIt gets AC.\n","source":"_posts/PermutationsII.md","raw":"---\ntitle: Permutations II\ndate: 2017-04-21 23:16:09\ntags:\n    - Backtracking\n---\n\n\n> Given a collection of numbers that might contain duplicates, return all possible unique permutations.\n>\n> For example,\n> [1,1,2] have the following unique permutations:\n```\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n```\n\n<!--more-->\n\nIt is Leetcode No.47. It is an old problem. And we can quickly find the solution based on the easy-to-think Backtracking way:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        set<vector<int> > SET;\n\n        vector<vector<int> > permuteUnique(vector<int>& nums) {\n            SET.clear();\n\n            vector<int> current(nums.size());\n            vector<bool> visited(nums.size(), false);\n            _generate(current, nums, visited);\n\n            vector<vector<int> > res;\n            for (auto i : SET) {\n                res.push_back(i);\n            }\n\n            return res;\n        }\n\n        bool isFinish(vector<bool> visited) {\n            for (auto i : visited) {\n                if (i == false) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        void _generate(vector<int> &current, vector<int> &nums, vector<bool> &visited) {\n            if (isFinish(visited)) {\n                vector<int> tmp(current);\n                SET.insert(tmp);\n            } else {\n                for (int i = 0; i < (int)nums.size(); i++) {\n                    if (!visited[i]) {\n                        visited[i] = true;\n                        current.push_back(nums[i]);\n                        _generate(current, nums, visited);\n                        current.pop_back();\n                        visited[i] = false;\n                    }\n                }\n            }\n        }\n};\n```\n\nHowever, it gets TLE on the case which has many same numbers `[3,3,0,0,2,3,2]` for example.\n\nSo, we can improve this situation by use map to store the nums;\n\nThen the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        set<vector<int> > SET;\n        map<int, int> NUMS;\n\n        vector<vector<int> > permuteUnique(vector<int>& nums) {\n            SET.clear();\n            NUMS.clear();\n\n            for (auto i : nums) {\n                if (NUMS.find(i) != NUMS.end()) {\n                    NUMS.find(i)->second++;\n                } else {\n                    NUMS.insert(pair<int, int>(i, 1));\n                }\n            }\n\n            vector<int> current;\n            vector<bool> visited(nums.size(), false);\n            _generate(current, nums.size());\n\n            vector<vector<int> > res;\n            for (auto i : SET) {\n                res.push_back(i);\n            }\n\n            return res;\n        }\n\n        void _generate(vector<int> &current, int len) {\n            if ((int)current.size() == (int)len) {\n                vector<int> tmp(current);\n                SET.insert(tmp);\n            } else {\n                for (auto i : NUMS) {\n                    if (i.second > 0) {\n                        current.push_back(i.first);\n                        NUMS.find(i.first)->second--;\n                        _generate(current, len);\n                        current.pop_back();\n                        NUMS.find(i.first)->second++;\n                    }\n                }\n            }\n        }\n};\n```\n\nBy using O(n) more space, we can reduce the time cost. Easy one.\n\nIt gets AC.\n","slug":"PermutationsII","published":1,"updated":"2017-04-21T15:39:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpz3005nx2f40s270syo","content":"<blockquote>\n<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>\n<p>For example,<br>[1,1,2] have the following unique permutations:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [1,1,2],</div><div class=\"line\">  [1,2,1],</div><div class=\"line\">  [2,1,1]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode No.47. It is an old problem. And we can quickly find the solution based on the easy-to-think Backtracking way:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;vector&lt;int&gt; &gt; SET;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; permuteUnique(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            SET.clear();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; current(nums.size());</div><div class=\"line\">            vector&lt;bool&gt; visited(nums.size(), false);</div><div class=\"line\">            _generate(current, nums, visited);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (auto i : SET) &#123;</div><div class=\"line\">                res.push_back(i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool isFinish(vector&lt;bool&gt; visited) &#123;</div><div class=\"line\">            for (auto i : visited) &#123;</div><div class=\"line\">                if (i == false) &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _generate(vector&lt;int&gt; &amp;current, vector&lt;int&gt; &amp;nums, vector&lt;bool&gt; &amp;visited) &#123;</div><div class=\"line\">            if (isFinish(visited)) &#123;</div><div class=\"line\">                vector&lt;int&gt; tmp(current);</div><div class=\"line\">                SET.insert(tmp);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                    if (!visited[i]) &#123;</div><div class=\"line\">                        visited[i] = true;</div><div class=\"line\">                        current.push_back(nums[i]);</div><div class=\"line\">                        _generate(current, nums, visited);</div><div class=\"line\">                        current.pop_back();</div><div class=\"line\">                        visited[i] = false;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, it gets TLE on the case which has many same numbers <code>[3,3,0,0,2,3,2]</code> for example.</p>\n<p>So, we can improve this situation by use map to store the nums;</p>\n<p>Then the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;vector&lt;int&gt; &gt; SET;</div><div class=\"line\">        map&lt;int, int&gt; NUMS;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; permuteUnique(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            SET.clear();</div><div class=\"line\">            NUMS.clear();</div><div class=\"line\"></div><div class=\"line\">            for (auto i : nums) &#123;</div><div class=\"line\">                if (NUMS.find(i) != NUMS.end()) &#123;</div><div class=\"line\">                    NUMS.find(i)-&gt;second++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    NUMS.insert(pair&lt;int, int&gt;(i, 1));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            vector&lt;bool&gt; visited(nums.size(), false);</div><div class=\"line\">            _generate(current, nums.size());</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (auto i : SET) &#123;</div><div class=\"line\">                res.push_back(i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _generate(vector&lt;int&gt; &amp;current, int len) &#123;</div><div class=\"line\">            if ((int)current.size() == (int)len) &#123;</div><div class=\"line\">                vector&lt;int&gt; tmp(current);</div><div class=\"line\">                SET.insert(tmp);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (auto i : NUMS) &#123;</div><div class=\"line\">                    if (i.second &gt; 0) &#123;</div><div class=\"line\">                        current.push_back(i.first);</div><div class=\"line\">                        NUMS.find(i.first)-&gt;second--;</div><div class=\"line\">                        _generate(current, len);</div><div class=\"line\">                        current.pop_back();</div><div class=\"line\">                        NUMS.find(i.first)-&gt;second++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>By using O(n) more space, we can reduce the time cost. Easy one.</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>\n<p>For example,<br>[1,1,2] have the following unique permutations:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [1,1,2],</div><div class=\"line\">  [1,2,1],</div><div class=\"line\">  [2,1,1]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>It is Leetcode No.47. It is an old problem. And we can quickly find the solution based on the easy-to-think Backtracking way:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;vector&lt;int&gt; &gt; SET;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; permuteUnique(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            SET.clear();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; current(nums.size());</div><div class=\"line\">            vector&lt;bool&gt; visited(nums.size(), false);</div><div class=\"line\">            _generate(current, nums, visited);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (auto i : SET) &#123;</div><div class=\"line\">                res.push_back(i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool isFinish(vector&lt;bool&gt; visited) &#123;</div><div class=\"line\">            for (auto i : visited) &#123;</div><div class=\"line\">                if (i == false) &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _generate(vector&lt;int&gt; &amp;current, vector&lt;int&gt; &amp;nums, vector&lt;bool&gt; &amp;visited) &#123;</div><div class=\"line\">            if (isFinish(visited)) &#123;</div><div class=\"line\">                vector&lt;int&gt; tmp(current);</div><div class=\"line\">                SET.insert(tmp);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                    if (!visited[i]) &#123;</div><div class=\"line\">                        visited[i] = true;</div><div class=\"line\">                        current.push_back(nums[i]);</div><div class=\"line\">                        _generate(current, nums, visited);</div><div class=\"line\">                        current.pop_back();</div><div class=\"line\">                        visited[i] = false;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, it gets TLE on the case which has many same numbers <code>[3,3,0,0,2,3,2]</code> for example.</p>\n<p>So, we can improve this situation by use map to store the nums;</p>\n<p>Then the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;vector&lt;int&gt; &gt; SET;</div><div class=\"line\">        map&lt;int, int&gt; NUMS;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; permuteUnique(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            SET.clear();</div><div class=\"line\">            NUMS.clear();</div><div class=\"line\"></div><div class=\"line\">            for (auto i : nums) &#123;</div><div class=\"line\">                if (NUMS.find(i) != NUMS.end()) &#123;</div><div class=\"line\">                    NUMS.find(i)-&gt;second++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    NUMS.insert(pair&lt;int, int&gt;(i, 1));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; current;</div><div class=\"line\">            vector&lt;bool&gt; visited(nums.size(), false);</div><div class=\"line\">            _generate(current, nums.size());</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt; &gt; res;</div><div class=\"line\">            for (auto i : SET) &#123;</div><div class=\"line\">                res.push_back(i);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _generate(vector&lt;int&gt; &amp;current, int len) &#123;</div><div class=\"line\">            if ((int)current.size() == (int)len) &#123;</div><div class=\"line\">                vector&lt;int&gt; tmp(current);</div><div class=\"line\">                SET.insert(tmp);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                for (auto i : NUMS) &#123;</div><div class=\"line\">                    if (i.second &gt; 0) &#123;</div><div class=\"line\">                        current.push_back(i.first);</div><div class=\"line\">                        NUMS.find(i.first)-&gt;second--;</div><div class=\"line\">                        _generate(current, len);</div><div class=\"line\">                        current.pop_back();</div><div class=\"line\">                        NUMS.find(i.first)-&gt;second++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>By using O(n) more space, we can reduce the time cost. Easy one.</p>\n<p>It gets AC.</p>"},{"title":"Predict the Winner","date":"2017-02-03T11:48:26.000Z","_content":"\n> Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.\n>\n> Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.\n>\n> Example 1:\n> + Input: [1, 5, 2]\n> + Output: False\n> + Explanation:\n>   + Initially, player 1 can choose between 1 and 2.\n>   + If he chooses 2 (or 1). Then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5.\n>   + Then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5.\n>   + Hence, player 1 will never be the winner and you need to return False.\n>\n> Example 2:\n> + Input: [1, 5, 233, 7]\n> + Output: True\n> + Explanation:\n>   + Player 1 first chooses 1. Then player 2 have to choose between 5 and 7.\n>   + No matter which number player 2 choose, player 1 can choose 233.\n>   + Finally, player 1 has more score (234) than player 2 (12).\n>   + So you need to return True representing player1 can win.\n>\n> Note:\n> + 1 <= length of the array <= 20.\n> + Any scores in the given array are non-negative integers and will not exceed 10,000,000.\n> + If the scores of both players are equal, then player 1 is still the winner.\n\n<!--more-->\n\nThis is Leetcode 486, and its No. is like the comic(\"[Re:ゼロから始める異世界生活](http://www.imdb.com/title/tt5607616/)\") male role called \"Subaru Natsuki\".\n\nIt is actually an interesting problem. You can find its solution is like \"Tower of Hanoi\", you need to find the conditions needed by player 1 to win.\n\nSo, here is his conditions, if his turn, he just need one choice to win, for the other's turn, he need both choice to win.\n\nHere is the condition section of code:\n\n```\nbool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector<int> nums) {\n    if (endIdx == startIdx) {\n        if (isA) {\n            return currentA + nums[startIdx] >= currentB;\n        } else {\n            return currentA >= currentB + nums[startIdx];\n        }\n    } else {\n        if (isA) {\n            return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)\n                || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);\n        } else {\n            return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)\n                && _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);\n        }\n    }\n}\n```\n\nAnd my solution is:\n\n```\nclass Solution {\n    public:\n        bool PredictTheWinner(vector<int>& nums) {\n            return _calc(0, nums.size() - 1, true, 0, 0, nums);\n        }\n\n        bool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector<int> nums) {\n            if (endIdx == startIdx) {\n                if (isA) {\n                    return currentA + nums[startIdx] >= currentB;\n                } else {\n                    return currentA >= currentB + nums[startIdx];\n                }\n            } else {\n                if (isA) {\n                    return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)\n                        || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);\n                } else {\n                    return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)\n                        && _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);\n                }\n            }\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/PredicttheWinner.md","raw":"---\ntitle: Predict the Winner\ndate: 2017-02-03 19:48:26\ntags:\n    - Dynamic Programming\n    - Minimax\n---\n\n> Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.\n>\n> Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.\n>\n> Example 1:\n> + Input: [1, 5, 2]\n> + Output: False\n> + Explanation:\n>   + Initially, player 1 can choose between 1 and 2.\n>   + If he chooses 2 (or 1). Then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5.\n>   + Then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5.\n>   + Hence, player 1 will never be the winner and you need to return False.\n>\n> Example 2:\n> + Input: [1, 5, 233, 7]\n> + Output: True\n> + Explanation:\n>   + Player 1 first chooses 1. Then player 2 have to choose between 5 and 7.\n>   + No matter which number player 2 choose, player 1 can choose 233.\n>   + Finally, player 1 has more score (234) than player 2 (12).\n>   + So you need to return True representing player1 can win.\n>\n> Note:\n> + 1 <= length of the array <= 20.\n> + Any scores in the given array are non-negative integers and will not exceed 10,000,000.\n> + If the scores of both players are equal, then player 1 is still the winner.\n\n<!--more-->\n\nThis is Leetcode 486, and its No. is like the comic(\"[Re:ゼロから始める異世界生活](http://www.imdb.com/title/tt5607616/)\") male role called \"Subaru Natsuki\".\n\nIt is actually an interesting problem. You can find its solution is like \"Tower of Hanoi\", you need to find the conditions needed by player 1 to win.\n\nSo, here is his conditions, if his turn, he just need one choice to win, for the other's turn, he need both choice to win.\n\nHere is the condition section of code:\n\n```\nbool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector<int> nums) {\n    if (endIdx == startIdx) {\n        if (isA) {\n            return currentA + nums[startIdx] >= currentB;\n        } else {\n            return currentA >= currentB + nums[startIdx];\n        }\n    } else {\n        if (isA) {\n            return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)\n                || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);\n        } else {\n            return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)\n                && _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);\n        }\n    }\n}\n```\n\nAnd my solution is:\n\n```\nclass Solution {\n    public:\n        bool PredictTheWinner(vector<int>& nums) {\n            return _calc(0, nums.size() - 1, true, 0, 0, nums);\n        }\n\n        bool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector<int> nums) {\n            if (endIdx == startIdx) {\n                if (isA) {\n                    return currentA + nums[startIdx] >= currentB;\n                } else {\n                    return currentA >= currentB + nums[startIdx];\n                }\n            } else {\n                if (isA) {\n                    return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)\n                        || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);\n                } else {\n                    return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)\n                        && _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);\n                }\n            }\n        }\n};\n```\n\nIt gets AC.\n","slug":"PredicttheWinner","published":1,"updated":"2017-02-04T07:50:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpz5005qx2f47bndovx4","content":"<blockquote>\n<p>Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.</p>\n<p>Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1, 5, 2]</li>\n<li>Output: False</li>\n<li>Explanation:<ul>\n<li>Initially, player 1 can choose between 1 and 2.</li>\n<li>If he chooses 2 (or 1). Then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5.</li>\n<li>Then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5.</li>\n<li>Hence, player 1 will never be the winner and you need to return False.</li>\n</ul>\n</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [1, 5, 233, 7]</li>\n<li>Output: True</li>\n<li>Explanation:<ul>\n<li>Player 1 first chooses 1. Then player 2 have to choose between 5 and 7.</li>\n<li>No matter which number player 2 choose, player 1 can choose 233.</li>\n<li>Finally, player 1 has more score (234) than player 2 (12).</li>\n<li>So you need to return True representing player1 can win.</li>\n</ul>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>1 &lt;= length of the array &lt;= 20.</li>\n<li>Any scores in the given array are non-negative integers and will not exceed 10,000,000.</li>\n<li>If the scores of both players are equal, then player 1 is still the winner.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 486, and its No. is like the comic(“<a href=\"http://www.imdb.com/title/tt5607616/\" target=\"_blank\" rel=\"external\">Re:ゼロから始める異世界生活</a>“) male role called “Subaru Natsuki”.</p>\n<p>It is actually an interesting problem. You can find its solution is like “Tower of Hanoi”, you need to find the conditions needed by player 1 to win.</p>\n<p>So, here is his conditions, if his turn, he just need one choice to win, for the other’s turn, he need both choice to win.</p>\n<p>Here is the condition section of code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">    if (endIdx == startIdx) &#123;</div><div class=\"line\">        if (isA) &#123;</div><div class=\"line\">            return currentA + nums[startIdx] &gt;= currentB;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return currentA &gt;= currentB + nums[startIdx];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        if (isA) &#123;</div><div class=\"line\">            return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)</div><div class=\"line\">                || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)</div><div class=\"line\">                &amp;&amp; _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And my solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool PredictTheWinner(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            return _calc(0, nums.size() - 1, true, 0, 0, nums);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (endIdx == startIdx) &#123;</div><div class=\"line\">                if (isA) &#123;</div><div class=\"line\">                    return currentA + nums[startIdx] &gt;= currentB;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return currentA &gt;= currentB + nums[startIdx];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                if (isA) &#123;</div><div class=\"line\">                    return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)</div><div class=\"line\">                        || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)</div><div class=\"line\">                        &amp;&amp; _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.</p>\n<p>Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1, 5, 2]</li>\n<li>Output: False</li>\n<li>Explanation:<ul>\n<li>Initially, player 1 can choose between 1 and 2.</li>\n<li>If he chooses 2 (or 1). Then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5.</li>\n<li>Then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5.</li>\n<li>Hence, player 1 will never be the winner and you need to return False.</li>\n</ul>\n</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [1, 5, 233, 7]</li>\n<li>Output: True</li>\n<li>Explanation:<ul>\n<li>Player 1 first chooses 1. Then player 2 have to choose between 5 and 7.</li>\n<li>No matter which number player 2 choose, player 1 can choose 233.</li>\n<li>Finally, player 1 has more score (234) than player 2 (12).</li>\n<li>So you need to return True representing player1 can win.</li>\n</ul>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>1 &lt;= length of the array &lt;= 20.</li>\n<li>Any scores in the given array are non-negative integers and will not exceed 10,000,000.</li>\n<li>If the scores of both players are equal, then player 1 is still the winner.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 486, and its No. is like the comic(“<a href=\"http://www.imdb.com/title/tt5607616/\">Re:ゼロから始める異世界生活</a>“) male role called “Subaru Natsuki”.</p>\n<p>It is actually an interesting problem. You can find its solution is like “Tower of Hanoi”, you need to find the conditions needed by player 1 to win.</p>\n<p>So, here is his conditions, if his turn, he just need one choice to win, for the other’s turn, he need both choice to win.</p>\n<p>Here is the condition section of code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">    if (endIdx == startIdx) &#123;</div><div class=\"line\">        if (isA) &#123;</div><div class=\"line\">            return currentA + nums[startIdx] &gt;= currentB;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return currentA &gt;= currentB + nums[startIdx];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        if (isA) &#123;</div><div class=\"line\">            return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)</div><div class=\"line\">                || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)</div><div class=\"line\">                &amp;&amp; _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And my solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool PredictTheWinner(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            return _calc(0, nums.size() - 1, true, 0, 0, nums);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool _calc(int startIdx, int endIdx, bool isA, int currentA, int currentB, vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (endIdx == startIdx) &#123;</div><div class=\"line\">                if (isA) &#123;</div><div class=\"line\">                    return currentA + nums[startIdx] &gt;= currentB;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return currentA &gt;= currentB + nums[startIdx];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                if (isA) &#123;</div><div class=\"line\">                    return _calc(startIdx + 1, endIdx, !isA, currentA + nums[startIdx], currentB, nums)</div><div class=\"line\">                        || _calc(startIdx, endIdx - 1, !isA, currentA + nums[endIdx], currentB, nums);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    return _calc(startIdx + 1, endIdx, !isA, currentA, currentB + nums[startIdx], nums)</div><div class=\"line\">                        &amp;&amp; _calc(startIdx, endIdx - 1, !isA, currentA, currentB + nums[endIdx], nums);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Queen Attack","date":"2017-04-08T13:12:57.000Z","_content":"\n> **Description**\n\n> There are N queens in an infinite chessboard. We say two queens may attack each other if they are in the same vertical line, horizontal line or diagonal line even if there are other queens sitting between them.\n>\n> Now given the positions of the queens, find out how many pairs may attack each other?\n>\n> **Input**\n>\n> The first line contains an integer N.\n>\n> Then N lines follow. Each line contains 2 integers Ri and Ci indicating there is a queen in the Ri-th row and Ci-th column.\n>\n> No two queens share the same position.\n>\n> + For 80% of the data, 1 <= N <= 1000\n> + For 100% of the data, 1 <= N <= 100000, 0 <= Ri, Ci <= 1000000000\n>\n> **Output**\n>\n> One integer, the number of pairs may attack each other.\n>```\nSample Input\n    5\n    1 1\n    2 2\n    3 3\n    1 3\n    3 1\n\nSample Output\n    10\n```\n\n<!--more-->\n\nThis is the first problem of [Microsoft 2017 Campus Hiring Contest - April](https://hihocoder.com/contest/mstest2017april).\n\nFirst I use the double-for loop to check each queen.\n\n```\nusing namespace std;\n\nint _main() {\n    int N;\n    vector<pair<int, int> > queens;\n    while (cin >> N) {\n        queens.clear();\n        for (int i = 0; i < N; i++) {\n            int idx, idy;\n            cin >> idx >> idy;\n            queens.push_back(pair<int, int>(idx, idy));\n        }\n\n        int res = 0;\n        for (int idx = 0; idx < (int)queens.size(); idx++) {\n            for (int idy = idx+1; idy < (int)queens.size(); idy++) {\n                if ((abs(queens[idx].first - queens[idy].first) == abs(queens[idx].second - queens[idy].second))\n                        || (queens[idx].first == queens[idy].first || queens[idx].second == queens[idy].second))\n                {\n                    res++;\n                }\n            }\n        }\n        cout << res << endl;\n    }\n    return 0;\n}\n```\nThis time complex is O(n^2), so it gets TLE, then I try another way to solve this.\n\n```\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    int N;\n    map<int, int> cols;\n    map<int, int> rolls;\n    map<int, int> diasA;\n    map<int, int> diasB;\n    while (cin >> N) {\n        for (int i = 0; i < N; i++) {\n            int idx, idy;\n            cin >> idx >> idy;\n            if (cols.find(idx) != cols.end()) {\n                cols.find(idx)->second++;\n            } else {\n                cols.insert(pair<int, int>(idx, 1));\n            }\n            if (rolls.find(idy) != rolls.end()) {\n                rolls.find(idy)->second++;\n            } else {\n                rolls.insert(pair<int, int>(idy, 1));\n            }\n            int flag = (idy - idx);\n            if (diasA.find(flag) != diasA.end()) {\n                diasA.find(flag)->second++;\n            } else {\n                diasA.insert(pair<int, int>(flag, 1));\n            }\n            flag = (idy + idx);\n            if (diasB.find(flag) != diasB.end()) {\n                diasB.find(flag)->second++;\n            } else {\n                diasB.insert(pair<int, int>(flag, 1));\n            }\n        }\n        int res = 0;\n        for (auto i : cols) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        for (auto i : rolls) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        for (auto i : diasA) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        for (auto i : diasB) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        cout << res << endl;\n    }\n    return 0;\n}\n```\n\nI use four maps to store the result, and the time complex come down to O(n). It pass all the cases.\n","source":"_posts/QueenAttack.md","raw":"---\ntitle: Queen Attack\ndate: 2017-04-08 21:12:57\ntags:\n    - Hash Table\n    - Array\n---\n\n> **Description**\n\n> There are N queens in an infinite chessboard. We say two queens may attack each other if they are in the same vertical line, horizontal line or diagonal line even if there are other queens sitting between them.\n>\n> Now given the positions of the queens, find out how many pairs may attack each other?\n>\n> **Input**\n>\n> The first line contains an integer N.\n>\n> Then N lines follow. Each line contains 2 integers Ri and Ci indicating there is a queen in the Ri-th row and Ci-th column.\n>\n> No two queens share the same position.\n>\n> + For 80% of the data, 1 <= N <= 1000\n> + For 100% of the data, 1 <= N <= 100000, 0 <= Ri, Ci <= 1000000000\n>\n> **Output**\n>\n> One integer, the number of pairs may attack each other.\n>```\nSample Input\n    5\n    1 1\n    2 2\n    3 3\n    1 3\n    3 1\n\nSample Output\n    10\n```\n\n<!--more-->\n\nThis is the first problem of [Microsoft 2017 Campus Hiring Contest - April](https://hihocoder.com/contest/mstest2017april).\n\nFirst I use the double-for loop to check each queen.\n\n```\nusing namespace std;\n\nint _main() {\n    int N;\n    vector<pair<int, int> > queens;\n    while (cin >> N) {\n        queens.clear();\n        for (int i = 0; i < N; i++) {\n            int idx, idy;\n            cin >> idx >> idy;\n            queens.push_back(pair<int, int>(idx, idy));\n        }\n\n        int res = 0;\n        for (int idx = 0; idx < (int)queens.size(); idx++) {\n            for (int idy = idx+1; idy < (int)queens.size(); idy++) {\n                if ((abs(queens[idx].first - queens[idy].first) == abs(queens[idx].second - queens[idy].second))\n                        || (queens[idx].first == queens[idy].first || queens[idx].second == queens[idy].second))\n                {\n                    res++;\n                }\n            }\n        }\n        cout << res << endl;\n    }\n    return 0;\n}\n```\nThis time complex is O(n^2), so it gets TLE, then I try another way to solve this.\n\n```\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    int N;\n    map<int, int> cols;\n    map<int, int> rolls;\n    map<int, int> diasA;\n    map<int, int> diasB;\n    while (cin >> N) {\n        for (int i = 0; i < N; i++) {\n            int idx, idy;\n            cin >> idx >> idy;\n            if (cols.find(idx) != cols.end()) {\n                cols.find(idx)->second++;\n            } else {\n                cols.insert(pair<int, int>(idx, 1));\n            }\n            if (rolls.find(idy) != rolls.end()) {\n                rolls.find(idy)->second++;\n            } else {\n                rolls.insert(pair<int, int>(idy, 1));\n            }\n            int flag = (idy - idx);\n            if (diasA.find(flag) != diasA.end()) {\n                diasA.find(flag)->second++;\n            } else {\n                diasA.insert(pair<int, int>(flag, 1));\n            }\n            flag = (idy + idx);\n            if (diasB.find(flag) != diasB.end()) {\n                diasB.find(flag)->second++;\n            } else {\n                diasB.insert(pair<int, int>(flag, 1));\n            }\n        }\n        int res = 0;\n        for (auto i : cols) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        for (auto i : rolls) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        for (auto i : diasA) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        for (auto i : diasB) {\n            if (i.second >= 2) {\n                res += i.second * (i.second - 1) / 2;\n            }\n        }\n        cout << res << endl;\n    }\n    return 0;\n}\n```\n\nI use four maps to store the result, and the time complex come down to O(n). It pass all the cases.\n","slug":"QueenAttack","published":1,"updated":"2017-04-09T09:28:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpz7005sx2f4df4ue7h7","content":"<blockquote>\n<p><strong>Description</strong></p>\n<p>There are N queens in an infinite chessboard. We say two queens may attack each other if they are in the same vertical line, horizontal line or diagonal line even if there are other queens sitting between them.</p>\n<p>Now given the positions of the queens, find out how many pairs may attack each other?</p>\n<p><strong>Input</strong></p>\n<p>The first line contains an integer N.</p>\n<p>Then N lines follow. Each line contains 2 integers Ri and Ci indicating there is a queen in the Ri-th row and Ci-th column.</p>\n<p>No two queens share the same position.</p>\n<ul>\n<li>For 80% of the data, 1 &lt;= N &lt;= 1000</li>\n<li>For 100% of the data, 1 &lt;= N &lt;= 100000, 0 &lt;= Ri, Ci &lt;= 1000000000</li>\n</ul>\n<p><strong>Output</strong></p>\n<p>One integer, the number of pairs may attack each other.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample Input</div><div class=\"line\">    5</div><div class=\"line\">    1 1</div><div class=\"line\">    2 2</div><div class=\"line\">    3 3</div><div class=\"line\">    1 3</div><div class=\"line\">    3 1</div><div class=\"line\"></div><div class=\"line\">Sample Output</div><div class=\"line\">    10</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is the first problem of <a href=\"https://hihocoder.com/contest/mstest2017april\" target=\"_blank\" rel=\"external\">Microsoft 2017 Campus Hiring Contest - April</a>.</p>\n<p>First I use the double-for loop to check each queen.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int _main() &#123;</div><div class=\"line\">    int N;</div><div class=\"line\">    vector&lt;pair&lt;int, int&gt; &gt; queens;</div><div class=\"line\">    while (cin &gt;&gt; N) &#123;</div><div class=\"line\">        queens.clear();</div><div class=\"line\">        for (int i = 0; i &lt; N; i++) &#123;</div><div class=\"line\">            int idx, idy;</div><div class=\"line\">            cin &gt;&gt; idx &gt;&gt; idy;</div><div class=\"line\">            queens.push_back(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (int idx = 0; idx &lt; (int)queens.size(); idx++) &#123;</div><div class=\"line\">            for (int idy = idx+1; idy &lt; (int)queens.size(); idy++) &#123;</div><div class=\"line\">                if ((abs(queens[idx].first - queens[idy].first) == abs(queens[idx].second - queens[idy].second))</div><div class=\"line\">                        || (queens[idx].first == queens[idy].first || queens[idx].second == queens[idy].second))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This time complex is O(n^2), so it gets TLE, then I try another way to solve this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[]) &#123;</div><div class=\"line\">    int N;</div><div class=\"line\">    map&lt;int, int&gt; cols;</div><div class=\"line\">    map&lt;int, int&gt; rolls;</div><div class=\"line\">    map&lt;int, int&gt; diasA;</div><div class=\"line\">    map&lt;int, int&gt; diasB;</div><div class=\"line\">    while (cin &gt;&gt; N) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; N; i++) &#123;</div><div class=\"line\">            int idx, idy;</div><div class=\"line\">            cin &gt;&gt; idx &gt;&gt; idy;</div><div class=\"line\">            if (cols.find(idx) != cols.end()) &#123;</div><div class=\"line\">                cols.find(idx)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                cols.insert(pair&lt;int, int&gt;(idx, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (rolls.find(idy) != rolls.end()) &#123;</div><div class=\"line\">                rolls.find(idy)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                rolls.insert(pair&lt;int, int&gt;(idy, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">            int flag = (idy - idx);</div><div class=\"line\">            if (diasA.find(flag) != diasA.end()) &#123;</div><div class=\"line\">                diasA.find(flag)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                diasA.insert(pair&lt;int, int&gt;(flag, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">            flag = (idy + idx);</div><div class=\"line\">            if (diasB.find(flag) != diasB.end()) &#123;</div><div class=\"line\">                diasB.find(flag)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                diasB.insert(pair&lt;int, int&gt;(flag, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (auto i : cols) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (auto i : rolls) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (auto i : diasA) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (auto i : diasB) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I use four maps to store the result, and the time complex come down to O(n). It pass all the cases.</p>\n","excerpt":"<blockquote>\n<p><strong>Description</strong></p>\n<p>There are N queens in an infinite chessboard. We say two queens may attack each other if they are in the same vertical line, horizontal line or diagonal line even if there are other queens sitting between them.</p>\n<p>Now given the positions of the queens, find out how many pairs may attack each other?</p>\n<p><strong>Input</strong></p>\n<p>The first line contains an integer N.</p>\n<p>Then N lines follow. Each line contains 2 integers Ri and Ci indicating there is a queen in the Ri-th row and Ci-th column.</p>\n<p>No two queens share the same position.</p>\n<ul>\n<li>For 80% of the data, 1 &lt;= N &lt;= 1000</li>\n<li>For 100% of the data, 1 &lt;= N &lt;= 100000, 0 &lt;= Ri, Ci &lt;= 1000000000</li>\n</ul>\n<p><strong>Output</strong></p>\n<p>One integer, the number of pairs may attack each other.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sample Input</div><div class=\"line\">    5</div><div class=\"line\">    1 1</div><div class=\"line\">    2 2</div><div class=\"line\">    3 3</div><div class=\"line\">    1 3</div><div class=\"line\">    3 1</div><div class=\"line\"></div><div class=\"line\">Sample Output</div><div class=\"line\">    10</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is the first problem of <a href=\"https://hihocoder.com/contest/mstest2017april\">Microsoft 2017 Campus Hiring Contest - April</a>.</p>\n<p>First I use the double-for loop to check each queen.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int _main() &#123;</div><div class=\"line\">    int N;</div><div class=\"line\">    vector&lt;pair&lt;int, int&gt; &gt; queens;</div><div class=\"line\">    while (cin &gt;&gt; N) &#123;</div><div class=\"line\">        queens.clear();</div><div class=\"line\">        for (int i = 0; i &lt; N; i++) &#123;</div><div class=\"line\">            int idx, idy;</div><div class=\"line\">            cin &gt;&gt; idx &gt;&gt; idy;</div><div class=\"line\">            queens.push_back(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (int idx = 0; idx &lt; (int)queens.size(); idx++) &#123;</div><div class=\"line\">            for (int idy = idx+1; idy &lt; (int)queens.size(); idy++) &#123;</div><div class=\"line\">                if ((abs(queens[idx].first - queens[idy].first) == abs(queens[idx].second - queens[idy].second))</div><div class=\"line\">                        || (queens[idx].first == queens[idy].first || queens[idx].second == queens[idy].second))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This time complex is O(n^2), so it gets TLE, then I try another way to solve this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[]) &#123;</div><div class=\"line\">    int N;</div><div class=\"line\">    map&lt;int, int&gt; cols;</div><div class=\"line\">    map&lt;int, int&gt; rolls;</div><div class=\"line\">    map&lt;int, int&gt; diasA;</div><div class=\"line\">    map&lt;int, int&gt; diasB;</div><div class=\"line\">    while (cin &gt;&gt; N) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; N; i++) &#123;</div><div class=\"line\">            int idx, idy;</div><div class=\"line\">            cin &gt;&gt; idx &gt;&gt; idy;</div><div class=\"line\">            if (cols.find(idx) != cols.end()) &#123;</div><div class=\"line\">                cols.find(idx)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                cols.insert(pair&lt;int, int&gt;(idx, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (rolls.find(idy) != rolls.end()) &#123;</div><div class=\"line\">                rolls.find(idy)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                rolls.insert(pair&lt;int, int&gt;(idy, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">            int flag = (idy - idx);</div><div class=\"line\">            if (diasA.find(flag) != diasA.end()) &#123;</div><div class=\"line\">                diasA.find(flag)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                diasA.insert(pair&lt;int, int&gt;(flag, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">            flag = (idy + idx);</div><div class=\"line\">            if (diasB.find(flag) != diasB.end()) &#123;</div><div class=\"line\">                diasB.find(flag)-&gt;second++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                diasB.insert(pair&lt;int, int&gt;(flag, 1));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int res = 0;</div><div class=\"line\">        for (auto i : cols) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (auto i : rolls) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (auto i : diasA) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (auto i : diasB) &#123;</div><div class=\"line\">            if (i.second &gt;= 2) &#123;</div><div class=\"line\">                res += i.second * (i.second - 1) / 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I use four maps to store the result, and the time complex come down to O(n). It pass all the cases.</p>"},{"title":"Range Sum Query - Mutable","date":"2017-04-22T03:00:35.000Z","_content":"\n\n> Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.\n> The update(i, val) function modifies nums by updating the element at index i to val.\n>\n> Example:\n```\nGiven nums = [1, 3, 5]\n\nsumRange(0, 2) -> 9\nupdate(1, 2)\nsumRange(0, 2) -> 8\n```\n> Note:\n>\n> + The array is only modifiable by the update function.\n> + You may assume the number of calls to update and sumRange function is distributed evenly.\n\n<!--more-->\n\nThis is Leetcode No.307. At first time, I just think in this way: sumRange(0, 2) = sum(0~2) - sum(0~0).\n\nSo, the code can be like these:\n\n```\nusing namespace std;\n\nclass NumArray {\n    public:\n        vector<int> DP;\n        vector<int> NUMS;\n        NumArray(vector<int> nums) {\n            DP.clear();\n            NUMS.clear();\n\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                NUMS.push_back(nums[idx]);\n                if (idx == 0) {\n                    DP.push_back(nums[idx]);\n                } else {\n                    DP.push_back(nums[idx] + DP[idx - 1]);\n                }\n            }\n        }\n\n        void update(int idx, int val) {\n            int delta = val - NUMS[idx];\n            for (int i = idx; i < (int)DP.size(); i++) {\n                DP[i] = DP[i] + delta;\n            }\n            NUMS[idx] = val;\n        }\n\n        int sumRange(int idx, int idy) {\n            return DP[idy] - (idx > 0 ? DP[idx - 1] : 0);\n        }\n};\n```\n\nBut it gets TLE, because the update function will use O(n) time complex. So that we should to find out other solutions.\n\nYou will find two other ways:\n\n1. use blocks to maintain a small range of numbers;\n2. use segment tree data structure.\n\nThe first method is simple, what you should do is to merge a mall range numbers into a number. Then follow the steps above.\n\nSo, I want to show the second method - Segment Tree.\n\n![Figure 2. Illustration of Segment tree.](https://leetcode.com/media/original_images/307_RSQ_SegmentTree.png)\n\nThen the solution becomes:\n\n```\nusing namespace std;\n\nclass NumArray {\n    private:\n        vector<int> TREE;\n        int N;\n        void buildTree(vector<int> nums) {\n            for (int i = N, j = 0;  i < 2 * N; i++,  j++)\n                TREE[i] = nums[j];\n            for (int i = N - 1; i > 0; --i)\n                TREE[i] = TREE[i * 2] + TREE[i * 2 + 1];\n        }\n\n    public:\n        NumArray(vector<int> nums) {\n            if (nums.size() > 0) {\n                N = nums.size();\n                for (int i = 0; i < N * 2; i++) {\n                    TREE.push_back(0);\n                }\n                buildTree(nums);\n            }\n        }\n\n\n        void update(int pos, int val) {\n            pos += N;\n            TREE[pos] = val;\n            while (pos > 0) {\n                int left = pos;\n                int right = pos;\n                if (pos % 2 == 0) {\n                    right = pos + 1;\n                } else {\n                    left = pos - 1;\n                }\n                TREE[pos / 2] = TREE[left] + TREE[right];\n                pos /= 2;\n            }\n        }\n\n        int sumRange(int l, int r) {\n            l += N;\n            r += N; int sum = 0;\n            while (l <= r) {\n                if ((l % 2) == 1) {\n                    sum += TREE[l];\n                    l++;\n                }\n                if ((r % 2) == 0) {\n                    sum += TREE[r];\n                    r--;\n                }\n                l /= 2;\n                r /= 2;\n            }\n            return sum;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/RangeSumQuery-Mutable.md","raw":"---\ntitle: Range Sum Query - Mutable\ndate: 2017-04-22 11:00:35\ntags:\n    - Segment Tree\n    - Binary Indexed Tree\n---\n\n\n> Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.\n> The update(i, val) function modifies nums by updating the element at index i to val.\n>\n> Example:\n```\nGiven nums = [1, 3, 5]\n\nsumRange(0, 2) -> 9\nupdate(1, 2)\nsumRange(0, 2) -> 8\n```\n> Note:\n>\n> + The array is only modifiable by the update function.\n> + You may assume the number of calls to update and sumRange function is distributed evenly.\n\n<!--more-->\n\nThis is Leetcode No.307. At first time, I just think in this way: sumRange(0, 2) = sum(0~2) - sum(0~0).\n\nSo, the code can be like these:\n\n```\nusing namespace std;\n\nclass NumArray {\n    public:\n        vector<int> DP;\n        vector<int> NUMS;\n        NumArray(vector<int> nums) {\n            DP.clear();\n            NUMS.clear();\n\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                NUMS.push_back(nums[idx]);\n                if (idx == 0) {\n                    DP.push_back(nums[idx]);\n                } else {\n                    DP.push_back(nums[idx] + DP[idx - 1]);\n                }\n            }\n        }\n\n        void update(int idx, int val) {\n            int delta = val - NUMS[idx];\n            for (int i = idx; i < (int)DP.size(); i++) {\n                DP[i] = DP[i] + delta;\n            }\n            NUMS[idx] = val;\n        }\n\n        int sumRange(int idx, int idy) {\n            return DP[idy] - (idx > 0 ? DP[idx - 1] : 0);\n        }\n};\n```\n\nBut it gets TLE, because the update function will use O(n) time complex. So that we should to find out other solutions.\n\nYou will find two other ways:\n\n1. use blocks to maintain a small range of numbers;\n2. use segment tree data structure.\n\nThe first method is simple, what you should do is to merge a mall range numbers into a number. Then follow the steps above.\n\nSo, I want to show the second method - Segment Tree.\n\n![Figure 2. Illustration of Segment tree.](https://leetcode.com/media/original_images/307_RSQ_SegmentTree.png)\n\nThen the solution becomes:\n\n```\nusing namespace std;\n\nclass NumArray {\n    private:\n        vector<int> TREE;\n        int N;\n        void buildTree(vector<int> nums) {\n            for (int i = N, j = 0;  i < 2 * N; i++,  j++)\n                TREE[i] = nums[j];\n            for (int i = N - 1; i > 0; --i)\n                TREE[i] = TREE[i * 2] + TREE[i * 2 + 1];\n        }\n\n    public:\n        NumArray(vector<int> nums) {\n            if (nums.size() > 0) {\n                N = nums.size();\n                for (int i = 0; i < N * 2; i++) {\n                    TREE.push_back(0);\n                }\n                buildTree(nums);\n            }\n        }\n\n\n        void update(int pos, int val) {\n            pos += N;\n            TREE[pos] = val;\n            while (pos > 0) {\n                int left = pos;\n                int right = pos;\n                if (pos % 2 == 0) {\n                    right = pos + 1;\n                } else {\n                    left = pos - 1;\n                }\n                TREE[pos / 2] = TREE[left] + TREE[right];\n                pos /= 2;\n            }\n        }\n\n        int sumRange(int l, int r) {\n            l += N;\n            r += N; int sum = 0;\n            while (l <= r) {\n                if ((l % 2) == 1) {\n                    sum += TREE[l];\n                    l++;\n                }\n                if ((r % 2) == 0) {\n                    sum += TREE[r];\n                    r--;\n                }\n                l /= 2;\n                r /= 2;\n            }\n            return sum;\n        }\n};\n```\n\nIt gets AC.\n","slug":"RangeSumQuery-Mutable","published":1,"updated":"2017-04-22T14:36:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpz8005vx2f48v6ofhtn","content":"<blockquote>\n<p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.<br>The update(i, val) function modifies nums by updating the element at index i to val.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums = [1, 3, 5]</div><div class=\"line\"></div><div class=\"line\">sumRange(0, 2) -&gt; 9</div><div class=\"line\">update(1, 2)</div><div class=\"line\">sumRange(0, 2) -&gt; 8</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The array is only modifiable by the update function.</li>\n<li>You may assume the number of calls to update and sumRange function is distributed evenly.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.307. At first time, I just think in this way: sumRange(0, 2) = sum(0~2) - sum(0~0).</p>\n<p>So, the code can be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumArray &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; DP;</div><div class=\"line\">        vector&lt;int&gt; NUMS;</div><div class=\"line\">        NumArray(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            DP.clear();</div><div class=\"line\">            NUMS.clear();</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                NUMS.push_back(nums[idx]);</div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    DP.push_back(nums[idx]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    DP.push_back(nums[idx] + DP[idx - 1]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void update(int idx, int val) &#123;</div><div class=\"line\">            int delta = val - NUMS[idx];</div><div class=\"line\">            for (int i = idx; i &lt; (int)DP.size(); i++) &#123;</div><div class=\"line\">                DP[i] = DP[i] + delta;</div><div class=\"line\">            &#125;</div><div class=\"line\">            NUMS[idx] = val;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRange(int idx, int idy) &#123;</div><div class=\"line\">            return DP[idy] - (idx &gt; 0 ? DP[idx - 1] : 0);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE, because the update function will use O(n) time complex. So that we should to find out other solutions.</p>\n<p>You will find two other ways:</p>\n<ol>\n<li>use blocks to maintain a small range of numbers;</li>\n<li>use segment tree data structure.</li>\n</ol>\n<p>The first method is simple, what you should do is to merge a mall range numbers into a number. Then follow the steps above.</p>\n<p>So, I want to show the second method - Segment Tree.</p>\n<p><img src=\"https://leetcode.com/media/original_images/307_RSQ_SegmentTree.png\" alt=\"Figure 2. Illustration of Segment tree.\"></p>\n<p>Then the solution becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumArray &#123;</div><div class=\"line\">    private:</div><div class=\"line\">        vector&lt;int&gt; TREE;</div><div class=\"line\">        int N;</div><div class=\"line\">        void buildTree(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            for (int i = N, j = 0;  i &lt; 2 * N; i++,  j++)</div><div class=\"line\">                TREE[i] = nums[j];</div><div class=\"line\">            for (int i = N - 1; i &gt; 0; --i)</div><div class=\"line\">                TREE[i] = TREE[i * 2] + TREE[i * 2 + 1];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        NumArray(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (nums.size() &gt; 0) &#123;</div><div class=\"line\">                N = nums.size();</div><div class=\"line\">                for (int i = 0; i &lt; N * 2; i++) &#123;</div><div class=\"line\">                    TREE.push_back(0);</div><div class=\"line\">                &#125;</div><div class=\"line\">                buildTree(nums);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        void update(int pos, int val) &#123;</div><div class=\"line\">            pos += N;</div><div class=\"line\">            TREE[pos] = val;</div><div class=\"line\">            while (pos &gt; 0) &#123;</div><div class=\"line\">                int left = pos;</div><div class=\"line\">                int right = pos;</div><div class=\"line\">                if (pos % 2 == 0) &#123;</div><div class=\"line\">                    right = pos + 1;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    left = pos - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                TREE[pos / 2] = TREE[left] + TREE[right];</div><div class=\"line\">                pos /= 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRange(int l, int r) &#123;</div><div class=\"line\">            l += N;</div><div class=\"line\">            r += N; int sum = 0;</div><div class=\"line\">            while (l &lt;= r) &#123;</div><div class=\"line\">                if ((l % 2) == 1) &#123;</div><div class=\"line\">                    sum += TREE[l];</div><div class=\"line\">                    l++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if ((r % 2) == 0) &#123;</div><div class=\"line\">                    sum += TREE[r];</div><div class=\"line\">                    r--;</div><div class=\"line\">                &#125;</div><div class=\"line\">                l /= 2;</div><div class=\"line\">                r /= 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.<br>The update(i, val) function modifies nums by updating the element at index i to val.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given nums = [1, 3, 5]</div><div class=\"line\"></div><div class=\"line\">sumRange(0, 2) -&gt; 9</div><div class=\"line\">update(1, 2)</div><div class=\"line\">sumRange(0, 2) -&gt; 8</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The array is only modifiable by the update function.</li>\n<li>You may assume the number of calls to update and sumRange function is distributed evenly.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.307. At first time, I just think in this way: sumRange(0, 2) = sum(0~2) - sum(0~0).</p>\n<p>So, the code can be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumArray &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; DP;</div><div class=\"line\">        vector&lt;int&gt; NUMS;</div><div class=\"line\">        NumArray(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            DP.clear();</div><div class=\"line\">            NUMS.clear();</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                NUMS.push_back(nums[idx]);</div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    DP.push_back(nums[idx]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    DP.push_back(nums[idx] + DP[idx - 1]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void update(int idx, int val) &#123;</div><div class=\"line\">            int delta = val - NUMS[idx];</div><div class=\"line\">            for (int i = idx; i &lt; (int)DP.size(); i++) &#123;</div><div class=\"line\">                DP[i] = DP[i] + delta;</div><div class=\"line\">            &#125;</div><div class=\"line\">            NUMS[idx] = val;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRange(int idx, int idy) &#123;</div><div class=\"line\">            return DP[idy] - (idx &gt; 0 ? DP[idx - 1] : 0);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE, because the update function will use O(n) time complex. So that we should to find out other solutions.</p>\n<p>You will find two other ways:</p>\n<ol>\n<li>use blocks to maintain a small range of numbers;</li>\n<li>use segment tree data structure.</li>\n</ol>\n<p>The first method is simple, what you should do is to merge a mall range numbers into a number. Then follow the steps above.</p>\n<p>So, I want to show the second method - Segment Tree.</p>\n<p><img src=\"https://leetcode.com/media/original_images/307_RSQ_SegmentTree.png\" alt=\"Figure 2. Illustration of Segment tree.\"></p>\n<p>Then the solution becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumArray &#123;</div><div class=\"line\">    private:</div><div class=\"line\">        vector&lt;int&gt; TREE;</div><div class=\"line\">        int N;</div><div class=\"line\">        void buildTree(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            for (int i = N, j = 0;  i &lt; 2 * N; i++,  j++)</div><div class=\"line\">                TREE[i] = nums[j];</div><div class=\"line\">            for (int i = N - 1; i &gt; 0; --i)</div><div class=\"line\">                TREE[i] = TREE[i * 2] + TREE[i * 2 + 1];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        NumArray(vector&lt;int&gt; nums) &#123;</div><div class=\"line\">            if (nums.size() &gt; 0) &#123;</div><div class=\"line\">                N = nums.size();</div><div class=\"line\">                for (int i = 0; i &lt; N * 2; i++) &#123;</div><div class=\"line\">                    TREE.push_back(0);</div><div class=\"line\">                &#125;</div><div class=\"line\">                buildTree(nums);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        void update(int pos, int val) &#123;</div><div class=\"line\">            pos += N;</div><div class=\"line\">            TREE[pos] = val;</div><div class=\"line\">            while (pos &gt; 0) &#123;</div><div class=\"line\">                int left = pos;</div><div class=\"line\">                int right = pos;</div><div class=\"line\">                if (pos % 2 == 0) &#123;</div><div class=\"line\">                    right = pos + 1;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    left = pos - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                TREE[pos / 2] = TREE[left] + TREE[right];</div><div class=\"line\">                pos /= 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRange(int l, int r) &#123;</div><div class=\"line\">            l += N;</div><div class=\"line\">            r += N; int sum = 0;</div><div class=\"line\">            while (l &lt;= r) &#123;</div><div class=\"line\">                if ((l % 2) == 1) &#123;</div><div class=\"line\">                    sum += TREE[l];</div><div class=\"line\">                    l++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if ((r % 2) == 0) &#123;</div><div class=\"line\">                    sum += TREE[r];</div><div class=\"line\">                    r--;</div><div class=\"line\">                &#125;</div><div class=\"line\">                l /= 2;</div><div class=\"line\">                r /= 2;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Range Sum Query 2D - Immutable","date":"2017-04-12T14:56:50.000Z","_content":"\n\n> Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n>\n> Range Sum Query 2D\n> The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.\n>\n> Example:\n>```\nGiven matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -> 8\nsumRegion(1, 1, 2, 2) -> 11\nsumRegion(1, 2, 2, 4) -> 12\n```\n> Note:\n>\n> + You may assume that the matrix does not change.\n> + There are many calls to sumRegion function.\n> + You may assume that row1 ≤ row2 and col1 ≤ col2.\n\n<!--more-->\n\nThis is Leetcode No.304. At first I use a DP map to store the result for each pair of position.\n\n```\n#define PI pair<int, int>\n#define PPI pair<PI, PI>\n#define PPII pair<PPI, int>\n\nusing namespace std;\n\nclass NumMatrix {\n    public:\n        map<PPI, int> DP;\n        vector<vector<int> > MATRIX;\n\n        NumMatrix(vector<vector<int> > matrix) {\n            MATRIX = matrix;\n        }\n\n        int sumRegion(int row1, int col1, int row2, int col2) {\n            if (DP.find(PPI(PI(row1, col1), PI(row2, col2))) != DP.end()) {\n                return DP.find(PPI(PI(row1, col1), PI(row2, col2)))->second;\n            }\n\n            if (row1 == row2) {\n                int sum = 0;\n                for (int idx = col1; idx <= col2; idx++) {\n                    sum += MATRIX[row1][idx];\n                }\n                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));\n                return sum;\n            }\n\n            if (col1 == col2) {\n                int sum = 0;\n                for (int idx = row1; idx <= row2; idx++) {\n                    sum += MATRIX[idx][col1];\n                }\n                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));\n                return sum;\n            }\n\n            int sum = 0;\n            for (int idx = row1; idx < row2; idx++) {\n                sum += MATRIX[idx][col2];\n            }\n            for (int idx = col1; idx < col2; idx++) {\n                sum += MATRIX[row2][idx];\n            }\n            sum += MATRIX[row2][col2];\n\n            sum += sumRegion(row1, col1, row2 - 1, col2 - 1);\n\n            DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));\n\n            return sum;\n        }\n};\n```\n\nI mark each pair of position as a key. Then use the key to store all the result for the current value. But the solution bring a problem. If the start point is different every time. The DP map will always has to be different. So the DP map will be seldom used.\n\nSo, I change the solution. How about think that we just mark every sum so far.\n\n```\nSUM[row1 to row2][col1 to col2] = SUM[row2 to 0][col2 to 0] + SUM[row1 to 0][col1 to 0]\n                                - SUM[row2 to 0][col1 to 0] + SUM[row1 to 0][col2 to 0]\n```\n\nThen the solution is easy to write.\n\n```\nusing namespace std;\n\nclass NumMatrix {\n    public:\n        vector<vector<int> > DP;\n        NumMatrix(vector<vector<int> > &matrix) {\n            if (matrix.size() == 0) return;\n\n            DP = vector<vector<int> >(matrix.size() + 1, vector<int>(matrix[0].size() + 1, 0));\n            for (int i = 0; i < (int)matrix.size(); ++i) {\n                for (int j = 0; j < (int)matrix[0].size(); ++j) {\n                    DP[i + 1][j + 1] = matrix[i][j] + DP[i][j + 1] + DP[i + 1][j] -DP[i][j];\n                }\n            }\n        }\n\n        int sumRegion(int row1, int col1, int row2, int col2) {\n            return DP[row2 + 1][col2 + 1] - DP[row2 + 1][col1] -DP[row1][col2 + 1] +DP[row1][col1];\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/RangeSumQuery2D-Immutable.md","raw":"---\ntitle: Range Sum Query 2D - Immutable\ndate: 2017-04-12 22:56:50\ntags:\n    - Dynamic Programming\n---\n\n\n> Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n>\n> Range Sum Query 2D\n> The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.\n>\n> Example:\n>```\nGiven matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -> 8\nsumRegion(1, 1, 2, 2) -> 11\nsumRegion(1, 2, 2, 4) -> 12\n```\n> Note:\n>\n> + You may assume that the matrix does not change.\n> + There are many calls to sumRegion function.\n> + You may assume that row1 ≤ row2 and col1 ≤ col2.\n\n<!--more-->\n\nThis is Leetcode No.304. At first I use a DP map to store the result for each pair of position.\n\n```\n#define PI pair<int, int>\n#define PPI pair<PI, PI>\n#define PPII pair<PPI, int>\n\nusing namespace std;\n\nclass NumMatrix {\n    public:\n        map<PPI, int> DP;\n        vector<vector<int> > MATRIX;\n\n        NumMatrix(vector<vector<int> > matrix) {\n            MATRIX = matrix;\n        }\n\n        int sumRegion(int row1, int col1, int row2, int col2) {\n            if (DP.find(PPI(PI(row1, col1), PI(row2, col2))) != DP.end()) {\n                return DP.find(PPI(PI(row1, col1), PI(row2, col2)))->second;\n            }\n\n            if (row1 == row2) {\n                int sum = 0;\n                for (int idx = col1; idx <= col2; idx++) {\n                    sum += MATRIX[row1][idx];\n                }\n                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));\n                return sum;\n            }\n\n            if (col1 == col2) {\n                int sum = 0;\n                for (int idx = row1; idx <= row2; idx++) {\n                    sum += MATRIX[idx][col1];\n                }\n                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));\n                return sum;\n            }\n\n            int sum = 0;\n            for (int idx = row1; idx < row2; idx++) {\n                sum += MATRIX[idx][col2];\n            }\n            for (int idx = col1; idx < col2; idx++) {\n                sum += MATRIX[row2][idx];\n            }\n            sum += MATRIX[row2][col2];\n\n            sum += sumRegion(row1, col1, row2 - 1, col2 - 1);\n\n            DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));\n\n            return sum;\n        }\n};\n```\n\nI mark each pair of position as a key. Then use the key to store all the result for the current value. But the solution bring a problem. If the start point is different every time. The DP map will always has to be different. So the DP map will be seldom used.\n\nSo, I change the solution. How about think that we just mark every sum so far.\n\n```\nSUM[row1 to row2][col1 to col2] = SUM[row2 to 0][col2 to 0] + SUM[row1 to 0][col1 to 0]\n                                - SUM[row2 to 0][col1 to 0] + SUM[row1 to 0][col2 to 0]\n```\n\nThen the solution is easy to write.\n\n```\nusing namespace std;\n\nclass NumMatrix {\n    public:\n        vector<vector<int> > DP;\n        NumMatrix(vector<vector<int> > &matrix) {\n            if (matrix.size() == 0) return;\n\n            DP = vector<vector<int> >(matrix.size() + 1, vector<int>(matrix[0].size() + 1, 0));\n            for (int i = 0; i < (int)matrix.size(); ++i) {\n                for (int j = 0; j < (int)matrix[0].size(); ++j) {\n                    DP[i + 1][j + 1] = matrix[i][j] + DP[i][j + 1] + DP[i + 1][j] -DP[i][j];\n                }\n            }\n        }\n\n        int sumRegion(int row1, int col1, int row2, int col2) {\n            return DP[row2 + 1][col2 + 1] - DP[row2 + 1][col1] -DP[row1][col2 + 1] +DP[row1][col1];\n        }\n};\n```\n\nIt gets AC.\n","slug":"RangeSumQuery2D-Immutable","published":1,"updated":"2017-04-12T15:25:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpza005xx2f4y4bblu74","content":"<blockquote>\n<p>Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</p>\n<p>Range Sum Query 2D<br>The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given matrix = [</div><div class=\"line\">  [3, 0, 1, 4, 2],</div><div class=\"line\">  [5, 6, 3, 2, 1],</div><div class=\"line\">  [1, 2, 0, 1, 5],</div><div class=\"line\">  [4, 1, 0, 1, 7],</div><div class=\"line\">  [1, 0, 3, 0, 5]</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">sumRegion(2, 1, 4, 3) -&gt; 8</div><div class=\"line\">sumRegion(1, 1, 2, 2) -&gt; 11</div><div class=\"line\">sumRegion(1, 2, 2, 4) -&gt; 12</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>You may assume that the matrix does not change.</li>\n<li>There are many calls to sumRegion function.</li>\n<li>You may assume that row1 ≤ row2 and col1 ≤ col2.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.304. At first I use a DP map to store the result for each pair of position.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define PI pair&lt;int, int&gt;</div><div class=\"line\">#define PPI pair&lt;PI, PI&gt;</div><div class=\"line\">#define PPII pair&lt;PPI, int&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumMatrix &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;PPI, int&gt; DP;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; MATRIX;</div><div class=\"line\"></div><div class=\"line\">        NumMatrix(vector&lt;vector&lt;int&gt; &gt; matrix) &#123;</div><div class=\"line\">            MATRIX = matrix;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRegion(int row1, int col1, int row2, int col2) &#123;</div><div class=\"line\">            if (DP.find(PPI(PI(row1, col1), PI(row2, col2))) != DP.end()) &#123;</div><div class=\"line\">                return DP.find(PPI(PI(row1, col1), PI(row2, col2)))-&gt;second;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (row1 == row2) &#123;</div><div class=\"line\">                int sum = 0;</div><div class=\"line\">                for (int idx = col1; idx &lt;= col2; idx++) &#123;</div><div class=\"line\">                    sum += MATRIX[row1][idx];</div><div class=\"line\">                &#125;</div><div class=\"line\">                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));</div><div class=\"line\">                return sum;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (col1 == col2) &#123;</div><div class=\"line\">                int sum = 0;</div><div class=\"line\">                for (int idx = row1; idx &lt;= row2; idx++) &#123;</div><div class=\"line\">                    sum += MATRIX[idx][col1];</div><div class=\"line\">                &#125;</div><div class=\"line\">                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));</div><div class=\"line\">                return sum;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int idx = row1; idx &lt; row2; idx++) &#123;</div><div class=\"line\">                sum += MATRIX[idx][col2];</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = col1; idx &lt; col2; idx++) &#123;</div><div class=\"line\">                sum += MATRIX[row2][idx];</div><div class=\"line\">            &#125;</div><div class=\"line\">            sum += MATRIX[row2][col2];</div><div class=\"line\"></div><div class=\"line\">            sum += sumRegion(row1, col1, row2 - 1, col2 - 1);</div><div class=\"line\"></div><div class=\"line\">            DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));</div><div class=\"line\"></div><div class=\"line\">            return sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I mark each pair of position as a key. Then use the key to store all the result for the current value. But the solution bring a problem. If the start point is different every time. The DP map will always has to be different. So the DP map will be seldom used.</p>\n<p>So, I change the solution. How about think that we just mark every sum so far.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SUM[row1 to row2][col1 to col2] = SUM[row2 to 0][col2 to 0] + SUM[row1 to 0][col1 to 0]</div><div class=\"line\">                                - SUM[row2 to 0][col1 to 0] + SUM[row1 to 0][col2 to 0]</div></pre></td></tr></table></figure>\n<p>Then the solution is easy to write.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumMatrix &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; DP;</div><div class=\"line\">        NumMatrix(vector&lt;vector&lt;int&gt; &gt; &amp;matrix) &#123;</div><div class=\"line\">            if (matrix.size() == 0) return;</div><div class=\"line\"></div><div class=\"line\">            DP = vector&lt;vector&lt;int&gt; &gt;(matrix.size() + 1, vector&lt;int&gt;(matrix[0].size() + 1, 0));</div><div class=\"line\">            for (int i = 0; i &lt; (int)matrix.size(); ++i) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)matrix[0].size(); ++j) &#123;</div><div class=\"line\">                    DP[i + 1][j + 1] = matrix[i][j] + DP[i][j + 1] + DP[i + 1][j] -DP[i][j];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRegion(int row1, int col1, int row2, int col2) &#123;</div><div class=\"line\">            return DP[row2 + 1][col2 + 1] - DP[row2 + 1][col1] -DP[row1][col2 + 1] +DP[row1][col1];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).</p>\n<p>Range Sum Query 2D<br>The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given matrix = [</div><div class=\"line\">  [3, 0, 1, 4, 2],</div><div class=\"line\">  [5, 6, 3, 2, 1],</div><div class=\"line\">  [1, 2, 0, 1, 5],</div><div class=\"line\">  [4, 1, 0, 1, 7],</div><div class=\"line\">  [1, 0, 3, 0, 5]</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">sumRegion(2, 1, 4, 3) -&gt; 8</div><div class=\"line\">sumRegion(1, 1, 2, 2) -&gt; 11</div><div class=\"line\">sumRegion(1, 2, 2, 4) -&gt; 12</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>You may assume that the matrix does not change.</li>\n<li>There are many calls to sumRegion function.</li>\n<li>You may assume that row1 ≤ row2 and col1 ≤ col2.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.304. At first I use a DP map to store the result for each pair of position.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define PI pair&lt;int, int&gt;</div><div class=\"line\">#define PPI pair&lt;PI, PI&gt;</div><div class=\"line\">#define PPII pair&lt;PPI, int&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumMatrix &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        map&lt;PPI, int&gt; DP;</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; MATRIX;</div><div class=\"line\"></div><div class=\"line\">        NumMatrix(vector&lt;vector&lt;int&gt; &gt; matrix) &#123;</div><div class=\"line\">            MATRIX = matrix;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRegion(int row1, int col1, int row2, int col2) &#123;</div><div class=\"line\">            if (DP.find(PPI(PI(row1, col1), PI(row2, col2))) != DP.end()) &#123;</div><div class=\"line\">                return DP.find(PPI(PI(row1, col1), PI(row2, col2)))-&gt;second;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (row1 == row2) &#123;</div><div class=\"line\">                int sum = 0;</div><div class=\"line\">                for (int idx = col1; idx &lt;= col2; idx++) &#123;</div><div class=\"line\">                    sum += MATRIX[row1][idx];</div><div class=\"line\">                &#125;</div><div class=\"line\">                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));</div><div class=\"line\">                return sum;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (col1 == col2) &#123;</div><div class=\"line\">                int sum = 0;</div><div class=\"line\">                for (int idx = row1; idx &lt;= row2; idx++) &#123;</div><div class=\"line\">                    sum += MATRIX[idx][col1];</div><div class=\"line\">                &#125;</div><div class=\"line\">                DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));</div><div class=\"line\">                return sum;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int idx = row1; idx &lt; row2; idx++) &#123;</div><div class=\"line\">                sum += MATRIX[idx][col2];</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = col1; idx &lt; col2; idx++) &#123;</div><div class=\"line\">                sum += MATRIX[row2][idx];</div><div class=\"line\">            &#125;</div><div class=\"line\">            sum += MATRIX[row2][col2];</div><div class=\"line\"></div><div class=\"line\">            sum += sumRegion(row1, col1, row2 - 1, col2 - 1);</div><div class=\"line\"></div><div class=\"line\">            DP.insert(PPII(PPI(PI(row1, col1), PI(row2, col2)), sum));</div><div class=\"line\"></div><div class=\"line\">            return sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I mark each pair of position as a key. Then use the key to store all the result for the current value. But the solution bring a problem. If the start point is different every time. The DP map will always has to be different. So the DP map will be seldom used.</p>\n<p>So, I change the solution. How about think that we just mark every sum so far.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SUM[row1 to row2][col1 to col2] = SUM[row2 to 0][col2 to 0] + SUM[row1 to 0][col1 to 0]</div><div class=\"line\">                                - SUM[row2 to 0][col1 to 0] + SUM[row1 to 0][col2 to 0]</div></pre></td></tr></table></figure>\n<p>Then the solution is easy to write.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class NumMatrix &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;int&gt; &gt; DP;</div><div class=\"line\">        NumMatrix(vector&lt;vector&lt;int&gt; &gt; &amp;matrix) &#123;</div><div class=\"line\">            if (matrix.size() == 0) return;</div><div class=\"line\"></div><div class=\"line\">            DP = vector&lt;vector&lt;int&gt; &gt;(matrix.size() + 1, vector&lt;int&gt;(matrix[0].size() + 1, 0));</div><div class=\"line\">            for (int i = 0; i &lt; (int)matrix.size(); ++i) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; (int)matrix[0].size(); ++j) &#123;</div><div class=\"line\">                    DP[i + 1][j + 1] = matrix[i][j] + DP[i][j + 1] + DP[i + 1][j] -DP[i][j];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int sumRegion(int row1, int col1, int row2, int col2) &#123;</div><div class=\"line\">            return DP[row2 + 1][col2 + 1] - DP[row2 + 1][col1] -DP[row1][col2 + 1] +DP[row1][col1];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Ransom Note","date":"2017-01-12T15:45:36.000Z","_content":"\n> Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\n>\n> Each letter in the magazine string can only be used once in your ransom note.\n>\n> Note:\n> You may assume that both strings contain only lowercase letters.\n>\n> canConstruct(\"a\", \"b\") -> false\n> canConstruct(\"aa\", \"ab\") -> false\n> canConstruct(\"aa\", \"aab\") -> true\n\n<!--more-->\n\nThis is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.\n\n\n```\nclass Solution {\n    public:\n        bool canConstruct(string ransomNote, string magazine) {\n            int chars[512] = {0};\n            for (int i = 0; i < (int)magazine.size(); i++) {\n                chars[(int)magazine[i]]++;\n            }\n            for (int i = 0; i < (int)ransomNote.size(); i++) {\n                chars[(int)ransomNote[i]]--;\n                if (chars[(int)ransomNote[i]] < 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/RansomNote.md","raw":"---\ntitle: Ransom Note\ndate: 2017-01-12 23:45:36\ntags:\n    - String\n---\n\n> Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\n>\n> Each letter in the magazine string can only be used once in your ransom note.\n>\n> Note:\n> You may assume that both strings contain only lowercase letters.\n>\n> canConstruct(\"a\", \"b\") -> false\n> canConstruct(\"aa\", \"ab\") -> false\n> canConstruct(\"aa\", \"aab\") -> true\n\n<!--more-->\n\nThis is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.\n\n\n```\nclass Solution {\n    public:\n        bool canConstruct(string ransomNote, string magazine) {\n            int chars[512] = {0};\n            for (int i = 0; i < (int)magazine.size(); i++) {\n                chars[(int)magazine[i]]++;\n            }\n            for (int i = 0; i < (int)ransomNote.size(); i++) {\n                chars[(int)ransomNote[i]]--;\n                if (chars[(int)ransomNote[i]] < 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"RansomNote","published":1,"updated":"2017-01-12T15:58:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzc0060x2f4y7hprrw9","content":"<blockquote>\n<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>\n<p>Each letter in the magazine string can only be used once in your ransom note.</p>\n<p>Note:<br>You may assume that both strings contain only lowercase letters.</p>\n<p>canConstruct(“a”, “b”) -&gt; false<br>canConstruct(“aa”, “ab”) -&gt; false<br>canConstruct(“aa”, “aab”) -&gt; true</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canConstruct(string ransomNote, string magazine) &#123;</div><div class=\"line\">            int chars[512] = &#123;0&#125;;</div><div class=\"line\">            for (int i = 0; i &lt; (int)magazine.size(); i++) &#123;</div><div class=\"line\">                chars[(int)magazine[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)ransomNote.size(); i++) &#123;</div><div class=\"line\">                chars[(int)ransomNote[i]]--;</div><div class=\"line\">                if (chars[(int)ransomNote[i]] &lt; 0) &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>\n<p>Each letter in the magazine string can only be used once in your ransom note.</p>\n<p>Note:<br>You may assume that both strings contain only lowercase letters.</p>\n<p>canConstruct(“a”, “b”) -&gt; false<br>canConstruct(“aa”, “ab”) -&gt; false<br>canConstruct(“aa”, “aab”) -&gt; true</p>\n</blockquote>","more":"<p>This is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canConstruct(string ransomNote, string magazine) &#123;</div><div class=\"line\">            int chars[512] = &#123;0&#125;;</div><div class=\"line\">            for (int i = 0; i &lt; (int)magazine.size(); i++) &#123;</div><div class=\"line\">                chars[(int)magazine[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)ransomNote.size(); i++) &#123;</div><div class=\"line\">                chars[(int)ransomNote[i]]--;</div><div class=\"line\">                if (chars[(int)ransomNote[i]] &lt; 0) &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Relative Ranks","date":"2017-02-05T06:23:59.000Z","_content":"\n\n> Given scores of N athletes, find their relative ranks and the men with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\n>\n> Example 1:\n>\n> + Input: [5, 4, 3, 2, 1]\n> + Output: [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\n> + Explanation:\n>     + The first three athletes got the top three highest scores, so they got \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\n>     + For the left two athletes, you just need to output their relative ranks according to their scores.\n>\n> Note:\n> + N is a positive integer and won't exceed 10,000.\n> + All the scores of athletes are guaranteed to be unique.\n\n<!--more-->\n\nThis is Leetcode 506, and it is one of this week's weekly contest.\n\nEasy one.\n\n```\nbool msort( const int &v1, const int &v2) {\n    return v1 > v2;\n}\nclass Solution {\n    public:\n        vector<string> findRelativeRanks(vector<int>& nums) {\n            vector<string> res;\n            vector<int> origin(nums);\n            map<int, string> rankmap;\n\n            string ranks[3] = {\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"};\n\n            sort(nums.begin(), nums.end(), msort);\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (i < 3) {\n                    rankmap.insert(pair<int, string>(nums[i], ranks[i]));\n                } else {\n                    ostringstream stm;\n                    stm << i + 1;\n                    rankmap.insert(pair<int, string>(nums[i], stm.str()));\n                }\n            }\n\n            for (int i = 0; i < (int)origin.size(); i++) {\n                res.push_back(rankmap.find(origin[i])->second);\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/RelativeRanks.md","raw":"---\ntitle: Relative Ranks\ndate: 2017-02-05 14:23:59\ntags:\n    - Array\n---\n\n\n> Given scores of N athletes, find their relative ranks and the men with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\n>\n> Example 1:\n>\n> + Input: [5, 4, 3, 2, 1]\n> + Output: [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\n> + Explanation:\n>     + The first three athletes got the top three highest scores, so they got \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".\n>     + For the left two athletes, you just need to output their relative ranks according to their scores.\n>\n> Note:\n> + N is a positive integer and won't exceed 10,000.\n> + All the scores of athletes are guaranteed to be unique.\n\n<!--more-->\n\nThis is Leetcode 506, and it is one of this week's weekly contest.\n\nEasy one.\n\n```\nbool msort( const int &v1, const int &v2) {\n    return v1 > v2;\n}\nclass Solution {\n    public:\n        vector<string> findRelativeRanks(vector<int>& nums) {\n            vector<string> res;\n            vector<int> origin(nums);\n            map<int, string> rankmap;\n\n            string ranks[3] = {\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"};\n\n            sort(nums.begin(), nums.end(), msort);\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (i < 3) {\n                    rankmap.insert(pair<int, string>(nums[i], ranks[i]));\n                } else {\n                    ostringstream stm;\n                    stm << i + 1;\n                    rankmap.insert(pair<int, string>(nums[i], stm.str()));\n                }\n            }\n\n            for (int i = 0; i < (int)origin.size(); i++) {\n                res.push_back(rankmap.find(origin[i])->second);\n            }\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"RelativeRanks","published":1,"updated":"2017-02-05T06:48:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzd0062x2f4jnip9x01","content":"<blockquote>\n<p>Given scores of N athletes, find their relative ranks and the men with the top three highest scores, who will be awarded medals: “Gold Medal”, “Silver Medal” and “Bronze Medal”.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [5, 4, 3, 2, 1]</li>\n<li>Output: [“Gold Medal”, “Silver Medal”, “Bronze Medal”, “4”, “5”]</li>\n<li>Explanation:<ul>\n<li>The first three athletes got the top three highest scores, so they got “Gold Medal”, “Silver Medal” and “Bronze Medal”.</li>\n<li>For the left two athletes, you just need to output their relative ranks according to their scores.</li>\n</ul>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>N is a positive integer and won’t exceed 10,000.</li>\n<li>All the scores of athletes are guaranteed to be unique.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 506, and it is one of this week’s weekly contest.</p>\n<p>Easy one.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool msort( const int &amp;v1, const int &amp;v2) &#123;</div><div class=\"line\">    return v1 &gt; v2;</div><div class=\"line\">&#125;</div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;string&gt; findRelativeRanks(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;string&gt; res;</div><div class=\"line\">            vector&lt;int&gt; origin(nums);</div><div class=\"line\">            map&lt;int, string&gt; rankmap;</div><div class=\"line\"></div><div class=\"line\">            string ranks[3] = &#123;&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;&#125;;</div><div class=\"line\"></div><div class=\"line\">            sort(nums.begin(), nums.end(), msort);</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (i &lt; 3) &#123;</div><div class=\"line\">                    rankmap.insert(pair&lt;int, string&gt;(nums[i], ranks[i]));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    ostringstream stm;</div><div class=\"line\">                    stm &lt;&lt; i + 1;</div><div class=\"line\">                    rankmap.insert(pair&lt;int, string&gt;(nums[i], stm.str()));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)origin.size(); i++) &#123;</div><div class=\"line\">                res.push_back(rankmap.find(origin[i])-&gt;second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given scores of N athletes, find their relative ranks and the men with the top three highest scores, who will be awarded medals: “Gold Medal”, “Silver Medal” and “Bronze Medal”.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [5, 4, 3, 2, 1]</li>\n<li>Output: [“Gold Medal”, “Silver Medal”, “Bronze Medal”, “4”, “5”]</li>\n<li>Explanation:<ul>\n<li>The first three athletes got the top three highest scores, so they got “Gold Medal”, “Silver Medal” and “Bronze Medal”.</li>\n<li>For the left two athletes, you just need to output their relative ranks according to their scores.</li>\n</ul>\n</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>N is a positive integer and won’t exceed 10,000.</li>\n<li>All the scores of athletes are guaranteed to be unique.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 506, and it is one of this week’s weekly contest.</p>\n<p>Easy one.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool msort( const int &amp;v1, const int &amp;v2) &#123;</div><div class=\"line\">    return v1 &gt; v2;</div><div class=\"line\">&#125;</div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;string&gt; findRelativeRanks(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;string&gt; res;</div><div class=\"line\">            vector&lt;int&gt; origin(nums);</div><div class=\"line\">            map&lt;int, string&gt; rankmap;</div><div class=\"line\"></div><div class=\"line\">            string ranks[3] = &#123;&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;&#125;;</div><div class=\"line\"></div><div class=\"line\">            sort(nums.begin(), nums.end(), msort);</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (i &lt; 3) &#123;</div><div class=\"line\">                    rankmap.insert(pair&lt;int, string&gt;(nums[i], ranks[i]));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    ostringstream stm;</div><div class=\"line\">                    stm &lt;&lt; i + 1;</div><div class=\"line\">                    rankmap.insert(pair&lt;int, string&gt;(nums[i], stm.str()));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)origin.size(); i++) &#123;</div><div class=\"line\">                res.push_back(rankmap.find(origin[i])-&gt;second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Remove K Digits","date":"2017-04-25T05:33:37.000Z","_content":"\n> Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\n> \n> Note:\n> The length of num is less than 10002 and will be ≥ k.\n> The given num does not contain any leading zero.\n> \n> Example 1:\n>```\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n```\n> Example 2:\n>```\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n```\n> Example 3:\n>```\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n```\n\n<!--more-->\n\nThis is Leetcode No.402. I think it is a Math problem. But you can think in a DP way.\n\nFor example, what will you do when you should remove one number from '13412' to make the result least.\n\nYou will remove '4', why do you choose '4'? Because you should remove the first largest number to make sure that the result least. Then you can find the solution. Remove K largest number from the number.\n\nFor instance, if you should remove two numbers from the '13412', the first number you remove is '4', then the second is '3' - '112'.\n\nSo, the solution comes:\n\n```\nusing namespace std;\n\nclass Solution {\n    private:\n        std::vector<char> str2vector(string num) {\n            std::vector<char> res;\n            for (int i = 0; i < (int)num.length(); i++) {\n                res.push_back(num[i]);\n            }\n            return res;\n        }\n\n        string vector2str(vector<char> nums) {\n            int startIdx = 0;\n            for (int i = 0; i < (int)nums.size() && nums[i] == '0'; i++) {\n                startIdx++;\n            }\n            stringstream res;\n            for (int i = startIdx; i < (int)nums.size(); i++) {\n                res << nums[i];\n            }\n            return res.str() == \"\" ? \"0\" : res.str();\n        }\n\n    public:\n        string removeKdigits(string num, int k) {\n            if (k == 0) {\n                return num;\n            }\n            std::vector<char> nums;\n            nums = str2vector(num);\n\n            do  {\n                int i = 0;\n                for (; i < (int)nums.size() - 1; i++) {\n                    if (nums[i] > nums[i + 1]) {\n                        break;\n                    }\n                }\n                nums.erase(nums.begin() + i);\n                k--;\n            } while (k > 0);\n            return nums.size() == 0 ? \"0\" : vector2str(nums);\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/RemoveKDigits.md","raw":"---\ntitle: Remove K Digits\ndate: 2017-04-25 13:33:37\ntags:\n    - Stack\n    - Greedy\n---\n\n> Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\n> \n> Note:\n> The length of num is less than 10002 and will be ≥ k.\n> The given num does not contain any leading zero.\n> \n> Example 1:\n>```\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n```\n> Example 2:\n>```\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n```\n> Example 3:\n>```\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n```\n\n<!--more-->\n\nThis is Leetcode No.402. I think it is a Math problem. But you can think in a DP way.\n\nFor example, what will you do when you should remove one number from '13412' to make the result least.\n\nYou will remove '4', why do you choose '4'? Because you should remove the first largest number to make sure that the result least. Then you can find the solution. Remove K largest number from the number.\n\nFor instance, if you should remove two numbers from the '13412', the first number you remove is '4', then the second is '3' - '112'.\n\nSo, the solution comes:\n\n```\nusing namespace std;\n\nclass Solution {\n    private:\n        std::vector<char> str2vector(string num) {\n            std::vector<char> res;\n            for (int i = 0; i < (int)num.length(); i++) {\n                res.push_back(num[i]);\n            }\n            return res;\n        }\n\n        string vector2str(vector<char> nums) {\n            int startIdx = 0;\n            for (int i = 0; i < (int)nums.size() && nums[i] == '0'; i++) {\n                startIdx++;\n            }\n            stringstream res;\n            for (int i = startIdx; i < (int)nums.size(); i++) {\n                res << nums[i];\n            }\n            return res.str() == \"\" ? \"0\" : res.str();\n        }\n\n    public:\n        string removeKdigits(string num, int k) {\n            if (k == 0) {\n                return num;\n            }\n            std::vector<char> nums;\n            nums = str2vector(num);\n\n            do  {\n                int i = 0;\n                for (; i < (int)nums.size() - 1; i++) {\n                    if (nums[i] > nums[i + 1]) {\n                        break;\n                    }\n                }\n                nums.erase(nums.begin() + i);\n                k--;\n            } while (k > 0);\n            return nums.size() == 0 ? \"0\" : vector2str(nums);\n        }\n};\n```\n\nIt gets AC.\n","slug":"RemoveKDigits","published":1,"updated":"2017-04-25T15:24:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzf0065x2f4vfjln2fn","content":"<blockquote>\n<p>Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.</p>\n<p>Note:<br>The length of num is less than 10002 and will be ≥ k.<br>The given num does not contain any leading zero.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: num = &quot;1432219&quot;, k = 3</div><div class=\"line\">Output: &quot;1219&quot;</div><div class=\"line\">Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: num = &quot;10200&quot;, k = 1</div><div class=\"line\">Output: &quot;200&quot;</div><div class=\"line\">Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: num = &quot;10&quot;, k = 2</div><div class=\"line\">Output: &quot;0&quot;</div><div class=\"line\">Explanation: Remove all the digits from the number and it is left with nothing which is 0.</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.402. I think it is a Math problem. But you can think in a DP way.</p>\n<p>For example, what will you do when you should remove one number from ‘13412’ to make the result least.</p>\n<p>You will remove ‘4’, why do you choose ‘4’? Because you should remove the first largest number to make sure that the result least. Then you can find the solution. Remove K largest number from the number.</p>\n<p>For instance, if you should remove two numbers from the ‘13412’, the first number you remove is ‘4’, then the second is ‘3’ - ‘112’.</p>\n<p>So, the solution comes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    private:</div><div class=\"line\">        std::vector&lt;char&gt; str2vector(string num) &#123;</div><div class=\"line\">            std::vector&lt;char&gt; res;</div><div class=\"line\">            for (int i = 0; i &lt; (int)num.length(); i++) &#123;</div><div class=\"line\">                res.push_back(num[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string vector2str(vector&lt;char&gt; nums) &#123;</div><div class=\"line\">            int startIdx = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size() &amp;&amp; nums[i] == &apos;0&apos;; i++) &#123;</div><div class=\"line\">                startIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            stringstream res;</div><div class=\"line\">            for (int i = startIdx; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res &lt;&lt; nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res.str() == &quot;&quot; ? &quot;0&quot; : res.str();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        string removeKdigits(string num, int k) &#123;</div><div class=\"line\">            if (k == 0) &#123;</div><div class=\"line\">                return num;</div><div class=\"line\">            &#125;</div><div class=\"line\">            std::vector&lt;char&gt; nums;</div><div class=\"line\">            nums = str2vector(num);</div><div class=\"line\"></div><div class=\"line\">            do  &#123;</div><div class=\"line\">                int i = 0;</div><div class=\"line\">                for (; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">                    if (nums[i] &gt; nums[i + 1]) &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                nums.erase(nums.begin() + i);</div><div class=\"line\">                k--;</div><div class=\"line\">            &#125; while (k &gt; 0);</div><div class=\"line\">            return nums.size() == 0 ? &quot;0&quot; : vector2str(nums);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.</p>\n<p>Note:<br>The length of num is less than 10002 and will be ≥ k.<br>The given num does not contain any leading zero.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: num = &quot;1432219&quot;, k = 3</div><div class=\"line\">Output: &quot;1219&quot;</div><div class=\"line\">Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: num = &quot;10200&quot;, k = 1</div><div class=\"line\">Output: &quot;200&quot;</div><div class=\"line\">Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.</div></pre></td></tr></table></figure></p>\n<p>Example 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: num = &quot;10&quot;, k = 2</div><div class=\"line\">Output: &quot;0&quot;</div><div class=\"line\">Explanation: Remove all the digits from the number and it is left with nothing which is 0.</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.402. I think it is a Math problem. But you can think in a DP way.</p>\n<p>For example, what will you do when you should remove one number from ‘13412’ to make the result least.</p>\n<p>You will remove ‘4’, why do you choose ‘4’? Because you should remove the first largest number to make sure that the result least. Then you can find the solution. Remove K largest number from the number.</p>\n<p>For instance, if you should remove two numbers from the ‘13412’, the first number you remove is ‘4’, then the second is ‘3’ - ‘112’.</p>\n<p>So, the solution comes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    private:</div><div class=\"line\">        std::vector&lt;char&gt; str2vector(string num) &#123;</div><div class=\"line\">            std::vector&lt;char&gt; res;</div><div class=\"line\">            for (int i = 0; i &lt; (int)num.length(); i++) &#123;</div><div class=\"line\">                res.push_back(num[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        string vector2str(vector&lt;char&gt; nums) &#123;</div><div class=\"line\">            int startIdx = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size() &amp;&amp; nums[i] == &apos;0&apos;; i++) &#123;</div><div class=\"line\">                startIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            stringstream res;</div><div class=\"line\">            for (int i = startIdx; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res &lt;&lt; nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res.str() == &quot;&quot; ? &quot;0&quot; : res.str();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        string removeKdigits(string num, int k) &#123;</div><div class=\"line\">            if (k == 0) &#123;</div><div class=\"line\">                return num;</div><div class=\"line\">            &#125;</div><div class=\"line\">            std::vector&lt;char&gt; nums;</div><div class=\"line\">            nums = str2vector(num);</div><div class=\"line\"></div><div class=\"line\">            do  &#123;</div><div class=\"line\">                int i = 0;</div><div class=\"line\">                for (; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">                    if (nums[i] &gt; nums[i + 1]) &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                nums.erase(nums.begin() + i);</div><div class=\"line\">                k--;</div><div class=\"line\">            &#125; while (k &gt; 0);</div><div class=\"line\">            return nums.size() == 0 ? &quot;0&quot; : vector2str(nums);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Restore IP Addresses","date":"2017-04-27T15:07:40.000Z","_content":"\n> Given a string containing only digits, restore it by returning all possible valid IP address combinations.\n>\n> For example:\n>```\nGiven \"25525511135\",\nreturn [\"255.255.11.135\", \"255.255.111.35\"]. (Order does not matter)\n```\n\n<!--more-->\n\nThis is Leetcode No.93. It is not a hard problem. What you should take care about is that you should pay attention to this case: `0000` and `0122034`.\n\nSo, the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void  buildIP(vector<string> &res, string &s, int start, int num, string cur) {\n            int numDigits = s.size() - start;\n            if(numDigits < num || numDigits > 3*num) return;\n            if(num == 1) {\n                if((numDigits == 1) || ( s[start]!='0' && atoi(s.substr(start).c_str()) <= 255))\n                    res.push_back(cur + s.substr(start));\n            } else {\n                buildIP(res, s, start+1, num-1, cur+ s.substr(start,1) + \".\");\n                if(s[start] != '0') {\n                    buildIP(res, s, start+2, num-1, cur+ s.substr(start,2) + \".\");\n                    if(atoi(s.substr(start,3).c_str()) <= 255)\n                        buildIP(res, s, start+3, num-1, cur+ s.substr(start,3) + \".\");\n                }\n            }\n        }\n\n        vector<string> restoreIpAddresses(string s) {\n            vector<string> res;\n            buildIP(res, s, 0, 4, \"\");\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/RestoreIPAddresses.md","raw":"---\ntitle: Restore IP Addresses\ndate: 2017-04-27 23:07:40\ntags:\n    - String\n    - Backtracking\n---\n\n> Given a string containing only digits, restore it by returning all possible valid IP address combinations.\n>\n> For example:\n>```\nGiven \"25525511135\",\nreturn [\"255.255.11.135\", \"255.255.111.35\"]. (Order does not matter)\n```\n\n<!--more-->\n\nThis is Leetcode No.93. It is not a hard problem. What you should take care about is that you should pay attention to this case: `0000` and `0122034`.\n\nSo, the code becomes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void  buildIP(vector<string> &res, string &s, int start, int num, string cur) {\n            int numDigits = s.size() - start;\n            if(numDigits < num || numDigits > 3*num) return;\n            if(num == 1) {\n                if((numDigits == 1) || ( s[start]!='0' && atoi(s.substr(start).c_str()) <= 255))\n                    res.push_back(cur + s.substr(start));\n            } else {\n                buildIP(res, s, start+1, num-1, cur+ s.substr(start,1) + \".\");\n                if(s[start] != '0') {\n                    buildIP(res, s, start+2, num-1, cur+ s.substr(start,2) + \".\");\n                    if(atoi(s.substr(start,3).c_str()) <= 255)\n                        buildIP(res, s, start+3, num-1, cur+ s.substr(start,3) + \".\");\n                }\n            }\n        }\n\n        vector<string> restoreIpAddresses(string s) {\n            vector<string> res;\n            buildIP(res, s, 0, 4, \"\");\n            return res;\n        }\n};\n```\n\nIt gets AC.\n","slug":"RestoreIPAddresses","published":1,"updated":"2017-04-27T15:35:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzg0067x2f4zek2g2kv","content":"<blockquote>\n<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given &quot;25525511135&quot;,</div><div class=\"line\">return [&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]. (Order does not matter)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.93. It is not a hard problem. What you should take care about is that you should pay attention to this case: <code>0000</code> and <code>0122034</code>.</p>\n<p>So, the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void  buildIP(vector&lt;string&gt; &amp;res, string &amp;s, int start, int num, string cur) &#123;</div><div class=\"line\">            int numDigits = s.size() - start;</div><div class=\"line\">            if(numDigits &lt; num || numDigits &gt; 3*num) return;</div><div class=\"line\">            if(num == 1) &#123;</div><div class=\"line\">                if((numDigits == 1) || ( s[start]!=&apos;0&apos; &amp;&amp; atoi(s.substr(start).c_str()) &lt;= 255))</div><div class=\"line\">                    res.push_back(cur + s.substr(start));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                buildIP(res, s, start+1, num-1, cur+ s.substr(start,1) + &quot;.&quot;);</div><div class=\"line\">                if(s[start] != &apos;0&apos;) &#123;</div><div class=\"line\">                    buildIP(res, s, start+2, num-1, cur+ s.substr(start,2) + &quot;.&quot;);</div><div class=\"line\">                    if(atoi(s.substr(start,3).c_str()) &lt;= 255)</div><div class=\"line\">                        buildIP(res, s, start+3, num-1, cur+ s.substr(start,3) + &quot;.&quot;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;string&gt; restoreIpAddresses(string s) &#123;</div><div class=\"line\">            vector&lt;string&gt; res;</div><div class=\"line\">            buildIP(res, s, 0, 4, &quot;&quot;);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>\n<p>For example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given &quot;25525511135&quot;,</div><div class=\"line\">return [&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]. (Order does not matter)</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.93. It is not a hard problem. What you should take care about is that you should pay attention to this case: <code>0000</code> and <code>0122034</code>.</p>\n<p>So, the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void  buildIP(vector&lt;string&gt; &amp;res, string &amp;s, int start, int num, string cur) &#123;</div><div class=\"line\">            int numDigits = s.size() - start;</div><div class=\"line\">            if(numDigits &lt; num || numDigits &gt; 3*num) return;</div><div class=\"line\">            if(num == 1) &#123;</div><div class=\"line\">                if((numDigits == 1) || ( s[start]!=&apos;0&apos; &amp;&amp; atoi(s.substr(start).c_str()) &lt;= 255))</div><div class=\"line\">                    res.push_back(cur + s.substr(start));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                buildIP(res, s, start+1, num-1, cur+ s.substr(start,1) + &quot;.&quot;);</div><div class=\"line\">                if(s[start] != &apos;0&apos;) &#123;</div><div class=\"line\">                    buildIP(res, s, start+2, num-1, cur+ s.substr(start,2) + &quot;.&quot;);</div><div class=\"line\">                    if(atoi(s.substr(start,3).c_str()) &lt;= 255)</div><div class=\"line\">                        buildIP(res, s, start+3, num-1, cur+ s.substr(start,3) + &quot;.&quot;);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;string&gt; restoreIpAddresses(string s) &#123;</div><div class=\"line\">            vector&lt;string&gt; res;</div><div class=\"line\">            buildIP(res, s, 0, 4, &quot;&quot;);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Reverse String II","date":"2017-03-16T06:24:59.000Z","_content":"\n> Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.\n>\n> Example:\n>```\nInput: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"\n```\n> Restrictions:\n>\n> + The string consists of lower English letters only.\n> + Length of the given string and k will in the range [1, 10000]\n\n<!--more-->\n\nThis is Leetcode No.541, It is a problem with easy tag which means this problem can be solved in hundreds ways.\n\nFirst I think about use a stack to store the chars. But it will use O(k) extra space.\n\nSo, I use two marks to mark the start and end of the reversed string.\n\nHere comes the answer:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        string reverseStr(string str, int k) {\n            stack<char> chars;\n            int idx = 0;\n            while (idx < (int)str.length()) {\n                int start = idx, end = idx + k - 1;\n                if (end >= (int)str.length()) {\n                    end = str.length() - 1;\n                }\n\n                idx = end + k + k;\n                while (start < end) {\n                    char tmp = str[end];\n                    str[end] = str[start];\n                    str[start] = tmp;\n\n                    start++;\n                    end--;\n                }\n\n            }\n\n            return str;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/ReverseStringII.md","raw":"---\ntitle: Reverse String II\ndate: 2017-03-16 14:24:59\ntags:\n    - String\n---\n\n> Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.\n>\n> Example:\n>```\nInput: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"\n```\n> Restrictions:\n>\n> + The string consists of lower English letters only.\n> + Length of the given string and k will in the range [1, 10000]\n\n<!--more-->\n\nThis is Leetcode No.541, It is a problem with easy tag which means this problem can be solved in hundreds ways.\n\nFirst I think about use a stack to store the chars. But it will use O(k) extra space.\n\nSo, I use two marks to mark the start and end of the reversed string.\n\nHere comes the answer:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        string reverseStr(string str, int k) {\n            stack<char> chars;\n            int idx = 0;\n            while (idx < (int)str.length()) {\n                int start = idx, end = idx + k - 1;\n                if (end >= (int)str.length()) {\n                    end = str.length() - 1;\n                }\n\n                idx = end + k + k;\n                while (start < end) {\n                    char tmp = str[end];\n                    str[end] = str[start];\n                    str[start] = tmp;\n\n                    start++;\n                    end--;\n                }\n\n            }\n\n            return str;\n        }\n};\n```\n\nIt gets AC.\n","slug":"ReverseStringII","published":1,"updated":"2017-03-16T07:55:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzh006ax2f41ilj16vf","content":"<blockquote>\n<p>Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: s = &quot;abcdefg&quot;, k = 2</div><div class=\"line\">Output: &quot;bacdfeg&quot;</div></pre></td></tr></table></figure></p>\n<p>Restrictions:</p>\n<ul>\n<li>The string consists of lower English letters only.</li>\n<li>Length of the given string and k will in the range [1, 10000]</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.541, It is a problem with easy tag which means this problem can be solved in hundreds ways.</p>\n<p>First I think about use a stack to store the chars. But it will use O(k) extra space.</p>\n<p>So, I use two marks to mark the start and end of the reversed string.</p>\n<p>Here comes the answer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string reverseStr(string str, int k) &#123;</div><div class=\"line\">            stack&lt;char&gt; chars;</div><div class=\"line\">            int idx = 0;</div><div class=\"line\">            while (idx &lt; (int)str.length()) &#123;</div><div class=\"line\">                int start = idx, end = idx + k - 1;</div><div class=\"line\">                if (end &gt;= (int)str.length()) &#123;</div><div class=\"line\">                    end = str.length() - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                idx = end + k + k;</div><div class=\"line\">                while (start &lt; end) &#123;</div><div class=\"line\">                    char tmp = str[end];</div><div class=\"line\">                    str[end] = str[start];</div><div class=\"line\">                    str[start] = tmp;</div><div class=\"line\"></div><div class=\"line\">                    start++;</div><div class=\"line\">                    end--;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return str;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: s = &quot;abcdefg&quot;, k = 2</div><div class=\"line\">Output: &quot;bacdfeg&quot;</div></pre></td></tr></table></figure></p>\n<p>Restrictions:</p>\n<ul>\n<li>The string consists of lower English letters only.</li>\n<li>Length of the given string and k will in the range [1, 10000]</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.541, It is a problem with easy tag which means this problem can be solved in hundreds ways.</p>\n<p>First I think about use a stack to store the chars. But it will use O(k) extra space.</p>\n<p>So, I use two marks to mark the start and end of the reversed string.</p>\n<p>Here comes the answer:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string reverseStr(string str, int k) &#123;</div><div class=\"line\">            stack&lt;char&gt; chars;</div><div class=\"line\">            int idx = 0;</div><div class=\"line\">            while (idx &lt; (int)str.length()) &#123;</div><div class=\"line\">                int start = idx, end = idx + k - 1;</div><div class=\"line\">                if (end &gt;= (int)str.length()) &#123;</div><div class=\"line\">                    end = str.length() - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                idx = end + k + k;</div><div class=\"line\">                while (start &lt; end) &#123;</div><div class=\"line\">                    char tmp = str[end];</div><div class=\"line\">                    str[end] = str[start];</div><div class=\"line\">                    str[start] = tmp;</div><div class=\"line\"></div><div class=\"line\">                    start++;</div><div class=\"line\">                    end--;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return str;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Search for a Range","date":"2017-04-26T14:30:17.000Z","_content":"\n> Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.\n>\n> Your algorithm's runtime complexity must be in the order of O(log n).\n>\n> If the target is not found in the array, return [-1, -1].\n>\n> For example,\n>```\nGiven [5, 7, 7, 8, 8, 10] and target value 8,\nreturn [3, 4].\n```\n\n<!--more-->\n\nIt is Leetcode No.34, it is a old problem and I think it is just testing your basic programming skills. So you have no algorithm skills.\n\nThe code is easy to write and easy to understand.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> searchRange(vector<int>& nums, int target) {\n            vector<int> res;\n            int startIdx = 0, endIdx = nums.size() - 1;\n            while (startIdx <= endIdx) {\n                int midIdx = endIdx - (endIdx - startIdx) / 2;\n                if (nums[midIdx] == target) {\n                    int START = midIdx;\n                    while (START >=0 && nums[START] == target) {\n                        START--;\n                    }\n                    res.push_back(START + 1);\n\n                    int END = midIdx;\n                    while (END < (int)nums.size() && nums[END] == target) {\n                        END++;\n                    }\n                    res.push_back(END - 1);\n\n                    return res;\n                } else if (nums[midIdx] > target) {\n                    endIdx = midIdx - 1;\n                } else if (nums[midIdx] < target) {\n                    startIdx = midIdx + 1;\n                }\n            }\n            res.push_back(-1);\n            res.push_back(-1);\n\n            return res;\n        }\n};\n```\n\nIt gets AC at the first time I wrote it on the paper.\n","source":"_posts/SearchforaRange.md","raw":"---\ntitle: Search for a Range\ndate: 2017-04-26 22:30:17\ntags:\n    - Binary Search\n    - Array\n---\n\n> Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.\n>\n> Your algorithm's runtime complexity must be in the order of O(log n).\n>\n> If the target is not found in the array, return [-1, -1].\n>\n> For example,\n>```\nGiven [5, 7, 7, 8, 8, 10] and target value 8,\nreturn [3, 4].\n```\n\n<!--more-->\n\nIt is Leetcode No.34, it is a old problem and I think it is just testing your basic programming skills. So you have no algorithm skills.\n\nThe code is easy to write and easy to understand.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<int> searchRange(vector<int>& nums, int target) {\n            vector<int> res;\n            int startIdx = 0, endIdx = nums.size() - 1;\n            while (startIdx <= endIdx) {\n                int midIdx = endIdx - (endIdx - startIdx) / 2;\n                if (nums[midIdx] == target) {\n                    int START = midIdx;\n                    while (START >=0 && nums[START] == target) {\n                        START--;\n                    }\n                    res.push_back(START + 1);\n\n                    int END = midIdx;\n                    while (END < (int)nums.size() && nums[END] == target) {\n                        END++;\n                    }\n                    res.push_back(END - 1);\n\n                    return res;\n                } else if (nums[midIdx] > target) {\n                    endIdx = midIdx - 1;\n                } else if (nums[midIdx] < target) {\n                    startIdx = midIdx + 1;\n                }\n            }\n            res.push_back(-1);\n            res.push_back(-1);\n\n            return res;\n        }\n};\n```\n\nIt gets AC at the first time I wrote it on the paper.\n","slug":"SearchforaRange","published":1,"updated":"2017-04-26T14:45:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzi006cx2f4kkbxbmlk","content":"<blockquote>\n<p>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.</p>\n<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>\n<p>If the target is not found in the array, return [-1, -1].</p>\n<p>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given [5, 7, 7, 8, 8, 10] and target value 8,</div><div class=\"line\">return [3, 4].</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode No.34, it is a old problem and I think it is just testing your basic programming skills. So you have no algorithm skills.</p>\n<p>The code is easy to write and easy to understand.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            int startIdx = 0, endIdx = nums.size() - 1;</div><div class=\"line\">            while (startIdx &lt;= endIdx) &#123;</div><div class=\"line\">                int midIdx = endIdx - (endIdx - startIdx) / 2;</div><div class=\"line\">                if (nums[midIdx] == target) &#123;</div><div class=\"line\">                    int START = midIdx;</div><div class=\"line\">                    while (START &gt;=0 &amp;&amp; nums[START] == target) &#123;</div><div class=\"line\">                        START--;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res.push_back(START + 1);</div><div class=\"line\"></div><div class=\"line\">                    int END = midIdx;</div><div class=\"line\">                    while (END &lt; (int)nums.size() &amp;&amp; nums[END] == target) &#123;</div><div class=\"line\">                        END++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res.push_back(END - 1);</div><div class=\"line\"></div><div class=\"line\">                    return res;</div><div class=\"line\">                &#125; else if (nums[midIdx] &gt; target) &#123;</div><div class=\"line\">                    endIdx = midIdx - 1;</div><div class=\"line\">                &#125; else if (nums[midIdx] &lt; target) &#123;</div><div class=\"line\">                    startIdx = midIdx + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res.push_back(-1);</div><div class=\"line\">            res.push_back(-1);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC at the first time I wrote it on the paper.</p>\n","excerpt":"<blockquote>\n<p>Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.</p>\n<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>\n<p>If the target is not found in the array, return [-1, -1].</p>\n<p>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Given [5, 7, 7, 8, 8, 10] and target value 8,</div><div class=\"line\">return [3, 4].</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>It is Leetcode No.34, it is a old problem and I think it is just testing your basic programming skills. So you have no algorithm skills.</p>\n<p>The code is easy to write and easy to understand.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            int startIdx = 0, endIdx = nums.size() - 1;</div><div class=\"line\">            while (startIdx &lt;= endIdx) &#123;</div><div class=\"line\">                int midIdx = endIdx - (endIdx - startIdx) / 2;</div><div class=\"line\">                if (nums[midIdx] == target) &#123;</div><div class=\"line\">                    int START = midIdx;</div><div class=\"line\">                    while (START &gt;=0 &amp;&amp; nums[START] == target) &#123;</div><div class=\"line\">                        START--;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res.push_back(START + 1);</div><div class=\"line\"></div><div class=\"line\">                    int END = midIdx;</div><div class=\"line\">                    while (END &lt; (int)nums.size() &amp;&amp; nums[END] == target) &#123;</div><div class=\"line\">                        END++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    res.push_back(END - 1);</div><div class=\"line\"></div><div class=\"line\">                    return res;</div><div class=\"line\">                &#125; else if (nums[midIdx] &gt; target) &#123;</div><div class=\"line\">                    endIdx = midIdx - 1;</div><div class=\"line\">                &#125; else if (nums[midIdx] &lt; target) &#123;</div><div class=\"line\">                    startIdx = midIdx + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res.push_back(-1);</div><div class=\"line\">            res.push_back(-1);</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC at the first time I wrote it on the paper.</p>"},{"title":"Single Element in a Sorted Array","date":"2017-03-09T02:29:04.000Z","_content":"\n> Given a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once.\n>\n> Example 1:\n>```\nInput: [1,1,2,3,3,4,4,8,8]\nOutput: 2\n```\n> Example 2:\n>```\nInput: [3,3,7,7,10,11,11]\nOutput: 10\n```\n> Note: Your solution should run in O(log n) time and O(1) space.\n\n<!--more-->\n\nThis is Leetcode No.540. For some reason it will be a easy problem if the time limit is O(n).\n\nIts answer will be like these:\n\n```\nclass Solution {\n    public:\n        int singleNonDuplicate(vector<int>& nums) {\n            if (nums.size() == 1) {\n                return nums[0];\n            }\n\n            if (nums[0] != nums[1]) {\n                return nums[0];\n            }\n\n            for (int i = 1; i < (int)nums.size() - 1; i++) {\n                if (!(nums[i - 1] == nums[i] || nums[i] == nums[i + 1])) {\n                    return nums[i];\n                }\n            }\n\n            if (nums[nums.size() - 1] != nums[nums.size() - 2]) {\n                return nums[nums.size() - 1];\n            }\n\n            return -1;\n        }\n};\n```\n\nIt gets AC. However its time complex is O(n). So, it is not the best solution. So, what do you think of O(logN), I first come up with binary search.\n\nWe can understand that every number in this array appearing twice. So, the number must be times of 2.\n\nPicutre this:\n\n```\nidx: 0 1 2 3 4 5 6 7 8\n     1 1 2 3 3 4 4 5 5\nmid:         4\n     1 1 2 3 3 4 4 5 5\n```\n\nWe find that nums[mid] = 4 and it's pre is 3. So we can quickly conclude that the single one is between 0 ~ 4.\n\nSo, the solution will be improved by these ways:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int singleNonDuplicate(vector<int>& nums) {\n            int n = nums.size(), left = 0, right = n - 1;\n            while (left < right) {\n                int mid = left + (right - left) / 2;\n                if (mid % 2 == 0) {\n                    if (nums[mid] == nums[mid-1]) right = mid - 2;\n                    else if (nums[mid] == nums[mid+1]) left = mid + 2;\n                    else return nums[mid];\n                }\n                else {\n                    if (nums[mid] == nums[mid-1]) left = mid + 1;\n                    else if (nums[mid] == nums[mid+1]) right = mid - 1;\n                }\n            }\n            return nums[left];\n        }\n};\n```\n\nSo, the time complex is O(logN), the problem is solved.\n","source":"_posts/SingleElementinaSortedArray.md","raw":"---\ntitle: Single Element in a Sorted Array\ndate: 2017-03-09 10:29:04\ntags:\n    - Array\n    - Binary Search\n---\n\n> Given a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once.\n>\n> Example 1:\n>```\nInput: [1,1,2,3,3,4,4,8,8]\nOutput: 2\n```\n> Example 2:\n>```\nInput: [3,3,7,7,10,11,11]\nOutput: 10\n```\n> Note: Your solution should run in O(log n) time and O(1) space.\n\n<!--more-->\n\nThis is Leetcode No.540. For some reason it will be a easy problem if the time limit is O(n).\n\nIts answer will be like these:\n\n```\nclass Solution {\n    public:\n        int singleNonDuplicate(vector<int>& nums) {\n            if (nums.size() == 1) {\n                return nums[0];\n            }\n\n            if (nums[0] != nums[1]) {\n                return nums[0];\n            }\n\n            for (int i = 1; i < (int)nums.size() - 1; i++) {\n                if (!(nums[i - 1] == nums[i] || nums[i] == nums[i + 1])) {\n                    return nums[i];\n                }\n            }\n\n            if (nums[nums.size() - 1] != nums[nums.size() - 2]) {\n                return nums[nums.size() - 1];\n            }\n\n            return -1;\n        }\n};\n```\n\nIt gets AC. However its time complex is O(n). So, it is not the best solution. So, what do you think of O(logN), I first come up with binary search.\n\nWe can understand that every number in this array appearing twice. So, the number must be times of 2.\n\nPicutre this:\n\n```\nidx: 0 1 2 3 4 5 6 7 8\n     1 1 2 3 3 4 4 5 5\nmid:         4\n     1 1 2 3 3 4 4 5 5\n```\n\nWe find that nums[mid] = 4 and it's pre is 3. So we can quickly conclude that the single one is between 0 ~ 4.\n\nSo, the solution will be improved by these ways:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int singleNonDuplicate(vector<int>& nums) {\n            int n = nums.size(), left = 0, right = n - 1;\n            while (left < right) {\n                int mid = left + (right - left) / 2;\n                if (mid % 2 == 0) {\n                    if (nums[mid] == nums[mid-1]) right = mid - 2;\n                    else if (nums[mid] == nums[mid+1]) left = mid + 2;\n                    else return nums[mid];\n                }\n                else {\n                    if (nums[mid] == nums[mid-1]) left = mid + 1;\n                    else if (nums[mid] == nums[mid+1]) right = mid - 1;\n                }\n            }\n            return nums[left];\n        }\n};\n```\n\nSo, the time complex is O(logN), the problem is solved.\n","slug":"SingleElementinaSortedArray","published":1,"updated":"2017-03-09T07:56:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzj006ex2f43mpdxza8","content":"<blockquote>\n<p>Given a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,1,2,3,3,4,4,8,8]</div><div class=\"line\">Output: 2</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [3,3,7,7,10,11,11]</div><div class=\"line\">Output: 10</div></pre></td></tr></table></figure></p>\n<p>Note: Your solution should run in O(log n) time and O(1) space.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.540. For some reason it will be a easy problem if the time limit is O(n).</p>\n<p>Its answer will be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int singleNonDuplicate(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 1) &#123;</div><div class=\"line\">                return nums[0];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (nums[0] != nums[1]) &#123;</div><div class=\"line\">                return nums[0];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 1; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">                if (!(nums[i - 1] == nums[i] || nums[i] == nums[i + 1])) &#123;</div><div class=\"line\">                    return nums[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (nums[nums.size() - 1] != nums[nums.size() - 2]) &#123;</div><div class=\"line\">                return nums[nums.size() - 1];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. However its time complex is O(n). So, it is not the best solution. So, what do you think of O(logN), I first come up with binary search.</p>\n<p>We can understand that every number in this array appearing twice. So, the number must be times of 2.</p>\n<p>Picutre this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">idx: 0 1 2 3 4 5 6 7 8</div><div class=\"line\">     1 1 2 3 3 4 4 5 5</div><div class=\"line\">mid:         4</div><div class=\"line\">     1 1 2 3 3 4 4 5 5</div></pre></td></tr></table></figure>\n<p>We find that nums[mid] = 4 and it’s pre is 3. So we can quickly conclude that the single one is between 0 ~ 4.</p>\n<p>So, the solution will be improved by these ways:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int singleNonDuplicate(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int n = nums.size(), left = 0, right = n - 1;</div><div class=\"line\">            while (left &lt; right) &#123;</div><div class=\"line\">                int mid = left + (right - left) / 2;</div><div class=\"line\">                if (mid % 2 == 0) &#123;</div><div class=\"line\">                    if (nums[mid] == nums[mid-1]) right = mid - 2;</div><div class=\"line\">                    else if (nums[mid] == nums[mid+1]) left = mid + 2;</div><div class=\"line\">                    else return nums[mid];</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123;</div><div class=\"line\">                    if (nums[mid] == nums[mid-1]) left = mid + 1;</div><div class=\"line\">                    else if (nums[mid] == nums[mid+1]) right = mid - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return nums[left];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>So, the time complex is O(logN), the problem is solved.</p>\n","excerpt":"<blockquote>\n<p>Given a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [1,1,2,3,3,4,4,8,8]</div><div class=\"line\">Output: 2</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: [3,3,7,7,10,11,11]</div><div class=\"line\">Output: 10</div></pre></td></tr></table></figure></p>\n<p>Note: Your solution should run in O(log n) time and O(1) space.</p>\n</blockquote>","more":"<p>This is Leetcode No.540. For some reason it will be a easy problem if the time limit is O(n).</p>\n<p>Its answer will be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int singleNonDuplicate(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 1) &#123;</div><div class=\"line\">                return nums[0];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (nums[0] != nums[1]) &#123;</div><div class=\"line\">                return nums[0];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 1; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">                if (!(nums[i - 1] == nums[i] || nums[i] == nums[i + 1])) &#123;</div><div class=\"line\">                    return nums[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (nums[nums.size() - 1] != nums[nums.size() - 2]) &#123;</div><div class=\"line\">                return nums[nums.size() - 1];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return -1;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. However its time complex is O(n). So, it is not the best solution. So, what do you think of O(logN), I first come up with binary search.</p>\n<p>We can understand that every number in this array appearing twice. So, the number must be times of 2.</p>\n<p>Picutre this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">idx: 0 1 2 3 4 5 6 7 8</div><div class=\"line\">     1 1 2 3 3 4 4 5 5</div><div class=\"line\">mid:         4</div><div class=\"line\">     1 1 2 3 3 4 4 5 5</div></pre></td></tr></table></figure>\n<p>We find that nums[mid] = 4 and it’s pre is 3. So we can quickly conclude that the single one is between 0 ~ 4.</p>\n<p>So, the solution will be improved by these ways:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int singleNonDuplicate(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int n = nums.size(), left = 0, right = n - 1;</div><div class=\"line\">            while (left &lt; right) &#123;</div><div class=\"line\">                int mid = left + (right - left) / 2;</div><div class=\"line\">                if (mid % 2 == 0) &#123;</div><div class=\"line\">                    if (nums[mid] == nums[mid-1]) right = mid - 2;</div><div class=\"line\">                    else if (nums[mid] == nums[mid+1]) left = mid + 2;</div><div class=\"line\">                    else return nums[mid];</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123;</div><div class=\"line\">                    if (nums[mid] == nums[mid-1]) left = mid + 1;</div><div class=\"line\">                    else if (nums[mid] == nums[mid+1]) right = mid - 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return nums[left];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>So, the time complex is O(logN), the problem is solved.</p>"},{"title":"Spiral Matrix","date":"2017-04-13T14:00:09.000Z","_content":"\n> Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n>\n> For example,\n> Given the following matrix:\n>```\n[\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n]\n```\n> You should return `[1,2,3,6,9,8,7,4,5]`.\n\n<!--more-->\n\nIt is Leetcode No.54 and a simple problem. You just need to think over. At first I thought about a tail recursion method to solve the problem. However every tail recursion method can be transform to a while-loop.\n\nSo, here I use a while-loop to solve the problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool checkIsOk(int idx, int idy, set<pair<int, int> > visited, vector<vector<int> > matrix) {\n            if (idx < 0 || idx >= (int)matrix.size() || idy < 0 || idy >= (int)matrix[0].size()) {\n                return false;\n            }\n            if (visited.find(pair<int, int>(idx, idy)) != visited.end()) {\n                return false;\n            }\n            return true;\n        }\n\n        vector<int> spiralOrder(vector<vector<int> >& matrix) {\n            vector<int> res;\n            if (matrix.size() == 0 || matrix[0].size() == 0) {\n                return res;\n            }\n\n            int idx = 0, idy = 0, direction = 0;\n            set<pair<int, int> > visited;\n\n            res.push_back(matrix[0][0]);\n            visited.insert(pair<int, int>(0, 0));\n\n            while (visited.size() < matrix.size() * matrix[0].size()) {\n                if (direction % 4 == 0) {\n                    if (checkIsOk(idx, idy + 1, visited, matrix)) {\n                        idy++;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n                if (direction % 4 == 1) {\n                    if (checkIsOk(idx + 1, idy, visited, matrix)) {\n                        idx++;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n                if (direction % 4 == 2) {\n                    if (checkIsOk(idx, idy - 1, visited, matrix)) {\n                        idy--;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n                if (direction % 4 == 3) {\n                    if (checkIsOk(idx - 1, idy, visited, matrix)) {\n                        idx--;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nRemember the order of the turning. You should turn to right first and turn down and turn left then up. So, the `direction` use to mark the different directions.\n\nIt gets AC.\n","source":"_posts/SpiralMatrix.md","raw":"---\ntitle: Spiral Matrix\ndate: 2017-04-13 22:00:09\ntags:\n    - Array\n---\n\n> Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n>\n> For example,\n> Given the following matrix:\n>```\n[\n  [ 1, 2, 3 ],\n  [ 4, 5, 6 ],\n  [ 7, 8, 9 ]\n]\n```\n> You should return `[1,2,3,6,9,8,7,4,5]`.\n\n<!--more-->\n\nIt is Leetcode No.54 and a simple problem. You just need to think over. At first I thought about a tail recursion method to solve the problem. However every tail recursion method can be transform to a while-loop.\n\nSo, here I use a while-loop to solve the problem.\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool checkIsOk(int idx, int idy, set<pair<int, int> > visited, vector<vector<int> > matrix) {\n            if (idx < 0 || idx >= (int)matrix.size() || idy < 0 || idy >= (int)matrix[0].size()) {\n                return false;\n            }\n            if (visited.find(pair<int, int>(idx, idy)) != visited.end()) {\n                return false;\n            }\n            return true;\n        }\n\n        vector<int> spiralOrder(vector<vector<int> >& matrix) {\n            vector<int> res;\n            if (matrix.size() == 0 || matrix[0].size() == 0) {\n                return res;\n            }\n\n            int idx = 0, idy = 0, direction = 0;\n            set<pair<int, int> > visited;\n\n            res.push_back(matrix[0][0]);\n            visited.insert(pair<int, int>(0, 0));\n\n            while (visited.size() < matrix.size() * matrix[0].size()) {\n                if (direction % 4 == 0) {\n                    if (checkIsOk(idx, idy + 1, visited, matrix)) {\n                        idy++;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n                if (direction % 4 == 1) {\n                    if (checkIsOk(idx + 1, idy, visited, matrix)) {\n                        idx++;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n                if (direction % 4 == 2) {\n                    if (checkIsOk(idx, idy - 1, visited, matrix)) {\n                        idy--;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n                if (direction % 4 == 3) {\n                    if (checkIsOk(idx - 1, idy, visited, matrix)) {\n                        idx--;\n                        visited.insert(pair<int, int>(idx, idy));\n                        res.push_back(matrix[idx][idy]);\n                    } else {\n                        direction++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nRemember the order of the turning. You should turn to right first and turn down and turn left then up. So, the `direction` use to mark the different directions.\n\nIt gets AC.\n","slug":"SpiralMatrix","published":1,"updated":"2017-04-13T14:20:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzm006hx2f41joswrcm","content":"<blockquote>\n<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>\n<p>For example,<br>Given the following matrix:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [ 1, 2, 3 ],</div><div class=\"line\">  [ 4, 5, 6 ],</div><div class=\"line\">  [ 7, 8, 9 ]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>You should return <code>[1,2,3,6,9,8,7,4,5]</code>.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode No.54 and a simple problem. You just need to think over. At first I thought about a tail recursion method to solve the problem. However every tail recursion method can be transform to a while-loop.</p>\n<p>So, here I use a while-loop to solve the problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool checkIsOk(int idx, int idy, set&lt;pair&lt;int, int&gt; &gt; visited, vector&lt;vector&lt;int&gt; &gt; matrix) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)matrix.size() || idy &lt; 0 || idy &gt;= (int)matrix[0].size()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited.find(pair&lt;int, int&gt;(idx, idy)) != visited.end()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            if (matrix.size() == 0 || matrix[0].size() == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx = 0, idy = 0, direction = 0;</div><div class=\"line\">            set&lt;pair&lt;int, int&gt; &gt; visited;</div><div class=\"line\"></div><div class=\"line\">            res.push_back(matrix[0][0]);</div><div class=\"line\">            visited.insert(pair&lt;int, int&gt;(0, 0));</div><div class=\"line\"></div><div class=\"line\">            while (visited.size() &lt; matrix.size() * matrix[0].size()) &#123;</div><div class=\"line\">                if (direction % 4 == 0) &#123;</div><div class=\"line\">                    if (checkIsOk(idx, idy + 1, visited, matrix)) &#123;</div><div class=\"line\">                        idy++;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (direction % 4 == 1) &#123;</div><div class=\"line\">                    if (checkIsOk(idx + 1, idy, visited, matrix)) &#123;</div><div class=\"line\">                        idx++;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (direction % 4 == 2) &#123;</div><div class=\"line\">                    if (checkIsOk(idx, idy - 1, visited, matrix)) &#123;</div><div class=\"line\">                        idy--;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (direction % 4 == 3) &#123;</div><div class=\"line\">                    if (checkIsOk(idx - 1, idy, visited, matrix)) &#123;</div><div class=\"line\">                        idx--;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Remember the order of the turning. You should turn to right first and turn down and turn left then up. So, the <code>direction</code> use to mark the different directions.</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>\n<p>For example,<br>Given the following matrix:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [ 1, 2, 3 ],</div><div class=\"line\">  [ 4, 5, 6 ],</div><div class=\"line\">  [ 7, 8, 9 ]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>You should return <code>[1,2,3,6,9,8,7,4,5]</code>.</p>\n</blockquote>","more":"<p>It is Leetcode No.54 and a simple problem. You just need to think over. At first I thought about a tail recursion method to solve the problem. However every tail recursion method can be transform to a while-loop.</p>\n<p>So, here I use a while-loop to solve the problem.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool checkIsOk(int idx, int idy, set&lt;pair&lt;int, int&gt; &gt; visited, vector&lt;vector&lt;int&gt; &gt; matrix) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)matrix.size() || idy &lt; 0 || idy &gt;= (int)matrix[0].size()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited.find(pair&lt;int, int&gt;(idx, idy)) != visited.end()) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt; &gt;&amp; matrix) &#123;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\">            if (matrix.size() == 0 || matrix[0].size() == 0) &#123;</div><div class=\"line\">                return res;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx = 0, idy = 0, direction = 0;</div><div class=\"line\">            set&lt;pair&lt;int, int&gt; &gt; visited;</div><div class=\"line\"></div><div class=\"line\">            res.push_back(matrix[0][0]);</div><div class=\"line\">            visited.insert(pair&lt;int, int&gt;(0, 0));</div><div class=\"line\"></div><div class=\"line\">            while (visited.size() &lt; matrix.size() * matrix[0].size()) &#123;</div><div class=\"line\">                if (direction % 4 == 0) &#123;</div><div class=\"line\">                    if (checkIsOk(idx, idy + 1, visited, matrix)) &#123;</div><div class=\"line\">                        idy++;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (direction % 4 == 1) &#123;</div><div class=\"line\">                    if (checkIsOk(idx + 1, idy, visited, matrix)) &#123;</div><div class=\"line\">                        idx++;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (direction % 4 == 2) &#123;</div><div class=\"line\">                    if (checkIsOk(idx, idy - 1, visited, matrix)) &#123;</div><div class=\"line\">                        idy--;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (direction % 4 == 3) &#123;</div><div class=\"line\">                    if (checkIsOk(idx - 1, idy, visited, matrix)) &#123;</div><div class=\"line\">                        idx--;</div><div class=\"line\">                        visited.insert(pair&lt;int, int&gt;(idx, idy));</div><div class=\"line\">                        res.push_back(matrix[idx][idy]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        direction++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Remember the order of the turning. You should turn to right first and turn down and turn left then up. So, the <code>direction</code> use to mark the different directions.</p>\n<p>It gets AC.</p>"},{"title":"Subarray Sum Equals K","date":"2017-04-30T02:40:33.000Z","_content":"\n\n> Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\n>\n> Example 1:\n>```\nInput:nums = [1,1,1], k = 2\nOutput: 2\n```\n> Note:\n>\n> + The length of the array is in range [1, 20,000].\n> + The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].\n\n<!--more-->\n\nThis is Leetcode No.560 and also one of the leetcode-weekly-contest-30. It is a similar problem of some problem that calculate the sum of subarray.\n\nWe can use the DP array to store the SUM[idx] for 0 to idx. Then if you want to calculate the sum for idx to idy, you just need to calculate SUM[idy] - SUM[idx].\n\nBut you should remember one thing that, your first item in SUM array is 0 which has no meaning.\n\nSo the code comes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int subarraySum(vector<int>& nums, int k) {\n\n\n            vector<int> DP; int sum = 0;\n            DP.push_back(sum);\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                sum += nums[idx];\n                DP.push_back(sum);\n            }\n\n            int res = 0;\n            for (int idx = 0; idx < (int)DP.size(); idx++) {\n                for (int idy = idx + 1; idy < (int)DP.size(); idy++) {\n                    if (DP[idy] - DP[idx] == k) {\n                        res++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nClean and simple, the code gets AC.\n","source":"_posts/SubarraySumEqualsK.md","raw":"---\ntitle: Subarray Sum Equals K\ndate: 2017-04-30 10:40:33\ntags:\n    - Dynamic Programming\n    - Array\n---\n\n\n> Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\n>\n> Example 1:\n>```\nInput:nums = [1,1,1], k = 2\nOutput: 2\n```\n> Note:\n>\n> + The length of the array is in range [1, 20,000].\n> + The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].\n\n<!--more-->\n\nThis is Leetcode No.560 and also one of the leetcode-weekly-contest-30. It is a similar problem of some problem that calculate the sum of subarray.\n\nWe can use the DP array to store the SUM[idx] for 0 to idx. Then if you want to calculate the sum for idx to idy, you just need to calculate SUM[idy] - SUM[idx].\n\nBut you should remember one thing that, your first item in SUM array is 0 which has no meaning.\n\nSo the code comes:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        int subarraySum(vector<int>& nums, int k) {\n\n\n            vector<int> DP; int sum = 0;\n            DP.push_back(sum);\n            for (int idx = 0; idx < (int)nums.size(); idx++) {\n                sum += nums[idx];\n                DP.push_back(sum);\n            }\n\n            int res = 0;\n            for (int idx = 0; idx < (int)DP.size(); idx++) {\n                for (int idy = idx + 1; idy < (int)DP.size(); idy++) {\n                    if (DP[idy] - DP[idx] == k) {\n                        res++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n\nClean and simple, the code gets AC.\n","slug":"SubarraySumEqualsK","published":1,"updated":"2017-04-30T02:46:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzm006jx2f4lde47sqk","content":"<blockquote>\n<p>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:nums = [1,1,1], k = 2</div><div class=\"line\">Output: 2</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The length of the array is in range [1, 20,000].</li>\n<li>The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.560 and also one of the leetcode-weekly-contest-30. It is a similar problem of some problem that calculate the sum of subarray.</p>\n<p>We can use the DP array to store the SUM[idx] for 0 to idx. Then if you want to calculate the sum for idx to idy, you just need to calculate SUM[idy] - SUM[idx].</p>\n<p>But you should remember one thing that, your first item in SUM array is 0 which has no meaning.</p>\n<p>So the code comes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int subarraySum(vector&lt;int&gt;&amp; nums, int k) &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; DP; int sum = 0;</div><div class=\"line\">            DP.push_back(sum);</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                sum += nums[idx];</div><div class=\"line\">                DP.push_back(sum);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)DP.size(); idy++) &#123;</div><div class=\"line\">                    if (DP[idy] - DP[idx] == k) &#123;</div><div class=\"line\">                        res++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Clean and simple, the code gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.</p>\n<p>Example 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input:nums = [1,1,1], k = 2</div><div class=\"line\">Output: 2</div></pre></td></tr></table></figure></p>\n<p>Note:</p>\n<ul>\n<li>The length of the array is in range [1, 20,000].</li>\n<li>The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode No.560 and also one of the leetcode-weekly-contest-30. It is a similar problem of some problem that calculate the sum of subarray.</p>\n<p>We can use the DP array to store the SUM[idx] for 0 to idx. Then if you want to calculate the sum for idx to idy, you just need to calculate SUM[idy] - SUM[idx].</p>\n<p>But you should remember one thing that, your first item in SUM array is 0 which has no meaning.</p>\n<p>So the code comes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int subarraySum(vector&lt;int&gt;&amp; nums, int k) &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt; DP; int sum = 0;</div><div class=\"line\">            DP.push_back(sum);</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)nums.size(); idx++) &#123;</div><div class=\"line\">                sum += nums[idx];</div><div class=\"line\">                DP.push_back(sum);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)DP.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = idx + 1; idy &lt; (int)DP.size(); idy++) &#123;</div><div class=\"line\">                    if (DP[idy] - DP[idx] == k) &#123;</div><div class=\"line\">                        res++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Clean and simple, the code gets AC.</p>"},{"title":"Surrounded Regions","date":"2017-03-12T06:12:21.000Z","_content":"\n> Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.\n>\n> A region is captured by flipping all 'O's into 'X's in that surrounded region.\n>\n> For example,\n>```\nX X X X\nX O O X\nX X O X\nX O X X\n```\n> After running your function, the board should be:\n>```\nX X X X\nX X X X\nX X X X\nX O X X\n```\n\n<!--more-->\n\nThis is Leetcode No.130. It is a easy one. This is my solution:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void solve(vector<vector<char> >& board) {\n            if (board.size() == 0 || board[0].size() == 0) {\n                return;\n            }\n\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                if (board[idx][0] == 'O') {\n                    visit(board, idx, 0);\n                }\n\n                if (board[idx][board[0].size() - 1] == 'O') {\n                    visit(board, idx, board[0].size() - 1);\n                }\n            }\n\n            for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                if (board[0][idy] == 'O') {\n                    visit(board, 0, idy);\n                }\n\n                if (board[board.size() - 1][idy] == 'O') {\n                    visit(board, board.size() - 1, idy);\n                }\n            }\n\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'O') {\n                        board[idx][idy] = 'X';\n                    }\n                }\n            }\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'V') {\n                        board[idx][idy] = 'O';\n                    }\n                }\n            }\n        }\n\n        void visit(vector<vector<char> > &board, int idx, int idy) {\n            if (idx < 0 || idx >= (int)board.size()) {\n                return;\n            }\n\n            if (idy < 0 || idy >= (int)board[0].size()) {\n                return;\n            }\n\n            if (board[idx][idy] != 'O') {\n                return;\n            }\n\n            if (board[idx][idy] == 'O') {\n                board[idx][idy] = 'V';\n                visit(board, idx + 1, idy);\n                visit(board, idx, idy + 1);\n                visit(board, idx - 1, idy);\n                visit(board, idx , idy - 1);\n            }\n        }\n};\n```\n\nFind the 'O' on the border then find the related ones. Mark them with 'V', then mark every remaining 'O' to X, then mark the 'V' to 'O'.\n\nIt gets AC.\n","source":"_posts/SurroundedRegions.md","raw":"---\ntitle: Surrounded Regions\ndate: 2017-03-12 14:12:21\ntags:\n    - Union Find\n    - Breadth-first Search\n---\n\n> Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.\n>\n> A region is captured by flipping all 'O's into 'X's in that surrounded region.\n>\n> For example,\n>```\nX X X X\nX O O X\nX X O X\nX O X X\n```\n> After running your function, the board should be:\n>```\nX X X X\nX X X X\nX X X X\nX O X X\n```\n\n<!--more-->\n\nThis is Leetcode No.130. It is a easy one. This is my solution:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void solve(vector<vector<char> >& board) {\n            if (board.size() == 0 || board[0].size() == 0) {\n                return;\n            }\n\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                if (board[idx][0] == 'O') {\n                    visit(board, idx, 0);\n                }\n\n                if (board[idx][board[0].size() - 1] == 'O') {\n                    visit(board, idx, board[0].size() - 1);\n                }\n            }\n\n            for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                if (board[0][idy] == 'O') {\n                    visit(board, 0, idy);\n                }\n\n                if (board[board.size() - 1][idy] == 'O') {\n                    visit(board, board.size() - 1, idy);\n                }\n            }\n\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'O') {\n                        board[idx][idy] = 'X';\n                    }\n                }\n            }\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'V') {\n                        board[idx][idy] = 'O';\n                    }\n                }\n            }\n        }\n\n        void visit(vector<vector<char> > &board, int idx, int idy) {\n            if (idx < 0 || idx >= (int)board.size()) {\n                return;\n            }\n\n            if (idy < 0 || idy >= (int)board[0].size()) {\n                return;\n            }\n\n            if (board[idx][idy] != 'O') {\n                return;\n            }\n\n            if (board[idx][idy] == 'O') {\n                board[idx][idy] = 'V';\n                visit(board, idx + 1, idy);\n                visit(board, idx, idy + 1);\n                visit(board, idx - 1, idy);\n                visit(board, idx , idy - 1);\n            }\n        }\n};\n```\n\nFind the 'O' on the border then find the related ones. Mark them with 'V', then mark every remaining 'O' to X, then mark the 'V' to 'O'.\n\nIt gets AC.\n","slug":"SurroundedRegions","published":1,"updated":"2017-03-12T06:35:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzo006mx2f4i0dp6dng","content":"<blockquote>\n<p>Given a 2D board containing ‘X’ and ‘O’ (the letter O), capture all regions surrounded by ‘X’.</p>\n<p>A region is captured by flipping all ‘O’s into ‘X’s in that surrounded region.</p>\n<p>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">X X X X</div><div class=\"line\">X O O X</div><div class=\"line\">X X O X</div><div class=\"line\">X O X X</div></pre></td></tr></table></figure></p>\n<p>After running your function, the board should be:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">X X X X</div><div class=\"line\">X X X X</div><div class=\"line\">X X X X</div><div class=\"line\">X O X X</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.130. It is a easy one. This is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void solve(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">            if (board.size() == 0 || board[0].size() == 0) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                if (board[idx][0] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, idx, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (board[idx][board[0].size() - 1] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, idx, board[0].size() - 1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                if (board[0][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, 0, idy);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (board[board.size() - 1][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, board.size() - 1, idy);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                        board[idx][idy] = &apos;X&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;V&apos;) &#123;</div><div class=\"line\">                        board[idx][idy] = &apos;O&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)board.size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (idy &lt; 0 || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (board[idx][idy] != &apos;O&apos;) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (board[idx][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                board[idx][idy] = &apos;V&apos;;</div><div class=\"line\">                visit(board, idx + 1, idy);</div><div class=\"line\">                visit(board, idx, idy + 1);</div><div class=\"line\">                visit(board, idx - 1, idy);</div><div class=\"line\">                visit(board, idx , idy - 1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Find the ‘O’ on the border then find the related ones. Mark them with ‘V’, then mark every remaining ‘O’ to X, then mark the ‘V’ to ‘O’.</p>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a 2D board containing ‘X’ and ‘O’ (the letter O), capture all regions surrounded by ‘X’.</p>\n<p>A region is captured by flipping all ‘O’s into ‘X’s in that surrounded region.</p>\n<p>For example,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">X X X X</div><div class=\"line\">X O O X</div><div class=\"line\">X X O X</div><div class=\"line\">X O X X</div></pre></td></tr></table></figure></p>\n<p>After running your function, the board should be:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">X X X X</div><div class=\"line\">X X X X</div><div class=\"line\">X X X X</div><div class=\"line\">X O X X</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>This is Leetcode No.130. It is a easy one. This is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void solve(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">            if (board.size() == 0 || board[0].size() == 0) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                if (board[idx][0] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, idx, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (board[idx][board[0].size() - 1] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, idx, board[0].size() - 1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                if (board[0][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, 0, idy);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (board[board.size() - 1][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                    visit(board, board.size() - 1, idy);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                        board[idx][idy] = &apos;X&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;V&apos;) &#123;</div><div class=\"line\">                        board[idx][idy] = &apos;O&apos;;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)board.size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (idy &lt; 0 || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (board[idx][idy] != &apos;O&apos;) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (board[idx][idy] == &apos;O&apos;) &#123;</div><div class=\"line\">                board[idx][idy] = &apos;V&apos;;</div><div class=\"line\">                visit(board, idx + 1, idy);</div><div class=\"line\">                visit(board, idx, idy + 1);</div><div class=\"line\">                visit(board, idx - 1, idy);</div><div class=\"line\">                visit(board, idx , idy - 1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Find the ‘O’ on the border then find the related ones. Mark them with ‘V’, then mark every remaining ‘O’ to X, then mark the ‘V’ to ‘O’.</p>\n<p>It gets AC.</p>"},{"title":"Target Sum","date":"2017-01-28T14:49:36.000Z","_content":"\n\n> You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\n>\n> Find out how many ways to assign symbols to make sum of integers equal to target S.\n>\n> Example 1:\n>\n> Input: nums is [1, 1, 1, 1, 1], S is 3.\n> Output: 5\n>\n> Explanation:\n>\n> + -1+1+1+1+1 = 3\n> + +1-1+1+1+1 = 3\n> + +1+1-1+1+1 = 3\n> + +1+1+1-1+1 = 3\n> + +1+1+1+1-1 = 3\n>\n> There are 5 ways to assign symbols to make the sum of nums be target 3.\n>\n> Note:\n>\n> + The length of the given array is positive and will not exceed 20.\n> + The sum of elements in the given array will not exceed 1000.\n> + Your output answer is guaranteed to be fitted in a 32-bit integer.\n\n<!--more-->\n\nThis is Leetcode 494. And I tried a not best solution, just use the DFS:\n\n```\nclass Solution {\n    public:\n\n        int res;\n\n        int findTargetSumWays(vector<int>& nums, int target) {\n            res = 0;\n            _calc(nums, 0, target, 0);\n            return res;\n        }\n\n        void _calc(vector<int>& nums, int idx, int target, int current) {\n            if ((int)(nums.size()) == idx) {\n                if (current == target) {\n                    res++;\n                }\n            } else {\n                _calc(nums, idx + 1, target, current + nums[idx]);\n                _calc(nums, idx + 1, target, current - nums[idx]);\n            }\n        }\n};\n```\n\nAnd, it passed ?!\n\nSo, I try to find a better way to solve the problem, and I find I can try with DP.\n\nYou can use the following Java code:\n\n```\npublic class Solution {\n    public int findTargetSumWays(int[] nums, int s) {\n        int sum = 0;\n        for(int i: nums) sum+=i;\n        if(s>sum || s<-sum) return 0;\n        int[] dp = new int[2*sum+1];\n        dp[0+sum] = 1;\n        for(int i = 0; i<nums.length; i++){\n            int[] next = new int[2*sum+1];\n            for(int k = 0; k<2*sum+1; k++){\n                if(dp[k]!=0){\n                    next[k + nums[i]] += dp[k];\n                    next[k - nums[i]] += dp[k];\n                }\n            }\n            dp = next;\n        }\n        return dp[sum+s];\n    }\n}\n```\n\nExplaination:\n> ![](https://discuss.leetcode.com/uploads/files/1485048726667-screen-shot-2017-01-21-at-8.31.48-pm.jpg)\n","source":"_posts/TargetSum.md","raw":"---\ntitle: Target Sum\ndate: 2017-01-28 22:49:36\ntags:\n    - Depth-first Search\n    - Dynamic Programming\n---\n\n\n> You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\n>\n> Find out how many ways to assign symbols to make sum of integers equal to target S.\n>\n> Example 1:\n>\n> Input: nums is [1, 1, 1, 1, 1], S is 3.\n> Output: 5\n>\n> Explanation:\n>\n> + -1+1+1+1+1 = 3\n> + +1-1+1+1+1 = 3\n> + +1+1-1+1+1 = 3\n> + +1+1+1-1+1 = 3\n> + +1+1+1+1-1 = 3\n>\n> There are 5 ways to assign symbols to make the sum of nums be target 3.\n>\n> Note:\n>\n> + The length of the given array is positive and will not exceed 20.\n> + The sum of elements in the given array will not exceed 1000.\n> + Your output answer is guaranteed to be fitted in a 32-bit integer.\n\n<!--more-->\n\nThis is Leetcode 494. And I tried a not best solution, just use the DFS:\n\n```\nclass Solution {\n    public:\n\n        int res;\n\n        int findTargetSumWays(vector<int>& nums, int target) {\n            res = 0;\n            _calc(nums, 0, target, 0);\n            return res;\n        }\n\n        void _calc(vector<int>& nums, int idx, int target, int current) {\n            if ((int)(nums.size()) == idx) {\n                if (current == target) {\n                    res++;\n                }\n            } else {\n                _calc(nums, idx + 1, target, current + nums[idx]);\n                _calc(nums, idx + 1, target, current - nums[idx]);\n            }\n        }\n};\n```\n\nAnd, it passed ?!\n\nSo, I try to find a better way to solve the problem, and I find I can try with DP.\n\nYou can use the following Java code:\n\n```\npublic class Solution {\n    public int findTargetSumWays(int[] nums, int s) {\n        int sum = 0;\n        for(int i: nums) sum+=i;\n        if(s>sum || s<-sum) return 0;\n        int[] dp = new int[2*sum+1];\n        dp[0+sum] = 1;\n        for(int i = 0; i<nums.length; i++){\n            int[] next = new int[2*sum+1];\n            for(int k = 0; k<2*sum+1; k++){\n                if(dp[k]!=0){\n                    next[k + nums[i]] += dp[k];\n                    next[k - nums[i]] += dp[k];\n                }\n            }\n            dp = next;\n        }\n        return dp[sum+s];\n    }\n}\n```\n\nExplaination:\n> ![](https://discuss.leetcode.com/uploads/files/1485048726667-screen-shot-2017-01-21-at-8.31.48-pm.jpg)\n","slug":"TargetSum","published":1,"updated":"2017-01-28T15:41:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzp006ox2f4r7khypis","content":"<blockquote>\n<p>You are given a list of non-negative integers, a1, a2, …, an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.</p>\n<p>Find out how many ways to assign symbols to make sum of integers equal to target S.</p>\n<p>Example 1:</p>\n<p>Input: nums is [1, 1, 1, 1, 1], S is 3.<br>Output: 5</p>\n<p>Explanation:</p>\n<ul>\n<li>-1+1+1+1+1 = 3</li>\n<li>+1-1+1+1+1 = 3</li>\n<li>+1+1-1+1+1 = 3</li>\n<li>+1+1+1-1+1 = 3</li>\n<li>+1+1+1+1-1 = 3</li>\n</ul>\n<p>There are 5 ways to assign symbols to make the sum of nums be target 3.</p>\n<p>Note:</p>\n<ul>\n<li>The length of the given array is positive and will not exceed 20.</li>\n<li>The sum of elements in the given array will not exceed 1000.</li>\n<li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 494. And I tried a not best solution, just use the DFS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\"></div><div class=\"line\">        int res;</div><div class=\"line\"></div><div class=\"line\">        int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            _calc(nums, 0, target, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _calc(vector&lt;int&gt;&amp; nums, int idx, int target, int current) &#123;</div><div class=\"line\">            if ((int)(nums.size()) == idx) &#123;</div><div class=\"line\">                if (current == target) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                _calc(nums, idx + 1, target, current + nums[idx]);</div><div class=\"line\">                _calc(nums, idx + 1, target, current - nums[idx]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And, it passed ?!</p>\n<p>So, I try to find a better way to solve the problem, and I find I can try with DP.</p>\n<p>You can use the following Java code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Solution &#123;</div><div class=\"line\">    public int findTargetSumWays(int[] nums, int s) &#123;</div><div class=\"line\">        int sum = 0;</div><div class=\"line\">        for(int i: nums) sum+=i;</div><div class=\"line\">        if(s&gt;sum || s&lt;-sum) return 0;</div><div class=\"line\">        int[] dp = new int[2*sum+1];</div><div class=\"line\">        dp[0+sum] = 1;</div><div class=\"line\">        for(int i = 0; i&lt;nums.length; i++)&#123;</div><div class=\"line\">            int[] next = new int[2*sum+1];</div><div class=\"line\">            for(int k = 0; k&lt;2*sum+1; k++)&#123;</div><div class=\"line\">                if(dp[k]!=0)&#123;</div><div class=\"line\">                    next[k + nums[i]] += dp[k];</div><div class=\"line\">                    next[k - nums[i]] += dp[k];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            dp = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return dp[sum+s];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Explaination:</p>\n<blockquote>\n<p><img src=\"https://discuss.leetcode.com/uploads/files/1485048726667-screen-shot-2017-01-21-at-8.31.48-pm.jpg\" alt=\"\"></p>\n</blockquote>\n","excerpt":"<blockquote>\n<p>You are given a list of non-negative integers, a1, a2, …, an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.</p>\n<p>Find out how many ways to assign symbols to make sum of integers equal to target S.</p>\n<p>Example 1:</p>\n<p>Input: nums is [1, 1, 1, 1, 1], S is 3.<br>Output: 5</p>\n<p>Explanation:</p>\n<ul>\n<li>-1+1+1+1+1 = 3</li>\n<li>+1-1+1+1+1 = 3</li>\n<li>+1+1-1+1+1 = 3</li>\n<li>+1+1+1-1+1 = 3</li>\n<li>+1+1+1+1-1 = 3</li>\n</ul>\n<p>There are 5 ways to assign symbols to make the sum of nums be target 3.</p>\n<p>Note:</p>\n<ul>\n<li>The length of the given array is positive and will not exceed 20.</li>\n<li>The sum of elements in the given array will not exceed 1000.</li>\n<li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 494. And I tried a not best solution, just use the DFS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\"></div><div class=\"line\">        int res;</div><div class=\"line\"></div><div class=\"line\">        int findTargetSumWays(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            res = 0;</div><div class=\"line\">            _calc(nums, 0, target, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _calc(vector&lt;int&gt;&amp; nums, int idx, int target, int current) &#123;</div><div class=\"line\">            if ((int)(nums.size()) == idx) &#123;</div><div class=\"line\">                if (current == target) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                _calc(nums, idx + 1, target, current + nums[idx]);</div><div class=\"line\">                _calc(nums, idx + 1, target, current - nums[idx]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And, it passed ?!</p>\n<p>So, I try to find a better way to solve the problem, and I find I can try with DP.</p>\n<p>You can use the following Java code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Solution &#123;</div><div class=\"line\">    public int findTargetSumWays(int[] nums, int s) &#123;</div><div class=\"line\">        int sum = 0;</div><div class=\"line\">        for(int i: nums) sum+=i;</div><div class=\"line\">        if(s&gt;sum || s&lt;-sum) return 0;</div><div class=\"line\">        int[] dp = new int[2*sum+1];</div><div class=\"line\">        dp[0+sum] = 1;</div><div class=\"line\">        for(int i = 0; i&lt;nums.length; i++)&#123;</div><div class=\"line\">            int[] next = new int[2*sum+1];</div><div class=\"line\">            for(int k = 0; k&lt;2*sum+1; k++)&#123;</div><div class=\"line\">                if(dp[k]!=0)&#123;</div><div class=\"line\">                    next[k + nums[i]] += dp[k];</div><div class=\"line\">                    next[k - nums[i]] += dp[k];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            dp = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return dp[sum+s];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Explaination:</p>\n<blockquote>\n<p><img src=\"https://discuss.leetcode.com/uploads/files/1485048726667-screen-shot-2017-01-21-at-8.31.48-pm.jpg\" alt=\"\"></p>\n</blockquote>"},{"title":"Teemo Attacking","date":"2017-02-02T12:17:16.000Z","_content":"\n> In LLP world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.\n>\n> You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.\n>\n> Example 1:\n> + Input: [1,4], 2\n> + Output: 4\n> + Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. This poisoned status will last 2 seconds until the end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. So you finally need to output 4.\n>\n> Example 2:\n> + Input: [1,2], 2\n> + Output: 3\n> + Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status will last 2 seconds until the end of time point 2. However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. So you finally need to output 3.\n>\n> Note:\n> + You may assume the length of given time series array won't exceed 10000.\n> + You may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000.\n\n<!--more-->\n\nThis is Leetcode 495. It is an interesting problem, I like LLP, and Teemo is my favorite hero. So, I understand the problem description quickly and figure it out rapidly.\n\nIts tag is Array but I think use bitset will be a better solution if the time number is small.\n\nHere is the solution:\n\n```\nclass Solution {\n    public:\n        int findPoisonedDuration(vector<int>& timeSeries, int duration) {\n            if (timeSeries.size() == 0) {\n                return 0;\n            }\n\n            int res = 0;\n\n            sort(timeSeries.begin(), timeSeries.end());\n\n            for (int i = 0; i < (int)timeSeries.size() - 1; i++) {\n                if (timeSeries[i] + duration >= timeSeries[i + 1]) {\n                    res = res + (timeSeries[i + 1] - timeSeries[i]);\n                } else {\n                    res = res + duration;\n                }\n            }\n\n            return res + duration;\n        }\n};\n```\n\nSo easy, and it gets AC.\n","source":"_posts/TeemoAttacking.md","raw":"---\ntitle: Teemo Attacking\ndate: 2017-02-02 20:17:16\ntags:\n    - Array\n---\n\n> In LLP world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.\n>\n> You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.\n>\n> Example 1:\n> + Input: [1,4], 2\n> + Output: 4\n> + Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. This poisoned status will last 2 seconds until the end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. So you finally need to output 4.\n>\n> Example 2:\n> + Input: [1,2], 2\n> + Output: 3\n> + Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status will last 2 seconds until the end of time point 2. However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. So you finally need to output 3.\n>\n> Note:\n> + You may assume the length of given time series array won't exceed 10000.\n> + You may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000.\n\n<!--more-->\n\nThis is Leetcode 495. It is an interesting problem, I like LLP, and Teemo is my favorite hero. So, I understand the problem description quickly and figure it out rapidly.\n\nIts tag is Array but I think use bitset will be a better solution if the time number is small.\n\nHere is the solution:\n\n```\nclass Solution {\n    public:\n        int findPoisonedDuration(vector<int>& timeSeries, int duration) {\n            if (timeSeries.size() == 0) {\n                return 0;\n            }\n\n            int res = 0;\n\n            sort(timeSeries.begin(), timeSeries.end());\n\n            for (int i = 0; i < (int)timeSeries.size() - 1; i++) {\n                if (timeSeries[i] + duration >= timeSeries[i + 1]) {\n                    res = res + (timeSeries[i + 1] - timeSeries[i]);\n                } else {\n                    res = res + duration;\n                }\n            }\n\n            return res + duration;\n        }\n};\n```\n\nSo easy, and it gets AC.\n","slug":"TeemoAttacking","published":1,"updated":"2017-02-02T12:46:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzq006rx2f4u1ibrjwb","content":"<blockquote>\n<p>In LLP world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo’s attacking ascending time series towards Ashe and the poisoning time duration per Teemo’s attacking, you need to output the total time that Ashe is in poisoned condition.</p>\n<p>You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1,4], 2</li>\n<li>Output: 4</li>\n<li>Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. This poisoned status will last 2 seconds until the end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. So you finally need to output 4.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [1,2], 2</li>\n<li>Output: 3</li>\n<li>Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status will last 2 seconds until the end of time point 2. However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. Since the poisoned status won’t add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. So you finally need to output 3.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>You may assume the length of given time series array won’t exceed 10000.</li>\n<li>You may assume the numbers in the Teemo’s attacking time series and his poisoning time duration per attacking are non-negative integers, which won’t exceed 10,000,000.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 495. It is an interesting problem, I like LLP, and Teemo is my favorite hero. So, I understand the problem description quickly and figure it out rapidly.</p>\n<p>Its tag is Array but I think use bitset will be a better solution if the time number is small.</p>\n<p>Here is the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findPoisonedDuration(vector&lt;int&gt;&amp; timeSeries, int duration) &#123;</div><div class=\"line\">            if (timeSeries.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\"></div><div class=\"line\">            sort(timeSeries.begin(), timeSeries.end());</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)timeSeries.size() - 1; i++) &#123;</div><div class=\"line\">                if (timeSeries[i] + duration &gt;= timeSeries[i + 1]) &#123;</div><div class=\"line\">                    res = res + (timeSeries[i + 1] - timeSeries[i]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = res + duration;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res + duration;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>So easy, and it gets AC.</p>\n","excerpt":"<blockquote>\n<p>In LLP world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo’s attacking ascending time series towards Ashe and the poisoning time duration per Teemo’s attacking, you need to output the total time that Ashe is in poisoned condition.</p>\n<p>You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: [1,4], 2</li>\n<li>Output: 4</li>\n<li>Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. This poisoned status will last 2 seconds until the end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. So you finally need to output 4.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: [1,2], 2</li>\n<li>Output: 3</li>\n<li>Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status will last 2 seconds until the end of time point 2. However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. Since the poisoned status won’t add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. So you finally need to output 3.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>You may assume the length of given time series array won’t exceed 10000.</li>\n<li>You may assume the numbers in the Teemo’s attacking time series and his poisoning time duration per attacking are non-negative integers, which won’t exceed 10,000,000.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 495. It is an interesting problem, I like LLP, and Teemo is my favorite hero. So, I understand the problem description quickly and figure it out rapidly.</p>\n<p>Its tag is Array but I think use bitset will be a better solution if the time number is small.</p>\n<p>Here is the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findPoisonedDuration(vector&lt;int&gt;&amp; timeSeries, int duration) &#123;</div><div class=\"line\">            if (timeSeries.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\"></div><div class=\"line\">            sort(timeSeries.begin(), timeSeries.end());</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)timeSeries.size() - 1; i++) &#123;</div><div class=\"line\">                if (timeSeries[i] + duration &gt;= timeSeries[i + 1]) &#123;</div><div class=\"line\">                    res = res + (timeSeries[i + 1] - timeSeries[i]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = res + duration;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res + duration;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>So easy, and it gets AC.</p>"},{"title":"Total Hamming Distance","date":"2017-01-02T05:46:25.000Z","_content":"\n> The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n>\n> Now your job is to find the total Hamming distance between all pairs of the given numbers.\n>\n> Example:\n>\n> Input: 4, 14, 2\n> Output: 6\n>\n> Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n> showing the four bits relevant in this case). So the answer will be:\n> HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n>\n> Note:\n> + Elements of the given array are in the range of 0 to 10^9\n> + Length of the array will not exceed 10^4.\n>\n> Subscribe to see which companies asked this question\n\n<!--more-->\n\nThis is the leetcode No.477, we can quickly find a solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int totalHammingDistance(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < (int)nums.size() - 1; i++) {\n            for (int j = i + 1; j < (int)nums.size(); j++) {\n                sum += hamming_distance(nums[i], nums[j]);\n            }\n        }\n        return sum;\n    }\n\n    int hamming_distance(unsigned long long x, unsigned long long y) {\n        return __builtin_popcountll(x ^ y);\n    }\n};\n```\n\nIt is correct, however it time complex is O(n^2), and the result is TLE.\n\nSo, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.\n\n```\n0000 0000\n1110 0010\n1101 0101\n```\n\nWe get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)*(1) which stands for (n - bitCount) * bitCount.\n\nSo, what we should do is to add the total 32 bits.\n\nLast, here comes to a solution:\n\n```\nint totalHammingDistance(vector<int>& nums) {\n    int total = 0, bitCount = 0;\n    for (int idx = 0; idx < 32; idx++) {\n        for (int i = 0; i < (int)nums.size(); i++) {\n            bitCount += (nums[i] >> idx) & 1;\n        }\n        total += bitCount * (nums.size() - bitCount);\n    }\n    return total;\n}\n```\n\nAnd it's time complex is O(n*32) which means O(n) and it's accepted.\n","source":"_posts/TotalHammingDistance.md","raw":"---\ntitle: Total Hamming Distance\ndate: 2017-01-02 13:46:25\ntags: \n    - Bitmap\n---\n\n> The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n>\n> Now your job is to find the total Hamming distance between all pairs of the given numbers.\n>\n> Example:\n>\n> Input: 4, 14, 2\n> Output: 6\n>\n> Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n> showing the four bits relevant in this case). So the answer will be:\n> HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n>\n> Note:\n> + Elements of the given array are in the range of 0 to 10^9\n> + Length of the array will not exceed 10^4.\n>\n> Subscribe to see which companies asked this question\n\n<!--more-->\n\nThis is the leetcode No.477, we can quickly find a solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int totalHammingDistance(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < (int)nums.size() - 1; i++) {\n            for (int j = i + 1; j < (int)nums.size(); j++) {\n                sum += hamming_distance(nums[i], nums[j]);\n            }\n        }\n        return sum;\n    }\n\n    int hamming_distance(unsigned long long x, unsigned long long y) {\n        return __builtin_popcountll(x ^ y);\n    }\n};\n```\n\nIt is correct, however it time complex is O(n^2), and the result is TLE.\n\nSo, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.\n\n```\n0000 0000\n1110 0010\n1101 0101\n```\n\nWe get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)*(1) which stands for (n - bitCount) * bitCount.\n\nSo, what we should do is to add the total 32 bits.\n\nLast, here comes to a solution:\n\n```\nint totalHammingDistance(vector<int>& nums) {\n    int total = 0, bitCount = 0;\n    for (int idx = 0; idx < 32; idx++) {\n        for (int i = 0; i < (int)nums.size(); i++) {\n            bitCount += (nums[i] >> idx) & 1;\n        }\n        total += bitCount * (nums.size() - bitCount);\n    }\n    return total;\n}\n```\n\nAnd it's time complex is O(n*32) which means O(n) and it's accepted.\n","slug":"TotalHammingDistance","published":1,"updated":"2017-01-13T03:10:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzr006tx2f4r5tlu9le","content":"<blockquote>\n<p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>\n<p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p>\n<p>Example:</p>\n<p>Input: 4, 14, 2<br>Output: 6</p>\n<p>Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just<br>showing the four bits relevant in this case). So the answer will be:<br>HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.</p>\n<p>Note:</p>\n<ul>\n<li>Elements of the given array are in the range of 0 to 10^9</li>\n<li>Length of the array will not exceed 10^4.</li>\n</ul>\n<p>Subscribe to see which companies asked this question</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is the leetcode No.477, we can quickly find a solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">        int sum = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">            for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                sum += hamming_distance(nums[i], nums[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int hamming_distance(unsigned long long x, unsigned long long y) &#123;</div><div class=\"line\">        return __builtin_popcountll(x ^ y);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is correct, however it time complex is O(n^2), and the result is TLE.</p>\n<p>So, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">0000 0000</div><div class=\"line\">1110 0010</div><div class=\"line\">1101 0101</div></pre></td></tr></table></figure>\n<p>We get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)<em>(1) which stands for (n - bitCount) </em> bitCount.</p>\n<p>So, what we should do is to add the total 32 bits.</p>\n<p>Last, here comes to a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int total = 0, bitCount = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; 32; idx++) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">            bitCount += (nums[i] &gt;&gt; idx) &amp; 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        total += bitCount * (nums.size() - bitCount);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return total;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And it’s time complex is O(n*32) which means O(n) and it’s accepted.</p>\n","excerpt":"<blockquote>\n<p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>\n<p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p>\n<p>Example:</p>\n<p>Input: 4, 14, 2<br>Output: 6</p>\n<p>Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just<br>showing the four bits relevant in this case). So the answer will be:<br>HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.</p>\n<p>Note:</p>\n<ul>\n<li>Elements of the given array are in the range of 0 to 10^9</li>\n<li>Length of the array will not exceed 10^4.</li>\n</ul>\n<p>Subscribe to see which companies asked this question</p>\n</blockquote>","more":"<p>This is the leetcode No.477, we can quickly find a solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">        int sum = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">            for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                sum += hamming_distance(nums[i], nums[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int hamming_distance(unsigned long long x, unsigned long long y) &#123;</div><div class=\"line\">        return __builtin_popcountll(x ^ y);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is correct, however it time complex is O(n^2), and the result is TLE.</p>\n<p>So, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">0000 0000</div><div class=\"line\">1110 0010</div><div class=\"line\">1101 0101</div></pre></td></tr></table></figure>\n<p>We get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)<em>(1) which stands for (n - bitCount) </em> bitCount.</p>\n<p>So, what we should do is to add the total 32 bits.</p>\n<p>Last, here comes to a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int total = 0, bitCount = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; 32; idx++) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">            bitCount += (nums[i] &gt;&gt; idx) &amp; 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        total += bitCount * (nums.size() - bitCount);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return total;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And it’s time complex is O(n*32) which means O(n) and it’s accepted.</p>"},{"title":"Unique Substrings in Wraparound String","date":"2017-01-30T14:33:40.000Z","_content":"\n> Consider the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n>\n> Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.\n>\n> Note: p consists of only lowercase English letters and the size of p might be over 10000.\n>\n> Example 1:\n> + Input: \"a\"\n> + Output: 1\n> + Explanation: Only the substring \"a\" of string \"a\" is in the string \u0010s.\n>\n> Example 2:\n> + Input: \"cac\"\n> + Output: 2\n> + Explanation: There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\n>\n> Example 3:\n> + Input: \"zab\"\n> + Output: 6\n> + Explanation: There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s.\n\n<!--more-->\n\nThis is Leetcode 467. And it's a easy DP problem. Here is my solution:\n\n```\nclass Solution {\n\n    public:\n        int findSubstringInWraproundString(string p) {\n            vector<int> letters(26, 0);\n            int res = 0, len = 0;\n            for (int i = 0; i < (int)p.size(); i++) {\n                int cur = p[i] - 'a';\n                if (i > 0 && p[i - 1] != (cur + 26 - 1) % 26 + 'a') len = 0;\n                if (++len > letters[cur]) {\n                    res += len - letters[cur];\n                    letters[cur] = len;\n                }\n            }\n            return res;\n        }\n};\n\n```\n\nAnd, it gets AC.\n","source":"_posts/UniqueSubstringsinWraparoundString.md","raw":"---\ntitle: Unique Substrings in Wraparound String\ndate: 2017-01-30 22:33:40\ntags:\n    - Dynamic Programming\n---\n\n> Consider the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\n>\n> Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.\n>\n> Note: p consists of only lowercase English letters and the size of p might be over 10000.\n>\n> Example 1:\n> + Input: \"a\"\n> + Output: 1\n> + Explanation: Only the substring \"a\" of string \"a\" is in the string \u0010s.\n>\n> Example 2:\n> + Input: \"cac\"\n> + Output: 2\n> + Explanation: There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\n>\n> Example 3:\n> + Input: \"zab\"\n> + Output: 6\n> + Explanation: There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s.\n\n<!--more-->\n\nThis is Leetcode 467. And it's a easy DP problem. Here is my solution:\n\n```\nclass Solution {\n\n    public:\n        int findSubstringInWraproundString(string p) {\n            vector<int> letters(26, 0);\n            int res = 0, len = 0;\n            for (int i = 0; i < (int)p.size(); i++) {\n                int cur = p[i] - 'a';\n                if (i > 0 && p[i - 1] != (cur + 26 - 1) % 26 + 'a') len = 0;\n                if (++len > letters[cur]) {\n                    res += len - letters[cur];\n                    letters[cur] = len;\n                }\n            }\n            return res;\n        }\n};\n\n```\n\nAnd, it gets AC.\n","slug":"UniqueSubstringsinWraparoundString","published":1,"updated":"2017-01-30T15:07:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzt006wx2f4odtr89e0","content":"<blockquote>\n<p>Consider the string s to be the infinite wraparound string of “abcdefghijklmnopqrstuvwxyz”, so s will look like this: “…zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd….”.</p>\n<p>Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.</p>\n<p>Note: p consists of only lowercase English letters and the size of p might be over 10000.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: “a”</li>\n<li>Output: 1</li>\n<li>Explanation: Only the substring “a” of string “a” is in the string \u0010s.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: “cac”</li>\n<li>Output: 2</li>\n<li>Explanation: There are two substrings “a”, “c” of string “cac” in the string s.</li>\n</ul>\n<p>Example 3:</p>\n<ul>\n<li>Input: “zab”</li>\n<li>Output: 6</li>\n<li>Explanation: There are six substrings “z”, “a”, “b”, “za”, “ab”, “zab” of string “zab” in the string s.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 467. And it’s a easy DP problem. Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        int findSubstringInWraproundString(string p) &#123;</div><div class=\"line\">            vector&lt;int&gt; letters(26, 0);</div><div class=\"line\">            int res = 0, len = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)p.size(); i++) &#123;</div><div class=\"line\">                int cur = p[i] - &apos;a&apos;;</div><div class=\"line\">                if (i &gt; 0 &amp;&amp; p[i - 1] != (cur + 26 - 1) % 26 + &apos;a&apos;) len = 0;</div><div class=\"line\">                if (++len &gt; letters[cur]) &#123;</div><div class=\"line\">                    res += len - letters[cur];</div><div class=\"line\">                    letters[cur] = len;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And, it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Consider the string s to be the infinite wraparound string of “abcdefghijklmnopqrstuvwxyz”, so s will look like this: “…zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd….”.</p>\n<p>Now we have another string p. Your job is to find out how many unique non-empty substrings of p are present in s. In particular, your input is the string p and you need to output the number of different non-empty substrings of p in the string s.</p>\n<p>Note: p consists of only lowercase English letters and the size of p might be over 10000.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: “a”</li>\n<li>Output: 1</li>\n<li>Explanation: Only the substring “a” of string “a” is in the string \u0010s.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: “cac”</li>\n<li>Output: 2</li>\n<li>Explanation: There are two substrings “a”, “c” of string “cac” in the string s.</li>\n</ul>\n<p>Example 3:</p>\n<ul>\n<li>Input: “zab”</li>\n<li>Output: 6</li>\n<li>Explanation: There are six substrings “z”, “a”, “b”, “za”, “ab”, “zab” of string “zab” in the string s.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 467. And it’s a easy DP problem. Here is my solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\"></div><div class=\"line\">    public:</div><div class=\"line\">        int findSubstringInWraproundString(string p) &#123;</div><div class=\"line\">            vector&lt;int&gt; letters(26, 0);</div><div class=\"line\">            int res = 0, len = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)p.size(); i++) &#123;</div><div class=\"line\">                int cur = p[i] - &apos;a&apos;;</div><div class=\"line\">                if (i &gt; 0 &amp;&amp; p[i - 1] != (cur + 26 - 1) % 26 + &apos;a&apos;) len = 0;</div><div class=\"line\">                if (++len &gt; letters[cur]) &#123;</div><div class=\"line\">                    res += len - letters[cur];</div><div class=\"line\">                    letters[cur] = len;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And, it gets AC.</p>"},{"title":"Water and Jug Problem","date":"2017-04-17T10:25:56.000Z","_content":"\n> You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.\n>\n> If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.\n>\n> Operations allowed:\n>\n> + Fill any of the jugs completely with water.\n> + Empty any of the jugs.\n> + Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.\n>\n> Example 1: (From the famous \"Die Hard\" example)\n>```\nInput: x = 3, y = 5, z = 4\nOutput: True\n```\n> Example 2:\n>```\n> Input: x = 2, y = 6, z = 5\n> Output: False\n```\n\n<!--more-->\n\nIt is Leetcode No.365. It is a pure Math problem. What you need to know is the number theory and the proof.\n\nThe conclusion is that if a number z is the multiple of the GCD between x and y, then we can't find a solution to use the two bottle to get z L water.\n\nThen why we use GCD here? It is fun. According to the wikipedia:\n\n> Bézout's identity (also called Bézout's lemma) is a theorem in the elementary theory of numbers:\n> + let a and b be nonzero integers and let d be their greatest common divisor. Then there exist integers x and y such that ax+by=d\n> + In addition, the greatest common divisor d is the smallest positive integer that can be written as ax + by\n> + every integer of the form ax + by is a multiple of the greatest common divisor d.\n\nWe can know this conclusion. So the solution is:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canMeasureWater(int x, int y, int z) {\n            if (x + y < z) {\n                return false;\n            }\n\n            if (x == z || y == z || x + y == z) {\n                return true;\n            }\n\n            return (z % GCD(x, y) == 0);\n        }\n\n\n        int GCD(int a, int b){\n            while(b != 0 ){\n                int temp = b;\n                b = a%b;\n                a = temp;\n            }\n            return a;\n        }\n};\n```\n\nThe solution is simple and gets AC.\n","source":"_posts/WaterandJugProblem.md","raw":"---\ntitle: Water and Jug Problem\ndate: 2017-04-17 18:25:56\ntags:\n    - Math\n---\n\n> You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.\n>\n> If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.\n>\n> Operations allowed:\n>\n> + Fill any of the jugs completely with water.\n> + Empty any of the jugs.\n> + Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.\n>\n> Example 1: (From the famous \"Die Hard\" example)\n>```\nInput: x = 3, y = 5, z = 4\nOutput: True\n```\n> Example 2:\n>```\n> Input: x = 2, y = 6, z = 5\n> Output: False\n```\n\n<!--more-->\n\nIt is Leetcode No.365. It is a pure Math problem. What you need to know is the number theory and the proof.\n\nThe conclusion is that if a number z is the multiple of the GCD between x and y, then we can't find a solution to use the two bottle to get z L water.\n\nThen why we use GCD here? It is fun. According to the wikipedia:\n\n> Bézout's identity (also called Bézout's lemma) is a theorem in the elementary theory of numbers:\n> + let a and b be nonzero integers and let d be their greatest common divisor. Then there exist integers x and y such that ax+by=d\n> + In addition, the greatest common divisor d is the smallest positive integer that can be written as ax + by\n> + every integer of the form ax + by is a multiple of the greatest common divisor d.\n\nWe can know this conclusion. So the solution is:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canMeasureWater(int x, int y, int z) {\n            if (x + y < z) {\n                return false;\n            }\n\n            if (x == z || y == z || x + y == z) {\n                return true;\n            }\n\n            return (z % GCD(x, y) == 0);\n        }\n\n\n        int GCD(int a, int b){\n            while(b != 0 ){\n                int temp = b;\n                b = a%b;\n                a = temp;\n            }\n            return a;\n        }\n};\n```\n\nThe solution is simple and gets AC.\n","slug":"WaterandJugProblem","published":1,"updated":"2017-04-17T10:51:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzu006yx2f4c40e66zr","content":"<blockquote>\n<p>You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.</p>\n<p>If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.</p>\n<p>Operations allowed:</p>\n<ul>\n<li>Fill any of the jugs completely with water.</li>\n<li>Empty any of the jugs.</li>\n<li>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.</li>\n</ul>\n<p>Example 1: (From the famous “Die Hard” example)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: x = 3, y = 5, z = 4</div><div class=\"line\">Output: True</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Input: x = 2, y = 6, z = 5</div><div class=\"line\">&gt; Output: False</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode No.365. It is a pure Math problem. What you need to know is the number theory and the proof.</p>\n<p>The conclusion is that if a number z is the multiple of the GCD between x and y, then we can’t find a solution to use the two bottle to get z L water.</p>\n<p>Then why we use GCD here? It is fun. According to the wikipedia:</p>\n<blockquote>\n<p>Bézout’s identity (also called Bézout’s lemma) is a theorem in the elementary theory of numbers:</p>\n<ul>\n<li>let a and b be nonzero integers and let d be their greatest common divisor. Then there exist integers x and y such that ax+by=d</li>\n<li>In addition, the greatest common divisor d is the smallest positive integer that can be written as ax + by</li>\n<li>every integer of the form ax + by is a multiple of the greatest common divisor d.</li>\n</ul>\n</blockquote>\n<p>We can know this conclusion. So the solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canMeasureWater(int x, int y, int z) &#123;</div><div class=\"line\">            if (x + y &lt; z) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (x == z || y == z || x + y == z) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return (z % GCD(x, y) == 0);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        int GCD(int a, int b)&#123;</div><div class=\"line\">            while(b != 0 )&#123;</div><div class=\"line\">                int temp = b;</div><div class=\"line\">                b = a%b;</div><div class=\"line\">                a = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return a;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>The solution is simple and gets AC.</p>\n","excerpt":"<blockquote>\n<p>You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.</p>\n<p>If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.</p>\n<p>Operations allowed:</p>\n<ul>\n<li>Fill any of the jugs completely with water.</li>\n<li>Empty any of the jugs.</li>\n<li>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.</li>\n</ul>\n<p>Example 1: (From the famous “Die Hard” example)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Input: x = 3, y = 5, z = 4</div><div class=\"line\">Output: True</div></pre></td></tr></table></figure></p>\n<p>Example 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Input: x = 2, y = 6, z = 5</div><div class=\"line\">&gt; Output: False</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<p>It is Leetcode No.365. It is a pure Math problem. What you need to know is the number theory and the proof.</p>\n<p>The conclusion is that if a number z is the multiple of the GCD between x and y, then we can’t find a solution to use the two bottle to get z L water.</p>\n<p>Then why we use GCD here? It is fun. According to the wikipedia:</p>\n<blockquote>\n<p>Bézout’s identity (also called Bézout’s lemma) is a theorem in the elementary theory of numbers:</p>\n<ul>\n<li>let a and b be nonzero integers and let d be their greatest common divisor. Then there exist integers x and y such that ax+by=d</li>\n<li>In addition, the greatest common divisor d is the smallest positive integer that can be written as ax + by</li>\n<li>every integer of the form ax + by is a multiple of the greatest common divisor d.</li>\n</ul>\n</blockquote>\n<p>We can know this conclusion. So the solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canMeasureWater(int x, int y, int z) &#123;</div><div class=\"line\">            if (x + y &lt; z) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if (x == z || y == z || x + y == z) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return (z % GCD(x, y) == 0);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        int GCD(int a, int b)&#123;</div><div class=\"line\">            while(b != 0 )&#123;</div><div class=\"line\">                int temp = b;</div><div class=\"line\">                b = a%b;</div><div class=\"line\">                a = temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return a;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>The solution is simple and gets AC.</p>"},{"title":"Valid Perfect Square","date":"2017-01-25T14:15:29.000Z","_content":"\n> Given a positive integer num, write a function which returns True if num is a perfect square else False.\n>\n> Note: Do not use any built-in library function such as sqrt.\n>\n> Example 1:\n> + Input: 16\n> + Returns: True\n>\n> Example 2:\n> + Input: 14\n> + Returns: False\n\n<!--more-->\n\nIt's Leetcode 367. Easy problem, but it's easy to get wrong when the mid * mid is larger than the INT_MAX.\n\n```\nclass Solution {\n    public:\n        bool isPerfectSquare(int num) {\n            long long start = 0, end = num; // use long long to avoid such a case\n            while (start <= end) {\n                long long mid = end - ((end - start) / 2);\n                if (mid * mid == num) {\n                    return true;\n                } else if (mid * mid > num) {\n                    end = mid - 1;\n                } else {\n                    start = mid + 1;\n                }\n            }\n            return false;\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/ValidPerfectSquare.md","raw":"---\ntitle: Valid Perfect Square\ndate: 2017-01-25 22:15:29\ntags:\n    - Binary Search\n    - Math\n---\n\n> Given a positive integer num, write a function which returns True if num is a perfect square else False.\n>\n> Note: Do not use any built-in library function such as sqrt.\n>\n> Example 1:\n> + Input: 16\n> + Returns: True\n>\n> Example 2:\n> + Input: 14\n> + Returns: False\n\n<!--more-->\n\nIt's Leetcode 367. Easy problem, but it's easy to get wrong when the mid * mid is larger than the INT_MAX.\n\n```\nclass Solution {\n    public:\n        bool isPerfectSquare(int num) {\n            long long start = 0, end = num; // use long long to avoid such a case\n            while (start <= end) {\n                long long mid = end - ((end - start) / 2);\n                if (mid * mid == num) {\n                    return true;\n                } else if (mid * mid > num) {\n                    end = mid - 1;\n                } else {\n                    start = mid + 1;\n                }\n            }\n            return false;\n        }\n};\n```\n\nIt gets AC.\n","slug":"ValidPerfectSquare","published":1,"updated":"2017-01-25T14:25:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzv0071x2f4atm0auar","content":"<blockquote>\n<p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p>\n<p>Note: Do not use any built-in library function such as sqrt.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 16</li>\n<li>Returns: True</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: 14</li>\n<li>Returns: False</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>It’s Leetcode 367. Easy problem, but it’s easy to get wrong when the mid * mid is larger than the INT_MAX.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool isPerfectSquare(int num) &#123;</div><div class=\"line\">            long long start = 0, end = num; // use long long to avoid such a case</div><div class=\"line\">            while (start &lt;= end) &#123;</div><div class=\"line\">                long long mid = end - ((end - start) / 2);</div><div class=\"line\">                if (mid * mid == num) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125; else if (mid * mid &gt; num) &#123;</div><div class=\"line\">                    end = mid - 1;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    start = mid + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a positive integer num, write a function which returns True if num is a perfect square else False.</p>\n<p>Note: Do not use any built-in library function such as sqrt.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: 16</li>\n<li>Returns: True</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: 14</li>\n<li>Returns: False</li>\n</ul>\n</blockquote>","more":"<p>It’s Leetcode 367. Easy problem, but it’s easy to get wrong when the mid * mid is larger than the INT_MAX.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool isPerfectSquare(int num) &#123;</div><div class=\"line\">            long long start = 0, end = num; // use long long to avoid such a case</div><div class=\"line\">            while (start &lt;= end) &#123;</div><div class=\"line\">                long long mid = end - ((end - start) / 2);</div><div class=\"line\">                if (mid * mid == num) &#123;</div><div class=\"line\">                    return true;</div><div class=\"line\">                &#125; else if (mid * mid &gt; num) &#123;</div><div class=\"line\">                    end = mid - 1;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    start = mid + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Wiggle Sort II","date":"2017-04-15T13:56:35.000Z","_content":"\n> Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n>\n> Example:\n>```\n(1). Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6].\n(2). Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].\n```\n> Note:\n> You may assume all input has valid answer.\n>\n> Follow Up:\n> Can you do it in O(n) time and/or in-place with O(1) extra space?\n\n<!--more-->\n\nThis is Leetcode No.312. It is not an easy problem. Because all you can find is a O(nlogn) method.\n\nYou have to find the middle number and then the divide these numbers into 3 kinds:\n\n1. larger than the middle.\n2. equal to the middle.\n3. smaller than the middle.\n\nThen, you have to mark these numbers, into a map like following:\n\n```\nOriginal Index:    0  1  2  3  4  5  6  7  8  9 10 11\nMapped Index:      1  3  5  7  9 11  0  2  4  6  8 10\n```\n\nThen change the Mapped index into the original index.\n\n```\nMapped Indices:      0  1  2  3  4  5  6  7  8  9 10 11\nOriginal Indices:    6  0  7  1  8  2  9  3 10  4 11  5   (wiggled)\n```\n\nThen here the result comes. But how to find the middle number? You may find the sorting first. But even the quick-sort will use O(nlogn) time. So, Here I use the nth_element method in STL. Its time cost is O(n) (cheating :)) .\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void wiggleSort(vector<int>& nums) {\n            if (nums.empty()) {\n                return;\n            }\n            int n = nums.size();\n\n            vector<int>::iterator nth = next(nums.begin(), n / 2);\n            nth_element(nums.begin(), nth, nums.end());\n            int median = *nth;\n\n            auto m = [n](int idx) { return (2 * idx + 1) % (n | 1); };\n            int first = 0, mid = 0, last = n - 1;\n            while (mid <= last) {\n                if (nums[m(mid)] > median) {\n                    swap(nums[m(first)], nums[m(mid)]);\n                    ++first;\n                    ++mid;\n                }\n                else if (nums[m(mid)] < median) {\n                    swap(nums[m(mid)], nums[m(last)]);\n                    --last;\n                }\n                else {\n                    ++mid;\n                }\n            }\n        }\n};\n```\n\nIt gets AC.\n","source":"_posts/WiggleSortII.md","raw":"---\ntitle: Wiggle Sort II\ndate: 2017-04-15 21:56:35\ntags:\n    - Array\n---\n\n> Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n>\n> Example:\n>```\n(1). Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6].\n(2). Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].\n```\n> Note:\n> You may assume all input has valid answer.\n>\n> Follow Up:\n> Can you do it in O(n) time and/or in-place with O(1) extra space?\n\n<!--more-->\n\nThis is Leetcode No.312. It is not an easy problem. Because all you can find is a O(nlogn) method.\n\nYou have to find the middle number and then the divide these numbers into 3 kinds:\n\n1. larger than the middle.\n2. equal to the middle.\n3. smaller than the middle.\n\nThen, you have to mark these numbers, into a map like following:\n\n```\nOriginal Index:    0  1  2  3  4  5  6  7  8  9 10 11\nMapped Index:      1  3  5  7  9 11  0  2  4  6  8 10\n```\n\nThen change the Mapped index into the original index.\n\n```\nMapped Indices:      0  1  2  3  4  5  6  7  8  9 10 11\nOriginal Indices:    6  0  7  1  8  2  9  3 10  4 11  5   (wiggled)\n```\n\nThen here the result comes. But how to find the middle number? You may find the sorting first. But even the quick-sort will use O(nlogn) time. So, Here I use the nth_element method in STL. Its time cost is O(n) (cheating :)) .\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        void wiggleSort(vector<int>& nums) {\n            if (nums.empty()) {\n                return;\n            }\n            int n = nums.size();\n\n            vector<int>::iterator nth = next(nums.begin(), n / 2);\n            nth_element(nums.begin(), nth, nums.end());\n            int median = *nth;\n\n            auto m = [n](int idx) { return (2 * idx + 1) % (n | 1); };\n            int first = 0, mid = 0, last = n - 1;\n            while (mid <= last) {\n                if (nums[m(mid)] > median) {\n                    swap(nums[m(first)], nums[m(mid)]);\n                    ++first;\n                    ++mid;\n                }\n                else if (nums[m(mid)] < median) {\n                    swap(nums[m(mid)], nums[m(last)]);\n                    --last;\n                }\n                else {\n                    ++mid;\n                }\n            }\n        }\n};\n```\n\nIt gets AC.\n","slug":"WiggleSortII","published":1,"updated":"2017-04-15T14:53:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzw0073x2f440yf11u8","content":"<blockquote>\n<p>Given an unsorted array nums, reorder it such that nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]….</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(1). Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6].</div><div class=\"line\">(2). Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].</div></pre></td></tr></table></figure></p>\n<p>Note:<br>You may assume all input has valid answer.</p>\n<p>Follow Up:<br>Can you do it in O(n) time and/or in-place with O(1) extra space?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode No.312. It is not an easy problem. Because all you can find is a O(nlogn) method.</p>\n<p>You have to find the middle number and then the divide these numbers into 3 kinds:</p>\n<ol>\n<li>larger than the middle.</li>\n<li>equal to the middle.</li>\n<li>smaller than the middle.</li>\n</ol>\n<p>Then, you have to mark these numbers, into a map like following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Original Index:    0  1  2  3  4  5  6  7  8  9 10 11</div><div class=\"line\">Mapped Index:      1  3  5  7  9 11  0  2  4  6  8 10</div></pre></td></tr></table></figure>\n<p>Then change the Mapped index into the original index.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mapped Indices:      0  1  2  3  4  5  6  7  8  9 10 11</div><div class=\"line\">Original Indices:    6  0  7  1  8  2  9  3 10  4 11  5   (wiggled)</div></pre></td></tr></table></figure>\n<p>Then here the result comes. But how to find the middle number? You may find the sorting first. But even the quick-sort will use O(nlogn) time. So, Here I use the nth_element method in STL. Its time cost is O(n) (cheating :)) .</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void wiggleSort(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.empty()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int n = nums.size();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt;::iterator nth = next(nums.begin(), n / 2);</div><div class=\"line\">            nth_element(nums.begin(), nth, nums.end());</div><div class=\"line\">            int median = *nth;</div><div class=\"line\"></div><div class=\"line\">            auto m = [n](int idx) &#123; return (2 * idx + 1) % (n | 1); &#125;;</div><div class=\"line\">            int first = 0, mid = 0, last = n - 1;</div><div class=\"line\">            while (mid &lt;= last) &#123;</div><div class=\"line\">                if (nums[m(mid)] &gt; median) &#123;</div><div class=\"line\">                    swap(nums[m(first)], nums[m(mid)]);</div><div class=\"line\">                    ++first;</div><div class=\"line\">                    ++mid;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else if (nums[m(mid)] &lt; median) &#123;</div><div class=\"line\">                    swap(nums[m(mid)], nums[m(last)]);</div><div class=\"line\">                    --last;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123;</div><div class=\"line\">                    ++mid;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an unsorted array nums, reorder it such that nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]….</p>\n<p>Example:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(1). Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6].</div><div class=\"line\">(2). Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].</div></pre></td></tr></table></figure></p>\n<p>Note:<br>You may assume all input has valid answer.</p>\n<p>Follow Up:<br>Can you do it in O(n) time and/or in-place with O(1) extra space?</p>\n</blockquote>","more":"<p>This is Leetcode No.312. It is not an easy problem. Because all you can find is a O(nlogn) method.</p>\n<p>You have to find the middle number and then the divide these numbers into 3 kinds:</p>\n<ol>\n<li>larger than the middle.</li>\n<li>equal to the middle.</li>\n<li>smaller than the middle.</li>\n</ol>\n<p>Then, you have to mark these numbers, into a map like following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Original Index:    0  1  2  3  4  5  6  7  8  9 10 11</div><div class=\"line\">Mapped Index:      1  3  5  7  9 11  0  2  4  6  8 10</div></pre></td></tr></table></figure>\n<p>Then change the Mapped index into the original index.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Mapped Indices:      0  1  2  3  4  5  6  7  8  9 10 11</div><div class=\"line\">Original Indices:    6  0  7  1  8  2  9  3 10  4 11  5   (wiggled)</div></pre></td></tr></table></figure>\n<p>Then here the result comes. But how to find the middle number? You may find the sorting first. But even the quick-sort will use O(nlogn) time. So, Here I use the nth_element method in STL. Its time cost is O(n) (cheating :)) .</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        void wiggleSort(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.empty()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int n = nums.size();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;int&gt;::iterator nth = next(nums.begin(), n / 2);</div><div class=\"line\">            nth_element(nums.begin(), nth, nums.end());</div><div class=\"line\">            int median = *nth;</div><div class=\"line\"></div><div class=\"line\">            auto m = [n](int idx) &#123; return (2 * idx + 1) % (n | 1); &#125;;</div><div class=\"line\">            int first = 0, mid = 0, last = n - 1;</div><div class=\"line\">            while (mid &lt;= last) &#123;</div><div class=\"line\">                if (nums[m(mid)] &gt; median) &#123;</div><div class=\"line\">                    swap(nums[m(first)], nums[m(mid)]);</div><div class=\"line\">                    ++first;</div><div class=\"line\">                    ++mid;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else if (nums[m(mid)] &lt; median) &#123;</div><div class=\"line\">                    swap(nums[m(mid)], nums[m(last)]);</div><div class=\"line\">                    --last;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123;</div><div class=\"line\">                    ++mid;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC.</p>"},{"title":"Word Search II","date":"2017-04-04T02:42:50.000Z","_content":"\n> Given a 2D board and a list of words from the dictionary, find all words in the board.\n>\n> Each word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n>\n> For example,\n> Given words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board =\n> ```\n[\n    ['o','a','a','n'],\n    ['e','t','a','e'],\n    ['i','h','k','r'],\n    ['i','f','l','v']\n]\n```\n> Return [\"eat\",\"oath\"].\n>\n<!--more-->\n> Note:\n> You may assume that all inputs are consist of lowercase letters a-z.\n\nThis is leetcode No.212. It is a extended problem of \"Word Search\". The different point is that you should try your best to reduce the times you compare the words.\n\nSo, I prefer to use Trie tree to solve this problem.\n\nThe following code is to create a Trie Tree.\n```\nvoid buildTree(Node &parent, int idx, string str) {\n    if (idx == (int)str.length()) {\n        return;\n    }\n    if (parent.nexts.find(str[idx]) == parent.nexts.end()) {\n        Node node;\n        map<char, Node> nexts;\n        node.nexts = nexts;\n        node.ch = str[idx];\n        node.word = str;\n        parent.nexts.insert(pair<char, Node>(str[idx], node));\n    }\n    buildTree(parent.nexts.find(str[idx])->second, idx + 1, str);\n}\n```\n\nAnd, what I should do next is to use DFS to search in the total board.\n\n```\nusing namespace std;\n\nstruct Node {\n    char ch;\n    map<char, Node> nexts;\n    string word;\n};\n\nclass Solution {\n    public:\n        set<string> res;\n        set<string> targets;\n        vector<string> findWords(vector<vector<char> >& board, vector<string>& words) {\n            sort(words.begin(), words.end());\n\n            vector<string> result;\n            if (words.size() == 0) {\n                return result;\n            }\n            res.clear();\n\n            Node root;\n            root.ch = '0';\n            map<char, Node> nexts;\n            root.nexts = nexts;\n            root.word = \"\";\n\n            for (auto word : words) {\n                targets.insert(word);\n                buildTree(root, 0, word);\n            }\n\n            // display(root);\n\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    vector<vector<bool> > visited;\n                    for (int i = 0; i < (int)board.size(); i++) {\n                        vector<bool> level(board[0].size(), false);\n                        visited.push_back(level);\n                    }\n                    findWords(board, visited, idx, idy, root, 0);\n                }\n            }\n\n            for (auto i : res) {\n                if (i != \"\") {\n                    result.push_back(i);\n                }\n            }\n            return result;\n        }\n\n        void findWords(vector<vector<char> > &board, vector<vector<bool> > &visited, int idx, int idy, Node current, int len) {\n            if (current.nexts.size() == 0) {\n                res.insert(current.word);\n                return;\n            } else if (len == (int)current.word.length()) {\n                res.insert(current.word);\n            }\n            if (idx < 0 || idx >= (int)board.size() || idy < 0 || idy >= (int)board[0].size()) {\n                return;\n            }\n            if (visited[idx][idy] == true) {\n                return;\n            }\n            if (current.nexts.find(board[idx][idy]) == current.nexts.end()) {\n                return;\n            } else {\n                visited[idx][idy] = true;\n                findWords(board, visited, idx + 1, idy, current.nexts.find(board[idx][idy])->second, len + 1);\n                findWords(board, visited, idx - 1, idy, current.nexts.find(board[idx][idy])->second, len + 1);\n                findWords(board, visited, idx, idy + 1, current.nexts.find(board[idx][idy])->second, len + 1);\n                findWords(board, visited, idx, idy - 1, current.nexts.find(board[idx][idy])->second, len + 1);\n                visited[idx][idy] = false;\n            }\n        }\n\n        void buildTree(Node &parent, int idx, string str) {\n            if (idx == (int)str.length()) {\n                return;\n            }\n            if (parent.nexts.find(str[idx]) == parent.nexts.end()) {\n                Node node;\n                map<char, Node> nexts;\n                node.nexts = nexts;\n                node.ch = str[idx];\n                node.word = str;\n                parent.nexts.insert(pair<char, Node>(str[idx], node));\n            }\n            buildTree(parent.nexts.find(str[idx])->second, idx + 1, str);\n        }\n\n        void display(Node node) {\n            for (auto i : node.nexts) {\n                cout << i.first << ':' << i.second.word << endl;\n                display(i.second);\n            }\n        }\n};\n```\n\nBut it gets TLE.\n\nSo, I try to reduce the time. Then the code becomes:\n\n```\nusing namespace std;\n\nclass TrieNode{\n    public:\n        bool is_end;\n        vector<TrieNode*> children;\n        TrieNode(){\n            is_end=false;\n            children=vector<TrieNode*>(26, NULL);\n        }\n};\n\nclass Trie{\n    public:\n        TrieNode* getRoot(){return root;}\n        Trie(vector<string>& words){\n            root=new TrieNode();\n            for(int i=0; i<words.size(); ++i)\n                addWord(words[i]);\n        }\n        void addWord(const string& word){\n            TrieNode* cur=root;\n            for(int i=0; i<word.size(); ++i){\n                int index=word[i]-'a';\n                if(cur->children[index]==NULL)\n                    cur->children[index]=new TrieNode();\n                cur=cur->children[index];\n            }\n            cur->is_end=true;\n        }\n    private:\n        TrieNode* root;\n};\n\nclass Solution {\n    public:\n        vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n            Trie* trie = new Trie(words);\n            TrieNode* root=trie->getRoot();\n            set<string> result_set;\n            for(int x=0; x<board.size(); ++x)\n                for(int y=0; y<board[0].size(); ++y)\n                    findWords(board, x, y, root, \"\", result_set);\n\n            vector<string> result;\n            for(auto it:result_set)    result.push_back(it);\n            return result;\n        }\n    private:\n        void findWords(vector<vector<char>>& board, int x, int y, TrieNode* root, string word, set<string>& result){\n            if(x<0||x>=board.size()||y<0||y>=board[0].size() || board[x][y]==' ') return;\n\n            if(root->children[board[x][y]-'a'] != NULL){\n                word=word+board[x][y];\n                root=root->children[board[x][y]-'a'];\n                if(root->is_end) result.insert(word);\n                char c=board[x][y];\n                board[x][y]=' ';\n                findWords(board, x+1, y, root, word, result);\n                findWords(board, x-1, y, root, word, result);\n                findWords(board, x, y+1, root, word, result);\n                findWords(board, x, y-1, root, word, result);\n                board[x][y]=c;\n            }\n        }\n};\n```\n\nIt gets AC. What a complicated problem.\n","source":"_posts/WordSearchII.md","raw":"---\ntitle: Word Search II\ndate: 2017-04-04 10:42:50\ntags:\n    - Trie\n    - Backtracking\n    - Depth-first Search\n---\n\n> Given a 2D board and a list of words from the dictionary, find all words in the board.\n>\n> Each word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n>\n> For example,\n> Given words = [\"oath\",\"pea\",\"eat\",\"rain\"] and board =\n> ```\n[\n    ['o','a','a','n'],\n    ['e','t','a','e'],\n    ['i','h','k','r'],\n    ['i','f','l','v']\n]\n```\n> Return [\"eat\",\"oath\"].\n>\n<!--more-->\n> Note:\n> You may assume that all inputs are consist of lowercase letters a-z.\n\nThis is leetcode No.212. It is a extended problem of \"Word Search\". The different point is that you should try your best to reduce the times you compare the words.\n\nSo, I prefer to use Trie tree to solve this problem.\n\nThe following code is to create a Trie Tree.\n```\nvoid buildTree(Node &parent, int idx, string str) {\n    if (idx == (int)str.length()) {\n        return;\n    }\n    if (parent.nexts.find(str[idx]) == parent.nexts.end()) {\n        Node node;\n        map<char, Node> nexts;\n        node.nexts = nexts;\n        node.ch = str[idx];\n        node.word = str;\n        parent.nexts.insert(pair<char, Node>(str[idx], node));\n    }\n    buildTree(parent.nexts.find(str[idx])->second, idx + 1, str);\n}\n```\n\nAnd, what I should do next is to use DFS to search in the total board.\n\n```\nusing namespace std;\n\nstruct Node {\n    char ch;\n    map<char, Node> nexts;\n    string word;\n};\n\nclass Solution {\n    public:\n        set<string> res;\n        set<string> targets;\n        vector<string> findWords(vector<vector<char> >& board, vector<string>& words) {\n            sort(words.begin(), words.end());\n\n            vector<string> result;\n            if (words.size() == 0) {\n                return result;\n            }\n            res.clear();\n\n            Node root;\n            root.ch = '0';\n            map<char, Node> nexts;\n            root.nexts = nexts;\n            root.word = \"\";\n\n            for (auto word : words) {\n                targets.insert(word);\n                buildTree(root, 0, word);\n            }\n\n            // display(root);\n\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    vector<vector<bool> > visited;\n                    for (int i = 0; i < (int)board.size(); i++) {\n                        vector<bool> level(board[0].size(), false);\n                        visited.push_back(level);\n                    }\n                    findWords(board, visited, idx, idy, root, 0);\n                }\n            }\n\n            for (auto i : res) {\n                if (i != \"\") {\n                    result.push_back(i);\n                }\n            }\n            return result;\n        }\n\n        void findWords(vector<vector<char> > &board, vector<vector<bool> > &visited, int idx, int idy, Node current, int len) {\n            if (current.nexts.size() == 0) {\n                res.insert(current.word);\n                return;\n            } else if (len == (int)current.word.length()) {\n                res.insert(current.word);\n            }\n            if (idx < 0 || idx >= (int)board.size() || idy < 0 || idy >= (int)board[0].size()) {\n                return;\n            }\n            if (visited[idx][idy] == true) {\n                return;\n            }\n            if (current.nexts.find(board[idx][idy]) == current.nexts.end()) {\n                return;\n            } else {\n                visited[idx][idy] = true;\n                findWords(board, visited, idx + 1, idy, current.nexts.find(board[idx][idy])->second, len + 1);\n                findWords(board, visited, idx - 1, idy, current.nexts.find(board[idx][idy])->second, len + 1);\n                findWords(board, visited, idx, idy + 1, current.nexts.find(board[idx][idy])->second, len + 1);\n                findWords(board, visited, idx, idy - 1, current.nexts.find(board[idx][idy])->second, len + 1);\n                visited[idx][idy] = false;\n            }\n        }\n\n        void buildTree(Node &parent, int idx, string str) {\n            if (idx == (int)str.length()) {\n                return;\n            }\n            if (parent.nexts.find(str[idx]) == parent.nexts.end()) {\n                Node node;\n                map<char, Node> nexts;\n                node.nexts = nexts;\n                node.ch = str[idx];\n                node.word = str;\n                parent.nexts.insert(pair<char, Node>(str[idx], node));\n            }\n            buildTree(parent.nexts.find(str[idx])->second, idx + 1, str);\n        }\n\n        void display(Node node) {\n            for (auto i : node.nexts) {\n                cout << i.first << ':' << i.second.word << endl;\n                display(i.second);\n            }\n        }\n};\n```\n\nBut it gets TLE.\n\nSo, I try to reduce the time. Then the code becomes:\n\n```\nusing namespace std;\n\nclass TrieNode{\n    public:\n        bool is_end;\n        vector<TrieNode*> children;\n        TrieNode(){\n            is_end=false;\n            children=vector<TrieNode*>(26, NULL);\n        }\n};\n\nclass Trie{\n    public:\n        TrieNode* getRoot(){return root;}\n        Trie(vector<string>& words){\n            root=new TrieNode();\n            for(int i=0; i<words.size(); ++i)\n                addWord(words[i]);\n        }\n        void addWord(const string& word){\n            TrieNode* cur=root;\n            for(int i=0; i<word.size(); ++i){\n                int index=word[i]-'a';\n                if(cur->children[index]==NULL)\n                    cur->children[index]=new TrieNode();\n                cur=cur->children[index];\n            }\n            cur->is_end=true;\n        }\n    private:\n        TrieNode* root;\n};\n\nclass Solution {\n    public:\n        vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n            Trie* trie = new Trie(words);\n            TrieNode* root=trie->getRoot();\n            set<string> result_set;\n            for(int x=0; x<board.size(); ++x)\n                for(int y=0; y<board[0].size(); ++y)\n                    findWords(board, x, y, root, \"\", result_set);\n\n            vector<string> result;\n            for(auto it:result_set)    result.push_back(it);\n            return result;\n        }\n    private:\n        void findWords(vector<vector<char>>& board, int x, int y, TrieNode* root, string word, set<string>& result){\n            if(x<0||x>=board.size()||y<0||y>=board[0].size() || board[x][y]==' ') return;\n\n            if(root->children[board[x][y]-'a'] != NULL){\n                word=word+board[x][y];\n                root=root->children[board[x][y]-'a'];\n                if(root->is_end) result.insert(word);\n                char c=board[x][y];\n                board[x][y]=' ';\n                findWords(board, x+1, y, root, word, result);\n                findWords(board, x-1, y, root, word, result);\n                findWords(board, x, y+1, root, word, result);\n                findWords(board, x, y-1, root, word, result);\n                board[x][y]=c;\n            }\n        }\n};\n```\n\nIt gets AC. What a complicated problem.\n","slug":"WordSearchII","published":1,"updated":"2017-04-04T07:30:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj25sfpzx0075x2f4xmiwajoc","content":"<blockquote>\n<p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>\n<p>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n<p>For example,<br>Given words = [“oath”,”pea”,”eat”,”rain”] and board =<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;o&apos;,&apos;a&apos;,&apos;a&apos;,&apos;n&apos;],</div><div class=\"line\">    [&apos;e&apos;,&apos;t&apos;,&apos;a&apos;,&apos;e&apos;],</div><div class=\"line\">    [&apos;i&apos;,&apos;h&apos;,&apos;k&apos;,&apos;r&apos;],</div><div class=\"line\">    [&apos;i&apos;,&apos;f&apos;,&apos;l&apos;,&apos;v&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Return [“eat”,”oath”].</p>\n<a id=\"more\"></a>\n<p>Note:<br>You may assume that all inputs are consist of lowercase letters a-z.</p>\n</blockquote>\n<p>This is leetcode No.212. It is a extended problem of “Word Search”. The different point is that you should try your best to reduce the times you compare the words.</p>\n<p>So, I prefer to use Trie tree to solve this problem.</p>\n<p>The following code is to create a Trie Tree.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">void buildTree(Node &amp;parent, int idx, string str) &#123;</div><div class=\"line\">    if (idx == (int)str.length()) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (parent.nexts.find(str[idx]) == parent.nexts.end()) &#123;</div><div class=\"line\">        Node node;</div><div class=\"line\">        map&lt;char, Node&gt; nexts;</div><div class=\"line\">        node.nexts = nexts;</div><div class=\"line\">        node.ch = str[idx];</div><div class=\"line\">        node.word = str;</div><div class=\"line\">        parent.nexts.insert(pair&lt;char, Node&gt;(str[idx], node));</div><div class=\"line\">    &#125;</div><div class=\"line\">    buildTree(parent.nexts.find(str[idx])-&gt;second, idx + 1, str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>And, what I should do next is to use DFS to search in the total board.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct Node &#123;</div><div class=\"line\">    char ch;</div><div class=\"line\">    map&lt;char, Node&gt; nexts;</div><div class=\"line\">    string word;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;string&gt; res;</div><div class=\"line\">        set&lt;string&gt; targets;</div><div class=\"line\">        vector&lt;string&gt; findWords(vector&lt;vector&lt;char&gt; &gt;&amp; board, vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            sort(words.begin(), words.end());</div><div class=\"line\"></div><div class=\"line\">            vector&lt;string&gt; result;</div><div class=\"line\">            if (words.size() == 0) &#123;</div><div class=\"line\">                return result;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res.clear();</div><div class=\"line\"></div><div class=\"line\">            Node root;</div><div class=\"line\">            root.ch = &apos;0&apos;;</div><div class=\"line\">            map&lt;char, Node&gt; nexts;</div><div class=\"line\">            root.nexts = nexts;</div><div class=\"line\">            root.word = &quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">            for (auto word : words) &#123;</div><div class=\"line\">                targets.insert(word);</div><div class=\"line\">                buildTree(root, 0, word);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            // display(root);</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    vector&lt;vector&lt;bool&gt; &gt; visited;</div><div class=\"line\">                    for (int i = 0; i &lt; (int)board.size(); i++) &#123;</div><div class=\"line\">                        vector&lt;bool&gt; level(board[0].size(), false);</div><div class=\"line\">                        visited.push_back(level);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    findWords(board, visited, idx, idy, root, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (auto i : res) &#123;</div><div class=\"line\">                if (i != &quot;&quot;) &#123;</div><div class=\"line\">                    result.push_back(i);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void findWords(vector&lt;vector&lt;char&gt; &gt; &amp;board, vector&lt;vector&lt;bool&gt; &gt; &amp;visited, int idx, int idy, Node current, int len) &#123;</div><div class=\"line\">            if (current.nexts.size() == 0) &#123;</div><div class=\"line\">                res.insert(current.word);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125; else if (len == (int)current.word.length()) &#123;</div><div class=\"line\">                res.insert(current.word);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)board.size() || idy &lt; 0 || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited[idx][idy] == true) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current.nexts.find(board[idx][idy]) == current.nexts.end()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                visited[idx][idy] = true;</div><div class=\"line\">                findWords(board, visited, idx + 1, idy, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                findWords(board, visited, idx - 1, idy, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                findWords(board, visited, idx, idy + 1, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                findWords(board, visited, idx, idy - 1, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                visited[idx][idy] = false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void buildTree(Node &amp;parent, int idx, string str) &#123;</div><div class=\"line\">            if (idx == (int)str.length()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (parent.nexts.find(str[idx]) == parent.nexts.end()) &#123;</div><div class=\"line\">                Node node;</div><div class=\"line\">                map&lt;char, Node&gt; nexts;</div><div class=\"line\">                node.nexts = nexts;</div><div class=\"line\">                node.ch = str[idx];</div><div class=\"line\">                node.word = str;</div><div class=\"line\">                parent.nexts.insert(pair&lt;char, Node&gt;(str[idx], node));</div><div class=\"line\">            &#125;</div><div class=\"line\">            buildTree(parent.nexts.find(str[idx])-&gt;second, idx + 1, str);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void display(Node node) &#123;</div><div class=\"line\">            for (auto i : node.nexts) &#123;</div><div class=\"line\">                cout &lt;&lt; i.first &lt;&lt; &apos;:&apos; &lt;&lt; i.second.word &lt;&lt; endl;</div><div class=\"line\">                display(i.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE.</p>\n<p>So, I try to reduce the time. Then the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class TrieNode&#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool is_end;</div><div class=\"line\">        vector&lt;TrieNode*&gt; children;</div><div class=\"line\">        TrieNode()&#123;</div><div class=\"line\">            is_end=false;</div><div class=\"line\">            children=vector&lt;TrieNode*&gt;(26, NULL);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Trie&#123;</div><div class=\"line\">    public:</div><div class=\"line\">        TrieNode* getRoot()&#123;return root;&#125;</div><div class=\"line\">        Trie(vector&lt;string&gt;&amp; words)&#123;</div><div class=\"line\">            root=new TrieNode();</div><div class=\"line\">            for(int i=0; i&lt;words.size(); ++i)</div><div class=\"line\">                addWord(words[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        void addWord(const string&amp; word)&#123;</div><div class=\"line\">            TrieNode* cur=root;</div><div class=\"line\">            for(int i=0; i&lt;word.size(); ++i)&#123;</div><div class=\"line\">                int index=word[i]-&apos;a&apos;;</div><div class=\"line\">                if(cur-&gt;children[index]==NULL)</div><div class=\"line\">                    cur-&gt;children[index]=new TrieNode();</div><div class=\"line\">                cur=cur-&gt;children[index];</div><div class=\"line\">            &#125;</div><div class=\"line\">            cur-&gt;is_end=true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        TrieNode* root;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;string&gt; findWords(vector&lt;vector&lt;char&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            Trie* trie = new Trie(words);</div><div class=\"line\">            TrieNode* root=trie-&gt;getRoot();</div><div class=\"line\">            set&lt;string&gt; result_set;</div><div class=\"line\">            for(int x=0; x&lt;board.size(); ++x)</div><div class=\"line\">                for(int y=0; y&lt;board[0].size(); ++y)</div><div class=\"line\">                    findWords(board, x, y, root, &quot;&quot;, result_set);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;string&gt; result;</div><div class=\"line\">            for(auto it:result_set)    result.push_back(it);</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        void findWords(vector&lt;vector&lt;char&gt;&gt;&amp; board, int x, int y, TrieNode* root, string word, set&lt;string&gt;&amp; result)&#123;</div><div class=\"line\">            if(x&lt;0||x&gt;=board.size()||y&lt;0||y&gt;=board[0].size() || board[x][y]==&apos; &apos;) return;</div><div class=\"line\"></div><div class=\"line\">            if(root-&gt;children[board[x][y]-&apos;a&apos;] != NULL)&#123;</div><div class=\"line\">                word=word+board[x][y];</div><div class=\"line\">                root=root-&gt;children[board[x][y]-&apos;a&apos;];</div><div class=\"line\">                if(root-&gt;is_end) result.insert(word);</div><div class=\"line\">                char c=board[x][y];</div><div class=\"line\">                board[x][y]=&apos; &apos;;</div><div class=\"line\">                findWords(board, x+1, y, root, word, result);</div><div class=\"line\">                findWords(board, x-1, y, root, word, result);</div><div class=\"line\">                findWords(board, x, y+1, root, word, result);</div><div class=\"line\">                findWords(board, x, y-1, root, word, result);</div><div class=\"line\">                board[x][y]=c;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. What a complicated problem.</p>\n","excerpt":"<blockquote>\n<p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>\n<p>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n<p>For example,<br>Given words = [“oath”,”pea”,”eat”,”rain”] and board =<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    [&apos;o&apos;,&apos;a&apos;,&apos;a&apos;,&apos;n&apos;],</div><div class=\"line\">    [&apos;e&apos;,&apos;t&apos;,&apos;a&apos;,&apos;e&apos;],</div><div class=\"line\">    [&apos;i&apos;,&apos;h&apos;,&apos;k&apos;,&apos;r&apos;],</div><div class=\"line\">    [&apos;i&apos;,&apos;f&apos;,&apos;l&apos;,&apos;v&apos;]</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>Return [“eat”,”oath”].</p>","more":"<p>Note:<br>You may assume that all inputs are consist of lowercase letters a-z.</p>\n</blockquote>\n<p>This is leetcode No.212. It is a extended problem of “Word Search”. The different point is that you should try your best to reduce the times you compare the words.</p>\n<p>So, I prefer to use Trie tree to solve this problem.</p>\n<p>The following code is to create a Trie Tree.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">void buildTree(Node &amp;parent, int idx, string str) &#123;</div><div class=\"line\">    if (idx == (int)str.length()) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (parent.nexts.find(str[idx]) == parent.nexts.end()) &#123;</div><div class=\"line\">        Node node;</div><div class=\"line\">        map&lt;char, Node&gt; nexts;</div><div class=\"line\">        node.nexts = nexts;</div><div class=\"line\">        node.ch = str[idx];</div><div class=\"line\">        node.word = str;</div><div class=\"line\">        parent.nexts.insert(pair&lt;char, Node&gt;(str[idx], node));</div><div class=\"line\">    &#125;</div><div class=\"line\">    buildTree(parent.nexts.find(str[idx])-&gt;second, idx + 1, str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>And, what I should do next is to use DFS to search in the total board.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct Node &#123;</div><div class=\"line\">    char ch;</div><div class=\"line\">    map&lt;char, Node&gt; nexts;</div><div class=\"line\">    string word;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        set&lt;string&gt; res;</div><div class=\"line\">        set&lt;string&gt; targets;</div><div class=\"line\">        vector&lt;string&gt; findWords(vector&lt;vector&lt;char&gt; &gt;&amp; board, vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            sort(words.begin(), words.end());</div><div class=\"line\"></div><div class=\"line\">            vector&lt;string&gt; result;</div><div class=\"line\">            if (words.size() == 0) &#123;</div><div class=\"line\">                return result;</div><div class=\"line\">            &#125;</div><div class=\"line\">            res.clear();</div><div class=\"line\"></div><div class=\"line\">            Node root;</div><div class=\"line\">            root.ch = &apos;0&apos;;</div><div class=\"line\">            map&lt;char, Node&gt; nexts;</div><div class=\"line\">            root.nexts = nexts;</div><div class=\"line\">            root.word = &quot;&quot;;</div><div class=\"line\"></div><div class=\"line\">            for (auto word : words) &#123;</div><div class=\"line\">                targets.insert(word);</div><div class=\"line\">                buildTree(root, 0, word);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            // display(root);</div><div class=\"line\"></div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    vector&lt;vector&lt;bool&gt; &gt; visited;</div><div class=\"line\">                    for (int i = 0; i &lt; (int)board.size(); i++) &#123;</div><div class=\"line\">                        vector&lt;bool&gt; level(board[0].size(), false);</div><div class=\"line\">                        visited.push_back(level);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    findWords(board, visited, idx, idy, root, 0);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (auto i : res) &#123;</div><div class=\"line\">                if (i != &quot;&quot;) &#123;</div><div class=\"line\">                    result.push_back(i);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void findWords(vector&lt;vector&lt;char&gt; &gt; &amp;board, vector&lt;vector&lt;bool&gt; &gt; &amp;visited, int idx, int idy, Node current, int len) &#123;</div><div class=\"line\">            if (current.nexts.size() == 0) &#123;</div><div class=\"line\">                res.insert(current.word);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125; else if (len == (int)current.word.length()) &#123;</div><div class=\"line\">                res.insert(current.word);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (idx &lt; 0 || idx &gt;= (int)board.size() || idy &lt; 0 || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (visited[idx][idy] == true) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current.nexts.find(board[idx][idy]) == current.nexts.end()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                visited[idx][idy] = true;</div><div class=\"line\">                findWords(board, visited, idx + 1, idy, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                findWords(board, visited, idx - 1, idy, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                findWords(board, visited, idx, idy + 1, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                findWords(board, visited, idx, idy - 1, current.nexts.find(board[idx][idy])-&gt;second, len + 1);</div><div class=\"line\">                visited[idx][idy] = false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void buildTree(Node &amp;parent, int idx, string str) &#123;</div><div class=\"line\">            if (idx == (int)str.length()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (parent.nexts.find(str[idx]) == parent.nexts.end()) &#123;</div><div class=\"line\">                Node node;</div><div class=\"line\">                map&lt;char, Node&gt; nexts;</div><div class=\"line\">                node.nexts = nexts;</div><div class=\"line\">                node.ch = str[idx];</div><div class=\"line\">                node.word = str;</div><div class=\"line\">                parent.nexts.insert(pair&lt;char, Node&gt;(str[idx], node));</div><div class=\"line\">            &#125;</div><div class=\"line\">            buildTree(parent.nexts.find(str[idx])-&gt;second, idx + 1, str);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void display(Node node) &#123;</div><div class=\"line\">            for (auto i : node.nexts) &#123;</div><div class=\"line\">                cout &lt;&lt; i.first &lt;&lt; &apos;:&apos; &lt;&lt; i.second.word &lt;&lt; endl;</div><div class=\"line\">                display(i.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it gets TLE.</p>\n<p>So, I try to reduce the time. Then the code becomes:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class TrieNode&#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool is_end;</div><div class=\"line\">        vector&lt;TrieNode*&gt; children;</div><div class=\"line\">        TrieNode()&#123;</div><div class=\"line\">            is_end=false;</div><div class=\"line\">            children=vector&lt;TrieNode*&gt;(26, NULL);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Trie&#123;</div><div class=\"line\">    public:</div><div class=\"line\">        TrieNode* getRoot()&#123;return root;&#125;</div><div class=\"line\">        Trie(vector&lt;string&gt;&amp; words)&#123;</div><div class=\"line\">            root=new TrieNode();</div><div class=\"line\">            for(int i=0; i&lt;words.size(); ++i)</div><div class=\"line\">                addWord(words[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        void addWord(const string&amp; word)&#123;</div><div class=\"line\">            TrieNode* cur=root;</div><div class=\"line\">            for(int i=0; i&lt;word.size(); ++i)&#123;</div><div class=\"line\">                int index=word[i]-&apos;a&apos;;</div><div class=\"line\">                if(cur-&gt;children[index]==NULL)</div><div class=\"line\">                    cur-&gt;children[index]=new TrieNode();</div><div class=\"line\">                cur=cur-&gt;children[index];</div><div class=\"line\">            &#125;</div><div class=\"line\">            cur-&gt;is_end=true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        TrieNode* root;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;string&gt; findWords(vector&lt;vector&lt;char&gt;&gt;&amp; board, vector&lt;string&gt;&amp; words) &#123;</div><div class=\"line\">            Trie* trie = new Trie(words);</div><div class=\"line\">            TrieNode* root=trie-&gt;getRoot();</div><div class=\"line\">            set&lt;string&gt; result_set;</div><div class=\"line\">            for(int x=0; x&lt;board.size(); ++x)</div><div class=\"line\">                for(int y=0; y&lt;board[0].size(); ++y)</div><div class=\"line\">                    findWords(board, x, y, root, &quot;&quot;, result_set);</div><div class=\"line\"></div><div class=\"line\">            vector&lt;string&gt; result;</div><div class=\"line\">            for(auto it:result_set)    result.push_back(it);</div><div class=\"line\">            return result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    private:</div><div class=\"line\">        void findWords(vector&lt;vector&lt;char&gt;&gt;&amp; board, int x, int y, TrieNode* root, string word, set&lt;string&gt;&amp; result)&#123;</div><div class=\"line\">            if(x&lt;0||x&gt;=board.size()||y&lt;0||y&gt;=board[0].size() || board[x][y]==&apos; &apos;) return;</div><div class=\"line\"></div><div class=\"line\">            if(root-&gt;children[board[x][y]-&apos;a&apos;] != NULL)&#123;</div><div class=\"line\">                word=word+board[x][y];</div><div class=\"line\">                root=root-&gt;children[board[x][y]-&apos;a&apos;];</div><div class=\"line\">                if(root-&gt;is_end) result.insert(word);</div><div class=\"line\">                char c=board[x][y];</div><div class=\"line\">                board[x][y]=&apos; &apos;;</div><div class=\"line\">                findWords(board, x+1, y, root, word, result);</div><div class=\"line\">                findWords(board, x-1, y, root, word, result);</div><div class=\"line\">                findWords(board, x, y+1, root, word, result);</div><div class=\"line\">                findWords(board, x, y-1, root, word, result);</div><div class=\"line\">                board[x][y]=c;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It gets AC. What a complicated problem.</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj25sfpve0001x2f47nw5zuln","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpvx000cx2f4cuyjter2"},{"post_id":"cj25sfpve0001x2f47nw5zuln","tag_id":"cj25sfpvt0007x2f41bbm31n8","_id":"cj25sfpvx000ex2f4m5xjwe8l"},{"post_id":"cj25sfpvi0002x2f425ybhtqc","tag_id":"cj25sfpvw000ax2f4b22841xf","_id":"cj25sfpvy000hx2f41ltoobem"},{"post_id":"cj25sfpvn0004x2f4lpti5p4z","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpw7000sx2f4mmtwwd4z"},{"post_id":"cj25sfpvn0004x2f4lpti5p4z","tag_id":"cj25sfpvz000jx2f4hcpbai0v","_id":"cj25sfpw7000ux2f4ima2d4ir"},{"post_id":"cj25sfpvn0004x2f4lpti5p4z","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpwa000xx2f43gsn0mqe"},{"post_id":"cj25sfpw5000px2f4fdvxvj1i","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpwb000zx2f47gpi79bj"},{"post_id":"cj25sfpvq0005x2f4klp99usc","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfpwc0012x2f45wp848np"},{"post_id":"cj25sfpvq0005x2f4klp99usc","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpwe0014x2f46h919la1"},{"post_id":"cj25sfpvs0006x2f4ro0p6co7","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpwg0017x2f45hxmsp7b"},{"post_id":"cj25sfpwe0016x2f4avdvk016","tag_id":"cj25sfpvw000ax2f4b22841xf","_id":"cj25sfpwh0019x2f48sstrfcx"},{"post_id":"cj25sfpwe0016x2f4avdvk016","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpwi001cx2f4blt94j20"},{"post_id":"cj25sfpvt0008x2f4xhq7az26","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfpwl001ex2f45x2cms79"},{"post_id":"cj25sfpwj001dx2f4e0ne8jdo","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpwn001hx2f4z6ctpm9w"},{"post_id":"cj25sfpvv0009x2f4v5wyptz7","tag_id":"cj25sfpwi001bx2f4hntmimr3","_id":"cj25sfpwo001jx2f46ien3ob8"},{"post_id":"cj25sfpwn001ix2f4ompx1aj4","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfpwp001mx2f4hz5ag5pm"},{"post_id":"cj25sfpwn001ix2f4ompx1aj4","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpwq001ox2f4z5b1mcym"},{"post_id":"cj25sfpvw000bx2f4fptbm1cs","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpwt001rx2f43j3m1d9z"},{"post_id":"cj25sfpwo001kx2f4tnsjsk5q","tag_id":"cj25sfpvw000ax2f4b22841xf","_id":"cj25sfpwu001tx2f4eig34ots"},{"post_id":"cj25sfpvx000dx2f48vimn79r","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpwv001wx2f4pi92d9f2"},{"post_id":"cj25sfpvy000gx2f4w0pcg5hn","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpwx0021x2f4ju2comkk"},{"post_id":"cj25sfpvy000gx2f4w0pcg5hn","tag_id":"cj25sfpwv001vx2f4dcnui3jv","_id":"cj25sfpwy0023x2f4rhu3dlzx"},{"post_id":"cj25sfpww0020x2f49lvdmq5s","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpwz0026x2f490bye58y"},{"post_id":"cj25sfpww0020x2f49lvdmq5s","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfpx00028x2f49umwlaa3"},{"post_id":"cj25sfpwx0022x2f4v4p41tsz","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpx1002bx2f44a0csvkj"},{"post_id":"cj25sfpwx0022x2f4v4p41tsz","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpx2002dx2f407dztp7l"},{"post_id":"cj25sfpvy000ix2f4cfvtgzmr","tag_id":"cj25sfpww001zx2f4t96wguud","_id":"cj25sfpxl002gx2f42rounv1y"},{"post_id":"cj25sfpvy000ix2f4cfvtgzmr","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpxl002ix2f4u2k4q7se"},{"post_id":"cj25sfpx00029x2f4u2bjj98a","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfpxo002lx2f4oq4tkip9"},{"post_id":"cj25sfpx1002cx2f4w1g5cdj9","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpxp002nx2f422outw8z"},{"post_id":"cj25sfpvz000kx2f4rh8fn7l4","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpxq002qx2f4qo33rv61"},{"post_id":"cj25sfpxl002hx2f4ujsv849p","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpxr002sx2f43dztw679"},{"post_id":"cj25sfpxm002jx2f47fijo4ch","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpxs002vx2f4coi2ddk7"},{"post_id":"cj25sfpxm002jx2f47fijo4ch","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpxt002xx2f4pag4gdd9"},{"post_id":"cj25sfpw0000lx2f422xgrzq6","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfpxu0030x2f4bp7mflkl"},{"post_id":"cj25sfpw0000lx2f422xgrzq6","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpxu0032x2f47z5a687t"},{"post_id":"cj25sfpxq002rx2f4nbs4p9m7","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpxv0035x2f4awyffr0s"},{"post_id":"cj25sfpxq002rx2f4nbs4p9m7","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpxw0037x2f47zghmdw4"},{"post_id":"cj25sfpw0000mx2f4vvnzaqgv","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpxx003ax2f4l5yzhysc"},{"post_id":"cj25sfpxs002wx2f4roadc1oe","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpxz003cx2f4hp1mnk0y"},{"post_id":"cj25sfpxs002wx2f4roadc1oe","tag_id":"cj25sfpxs002ux2f4akagmhzv","_id":"cj25sfpy0003ex2f4lzuaviom"},{"post_id":"cj25sfpw3000ox2f4d0gv0az9","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpy2003hx2f4q0urjisa"},{"post_id":"cj25sfpw3000ox2f4d0gv0az9","tag_id":"cj25sfpxs002ux2f4akagmhzv","_id":"cj25sfpy3003jx2f41ojn4pnn"},{"post_id":"cj25sfpxu0031x2f4h8rt60n3","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpy4003mx2f43m955941"},{"post_id":"cj25sfpxu0033x2f4imv5ovt6","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpy6003ox2f43tnl8mrf"},{"post_id":"cj25sfpxu0033x2f4imv5ovt6","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpy7003rx2f4joq5fle9"},{"post_id":"cj25sfpxv0036x2f48kb4lhii","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpy9003tx2f40d52nchj"},{"post_id":"cj25sfpw6000rx2f4aj6yjcev","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpyb003wx2f4kq6pyjrm"},{"post_id":"cj25sfpw6000rx2f4aj6yjcev","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpyc003yx2f489df4orf"},{"post_id":"cj25sfpxw0038x2f4mpqsu6tx","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpye0041x2f4pw5vgcod"},{"post_id":"cj25sfpxw0038x2f4mpqsu6tx","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpyf0043x2f49opg05ad"},{"post_id":"cj25sfpw7000tx2f46v3cxupk","tag_id":"cj25sfpxx0039x2f4i2vljjsz","_id":"cj25sfpyg0046x2f44kef9wqp"},{"post_id":"cj25sfpxz003dx2f4nfg4fwwf","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfpyh0048x2f4lbklj95e"},{"post_id":"cj25sfpxz003dx2f4nfg4fwwf","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpyj004bx2f4ct59jtpw"},{"post_id":"cj25sfpy1003gx2f4baix2m7l","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpyj004dx2f41f32uqrl"},{"post_id":"cj25sfpy1003gx2f4baix2m7l","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpyk004gx2f4w7ppiajx"},{"post_id":"cj25sfpy2003ix2f48rnq9t11","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpyl004ix2f486ni492c"},{"post_id":"cj25sfpy3003lx2f4unsgjgkz","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpym004lx2f44idum5a8"},{"post_id":"cj25sfpw9000wx2f4z1l8zwpj","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpyn004nx2f4zvyahu1l"},{"post_id":"cj25sfpw9000wx2f4z1l8zwpj","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpyo004qx2f4jri04urb"},{"post_id":"cj25sfpy5003nx2f4re2cbodo","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpyp004sx2f454ah2zsa"},{"post_id":"cj25sfpy5003nx2f4re2cbodo","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpyq004vx2f4fv19703d"},{"post_id":"cj25sfpy6003qx2f4lknqyyyv","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpyr004xx2f4lrvcaopy"},{"post_id":"cj25sfpy7003sx2f4r75aoa38","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpyr0050x2f48fych03g"},{"post_id":"cj25sfpwa000yx2f4vzihr5o1","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfpys0052x2f4c4r6q8aw"},{"post_id":"cj25sfpy9003ux2f4j2ca0han","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpyt0054x2f480bbf2o6"},{"post_id":"cj25sfpyc003zx2f4yp3l34ig","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpyu0057x2f4oaakklaw"},{"post_id":"cj25sfpwb0011x2f4xysvwrtg","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpyv0059x2f4tgwy3dak"},{"post_id":"cj25sfpwb0011x2f4xysvwrtg","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfpyw005cx2f47dshe8q5"},{"post_id":"cj25sfpwb0011x2f4xysvwrtg","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpyy005ex2f43375gm16"},{"post_id":"cj25sfpyf0044x2f4kulv6xlk","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpz0005hx2f4sg7we89f"},{"post_id":"cj25sfpyf0044x2f4kulv6xlk","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpz1005jx2f4xwx3hks8"},{"post_id":"cj25sfpyj004cx2f4favc1oom","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpz3005mx2f4o78711eb"},{"post_id":"cj25sfpyj004cx2f4favc1oom","tag_id":"cj25sfpvt0007x2f41bbm31n8","_id":"cj25sfpz4005ox2f4w431vzuq"},{"post_id":"cj25sfpwd0013x2f407owfrl6","tag_id":"cj25sfpyg0045x2f44gjpbsvt","_id":"cj25sfpz7005rx2f4vecslvm0"},{"post_id":"cj25sfpwd0013x2f407owfrl6","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfpz8005tx2f4e1p8w3cs"},{"post_id":"cj25sfpwd0013x2f407owfrl6","tag_id":"cj25sfpvt0007x2f41bbm31n8","_id":"cj25sfpza005wx2f4j30yfwfl"},{"post_id":"cj25sfpwd0013x2f407owfrl6","tag_id":"cj25sfpyi004ax2f4e1gyoqvi","_id":"cj25sfpzb005yx2f4vrva0zom"},{"post_id":"cj25sfpyk004ex2f4y7kjvtlj","tag_id":"cj25sfpxx0039x2f4i2vljjsz","_id":"cj25sfpzd0061x2f4bu8egm4l"},{"post_id":"cj25sfpyl004hx2f440npjmq3","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpze0063x2f4ohnuxz45"},{"post_id":"cj25sfpwg0018x2f4c74fsr1w","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpzg0066x2f4mlsm57xi"},{"post_id":"cj25sfpym004jx2f4s66e6hak","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpzh0068x2f4ro0wfdsu"},{"post_id":"cj25sfpyn004mx2f4skdngme9","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfpzi006bx2f4j7vemedf"},{"post_id":"cj25sfpyn004mx2f4skdngme9","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpzj006dx2f40hezethi"},{"post_id":"cj25sfpwi001ax2f4obe5dcov","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfpzl006gx2f4v9s0qkb4"},{"post_id":"cj25sfpyp004rx2f4ydfi0lmr","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpzm006ix2f4lskxolmr"},{"post_id":"cj25sfpwl001fx2f4sx8vqzbm","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpzo006lx2f4n9lb2xfk"},{"post_id":"cj25sfpyp004tx2f4p8e6cmgp","tag_id":"cj25sfpvw000ax2f4b22841xf","_id":"cj25sfpzp006nx2f4kd1x05pu"},{"post_id":"cj25sfpyq004wx2f4i9i53rce","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfpzq006qx2f4j0rfwke6"},{"post_id":"cj25sfpwp001nx2f4sy0q4m59","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfpzr006sx2f43qefy3ep"},{"post_id":"cj25sfpwp001nx2f4sy0q4m59","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfpzs006vx2f4chev5wzm"},{"post_id":"cj25sfpyr004yx2f4ruv5jo7p","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfpzu006xx2f4zomy14cm"},{"post_id":"cj25sfpwq001px2f4n2ps64ch","tag_id":"cj25sfpyr004zx2f41gq3zpyy","_id":"cj25sfpzv006zx2f4jp95dnon"},{"post_id":"cj25sfpyt0053x2f4mgruc9xn","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpzw0072x2f4hiset6t3"},{"post_id":"cj25sfpyt0056x2f487j028p5","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpzw0074x2f4vqswii3o"},{"post_id":"cj25sfpwt001sx2f4savahm4s","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfpzy0077x2f4cu8z95cw"},{"post_id":"cj25sfpyu0058x2f4odwgdy8l","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpzy0078x2f4zn2mcdyu"},{"post_id":"cj25sfpyv005bx2f4hpvptxlz","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfpzz007ax2f497r4udng"},{"post_id":"cj25sfpwu001ux2f44kqtp2uv","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfpzz007bx2f4c5uygo8z"},{"post_id":"cj25sfpyw005dx2f45mteslbe","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfpzz007dx2f426vwtwbo"},{"post_id":"cj25sfpyw005dx2f45mteslbe","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfpzz007ex2f4v4kelbto"},{"post_id":"cj25sfpyw005dx2f45mteslbe","tag_id":"cj25sfpvt0007x2f41bbm31n8","_id":"cj25sfq00007gx2f4xxjupjyj"},{"post_id":"cj25sfpyz005gx2f4lqtrtq7s","tag_id":"cj25sfpxs002ux2f4akagmhzv","_id":"cj25sfq00007hx2f4o8o1nyr7"},{"post_id":"cj25sfpyz005gx2f4lqtrtq7s","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfq00007jx2f4ktoznn3d"},{"post_id":"cj25sfpwv001xx2f4mdpqc2sg","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfq00007kx2f4bheycxyy"},{"post_id":"cj25sfpz0005ix2f4vtbsieu3","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfq01007mx2f4ib416keh"},{"post_id":"cj25sfpwv001yx2f45ypmkwue","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfq01007nx2f4pe3t1ps0"},{"post_id":"cj25sfpwv001yx2f45ypmkwue","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq01007px2f4q7t28qf8"},{"post_id":"cj25sfpwv001yx2f45ypmkwue","tag_id":"cj25sfpxs002ux2f4akagmhzv","_id":"cj25sfq02007qx2f4mk7ul2e5"},{"post_id":"cj25sfpz3005nx2f40s270syo","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfq02007sx2f4w8q7a02c"},{"post_id":"cj25sfpz5005qx2f47bndovx4","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfq02007tx2f43756jc7o"},{"post_id":"cj25sfpz5005qx2f47bndovx4","tag_id":"cj25sfpww001zx2f4t96wguud","_id":"cj25sfq02007ux2f4whtz52fc"},{"post_id":"cj25sfpwy0024x2f4if8y7zze","tag_id":"cj25sfpyg0045x2f44gjpbsvt","_id":"cj25sfq03007wx2f4a6fg80a5"},{"post_id":"cj25sfpwy0024x2f4if8y7zze","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfq03007xx2f4yqqs9gte"},{"post_id":"cj25sfpz7005sx2f4df4ue7h7","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfq03007zx2f4472jqyza"},{"post_id":"cj25sfpz7005sx2f4df4ue7h7","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq040080x2f4g0zxawvt"},{"post_id":"cj25sfpwz0027x2f4tn7fty1o","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfq040082x2f4p28nphly"},{"post_id":"cj25sfpwz0027x2f4tn7fty1o","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfq040083x2f4x4zmmaoe"},{"post_id":"cj25sfpza005xx2f4y4bblu74","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfq050084x2f4sgsduvq1"},{"post_id":"cj25sfpzc0060x2f4y7hprrw9","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfq050085x2f4rwn6hoe8"},{"post_id":"cj25sfpx2002ex2f4mazmvhep","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfq050086x2f4jr3hl2gv"},{"post_id":"cj25sfpx2002ex2f4mazmvhep","tag_id":"cj25sfpy6003px2f4v800cwlv","_id":"cj25sfq050087x2f48u1tq196"},{"post_id":"cj25sfpzd0062x2f4jnip9x01","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq050088x2f4mjgxrfvv"},{"post_id":"cj25sfpzg0067x2f4zek2g2kv","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfq050089x2f4sblbulnr"},{"post_id":"cj25sfpzg0067x2f4zek2g2kv","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfq05008ax2f4wmbmr04z"},{"post_id":"cj25sfpzh006ax2f41ilj16vf","tag_id":"cj25sfpxv0034x2f4c7fwuqyz","_id":"cj25sfq05008bx2f4kd9bee7z"},{"post_id":"cj25sfpzi006cx2f4kkbxbmlk","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfq05008cx2f4ff912psb"},{"post_id":"cj25sfpzi006cx2f4kkbxbmlk","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq05008dx2f45fdf0p6a"},{"post_id":"cj25sfpxo002mx2f4axqq7y4y","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfq06008ex2f4klajguwd"},{"post_id":"cj25sfpxo002mx2f4axqq7y4y","tag_id":"cj25sfpw3000nx2f4bd11dbse","_id":"cj25sfq06008fx2f4bbhkerbq"},{"post_id":"cj25sfpxo002mx2f4axqq7y4y","tag_id":"cj25sfpxs002ux2f4akagmhzv","_id":"cj25sfq06008gx2f4qq5qn0p7"},{"post_id":"cj25sfpxo002mx2f4axqq7y4y","tag_id":"cj25sfpzh0069x2f466lbqqwe","_id":"cj25sfq06008hx2f4blh53rbu"},{"post_id":"cj25sfpzj006ex2f43mpdxza8","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq06008ix2f4zy784uqk"},{"post_id":"cj25sfpzj006ex2f43mpdxza8","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfq06008jx2f4ew4oqsh2"},{"post_id":"cj25sfpzm006hx2f41joswrcm","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq06008kx2f4agiytopi"},{"post_id":"cj25sfpxp002ox2f49u4e9p0h","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfq06008lx2f4d8irc9yw"},{"post_id":"cj25sfpxp002ox2f49u4e9p0h","tag_id":"cj25sfpzk006fx2f4qeaaxwk3","_id":"cj25sfq06008mx2f4fnlbi71d"},{"post_id":"cj25sfpzm006jx2f4lde47sqk","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfq07008nx2f4qrqu62ei"},{"post_id":"cj25sfpzm006jx2f4lde47sqk","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq07008ox2f4mdusxpoo"},{"post_id":"cj25sfpxr002tx2f4u5kvhguh","tag_id":"cj25sfpzn006kx2f4ibh53zqf","_id":"cj25sfq07008px2f46e0r0qhx"},{"post_id":"cj25sfpxr002tx2f4u5kvhguh","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq07008qx2f47fdh98mc"},{"post_id":"cj25sfpzp006ox2f4r7khypis","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfq07008rx2f4a9h4zrou"},{"post_id":"cj25sfpzp006ox2f4r7khypis","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfq07008sx2f4ueh91plb"},{"post_id":"cj25sfpzq006rx2f4u1ibrjwb","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq07008tx2f4tvnagake"},{"post_id":"cj25sfpxt002yx2f4d5rn3wzn","tag_id":"cj25sfpyr004zx2f41gq3zpyy","_id":"cj25sfq07008ux2f4ff8hcjin"},{"post_id":"cj25sfpxt002yx2f4d5rn3wzn","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfq07008vx2f4wc9c3ojw"},{"post_id":"cj25sfpzr006tx2f4r5tlu9le","tag_id":"cj25sfpzk006fx2f4qeaaxwk3","_id":"cj25sfq07008wx2f4j1n30kwp"},{"post_id":"cj25sfpzt006wx2f4odtr89e0","tag_id":"cj25sfpwn001gx2f4ora65gur","_id":"cj25sfq08008xx2f4iciv97zu"},{"post_id":"cj25sfpzu006yx2f4c40e66zr","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfq08008yx2f4zfanqbpi"},{"post_id":"cj25sfpzv0071x2f4atm0auar","tag_id":"cj25sfpw5000qx2f4rhj5w18v","_id":"cj25sfq08008zx2f48zvzombv"},{"post_id":"cj25sfpzv0071x2f4atm0auar","tag_id":"cj25sfpwb0010x2f470wh1bmv","_id":"cj25sfq080090x2f40mn9232m"},{"post_id":"cj25sfpzw0073x2f440yf11u8","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq080091x2f47vvragsw"},{"post_id":"cj25sfpxy003bx2f4p5jvkih5","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfq080092x2f47v3uto4r"},{"post_id":"cj25sfpxy003bx2f4p5jvkih5","tag_id":"cj25sfpzs006ux2f4ag7mzztf","_id":"cj25sfq080093x2f4acny9072"},{"post_id":"cj25sfpxy003bx2f4p5jvkih5","tag_id":"cj25sfpzv0070x2f420f3huyw","_id":"cj25sfq080094x2f4lo3brmfk"},{"post_id":"cj25sfpzx0075x2f4xmiwajoc","tag_id":"cj25sfpvz000jx2f4hcpbai0v","_id":"cj25sfq090095x2f4vhgmeq0l"},{"post_id":"cj25sfpzx0075x2f4xmiwajoc","tag_id":"cj25sfpwe0015x2f4hya97ks6","_id":"cj25sfq090096x2f4sfdpvngb"},{"post_id":"cj25sfpzx0075x2f4xmiwajoc","tag_id":"cj25sfpvl0003x2f4fmuetosc","_id":"cj25sfq090097x2f4cqnzi7bl"},{"post_id":"cj25sfpyb003xx2f4znz0o7dg","tag_id":"cj25sfpxs002ux2f4akagmhzv","_id":"cj25sfq090098x2f4n2u7361q"},{"post_id":"cj25sfpyb003xx2f4znz0o7dg","tag_id":"cj25sfpzh0069x2f466lbqqwe","_id":"cj25sfq090099x2f4h1p2bsxe"},{"post_id":"cj25sfpye0042x2f4jchup175","tag_id":"cj25sfpzk006fx2f4qeaaxwk3","_id":"cj25sfq09009ax2f4y4c0ghc3"},{"post_id":"cj25sfpyh0047x2f4jqzyrjvn","tag_id":"cj25sfpvx000fx2f4hbz2s415","_id":"cj25sfq0a009bx2f4qr4iwxf5"},{"post_id":"cj25sfpyh0047x2f4jqzyrjvn","tag_id":"cj25sfpzh0069x2f466lbqqwe","_id":"cj25sfq0a009cx2f42vu1xt6a"},{"post_id":"cj25sfpyi0049x2f405q3a92k","tag_id":"cj25sfpvz000jx2f4hcpbai0v","_id":"cj25sfq0a009dx2f4nktdp66g"},{"post_id":"cj25sfpyi0049x2f405q3a92k","tag_id":"cj25sfq00007fx2f4d3vyjycl","_id":"cj25sfq0a009ex2f451ic8pf5"},{"post_id":"cj25sfpyn004ox2f4d4le6wxh","tag_id":"cj25sfq00007ix2f47jvj92g5","_id":"cj25sfq0a009fx2f4ya22blvc"},{"post_id":"cj25sfpys0051x2f4lxnznvit","tag_id":"cj25sfpzk006fx2f4qeaaxwk3","_id":"cj25sfq0a009gx2f4mbygc9cv"},{"post_id":"cj25sfpz2005lx2f4j8h7829e","tag_id":"cj25sfq00007fx2f4d3vyjycl","_id":"cj25sfq0a009hx2f44ywuimuw"},{"post_id":"cj25sfpz8005vx2f48v6ofhtn","tag_id":"cj25sfq02007rx2f49u47tk2h","_id":"cj25sfq0b009ix2f4lrpv84y6"},{"post_id":"cj25sfpz8005vx2f48v6ofhtn","tag_id":"cj25sfq03007vx2f4yno1cjmn","_id":"cj25sfq0b009jx2f4jz1cghq1"},{"post_id":"cj25sfpzf0065x2f4vfjln2fn","tag_id":"cj25sfpvw000ax2f4b22841xf","_id":"cj25sfq0b009kx2f46yxx2sp4"},{"post_id":"cj25sfpzf0065x2f4vfjln2fn","tag_id":"cj25sfpzn006kx2f4ibh53zqf","_id":"cj25sfq0b009lx2f41guuczio"},{"post_id":"cj25sfpzo006mx2f4i0dp6dng","tag_id":"cj25sfq040081x2f4t4t8b8gh","_id":"cj25sfq0b009mx2f4wmibwc7d"},{"post_id":"cj25sfpzo006mx2f4i0dp6dng","tag_id":"cj25sfpvt0007x2f41bbm31n8","_id":"cj25sfq0b009nx2f4i1aq33zm"}],"Tag":[{"name":"Depth-first Search","_id":"cj25sfpvl0003x2f4fmuetosc"},{"name":"Breadth-first Search","_id":"cj25sfpvt0007x2f41bbm31n8"},{"name":"Stack","_id":"cj25sfpvw000ax2f4b22841xf"},{"name":"Array","_id":"cj25sfpvx000fx2f4hbz2s415"},{"name":"Trie","_id":"cj25sfpvz000jx2f4hcpbai0v"},{"name":"Hash Table","_id":"cj25sfpw3000nx2f4bd11dbse"},{"name":"Binary Search","_id":"cj25sfpw5000qx2f4rhj5w18v"},{"name":"Math","_id":"cj25sfpwb0010x2f470wh1bmv"},{"name":"Backtracking","_id":"cj25sfpwe0015x2f4hya97ks6"},{"name":"Simulation","_id":"cj25sfpwi001bx2f4hntmimr3"},{"name":"Dynamic Programming","_id":"cj25sfpwn001gx2f4ora65gur"},{"name":"Brainteaser","_id":"cj25sfpwv001vx2f4dcnui3jv"},{"name":"Minimax","_id":"cj25sfpww001zx2f4t96wguud"},{"name":"Two Pointers","_id":"cj25sfpxs002ux2f4akagmhzv"},{"name":"String","_id":"cj25sfpxv0034x2f4c7fwuqyz"},{"name":"Binary Search Tree","_id":"cj25sfpxx0039x2f4i2vljjsz"},{"name":"Tree","_id":"cj25sfpy6003px2f4v800cwlv"},{"name":"Graph","_id":"cj25sfpyg0045x2f44gjpbsvt"},{"name":"Topological Sort","_id":"cj25sfpyi004ax2f4e1gyoqvi"},{"name":"Heap","_id":"cj25sfpyr004zx2f41gq3zpyy"},{"name":"Sort","_id":"cj25sfpzh0069x2f466lbqqwe"},{"name":"Bitmap","_id":"cj25sfpzk006fx2f4qeaaxwk3"},{"name":"Greedy","_id":"cj25sfpzn006kx2f4ibh53zqf"},{"name":"Memoization","_id":"cj25sfpzs006ux2f4ag7mzztf"},{"name":"Topological sort","_id":"cj25sfpzv0070x2f420f3huyw"},{"name":"Bit Manipulation","_id":"cj25sfq00007fx2f4d3vyjycl"},{"name":"Description","_id":"cj25sfq00007ix2f47jvj92g5"},{"name":"Segment Tree","_id":"cj25sfq02007rx2f49u47tk2h"},{"name":"Binary Indexed Tree","_id":"cj25sfq03007vx2f4yno1cjmn"},{"name":"Union Find","_id":"cj25sfq040081x2f4t4t8b8gh"}]}}