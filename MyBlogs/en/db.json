{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/even/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/even/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","path":"fonts/chancery/apple-chancery-webfont.eot","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","path":"fonts/chancery/apple-chancery-webfont.woff","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","path":"fonts/chancery/apple-chancery-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","path":"fonts/chancery/apple-chancery-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/even/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/even/source/js/src/even.js","path":"js/src/even.js","modified":0,"renderable":1},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","path":"fonts/chancery/apple-chancery-webfont.svg","modified":0,"renderable":1},{"_id":"themes/even/source/lib/jquery/jquery-3.1.1.min.js","path":"lib/jquery/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/even/_config.yml","hash":"fc04054437ec2b5ca9aacdab5b0c271e55fcbba6","modified":1483429971000},{"_id":"themes/even/.eslintrc","hash":"c009059eb928e61061ded12c6777788210dcab81","modified":1483422071000},{"_id":"themes/even/.gitignore","hash":"1d54f4b6fe44e61eae3d29e95de4b2618a6619aa","modified":1483422071000},{"_id":"themes/even/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1483422071000},{"_id":"themes/even/README.md","hash":"3c56571c42391c2356c613711608ece4d61ee1d7","modified":1483422071000},{"_id":"themes/even/package.json","hash":"1da9a5fba89597843fa69d881128cf9a821a6da3","modified":1483422071000},{"_id":"source/_posts/132Pattern.md","hash":"e463c3d6369981f77cbf15ada12e12163ea33a66","modified":1484276978000},{"_id":"source/_posts/BattleshipsinaBoard.md","hash":"7b802fc1894ee7a8064d72053fad5abcb5ec4a8f","modified":1483595187000},{"_id":"source/_posts/CoinChange.md","hash":"a9ad85d481fa3ddabb192a6fdda89ac9d15be0ca","modified":1484395787000},{"_id":"source/_posts/CombinationSumIV.md","hash":"7f093afd316469167fbf76379d2ec4d73f648439","modified":1484276990000},{"_id":"source/_posts/GroupAnagrams.md","hash":"39347595eb85f84d972d62b137bf2c8a46ed6926","modified":1484277064000},{"_id":"source/_posts/LicenseKeyFormatting.md","hash":"3fc30a342173883a86126b490ab49adb7da1ac94","modified":1484667180000},{"_id":"source/_posts/Heaters.md","hash":"f6b1d02ddd7647d8cd6512efefe8f0b2c9205f93","modified":1483507667000},{"_id":"source/_posts/IntersectionofTwoArraysII.md","hash":"99d1ce4e9874ac725ecf2079404fcf40ab4f4faf","modified":1483887680000},{"_id":"source/_posts/LargestDivisibleSubset.md","hash":"549acae7f7b6f7f01cabb4f508ca5369ee9af559","modified":1484395907000},{"_id":"source/_posts/LongestIncreasingPathinaMatrix.md","hash":"b0c9d9cc27c46fd7d00e96a11eee85694aa63ab0","modified":1483950266000},{"_id":"source/_posts/PartitionEqualSubsetSum.md","hash":"2827ec318420479702406f9becd5a4df120550ed","modified":1484277030000},{"_id":"source/_posts/MaxConsecutiveOnesII.md","hash":"a9760cb3278a7fa40ec94e5158da7a781d18bf0b","modified":1484461913000},{"_id":"source/_posts/NewStart.md","hash":"8e373a9c4e54ad72603e05d0edd11cdfeb3a0673","modified":1483426041000},{"_id":"source/_posts/PathSumIII.md","hash":"a130adbb00393e837e3243522a8502bb57d4c73e","modified":1483804827000},{"_id":"source/_posts/PerfectSquares.md","hash":"f780574e45803d0562454812f066e6d2cd2d6029","modified":1484554268000},{"_id":"source/_posts/RansomNote.md","hash":"c7d244c776cd29768df6800b24e7666342208fdd","modified":1484236683000},{"_id":"source/_posts/TotalHammingDistance.md","hash":"3543dc2fb9cd9417061fd0377a0725999b835a6b","modified":1484277003000},{"_id":"themes/even/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1483422071000},{"_id":"source/tags/index.md","hash":"c7903929418ffa391eb94fa1ee0cb8238a53132d","modified":1484113382000},{"_id":"themes/even/.git/config","hash":"5ef1223485809abf438784735be8518631c5a612","modified":1483422071000},{"_id":"themes/even/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1483422059000},{"_id":"themes/even/.git/index","hash":"716749894a2bec82dced497b6b1c5e60d1c760ef","modified":1483428481000},{"_id":"themes/even/.git/packed-refs","hash":"10f165803b82c8da56e715acccaffa12802d0066","modified":1483422071000},{"_id":"themes/even/source/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1483422071000},{"_id":"themes/even/languages/default.yml","hash":"d7d6be001048ac4a038a1c16a3fd7be51fbc03c4","modified":1483422071000},{"_id":"themes/even/languages/en.yml","hash":"d7d6be001048ac4a038a1c16a3fd7be51fbc03c4","modified":1483422071000},{"_id":"themes/even/layout/categories.swig","hash":"dc244e0ee1fc34f43d5b195b9c1f6ef6d3ad2d0d","modified":1483422071000},{"_id":"themes/even/languages/zh-cn.yml","hash":"83a65fec58b88e44e600091f17ad0658d20f4a29","modified":1483422071000},{"_id":"themes/even/layout/page.swig","hash":"3a767206198efb3eb487d7061107212c2171106c","modified":1483422071000},{"_id":"themes/even/layout/post.swig","hash":"a0ed82a3aa04d3554dd654a3cf6194644ae1574c","modified":1483422071000},{"_id":"themes/even/layout/_layout.swig","hash":"7df438cee92a820985d0483967ebf4257ff68d9d","modified":1484114200000},{"_id":"themes/even/layout/archive.swig","hash":"30971263c38e67bffb6fdd90d458f6c82a75c05d","modified":1483427895000},{"_id":"themes/even/layout/tags.swig","hash":"e1bf35a7edb5dd94782ec855c87ee4d867a14f90","modified":1484114408000},{"_id":"themes/even/layout/index.swig","hash":"26b2e750075218a6b54d23869324db1fd336cf0c","modified":1483428492000},{"_id":"themes/even/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1483422059000},{"_id":"themes/even/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1483422059000},{"_id":"themes/even/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1483422059000},{"_id":"themes/even/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1483422059000},{"_id":"themes/even/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1483422059000},{"_id":"themes/even/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1483422059000},{"_id":"themes/even/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1483422059000},{"_id":"themes/even/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1483422059000},{"_id":"themes/even/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1483422059000},{"_id":"themes/even/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1483422059000},{"_id":"themes/even/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1483422059000},{"_id":"themes/even/.git/logs/HEAD","hash":"488ab2a7f4ab0592946e61be28c81c71291da80c","modified":1483422071000},{"_id":"themes/even/source/css/_base.scss","hash":"a6a5e21d54b2b7f019c0459ceee7367a5ed2b48e","modified":1483422071000},{"_id":"themes/even/source/css/_variables.scss","hash":"4b32cb649565e7caa1b5e09e0a6c22540813cd52","modified":1483422684000},{"_id":"themes/even/source/css/style.scss","hash":"0a405eb8f315a9ec1e32d550a456dc7651e9b261","modified":1483422071000},{"_id":"themes/even/layout/_partial/head.swig","hash":"cca6668f88f0a6114dc3e0bf8f4eda9932bc4347","modified":1483422071000},{"_id":"themes/even/layout/_partial/comments.swig","hash":"b76b54b562f32fea566c618187cdbb240a1b4352","modified":1483422071000},{"_id":"themes/even/layout/_partial/footer.swig","hash":"16ecd32d390ff596aacc77104160d7b2be0f8d11","modified":1484114287000},{"_id":"themes/even/layout/_partial/header.swig","hash":"804acd103aed2a844683989213ee3b9d7613a3fa","modified":1483422071000},{"_id":"themes/even/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1483422071000},{"_id":"themes/even/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1483422071000},{"_id":"themes/even/layout/_script/libs.swig","hash":"b1bbb3d785933b71a12384de050a1a881c561436","modified":1483422071000},{"_id":"themes/even/layout/_script/comments.swig","hash":"256713e117d67e2caad21db52bc0d51460e4ff7e","modified":1483422071000},{"_id":"themes/even/layout/_script/theme.swig","hash":"cb81a0a6a6d5264cc6451dda3dd3a96101f89b1d","modified":1483422071000},{"_id":"themes/even/layout/_macro/post.swig","hash":"8a47aee5bbab6b4f5a96eb3bfee7320a7f8538ce","modified":1483422071000},{"_id":"themes/even/layout/_macro/archive.swig","hash":"3f917db135c637ede1a5150e1091ad1d715395c3","modified":1484114578000},{"_id":"themes/even/source/css/_common/_animation.scss","hash":"f32d2444f0ab4dcb8b811ae1bccae6073f21a988","modified":1483422071000},{"_id":"themes/even/.git/refs/heads/master","hash":"ce2aa00a7fccd272d87da2c4465a76bf8907d6fc","modified":1483422071000},{"_id":"themes/even/source/css/_common/_utils.scss","hash":"21dfd8cfdb574504b97896a282044d93d972e338","modified":1483422071000},{"_id":"themes/even/source/css/_common/_normalize.scss","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1483422071000},{"_id":"themes/even/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_archive.scss","hash":"4adb1a3ad3d5672a9bac1b793f3b41118bf83be0","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_categories.scss","hash":"96f47000d25ef4e0e948f8f43fa4e2983ff0d746","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_back-to-top.scss","hash":"c6f586ac04a9a0f3633dadf5c66be9e0c4027f1d","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_pagination.scss","hash":"b24db39534e180ebcebba2e81d91d9f1d534eea1","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_post.scss","hash":"f3b05f32bf5e986df1856fdbec4b2bfdb9c3f129","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_footer.scss","hash":"76f3a72440be8aa1e93d8ddc5ea958777d1545ab","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_tags.scss","hash":"fb4bf54b34291d5b72598a7ba4d3e370c8ad9383","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_header.scss","hash":"f5853dbb2002dd74a0fa631122b48586d7ddbd3b","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_iconfont.scss","hash":"aa244964566da0393bcb5f536944d1c91f99235e","modified":1483422071000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1483422071000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483422071000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1483422071000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483422071000},{"_id":"themes/even/source/js/src/bootstrap.js","hash":"d01a401518abf0dd1e40c406cf9cda2a58a5cb1e","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1483422071000},{"_id":"themes/even/source/js/src/even.js","hash":"384f1f0466e88b717cd1d4ddc5a08b94c39f81fa","modified":1483422071000},{"_id":"themes/even/layout/_script/_analytics/baidu-analytics.swig","hash":"5d62309b16071f1b6952891ec8e1f1d42e38a088","modified":1483422071000},{"_id":"themes/even/layout/_script/_analytics/google-analytics.swig","hash":"f44684799386fbd4af6e5994b0c14c85eeff060c","modified":1483422071000},{"_id":"themes/even/layout/_script/_comments/disqus.swig","hash":"0502145777d65515249680d3e4611f249e3d9ff8","modified":1483422071000},{"_id":"themes/even/layout/_script/_comments/duoshou.swig","hash":"582cf94bc12b56c6a16b5f3aa0067b51f74b0d40","modified":1483422071000},{"_id":"themes/even/.git/objects/pack/pack-bceb22320e6e936d32665a41bfb4e52fdd675475.idx","hash":"7b222bf1e5617dbc9e02b36ae9acae921bffba85","modified":1483422071000},{"_id":"themes/even/source/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1483422071000},{"_id":"themes/even/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1483422071000},{"_id":"themes/even/.git/logs/refs/heads/master","hash":"488ab2a7f4ab0592946e61be28c81c71291da80c","modified":1483422071000},{"_id":"themes/even/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_footer/_copyright.scss","hash":"afbc0f90c674e5cd5fd7509eb1296d60b999d4e1","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_footer/_social.scss","hash":"bca6a1036951c2475278bfbd3a5ce51ff861e9a3","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_header/_logo.scss","hash":"f3fda6322fcc38d29cf439a422c57e09292adf68","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_header/_mobile-navbar.scss","hash":"1633f9cb54a3b2d09be086e27e5e5d33c718ca69","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_header/_menu.scss","hash":"c4eeed0abe9a83ff0699b649f2ffd3e6f6530556","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_header/_search.scss","hash":"3e9655aecde9a09bf015c97c7b10434a807a1ac4","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_post/_code.scss","hash":"80632262cd4c27a3f042bfb88295f7511c285e5b","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_post/_content.scss","hash":"a00cd224d832aff0c4a6deefc0b2b91fe4548172","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_post/_header.scss","hash":"794b85495d917e24bbe2f2782f3c7e69b6845eee","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_post/_footer.scss","hash":"9f2ab0ac20b2a8bfd315febd387c399f72f43d10","modified":1483422071000},{"_id":"themes/even/source/css/_partial/_post/_toc.scss","hash":"24ca97cb8845871b9fd8dcd2314d59248d90c682","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483422071000},{"_id":"themes/even/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1483422071000},{"_id":"themes/even/.git/logs/refs/remotes/origin/HEAD","hash":"488ab2a7f4ab0592946e61be28c81c71291da80c","modified":1483422071000},{"_id":"themes/even/.git/objects/pack/pack-bceb22320e6e936d32665a41bfb4e52fdd675475.pack","hash":"64b84be9658c983414c65a4ebe2eb0a644dcc852","modified":1483422071000},{"_id":"public/atom.xml","hash":"571d0616acd1efc163859c92a28b06cf95874e2b","modified":1484667192344},{"_id":"public/sitemap.xml","hash":"a21b9890d8a7a9456d78645e03ab23e5a8352b8d","modified":1484667192334},{"_id":"public/tags/index.html","hash":"804cb5c5523f2f314e28b6a7a5ffd1046308c70f","modified":1484667019975},{"_id":"public/2017/01/16/PerfectSquares/index.html","hash":"4f2082db6ba61d989a33506e00ddb93f88263e6c","modified":1484667019975},{"_id":"public/2017/01/15/MaxConsecutiveOnesII/index.html","hash":"72350439cbf186d91aa7f4345c867a89798b6fc1","modified":1484667019975},{"_id":"public/2017/01/13/LargestDivisibleSubset/index.html","hash":"a0ad9292b5c30ab6cfe72cd40b0e2fda975ae2ba","modified":1484667019975},{"_id":"public/2017/01/12/RansomNote/index.html","hash":"11c9fc1d862115305ad06b051f05868d5f9983c8","modified":1484667019975},{"_id":"public/2017/01/10/GroupAnagrams/index.html","hash":"958073e985ced4a97a5432b94cba32c623814e67","modified":1484667019975},{"_id":"public/2017/01/09/LongestIncreasingPathinaMatrix/index.html","hash":"5831f635b8f290a6fdf4acee50c1a4a18e1b0dab","modified":1484667019975},{"_id":"public/2017/01/06/PartitionEqualSubsetSum/index.html","hash":"a110daae63fdae1ac3cafe0998de7cfb1d7c6691","modified":1484667019977},{"_id":"public/2017/01/08/IntersectionofTwoArraysII/index.html","hash":"e96b8202106bcb3f541f244561afadc55ab655e6","modified":1484667019977},{"_id":"public/2017/01/03/132Pattern/index.html","hash":"08e7ded2ee085fbbfba31c74dbc3aea791015ba7","modified":1484667019977},{"_id":"public/2017/01/02/TotalHammingDistance/index.html","hash":"dadc2478010dcade1e97e165f7885d6fc4eae5a9","modified":1484667019977},{"_id":"public/2017/01/07/PathSumIII/index.html","hash":"918c1d21304be98417840e24dc9afab448319a1b","modified":1484667019977},{"_id":"public/archives/index.html","hash":"6cdcbacf0c7a3785ad010fec88b4d7f9468022d8","modified":1484667019977},{"_id":"public/2017/01/01/NewStart/index.html","hash":"4af28c68dedaf42e5169a4671c1b3513bb2d7ae4","modified":1484667019977},{"_id":"public/index.html","hash":"6dbbf80d3db4b2d1d8e97e9056e22da3f2873a76","modified":1484667161811},{"_id":"public/page/4/index.html","hash":"c7e04d85cef64fa0cd3189f81e9208c00464b103","modified":1484667019977},{"_id":"public/page/2/index.html","hash":"9f0e46d9f94a4e6e315df3da675228d11fecf2a6","modified":1484667019977},{"_id":"public/2017/01/11/CombinationSumIV/index.html","hash":"f8e22bb81e35ad3c1f72b65119174e261065ed65","modified":1484667019977},{"_id":"public/tags/Stack/index.html","hash":"4ec89815ac96296dac1ed411048a2f436a68af75","modified":1484667019977},{"_id":"public/tags/Simulation/index.html","hash":"bb4f7b3f659c0e7c2bc86324ffe1ade5e1a8ea93","modified":1484667019977},{"_id":"public/tags/Hash-Table/index.html","hash":"ecf12d33f0bfa8fc61b6ca8eb05e49867addfafb","modified":1484667019978},{"_id":"public/tags/Dynamic-Programming/index.html","hash":"be2c64f96ef4be4ce2931cb3207cb479efb4aeb8","modified":1484667019978},{"_id":"public/tags/String/index.html","hash":"5cc3305eac2cde94c11a1557fa7a5bf58e25b3e4","modified":1484667019978},{"_id":"public/tags/Two-Pointers/index.html","hash":"b918f110bdbc93a3c4a686d6e3751ea4d5878a45","modified":1484667019978},{"_id":"public/tags/Binary-Search/index.html","hash":"18c7b1e75301267cd0f5a3729702ea51deb83a94","modified":1484667019978},{"_id":"public/tags/Sort/index.html","hash":"353fe749159242946a5bcc18c63837bae5158205","modified":1484667019978},{"_id":"public/page/3/index.html","hash":"553ca4229c23708639bc89d841ee9fac097dbf1c","modified":1484667019978},{"_id":"public/tags/Depth-first-Search/index.html","hash":"6af982eee199c52d144050dc290b0ea26f7cca78","modified":1484667019978},{"_id":"public/tags/Description/index.html","hash":"3b04c505801ae0cb01d844a8d069bdbcfcdc3e3b","modified":1484667019978},{"_id":"public/tags/Topological-sort/index.html","hash":"1bc561c2d52446c6eddd01dd781a222752f46004","modified":1484667019978},{"_id":"public/tags/Memoization/index.html","hash":"c7787636b6c4d431015c28c772c718182233c09c","modified":1484667019978},{"_id":"public/tags/Math/index.html","hash":"d397d7d03618fb25c3bfbb26dced88fd6adb4288","modified":1484667019978},{"_id":"public/tags/Tree/index.html","hash":"d0b8d06bf245eda592d9f9ac43342fa557c57bda","modified":1484667019979},{"_id":"public/tags/Bitmap/index.html","hash":"20717c146efdc891592b80774dbdf58179fb7144","modified":1484667019979},{"_id":"public/tags/Breadth-first-Search/index.html","hash":"8326c9dfdd069a382d0d8bf0b9a692e0870af8a9","modified":1484667019979},{"_id":"public/2017/01/14/CoinChange/index.html","hash":"0d7eb6d6f82cb3cdb7cb136ddd4cc02bda31f777","modified":1484667019979},{"_id":"public/2017/01/05/BattleshipsinaBoard/index.html","hash":"e5d417d093e0bc65f10326a318f4de279d909216","modified":1484667019979},{"_id":"public/2017/01/04/Heaters/index.html","hash":"045ffe85b9dbbe9fb0c296e1e3cdc46231536118","modified":1484667019979},{"_id":"public/2017/01/17/LicenseKeyFormatting/index.html","hash":"aba8f18e9bfd75c032be69f2c14509256c8e2523","modified":1484667192353},{"_id":"public/favicon.ico","hash":"0505cec3b99707df7a681de37177b3cf7950cc5d","modified":1484667019982},{"_id":"public/fonts/chancery/apple-chancery-webfont.eot","hash":"fef78bd502f74fdbf0316123e176454cb3eb4e50","modified":1484667019982},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff","hash":"95beafe485d4bdbddfecbcf3b2bc9b2d9cf5f5c5","modified":1484667019982},{"_id":"public/fonts/chancery/apple-chancery-webfont.woff2","hash":"afd0f74128f1c21c5a542b2e100870e74da663b6","modified":1484667019982},{"_id":"public/fonts/chancery/apple-chancery-webfont.ttf","hash":"5e25c531901d8a9e37ab45a7f4acdbe5324b51b6","modified":1484667019982},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484667019990},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484667019990},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484667019990},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484667019990},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484667019990},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484667019990},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484667019990},{"_id":"public/fonts/chancery/apple-chancery-webfont.svg","hash":"a94e508f306a742637653f98c6e8827b11d3c142","modified":1484667019992},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1484667020004},{"_id":"public/js/src/bootstrap.js","hash":"d01a401518abf0dd1e40c406cf9cda2a58a5cb1e","modified":1484667020004},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1484667020004},{"_id":"public/js/src/even.js","hash":"384f1f0466e88b717cd1d4ddc5a08b94c39f81fa","modified":1484667020004},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1484667020004},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1484667020004},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1484667020005},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1484667020005},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1484667020005},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1484667020005},{"_id":"public/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1484667020005},{"_id":"public/css/style.css","hash":"1e0073a7395b5e1bf7e8b5b6364f391774272c69","modified":1484667020023}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-01-11T05:42:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-11 13:42:42\ntype: \"tags\"\n---\n","updated":"2017-01-11T05:43:02.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciy1oerfz001iq4f4uwoxbfyc","content":"","excerpt":"","more":""}],"Post":[{"title":"132 Pattern","date":"2017-01-03T05:46:25.000Z","_content":"\n> Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.\n>\n> Note: n will be less than 15,000.\n>\n> Example 1:\n> Input: [1, 2, 3, 4]\n> Output: False\n>\n> Explanation: There is no 132 pattern in the sequence.\n> \n> Example 2:\n> Input: [3, 1, 4, 2]\n> Output: True\n>\n> Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n>\n> Example 3:\n> Input: [-1, 3, 2, 0]\n> Output: True\n>\n> Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n\n<!--more-->\n\nThis is Leetcode 456. As the problem description, we can quickly write this solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool find132pattern(vector<int>& nums) {\n            for (int i = 0; i < (int)nums.size() - 2; i++) {\n                for (int j = i + 1; j < (int)nums.size() - 1; j++) {\n                    for (int k = j + 1; k < (int)nums.size(); k++) {\n                        if (check(nums, i, j, k)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        bool check(vector<int> &nums, int idx, int idy, int idz) {\n            if (nums[idx] < nums[idy]\n                    && nums[idz] < nums[idy]\n                    && nums[idx] < nums[idz]) {\n                return true;\n            }\n            return false;\n        }\n};\n```\nBut it's time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 < S2 < S3, we will find use two pointers to aim at the start and the end of the array.\n\nSo, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.\n\nFor more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:\n\nEXAMPLE:\n + i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty\n + i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]\n + i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]\n + i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]\n + i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 < 9, sequence found!\n\nSo, the solution is:\n\n```\nbool find132pattern(vector<int>& nums) {\n    int s3 = INT_MIN, s1;\n    std::stack<int> stack;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        s1 = nums[i];\n        if (s3 > s1) {\n            return true;\n        } else {\n            while (!stack.empty() && nums[i] > stack.top()) {\n                s3 = stack.top();\n                stack.pop();\n            }\n        }\n        stack.push(nums[i]);\n    }\n    return false;\n}\n```\n","source":"_posts/132Pattern.md","raw":"---\ntitle: 132 Pattern\ndate: 2017-01-03 13:46:25\ntags:\n    - Stack\n---\n\n> Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.\n>\n> Note: n will be less than 15,000.\n>\n> Example 1:\n> Input: [1, 2, 3, 4]\n> Output: False\n>\n> Explanation: There is no 132 pattern in the sequence.\n> \n> Example 2:\n> Input: [3, 1, 4, 2]\n> Output: True\n>\n> Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n>\n> Example 3:\n> Input: [-1, 3, 2, 0]\n> Output: True\n>\n> Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n\n<!--more-->\n\nThis is Leetcode 456. As the problem description, we can quickly write this solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        bool find132pattern(vector<int>& nums) {\n            for (int i = 0; i < (int)nums.size() - 2; i++) {\n                for (int j = i + 1; j < (int)nums.size() - 1; j++) {\n                    for (int k = j + 1; k < (int)nums.size(); k++) {\n                        if (check(nums, i, j, k)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        bool check(vector<int> &nums, int idx, int idy, int idz) {\n            if (nums[idx] < nums[idy]\n                    && nums[idz] < nums[idy]\n                    && nums[idx] < nums[idz]) {\n                return true;\n            }\n            return false;\n        }\n};\n```\nBut it's time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 < S2 < S3, we will find use two pointers to aim at the start and the end of the array.\n\nSo, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.\n\nFor more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:\n\nEXAMPLE:\n + i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty\n + i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]\n + i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]\n + i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]\n + i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 < 9, sequence found!\n\nSo, the solution is:\n\n```\nbool find132pattern(vector<int>& nums) {\n    int s3 = INT_MIN, s1;\n    std::stack<int> stack;\n    for (int i = nums.size() - 1; i >= 0; i--) {\n        s1 = nums[i];\n        if (s3 > s1) {\n            return true;\n        } else {\n            while (!stack.empty() && nums[i] > stack.top()) {\n                s3 = stack.top();\n                stack.pop();\n            }\n        }\n        stack.push(nums[i]);\n    }\n    return false;\n}\n```\n","slug":"132Pattern","published":1,"updated":"2017-01-13T03:09:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerdm0000q4f4o8lzst3v","content":"<blockquote>\n<p>Given a sequence of n integers a1, a2, …, an, a 132 pattern is a subsequence ai, aj, ak such that i &lt; j &lt; k and ai &lt; ak &lt; aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p>\n<p>Note: n will be less than 15,000.</p>\n<p>Example 1:<br>Input: [1, 2, 3, 4]<br>Output: False</p>\n<p>Explanation: There is no 132 pattern in the sequence.</p>\n<p>Example 2:<br>Input: [3, 1, 4, 2]<br>Output: True</p>\n<p>Explanation: There is a 132 pattern in the sequence: [1, 4, 2].</p>\n<p>Example 3:<br>Input: [-1, 3, 2, 0]<br>Output: True</p>\n<p>Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 456. As the problem description, we can quickly write this solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size() - 2; i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size() - 1; j++) &#123;</div><div class=\"line\">                    for (int k = j + 1; k &lt; (int)nums.size(); k++) &#123;</div><div class=\"line\">                        if (check(nums, i, j, k)) &#123;</div><div class=\"line\">                            return true;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(vector&lt;int&gt; &amp;nums, int idx, int idy, int idz) &#123;</div><div class=\"line\">            if (nums[idx] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idz] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idx] &lt; nums[idz]) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it’s time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 &lt; S2 &lt; S3, we will find use two pointers to aim at the start and the end of the array.</p>\n<p>So, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.</p>\n<p>For more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:</p>\n<p>EXAMPLE:</p>\n<ul>\n<li>i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty</li>\n<li>i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]</li>\n<li>i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]</li>\n<li>i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]</li>\n<li>i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 &lt; 9, sequence found!</li>\n</ul>\n<p>So, the solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int s3 = INT_MIN, s1;</div><div class=\"line\">    std::stack&lt;int&gt; stack;</div><div class=\"line\">    for (int i = nums.size() - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">        s1 = nums[i];</div><div class=\"line\">        if (s3 &gt; s1) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            while (!stack.empty() &amp;&amp; nums[i] &gt; stack.top()) &#123;</div><div class=\"line\">                s3 = stack.top();</div><div class=\"line\">                stack.pop();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        stack.push(nums[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Given a sequence of n integers a1, a2, …, an, a 132 pattern is a subsequence ai, aj, ak such that i &lt; j &lt; k and ai &lt; ak &lt; aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p>\n<p>Note: n will be less than 15,000.</p>\n<p>Example 1:<br>Input: [1, 2, 3, 4]<br>Output: False</p>\n<p>Explanation: There is no 132 pattern in the sequence.</p>\n<p>Example 2:<br>Input: [3, 1, 4, 2]<br>Output: True</p>\n<p>Explanation: There is a 132 pattern in the sequence: [1, 4, 2].</p>\n<p>Example 3:<br>Input: [-1, 3, 2, 0]<br>Output: True</p>\n<p>Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].</p>\n</blockquote>","more":"<p>This is Leetcode 456. As the problem description, we can quickly write this solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size() - 2; i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size() - 1; j++) &#123;</div><div class=\"line\">                    for (int k = j + 1; k &lt; (int)nums.size(); k++) &#123;</div><div class=\"line\">                        if (check(nums, i, j, k)) &#123;</div><div class=\"line\">                            return true;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(vector&lt;int&gt; &amp;nums, int idx, int idy, int idz) &#123;</div><div class=\"line\">            if (nums[idx] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idz] &lt; nums[idy]</div><div class=\"line\">                    &amp;&amp; nums[idx] &lt; nums[idz]) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But it’s time complex is O(n^3), and it will get TLE. So, we try to think another way. As a similar problem, try to find a array S1 &lt; S2 &lt; S3, we will find use two pointers to aim at the start and the end of the array.</p>\n<p>So, here we can use a similar solution. We can use a stack to store the num which is bigger than S3, and store it try to find the possible S3.</p>\n<p>For more detail, use [9, 11, 8, 9, 10, 7, 9] as an example:</p>\n<p>EXAMPLE:</p>\n<ul>\n<li>i = 6, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = None, Stack = Empty</li>\n<li>i = 5, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 7, S3 candidate = None, Stack = [9]</li>\n<li>i = 4, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 10, S3 candidate = None, Stack = [9,7]</li>\n<li>i = 3, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 9, S3 candidate = 9, Stack = [10]</li>\n<li>i = 2, nums = [ 9, 11, 8, 9, 10, 7, 9 ], S1 candidate = 8, S3 candidate = 9, Stack = [10,9] We have 8 &lt; 9, sequence found!</li>\n</ul>\n<p>So, the solution is:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int s3 = INT_MIN, s1;</div><div class=\"line\">    std::stack&lt;int&gt; stack;</div><div class=\"line\">    for (int i = nums.size() - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\">        s1 = nums[i];</div><div class=\"line\">        if (s3 &gt; s1) &#123;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            while (!stack.empty() &amp;&amp; nums[i] &gt; stack.top()) &#123;</div><div class=\"line\">                s3 = stack.top();</div><div class=\"line\">                stack.pop();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        stack.push(nums[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Battleships in a Board","date":"2017-01-05T05:46:25.000Z","_content":"\n> Given an 2D board, count how many different battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n>\n>  + You receive a valid board, made of only battleships or empty slots.\n>  + Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\n>  + At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n>\n> Example:\n>\n> X..X\n> ...X\n> ...X\n>\n> In the above board there are 2 battleships.\n>\n> Invalid Example:\n>\n> ...X\n> XXXX\n> ...X\n>\n> This is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n>\n> Follow up:\n> Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n<!-- more -->\n\nThis is Leetcode 419, and it's easy enough to figure out with simulation way as following:\n\n1. find the first X char, from up to down and left to right.\n2. if found, then search up and right, to check whether it is ok.\n3. use a global flag to mark if it's good for the result.\n\nThis method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.\n\nFor example, if we use a visited array to mark the visited cells. the solution will be like these:\n\n```\nbool checkShip(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (visited[idx][idy]) {\n        return false;\n    }\n\n    bool res = true;\n    // check the direction, down\n    int currentIdx = idx, currentIdy = idy;\n    while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n        if (board[currentIdx][currentIdy] == 'X') {\n            if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                res = false;\n                break;\n            }\n            if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                res = false;\n                break;\n            }\n        } else {\n            res = true;\n            break;\n        }\n        currentIdx++;\n    }\n    // check the direction, right\n    currentIdx = idx, currentIdy = idy;\n    if (!res) {\n        res = true;\n        while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n            if (board[currentIdx][currentIdy] == 'X') {\n                if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n                if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n            } else {\n                res = true;\n                break;\n            }\n            currentIdy++;\n        }\n    }\n    _visit(board, visited, idx, idy);\n    return res;\n}\n\nvoid _visit(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n        return;\n    }\n    if (visited[idx][idy]) {\n        return;\n    }\n    if (board[idx][idy] == '.') {\n        return;\n    }\n    visited[idx][idy] = 1;\n    _visit(board, visited, idx + 1, idy);\n    _visit(board, visited, idx, idy + 1);\n    _visit(board, visited, idx - 1, idy);\n    _visit(board, visited, idx, idy - 1);\n}\n\nint countBattleships(vector<vector<char> >& board) {\n    int* visited[board.size()];\n    for (int i = 0; i < (int)board.size(); i++) {\n        visited[i] = new int[board[0].size()];\n        memset(visited[i], 0, sizeof(int) * board[0].size());\n    }\n    int res = 0;\n    for (int idx = 0; idx < (int)board.size(); idx++) {\n        for (int idy = 0; idy < (int)board[0].size(); idy++) {\n            if (board[idx][idy] == 'X' && checkShip(board, visited, idx, idy)) {\n                res++;\n            }\n        }\n    }\n    return res;\n}\n```\n\nBut, if we can give up the visited array, just make sure the current cell's left or up have X char to mark it has been visited. It will make sense.\n\nSo, we should add these method to replace the former visited array:\n\n```\nbool isVisited(vector<vector<char> > &board, int idx, int idy) {\n    if (idx == 0 && idy == 0) {\n        return false;\n    } else if (idx == 0) {\n        return board[idx][idy - 1] == 'X';\n    } else if (idy == 0) {\n        return board[idx - 1][idy] == 'X';\n    } else {\n        return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n    }\n}\n```\nSo, the last AC code will like these:\n\n```\nclass Solution {\n    public:\n        bool isVisited(vector<vector<char> > &board, int idx, int idy) {\n            if (idx == 0 && idy == 0) {\n                return false;\n            } else if (idx == 0) {\n                return board[idx][idy - 1] == 'X';\n            } else if (idy == 0) {\n                return board[idx - 1][idy] == 'X';\n            } else {\n                return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n            }\n        }\n\n        bool checkShip(vector<vector<char> > &board, int idx, int idy) {\n            if (isVisited(board, idx, idy)) {\n                return false;\n            }\n\n            bool res = true;\n            // check the direction, down\n            int currentIdx = idx, currentIdy = idy;\n            while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                if (board[currentIdx][currentIdy] == 'X') {\n                    if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                    if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                } else {\n                    res = true;\n                    break;\n                }\n                currentIdx++;\n            }\n            // check the direction, right\n            currentIdx = idx, currentIdy = idy;\n            if (!res) {\n                res = true;\n                while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                    if (board[currentIdx][currentIdy] == 'X') {\n                        if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                        if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                    } else {\n                        res = true;\n                        break;\n                    }\n                    currentIdy++;\n                }\n            }\n            _visit(board, idx, idy);\n            return res;\n        }\n\n        void _visit(vector<vector<char> > &board, int idx, int idy) {\n            if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n                return;\n            }\n            if (isVisited(board, idx, idy)) {\n                return;\n            }\n            if (board[idx][idy] == '.') {\n                return;\n            }\n            // visited[idx][idy] = 1;\n            _visit(board, idx + 1, idy);\n            _visit(board, idx, idy + 1);\n            _visit(board, idx - 1, idy);\n            _visit(board, idx, idy - 1);\n        }\n\n        int countBattleships(vector<vector<char> >& board) {\n            int res = 0;\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'X' && checkShip(board, idx, idy)) {\n                        res++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n","source":"_posts/BattleshipsinaBoard.md","raw":"---\ntitle: Battleships in a Board\ndate: 2017-01-05 13:46:25\ntags:\n    - Simulation\n---\n\n> Given an 2D board, count how many different battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n>\n>  + You receive a valid board, made of only battleships or empty slots.\n>  + Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\n>  + At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n>\n> Example:\n>\n> X..X\n> ...X\n> ...X\n>\n> In the above board there are 2 battleships.\n>\n> Invalid Example:\n>\n> ...X\n> XXXX\n> ...X\n>\n> This is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n>\n> Follow up:\n> Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n<!-- more -->\n\nThis is Leetcode 419, and it's easy enough to figure out with simulation way as following:\n\n1. find the first X char, from up to down and left to right.\n2. if found, then search up and right, to check whether it is ok.\n3. use a global flag to mark if it's good for the result.\n\nThis method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.\n\nFor example, if we use a visited array to mark the visited cells. the solution will be like these:\n\n```\nbool checkShip(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (visited[idx][idy]) {\n        return false;\n    }\n\n    bool res = true;\n    // check the direction, down\n    int currentIdx = idx, currentIdy = idy;\n    while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n        if (board[currentIdx][currentIdy] == 'X') {\n            if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                res = false;\n                break;\n            }\n            if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                res = false;\n                break;\n            }\n        } else {\n            res = true;\n            break;\n        }\n        currentIdx++;\n    }\n    // check the direction, right\n    currentIdx = idx, currentIdy = idy;\n    if (!res) {\n        res = true;\n        while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n            if (board[currentIdx][currentIdy] == 'X') {\n                if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n                if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                    res = false;\n                    break;\n                }\n            } else {\n                res = true;\n                break;\n            }\n            currentIdy++;\n        }\n    }\n    _visit(board, visited, idx, idy);\n    return res;\n}\n\nvoid _visit(vector<vector<char> > &board, int **visited, int idx, int idy) {\n    if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n        return;\n    }\n    if (visited[idx][idy]) {\n        return;\n    }\n    if (board[idx][idy] == '.') {\n        return;\n    }\n    visited[idx][idy] = 1;\n    _visit(board, visited, idx + 1, idy);\n    _visit(board, visited, idx, idy + 1);\n    _visit(board, visited, idx - 1, idy);\n    _visit(board, visited, idx, idy - 1);\n}\n\nint countBattleships(vector<vector<char> >& board) {\n    int* visited[board.size()];\n    for (int i = 0; i < (int)board.size(); i++) {\n        visited[i] = new int[board[0].size()];\n        memset(visited[i], 0, sizeof(int) * board[0].size());\n    }\n    int res = 0;\n    for (int idx = 0; idx < (int)board.size(); idx++) {\n        for (int idy = 0; idy < (int)board[0].size(); idy++) {\n            if (board[idx][idy] == 'X' && checkShip(board, visited, idx, idy)) {\n                res++;\n            }\n        }\n    }\n    return res;\n}\n```\n\nBut, if we can give up the visited array, just make sure the current cell's left or up have X char to mark it has been visited. It will make sense.\n\nSo, we should add these method to replace the former visited array:\n\n```\nbool isVisited(vector<vector<char> > &board, int idx, int idy) {\n    if (idx == 0 && idy == 0) {\n        return false;\n    } else if (idx == 0) {\n        return board[idx][idy - 1] == 'X';\n    } else if (idy == 0) {\n        return board[idx - 1][idy] == 'X';\n    } else {\n        return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n    }\n}\n```\nSo, the last AC code will like these:\n\n```\nclass Solution {\n    public:\n        bool isVisited(vector<vector<char> > &board, int idx, int idy) {\n            if (idx == 0 && idy == 0) {\n                return false;\n            } else if (idx == 0) {\n                return board[idx][idy - 1] == 'X';\n            } else if (idy == 0) {\n                return board[idx - 1][idy] == 'X';\n            } else {\n                return board[idx - 1][idy] == 'X' || board[idx][idy - 1] == 'X';\n            }\n        }\n\n        bool checkShip(vector<vector<char> > &board, int idx, int idy) {\n            if (isVisited(board, idx, idy)) {\n                return false;\n            }\n\n            bool res = true;\n            // check the direction, down\n            int currentIdx = idx, currentIdy = idy;\n            while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                if (board[currentIdx][currentIdy] == 'X') {\n                    if (currentIdy + 1 < (int)board[0].size() && board[currentIdx][currentIdy + 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                    if (currentIdy - 1 >= 0 && board[currentIdx][currentIdy - 1] == 'X') {\n                        res = false;\n                        break;\n                    }\n                } else {\n                    res = true;\n                    break;\n                }\n                currentIdx++;\n            }\n            // check the direction, right\n            currentIdx = idx, currentIdy = idy;\n            if (!res) {\n                res = true;\n                while (currentIdx < (int)board.size() && currentIdy < (int)board[0].size()) {\n                    if (board[currentIdx][currentIdy] == 'X') {\n                        if (currentIdx + 1 < (int)board.size() && board[currentIdx + 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                        if (currentIdx - 1 >= 0 && board[currentIdx - 1][currentIdy] == 'X') {\n                            res = false;\n                            break;\n                        }\n                    } else {\n                        res = true;\n                        break;\n                    }\n                    currentIdy++;\n                }\n            }\n            _visit(board, idx, idy);\n            return res;\n        }\n\n        void _visit(vector<vector<char> > &board, int idx, int idy) {\n            if (idx < 0 || idy < 0|| idx >= (int)board.size() || idy >= (int)board[0].size()) {\n                return;\n            }\n            if (isVisited(board, idx, idy)) {\n                return;\n            }\n            if (board[idx][idy] == '.') {\n                return;\n            }\n            // visited[idx][idy] = 1;\n            _visit(board, idx + 1, idy);\n            _visit(board, idx, idy + 1);\n            _visit(board, idx - 1, idy);\n            _visit(board, idx, idy - 1);\n        }\n\n        int countBattleships(vector<vector<char> >& board) {\n            int res = 0;\n            for (int idx = 0; idx < (int)board.size(); idx++) {\n                for (int idy = 0; idy < (int)board[0].size(); idy++) {\n                    if (board[idx][idy] == 'X' && checkShip(board, idx, idy)) {\n                        res++;\n                    }\n                }\n            }\n            return res;\n        }\n};\n```\n","slug":"BattleshipsinaBoard","published":1,"updated":"2017-01-05T05:46:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerdq0001q4f4einvfjdl","content":"<blockquote>\n<p>Given an 2D board, count how many different battleships are in it. The battleships are represented with ‘X’s, empty slots are represented with ‘.’s. You may assume the following rules:</p>\n<ul>\n<li>You receive a valid board, made of only battleships or empty slots.</li>\n<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.</li>\n<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\n</ul>\n<p>Example:</p>\n<p>X..X<br>…X<br>…X</p>\n<p>In the above board there are 2 battleships.</p>\n<p>Invalid Example:</p>\n<p>…X<br>XXXX<br>…X</p>\n<p>This is an invalid board that you will not receive - as battleships will always have a cell separating between them.</p>\n<p>Follow up:<br>Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 419, and it’s easy enough to figure out with simulation way as following:</p>\n<ol>\n<li>find the first X char, from up to down and left to right.</li>\n<li>if found, then search up and right, to check whether it is ok.</li>\n<li>use a global flag to mark if it’s good for the result.</li>\n</ol>\n<p>This method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.</p>\n<p>For example, if we use a visited array to mark the visited cells. the solution will be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool res = true;</div><div class=\"line\">    // check the direction, down</div><div class=\"line\">    int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">        if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">            if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            res = true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">        currentIdx++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // check the direction, right</div><div class=\"line\">    currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    if (!res) &#123;</div><div class=\"line\">        res = true;</div><div class=\"line\">        while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">            if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            currentIdy++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    _visit(board, visited, idx, idy);</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    visited[idx][idy] = 1;</div><div class=\"line\">    _visit(board, visited, idx + 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy + 1);</div><div class=\"line\">    _visit(board, visited, idx - 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy - 1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">    int* visited[board.size()];</div><div class=\"line\">    for (int i = 0; i &lt; (int)board.size(); i++) &#123;</div><div class=\"line\">        visited[i] = new int[board[0].size()];</div><div class=\"line\">        memset(visited[i], 0, sizeof(int) * board[0].size());</div><div class=\"line\">    &#125;</div><div class=\"line\">    int res = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">        for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">            if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, visited, idx, idy)) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But, if we can give up the visited array, just make sure the current cell’s left or up have X char to mark it has been visited. It will make sense.</p>\n<p>So, we should add these method to replace the former visited array:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">    if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125; else if (idx == 0) &#123;</div><div class=\"line\">        return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125; else if (idy == 0) &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So, the last AC code will like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else if (idx == 0) &#123;</div><div class=\"line\">                return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125; else if (idy == 0) &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool res = true;</div><div class=\"line\">            // check the direction, down</div><div class=\"line\">            int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = true;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                currentIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // check the direction, right</div><div class=\"line\">            currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            if (!res) &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                    if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                        if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res = true;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    currentIdy++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(board, idx, idy);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // visited[idx][idy] = 1;</div><div class=\"line\">            _visit(board, idx + 1, idy);</div><div class=\"line\">            _visit(board, idx, idy + 1);</div><div class=\"line\">            _visit(board, idx - 1, idy);</div><div class=\"line\">            _visit(board, idx, idy - 1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, idx, idy)) &#123;</div><div class=\"line\">                        res++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Given an 2D board, count how many different battleships are in it. The battleships are represented with ‘X’s, empty slots are represented with ‘.’s. You may assume the following rules:</p>\n<ul>\n<li>You receive a valid board, made of only battleships or empty slots.</li>\n<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.</li>\n<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\n</ul>\n<p>Example:</p>\n<p>X..X<br>…X<br>…X</p>\n<p>In the above board there are 2 battleships.</p>\n<p>Invalid Example:</p>\n<p>…X<br>XXXX<br>…X</p>\n<p>This is an invalid board that you will not receive - as battleships will always have a cell separating between them.</p>\n<p>Follow up:<br>Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?</p>\n</blockquote>","more":"<p>This is Leetcode 419, and it’s easy enough to figure out with simulation way as following:</p>\n<ol>\n<li>find the first X char, from up to down and left to right.</li>\n<li>if found, then search up and right, to check whether it is ok.</li>\n<li>use a global flag to mark if it’s good for the result.</li>\n</ol>\n<p>This method will use O(n*n) array to mark the visited position, if not it will modify the value of the board to make sure no cell will visit twice.</p>\n<p>For example, if we use a visited array to mark the visited cells. the solution will be like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool res = true;</div><div class=\"line\">    // check the direction, down</div><div class=\"line\">    int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">        if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">            if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                res = false;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            res = true;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">        currentIdx++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    // check the direction, right</div><div class=\"line\">    currentIdx = idx, currentIdy = idy;</div><div class=\"line\">    if (!res) &#123;</div><div class=\"line\">        res = true;</div><div class=\"line\">        while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">            if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    res = false;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            currentIdy++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    _visit(board, visited, idx, idy);</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int **visited, int idx, int idy) &#123;</div><div class=\"line\">    if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (visited[idx][idy]) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    visited[idx][idy] = 1;</div><div class=\"line\">    _visit(board, visited, idx + 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy + 1);</div><div class=\"line\">    _visit(board, visited, idx - 1, idy);</div><div class=\"line\">    _visit(board, visited, idx, idy - 1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">    int* visited[board.size()];</div><div class=\"line\">    for (int i = 0; i &lt; (int)board.size(); i++) &#123;</div><div class=\"line\">        visited[i] = new int[board[0].size()];</div><div class=\"line\">        memset(visited[i], 0, sizeof(int) * board[0].size());</div><div class=\"line\">    &#125;</div><div class=\"line\">    int res = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">        for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">            if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, visited, idx, idy)) &#123;</div><div class=\"line\">                res++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>But, if we can give up the visited array, just make sure the current cell’s left or up have X char to mark it has been visited. It will make sense.</p>\n<p>So, we should add these method to replace the former visited array:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">    if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125; else if (idx == 0) &#123;</div><div class=\"line\">        return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125; else if (idy == 0) &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So, the last AC code will like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool isVisited(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx == 0 &amp;&amp; idy == 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125; else if (idx == 0) &#123;</div><div class=\"line\">                return board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125; else if (idy == 0) &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos;;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                return board[idx - 1][idy] == &apos;X&apos; || board[idx][idy - 1] == &apos;X&apos;;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool checkShip(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            bool res = true;</div><div class=\"line\">            // check the direction, down</div><div class=\"line\">            int currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                    if (currentIdy + 1 &lt; (int)board[0].size() &amp;&amp; board[currentIdx][currentIdy + 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    if (currentIdy - 1 &gt;= 0 &amp;&amp; board[currentIdx][currentIdy - 1] == &apos;X&apos;) &#123;</div><div class=\"line\">                        res = false;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = true;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                currentIdx++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // check the direction, right</div><div class=\"line\">            currentIdx = idx, currentIdy = idy;</div><div class=\"line\">            if (!res) &#123;</div><div class=\"line\">                res = true;</div><div class=\"line\">                while (currentIdx &lt; (int)board.size() &amp;&amp; currentIdy &lt; (int)board[0].size()) &#123;</div><div class=\"line\">                    if (board[currentIdx][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                        if (currentIdx + 1 &lt; (int)board.size() &amp;&amp; board[currentIdx + 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (currentIdx - 1 &gt;= 0 &amp;&amp; board[currentIdx - 1][currentIdy] == &apos;X&apos;) &#123;</div><div class=\"line\">                            res = false;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res = true;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    currentIdy++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            _visit(board, idx, idy);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void _visit(vector&lt;vector&lt;char&gt; &gt; &amp;board, int idx, int idy) &#123;</div><div class=\"line\">            if (idx &lt; 0 || idy &lt; 0|| idx &gt;= (int)board.size() || idy &gt;= (int)board[0].size()) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (isVisited(board, idx, idy)) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (board[idx][idy] == &apos;.&apos;) &#123;</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // visited[idx][idy] = 1;</div><div class=\"line\">            _visit(board, idx + 1, idy);</div><div class=\"line\">            _visit(board, idx, idy + 1);</div><div class=\"line\">            _visit(board, idx - 1, idy);</div><div class=\"line\">            _visit(board, idx, idy - 1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int countBattleships(vector&lt;vector&lt;char&gt; &gt;&amp; board) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (int idx = 0; idx &lt; (int)board.size(); idx++) &#123;</div><div class=\"line\">                for (int idy = 0; idy &lt; (int)board[0].size(); idy++) &#123;</div><div class=\"line\">                    if (board[idx][idy] == &apos;X&apos; &amp;&amp; checkShip(board, idx, idy)) &#123;</div><div class=\"line\">                        res++;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"Coin Change","date":"2017-01-14T05:54:51.000Z","_content":"\n> You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n>\n> Example 1:\n> coins = [1, 2, 5], amount = 11\n> return 3 (11 = 5 + 5 + 1)\n>\n> Example 2:\n> coins = [2], amount = 3\n> return -1.\n>\n> Note: You may assume that you have an infinite number of each kind of coin.\n\n<!--more-->\n\nThis is Leetcode 322, and it's quite a DP problem, so I first find this solution:\n1. use a DP array to store all the result from 0 to amount\n2. foreach add the coins to match the amount. for instance, we can find such an example:\n```\n  --- 2\n1 --- 3\n  --- 6\n  --- 3\n2 --- 4\n  --- 7\n    ...\n```\n3. So, after all this match we can finally find the result.\n\nSo, I write such solution code:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n\n            vector<long> DP(amount + 1, INT_MAX);\n            map<long, set<long> > coinMap;\n            long level = 1;\n            set<long> zeroN;\n            zeroN.insert(0);\n            coinMap.insert(pair<long, set<long> >(0, zeroN));\n            DP[0] = 0;\n\n            while (DP[amount] == INT_MAX) {\n                coinMap.insert(pair<long, set<long> >(level, set<long>()));\n                for (int preCoin : coinMap[level - 1]) {\n                    for (int coin : coins) {\n                        if (preCoin + (long)coin <= (long)amount) {\n                            coinMap[level].insert(preCoin + coin);\n                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (coinMap[level].size() == 0) {\n                    return -1;\n                }\n                level++;\n            }\n            return DP[amount];\n        }\n};\n```\n\nBut, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            long start = 0;\n            long end = 0;\n\n            DP[0] = 0;\n\n            while (start <= amount) {\n                for (int pre = start; pre <= end; pre++) {\n                    for (int coin : coins) {\n                        if ((long)coin + (long)pre <= (long)amount) {\n                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                start = coins[0] + start;\n                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);\n            }\n\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nHowever it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            DP[0] = 0;\n            for (int pre = 1; pre <= amount; pre++) {\n                for (int current : coins) {\n                    if (pre >= current) {\n                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nThis solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.\n","source":"_posts/CoinChange.md","raw":"---\ntitle: Coin Change\ndate: 2017-01-14 13:54:51\ntags:\n    - Dynamic Programming\n---\n\n> You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n>\n> Example 1:\n> coins = [1, 2, 5], amount = 11\n> return 3 (11 = 5 + 5 + 1)\n>\n> Example 2:\n> coins = [2], amount = 3\n> return -1.\n>\n> Note: You may assume that you have an infinite number of each kind of coin.\n\n<!--more-->\n\nThis is Leetcode 322, and it's quite a DP problem, so I first find this solution:\n1. use a DP array to store all the result from 0 to amount\n2. foreach add the coins to match the amount. for instance, we can find such an example:\n```\n  --- 2\n1 --- 3\n  --- 6\n  --- 3\n2 --- 4\n  --- 7\n    ...\n```\n3. So, after all this match we can finally find the result.\n\nSo, I write such solution code:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n\n            vector<long> DP(amount + 1, INT_MAX);\n            map<long, set<long> > coinMap;\n            long level = 1;\n            set<long> zeroN;\n            zeroN.insert(0);\n            coinMap.insert(pair<long, set<long> >(0, zeroN));\n            DP[0] = 0;\n\n            while (DP[amount] == INT_MAX) {\n                coinMap.insert(pair<long, set<long> >(level, set<long>()));\n                for (int preCoin : coinMap[level - 1]) {\n                    for (int coin : coins) {\n                        if (preCoin + (long)coin <= (long)amount) {\n                            coinMap[level].insert(preCoin + coin);\n                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (coinMap[level].size() == 0) {\n                    return -1;\n                }\n                level++;\n            }\n            return DP[amount];\n        }\n};\n```\n\nBut, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            long start = 0;\n            long end = 0;\n\n            DP[0] = 0;\n\n            while (start <= amount) {\n                for (int pre = start; pre <= end; pre++) {\n                    for (int coin : coins) {\n                        if ((long)coin + (long)pre <= (long)amount) {\n                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                start = coins[0] + start;\n                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);\n            }\n\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nHowever it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:\n\n```\nclass Solution {\n    public:\n        int coinChange(vector<int>& coins, int amount) {\n            vector<long> DP(amount + 1, INT_MAX);\n\n            sort(coins.begin(), coins.end());\n            if (amount == 0) {\n                return 0;\n            }\n            if (coins[0] > amount) {\n                return -1;\n            }\n\n            DP[0] = 0;\n            for (int pre = 1; pre <= amount; pre++) {\n                for (int current : coins) {\n                    if (pre >= current) {\n                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);\n                    } else {\n                        break;\n                    }\n                }\n            }\n            return DP[amount] == INT_MAX ? -1 : DP[amount];\n        }\n};\n```\n\nThis solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.\n","slug":"CoinChange","published":1,"updated":"2017-01-14T12:09:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerdu0003q4f45msfu6zt","content":"<blockquote>\n<p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p>\n<p>Example 1:<br>coins = [1, 2, 5], amount = 11<br>return 3 (11 = 5 + 5 + 1)</p>\n<p>Example 2:<br>coins = [2], amount = 3<br>return -1.</p>\n<p>Note: You may assume that you have an infinite number of each kind of coin.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 322, and it’s quite a DP problem, so I first find this solution:</p>\n<ol>\n<li>use a DP array to store all the result from 0 to amount</li>\n<li><p>foreach add the coins to match the amount. for instance, we can find such an example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  --- 2</div><div class=\"line\">1 --- 3</div><div class=\"line\">  --- 6</div><div class=\"line\">  --- 3</div><div class=\"line\">2 --- 4</div><div class=\"line\">  --- 7</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>So, after all this match we can finally find the result.</p>\n</li>\n</ol>\n<p>So, I write such solution code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\">            map&lt;long, set&lt;long&gt; &gt; coinMap;</div><div class=\"line\">            long level = 1;</div><div class=\"line\">            set&lt;long&gt; zeroN;</div><div class=\"line\">            zeroN.insert(0);</div><div class=\"line\">            coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(0, zeroN));</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (DP[amount] == INT_MAX) &#123;</div><div class=\"line\">                coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(level, set&lt;long&gt;()));</div><div class=\"line\">                for (int preCoin : coinMap[level - 1]) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if (preCoin + (long)coin &lt;= (long)amount) &#123;</div><div class=\"line\">                            coinMap[level].insert(preCoin + coin);</div><div class=\"line\">                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (coinMap[level].size() == 0) &#123;</div><div class=\"line\">                    return -1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                level++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long start = 0;</div><div class=\"line\">            long end = 0;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (start &lt;= amount) &#123;</div><div class=\"line\">                for (int pre = start; pre &lt;= end; pre++) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if ((long)coin + (long)pre &lt;= (long)amount) &#123;</div><div class=\"line\">                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                start = coins[0] + start;</div><div class=\"line\">                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>However it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int pre = 1; pre &lt;= amount; pre++) &#123;</div><div class=\"line\">                for (int current : coins) &#123;</div><div class=\"line\">                    if (pre &gt;= current) &#123;</div><div class=\"line\">                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.</p>\n","excerpt":"<blockquote>\n<p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p>\n<p>Example 1:<br>coins = [1, 2, 5], amount = 11<br>return 3 (11 = 5 + 5 + 1)</p>\n<p>Example 2:<br>coins = [2], amount = 3<br>return -1.</p>\n<p>Note: You may assume that you have an infinite number of each kind of coin.</p>\n</blockquote>","more":"<p>This is Leetcode 322, and it’s quite a DP problem, so I first find this solution:</p>\n<ol>\n<li>use a DP array to store all the result from 0 to amount</li>\n<li><p>foreach add the coins to match the amount. for instance, we can find such an example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  --- 2</div><div class=\"line\">1 --- 3</div><div class=\"line\">  --- 6</div><div class=\"line\">  --- 3</div><div class=\"line\">2 --- 4</div><div class=\"line\">  --- 7</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n</li>\n<li><p>So, after all this match we can finally find the result.</p>\n</li>\n</ol>\n<p>So, I write such solution code:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\">            map&lt;long, set&lt;long&gt; &gt; coinMap;</div><div class=\"line\">            long level = 1;</div><div class=\"line\">            set&lt;long&gt; zeroN;</div><div class=\"line\">            zeroN.insert(0);</div><div class=\"line\">            coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(0, zeroN));</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (DP[amount] == INT_MAX) &#123;</div><div class=\"line\">                coinMap.insert(pair&lt;long, set&lt;long&gt; &gt;(level, set&lt;long&gt;()));</div><div class=\"line\">                for (int preCoin : coinMap[level - 1]) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if (preCoin + (long)coin &lt;= (long)amount) &#123;</div><div class=\"line\">                            coinMap[level].insert(preCoin + coin);</div><div class=\"line\">                            DP[preCoin + coin] = min(DP[preCoin] + 1, DP[coin + preCoin]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (coinMap[level].size() == 0) &#123;</div><div class=\"line\">                    return -1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                level++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>But, it gets TLE. So I want to find where I am wrong. I think I use too much unnecessary maps. So I simplfy my code:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            long start = 0;</div><div class=\"line\">            long end = 0;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\"></div><div class=\"line\">            while (start &lt;= amount) &#123;</div><div class=\"line\">                for (int pre = start; pre &lt;= end; pre++) &#123;</div><div class=\"line\">                    for (int coin : coins) &#123;</div><div class=\"line\">                        if ((long)coin + (long)pre &lt;= (long)amount) &#123;</div><div class=\"line\">                            DP[coin + pre] = min(DP[pre] + 1, DP[coin + pre]);</div><div class=\"line\">                        &#125; else &#123;</div><div class=\"line\">                            break;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                start = coins[0] + start;</div><div class=\"line\">                end = min((long)coins[coins.size() - 1] + (long)end, (long)amount);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>However it still gets a TLE. Then I realize, how about just change the form of code, use the DP array as the standard:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(amount + 1, INT_MAX);</div><div class=\"line\"></div><div class=\"line\">            sort(coins.begin(), coins.end());</div><div class=\"line\">            if (amount == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (coins[0] &gt; amount) &#123;</div><div class=\"line\">                return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int pre = 1; pre &lt;= amount; pre++) &#123;</div><div class=\"line\">                for (int current : coins) &#123;</div><div class=\"line\">                    if (pre &gt;= current) &#123;</div><div class=\"line\">                        DP[pre] = min(DP[pre - current] + 1, DP[pre]);</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[amount] == INT_MAX ? -1 : DP[amount];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This solution is as much as the above but its form changed, and its time complex is O(NM), and it gets AC.</p>"},{"title":"Group Anagrams","date":"2017-01-10T06:07:57.000Z","_content":"\n> Given an array of strings, group anagrams together.\n>\n> For example, given: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n> Return:\n>\n>       [\n>           [\"ate\", \"eat\",\"tea\"],\n>           [\"nat\",\"tan\"],\n>           [\"bat\"]\n>       ]\n>\n> Note: All inputs will be in lower-case.\n\n<!--more-->\n\nThis is Leetcode 49, what a easy problem. We can quickly figure out two method:\n\nThe first one is:\n> 1. choose one string as the standard one.\n> 2. for each to check if this one has the same chars as the standard.\n> 3. if same, than, mark it has been used, and store it to the result.\n\nThe time complex of this method is O(n^2*m), m is dependent on the length of the string. It's is not a fast method, but it uses the least memory.\n\nThe second one is to use the map or hash map to help.\n> 1. for each to count its structure. for example, tae can be descriped as '1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z'\n> 2. then make the key to the map and check each word which has the same structure.\n\nThe time copolex of this method is O(n*m).\n\nSo, I use the second one to write the result code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<string> > groupAnagrams(vector<string>& strs) {\n            vector<string> keys;\n            map<string, vector<string> > retMap;\n            for (int i = 0; i < (int)strs.size(); i++) {\n                int chars[26] = {0};\n                for (int j = 0; j < (int)strs[i].length(); j++) {\n                    chars[strs[i][j] - 'a']++;\n                }\n                string currentKey = \"\";\n                for (int j = 0; j < 26; j++) {\n                    currentKey = currentKey + (char)('0' + chars[j]);\n                    currentKey = currentKey + (char)('a' + j);\n                }\n\n                if (retMap.find(currentKey) != retMap.end()) {\n                    retMap[currentKey].push_back(strs[i]);\n                } else {\n                    vector<string> currentValue;\n                    currentValue.push_back(strs[i]);\n                    retMap.insert(pair<string, vector<string> >(currentKey, currentValue));\n                }\n            }\n\n            vector<vector<string> > res;\n            for (pair<string, vector<string> > values: retMap) {\n                res.push_back(values.second);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/GroupAnagrams.md","raw":"---\ntitle: Group Anagrams\ndate: 2017-01-10 14:07:57\ntags:\n    - Hash Table\n    - String\n---\n\n> Given an array of strings, group anagrams together.\n>\n> For example, given: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n> Return:\n>\n>       [\n>           [\"ate\", \"eat\",\"tea\"],\n>           [\"nat\",\"tan\"],\n>           [\"bat\"]\n>       ]\n>\n> Note: All inputs will be in lower-case.\n\n<!--more-->\n\nThis is Leetcode 49, what a easy problem. We can quickly figure out two method:\n\nThe first one is:\n> 1. choose one string as the standard one.\n> 2. for each to check if this one has the same chars as the standard.\n> 3. if same, than, mark it has been used, and store it to the result.\n\nThe time complex of this method is O(n^2*m), m is dependent on the length of the string. It's is not a fast method, but it uses the least memory.\n\nThe second one is to use the map or hash map to help.\n> 1. for each to count its structure. for example, tae can be descriped as '1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z'\n> 2. then make the key to the map and check each word which has the same structure.\n\nThe time copolex of this method is O(n*m).\n\nSo, I use the second one to write the result code as following:\n\n```\nusing namespace std;\n\nclass Solution {\n    public:\n        vector<vector<string> > groupAnagrams(vector<string>& strs) {\n            vector<string> keys;\n            map<string, vector<string> > retMap;\n            for (int i = 0; i < (int)strs.size(); i++) {\n                int chars[26] = {0};\n                for (int j = 0; j < (int)strs[i].length(); j++) {\n                    chars[strs[i][j] - 'a']++;\n                }\n                string currentKey = \"\";\n                for (int j = 0; j < 26; j++) {\n                    currentKey = currentKey + (char)('0' + chars[j]);\n                    currentKey = currentKey + (char)('a' + j);\n                }\n\n                if (retMap.find(currentKey) != retMap.end()) {\n                    retMap[currentKey].push_back(strs[i]);\n                } else {\n                    vector<string> currentValue;\n                    currentValue.push_back(strs[i]);\n                    retMap.insert(pair<string, vector<string> >(currentKey, currentValue));\n                }\n            }\n\n            vector<vector<string> > res;\n            for (pair<string, vector<string> > values: retMap) {\n                res.push_back(values.second);\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"GroupAnagrams","published":1,"updated":"2017-01-13T03:11:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerdv0004q4f4ztjf80cn","content":"<blockquote>\n<p>Given an array of strings, group anagrams together.</p>\n<p>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Return:</p>\n<pre><code>[\n    [&quot;ate&quot;, &quot;eat&quot;,&quot;tea&quot;],\n    [&quot;nat&quot;,&quot;tan&quot;],\n    [&quot;bat&quot;]\n]\n</code></pre><p>Note: All inputs will be in lower-case.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 49, what a easy problem. We can quickly figure out two method:</p>\n<p>The first one is:</p>\n<blockquote>\n<ol>\n<li>choose one string as the standard one.</li>\n<li>for each to check if this one has the same chars as the standard.</li>\n<li>if same, than, mark it has been used, and store it to the result.</li>\n</ol>\n</blockquote>\n<p>The time complex of this method is O(n^2*m), m is dependent on the length of the string. It’s is not a fast method, but it uses the least memory.</p>\n<p>The second one is to use the map or hash map to help.</p>\n<blockquote>\n<ol>\n<li>for each to count its structure. for example, tae can be descriped as ‘1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z’</li>\n<li>then make the key to the map and check each word which has the same structure.</li>\n</ol>\n</blockquote>\n<p>The time copolex of this method is O(n*m).</p>\n<p>So, I use the second one to write the result code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;string&gt; &gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">            vector&lt;string&gt; keys;</div><div class=\"line\">            map&lt;string, vector&lt;string&gt; &gt; retMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                int chars[26] = &#123;0&#125;;</div><div class=\"line\">                for (int j = 0; j &lt; (int)strs[i].length(); j++) &#123;</div><div class=\"line\">                    chars[strs[i][j] - &apos;a&apos;]++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                string currentKey = &quot;&quot;;</div><div class=\"line\">                for (int j = 0; j &lt; 26; j++) &#123;</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;0&apos; + chars[j]);</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;a&apos; + j);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (retMap.find(currentKey) != retMap.end()) &#123;</div><div class=\"line\">                    retMap[currentKey].push_back(strs[i]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    vector&lt;string&gt; currentValue;</div><div class=\"line\">                    currentValue.push_back(strs[i]);</div><div class=\"line\">                    retMap.insert(pair&lt;string, vector&lt;string&gt; &gt;(currentKey, currentValue));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;string&gt; &gt; res;</div><div class=\"line\">            for (pair&lt;string, vector&lt;string&gt; &gt; values: retMap) &#123;</div><div class=\"line\">                res.push_back(values.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an array of strings, group anagrams together.</p>\n<p>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Return:</p>\n<pre><code>[\n    [&quot;ate&quot;, &quot;eat&quot;,&quot;tea&quot;],\n    [&quot;nat&quot;,&quot;tan&quot;],\n    [&quot;bat&quot;]\n]\n</code></pre><p>Note: All inputs will be in lower-case.</p>\n</blockquote>","more":"<p>This is Leetcode 49, what a easy problem. We can quickly figure out two method:</p>\n<p>The first one is:</p>\n<blockquote>\n<ol>\n<li>choose one string as the standard one.</li>\n<li>for each to check if this one has the same chars as the standard.</li>\n<li>if same, than, mark it has been used, and store it to the result.</li>\n</ol>\n</blockquote>\n<p>The time complex of this method is O(n^2*m), m is dependent on the length of the string. It’s is not a fast method, but it uses the least memory.</p>\n<p>The second one is to use the map or hash map to help.</p>\n<blockquote>\n<ol>\n<li>for each to count its structure. for example, tae can be descriped as ‘1a0b0c0d1e0f0g0h0i0j0k0l0m0n0o0p0q0r0s1t0u0v0w0x0y0z’</li>\n<li>then make the key to the map and check each word which has the same structure.</li>\n</ol>\n</blockquote>\n<p>The time copolex of this method is O(n*m).</p>\n<p>So, I use the second one to write the result code as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;vector&lt;string&gt; &gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123;</div><div class=\"line\">            vector&lt;string&gt; keys;</div><div class=\"line\">            map&lt;string, vector&lt;string&gt; &gt; retMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                int chars[26] = &#123;0&#125;;</div><div class=\"line\">                for (int j = 0; j &lt; (int)strs[i].length(); j++) &#123;</div><div class=\"line\">                    chars[strs[i][j] - &apos;a&apos;]++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                string currentKey = &quot;&quot;;</div><div class=\"line\">                for (int j = 0; j &lt; 26; j++) &#123;</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;0&apos; + chars[j]);</div><div class=\"line\">                    currentKey = currentKey + (char)(&apos;a&apos; + j);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                if (retMap.find(currentKey) != retMap.end()) &#123;</div><div class=\"line\">                    retMap[currentKey].push_back(strs[i]);</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    vector&lt;string&gt; currentValue;</div><div class=\"line\">                    currentValue.push_back(strs[i]);</div><div class=\"line\">                    retMap.insert(pair&lt;string, vector&lt;string&gt; &gt;(currentKey, currentValue));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;string&gt; &gt; res;</div><div class=\"line\">            for (pair&lt;string, vector&lt;string&gt; &gt; values: retMap) &#123;</div><div class=\"line\">                res.push_back(values.second);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Combination Sum IV","date":"2017-01-11T01:36:11.000Z","_content":"\n> Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n>\n> Example:\n>\n> nums = [1, 2, 3] , target = 4\n>\n> The possible combination ways are:\n> (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)\n>\n> Note that different sequences are counted as different combinations.\n>\n> Therefore the output is 7.\n>\n> Follow up:\n> What if negative numbers are allowed in the given array?\n> How does it change the problem?\n> What limitation we need to add to the question to allow negative number.\n\n<!--more-->\n\nThis is Leetcode 377, we can quickly find a DFS solution like these:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            sort(nums.begin(), nums.end());\n            res = 0;\n            DFS(nums, target, 0);\n            return res;\n        }\n\n        void DFS(vector<int> &nums, int target, int currentSum) {\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (currentSum + nums[i] > target) {\n                    return;\n                } else if (currentSum + nums[i] == target) {\n                    res++;\n                } else {\n                    DFS(nums, target, currentSum + nums[i]);\n                }\n            }\n        }\n};\n```\n\nIt will solve this problem but it's too slow to get AC. So, we can think in another way.\n\nPicture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.\n\nSo, the solution is as following:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            vector<int> res(target + 1, 0);\n            sort(nums.begin(), nums.end());\n            for (int i = 1; i <= target; i++) {\n                for (int num : nums) {\n                    if (num > i) {\n                        break;\n                    } else if (num == i) {\n                        res[num]++;\n                    } else {\n                        res[i] = res[i - num] + res[i];\n                    }\n                }\n            }\n            return res[target];\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/CombinationSumIV.md","raw":"---\ntitle: Combination Sum IV\ndate: 2017-01-11 09:36:11\ntags:\n    - Dynamic Programming\n---\n\n> Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\n>\n> Example:\n>\n> nums = [1, 2, 3] , target = 4\n>\n> The possible combination ways are:\n> (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)\n>\n> Note that different sequences are counted as different combinations.\n>\n> Therefore the output is 7.\n>\n> Follow up:\n> What if negative numbers are allowed in the given array?\n> How does it change the problem?\n> What limitation we need to add to the question to allow negative number.\n\n<!--more-->\n\nThis is Leetcode 377, we can quickly find a DFS solution like these:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            sort(nums.begin(), nums.end());\n            res = 0;\n            DFS(nums, target, 0);\n            return res;\n        }\n\n        void DFS(vector<int> &nums, int target, int currentSum) {\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (currentSum + nums[i] > target) {\n                    return;\n                } else if (currentSum + nums[i] == target) {\n                    res++;\n                } else {\n                    DFS(nums, target, currentSum + nums[i]);\n                }\n            }\n        }\n};\n```\n\nIt will solve this problem but it's too slow to get AC. So, we can think in another way.\n\nPicture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.\n\nSo, the solution is as following:\n\n```\nclass Solution {\n    public:\n        int res;\n        int combinationSum4(vector<int>& nums, int target) {\n            vector<int> res(target + 1, 0);\n            sort(nums.begin(), nums.end());\n            for (int i = 1; i <= target; i++) {\n                for (int num : nums) {\n                    if (num > i) {\n                        break;\n                    } else if (num == i) {\n                        res[num]++;\n                    } else {\n                        res[i] = res[i - num] + res[i];\n                    }\n                }\n            }\n            return res[target];\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"CombinationSumIV","published":1,"updated":"2017-01-13T03:09:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerdx0005q4f4ckpwhzh9","content":"<blockquote>\n<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\n<p>Example:</p>\n<p>nums = [1, 2, 3] , target = 4</p>\n<p>The possible combination ways are:<br>(1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)</p>\n<p>Note that different sequences are counted as different combinations.</p>\n<p>Therefore the output is 7.</p>\n<p>Follow up:<br>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative number.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 377, we can quickly find a DFS solution like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            res = 0;</div><div class=\"line\">            DFS(nums, target, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void DFS(vector&lt;int&gt; &amp;nums, int target, int currentSum) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (currentSum + nums[i] &gt; target) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125; else if (currentSum + nums[i] == target) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    DFS(nums, target, currentSum + nums[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It will solve this problem but it’s too slow to get AC. So, we can think in another way.</p>\n<p>Picture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.</p>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            vector&lt;int&gt; res(target + 1, 0);</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            for (int i = 1; i &lt;= target; i++) &#123;</div><div class=\"line\">                for (int num : nums) &#123;</div><div class=\"line\">                    if (num &gt; i) &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125; else if (num == i) &#123;</div><div class=\"line\">                        res[num]++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res[i] = res[i - num] + res[i];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res[target];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\n<p>Example:</p>\n<p>nums = [1, 2, 3] , target = 4</p>\n<p>The possible combination ways are:<br>(1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1)</p>\n<p>Note that different sequences are counted as different combinations.</p>\n<p>Therefore the output is 7.</p>\n<p>Follow up:<br>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative number.</p>\n</blockquote>","more":"<p>This is Leetcode 377, we can quickly find a DFS solution like these:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            res = 0;</div><div class=\"line\">            DFS(nums, target, 0);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        void DFS(vector&lt;int&gt; &amp;nums, int target, int currentSum) &#123;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (currentSum + nums[i] &gt; target) &#123;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125; else if (currentSum + nums[i] == target) &#123;</div><div class=\"line\">                    res++;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    DFS(nums, target, currentSum + nums[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It will solve this problem but it’s too slow to get AC. So, we can think in another way.</p>\n<p>Picture this, we based on the sum. Make a DP array to store the value of the sum kinds of nums which sumed as the key.</p>\n<p>So, the solution is as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int res;</div><div class=\"line\">        int combinationSum4(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class=\"line\">            vector&lt;int&gt; res(target + 1, 0);</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            for (int i = 1; i &lt;= target; i++) &#123;</div><div class=\"line\">                for (int num : nums) &#123;</div><div class=\"line\">                    if (num &gt; i) &#123;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125; else if (num == i) &#123;</div><div class=\"line\">                        res[num]++;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        res[i] = res[i - num] + res[i];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res[target];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Heaters","date":"2017-01-04T05:46:25.000Z","_content":"\n> Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.\n>\n> So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.\n>\n> Note:\n>\n> + Numbers of houses and heaters you are given are non-negative and will not exceed 25000.\n> + Positions of houses and heaters you are given are non-negative and will not exceed 10^9.\n> + As long as a house is in the heaters' warm radius range, it can be warmed.\n> + All the heaters follow your radius standard and the warm radius will the same.\n>\n> Example 1:\n>\n> Input: [1,2,3],[2]\n> Output: 1\n> Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n>\n> Example 2:\n>\n> Input: [1,2,3,4],[1,4]\n> Output: 1\n> Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n\n<!-- more -->\n\nThis is Leetcode 475. As it's descripted, we can quickly find a solution. Picture this:\n\n\n```\n          h1   h2        h3\n           |    |         |\n......................................\n```\n\nIf we find the min value of the radius between every two heaters, and find the max one, which will be the result.\n\nAnd it's time complex is O(n*m), n is the num of the houses and m is the num of heaters.\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int idx;\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\n        sort(houses.begin(), houses.end());\n        sort(heaters.begin(), heaters.end());\n\n        int res = INT_MIN;\n        idx = 0;\n        for (int i = 0; i < (int)heaters.size(); i++) {\n            if (i == 0) {\n                res = max(res, findMinRadius(houses, -1, heaters[i]));\n            } else if (i == (int)heaters.size()) {\n                res = max(res, findMinRadius(houses, heaters[i - 1], -1));\n            } else {\n                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));\n            }\n            std::cout << res << std::endl;\n        }\n        return res;\n    }\n\n    int findMinRadius(vector<int> houses, int heater1, int heater2) {\n        if (heater1 == -1) { // means the first one\n            while (houses[idx] <= heater2) { idx++; }\n            return heater2 - houses[0];\n        } else if (heater2 == -1) { // means the last one\n            while (idx < (int)houses.size()) { idx++; }\n            return houses[idx - 1] - heater1;\n        } else {\n            int minRadius = INT_MAX;\n            for (int i = idx; houses[i] < heater2; i++) {\n                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);\n                // if there are (2n-1) houses, we need to use the mid one\n                // if there are (2n) houses, we should use the the mid two\n                // here is hard to decide which to use as the standard\n            }\n            return minRadius;\n        }\n    }\n};\n```\n\nHowever, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.\n\n+ For each house, find its position between those heaters (thus we need the heaters array to be sorted).\n+ Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.\n+ Get MAX value among distances in step 2. It's the answer.\n\nSo, here comes the solution:\n\n```\nclass Solution {\n    public:\n        int findRadius(vector<int>& houses, vector<int>& heaters) {\n            int house_size = houses.size();\n            if (house_size == 0) return 0;\n            sort(heaters.begin(), heaters.end());\n\n            int res = 0;\n            for (auto& c : houses) {\n\n                int idx = Bsearch(heaters, c);\n\n                if (idx == 0) {\n                    res = max(res, heaters[idx] - c);\n                } else if (idx >= (int)heaters.size()) {\n                    res = max(res, c - heaters.back());\n                } else {\n                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));\n                }\n            }\n            return res;\n        }\n\n        int Bsearch(vector<int>& nums, int val) {\n\n            int l = 0, r = nums.size() - 1;\n            while (l <= r) {\n                int mid = l + ((r - l) >> 1);\n                if (nums[mid] == val)\n                    return mid;\n                else if (nums[mid] < val)\n                    l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n            return l;\n        }\n};\n```\n\nAnd it's AC.\n","source":"_posts/Heaters.md","raw":"---\ntitle: Heaters\ndate: 2017-01-04 13:46:25\ntags:\n    - Binary Search\n---\n\n> Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.\n>\n> So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.\n>\n> Note:\n>\n> + Numbers of houses and heaters you are given are non-negative and will not exceed 25000.\n> + Positions of houses and heaters you are given are non-negative and will not exceed 10^9.\n> + As long as a house is in the heaters' warm radius range, it can be warmed.\n> + All the heaters follow your radius standard and the warm radius will the same.\n>\n> Example 1:\n>\n> Input: [1,2,3],[2]\n> Output: 1\n> Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n>\n> Example 2:\n>\n> Input: [1,2,3,4],[1,4]\n> Output: 1\n> Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n\n<!-- more -->\n\nThis is Leetcode 475. As it's descripted, we can quickly find a solution. Picture this:\n\n\n```\n          h1   h2        h3\n           |    |         |\n......................................\n```\n\nIf we find the min value of the radius between every two heaters, and find the max one, which will be the result.\n\nAnd it's time complex is O(n*m), n is the num of the houses and m is the num of heaters.\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int idx;\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\n        sort(houses.begin(), houses.end());\n        sort(heaters.begin(), heaters.end());\n\n        int res = INT_MIN;\n        idx = 0;\n        for (int i = 0; i < (int)heaters.size(); i++) {\n            if (i == 0) {\n                res = max(res, findMinRadius(houses, -1, heaters[i]));\n            } else if (i == (int)heaters.size()) {\n                res = max(res, findMinRadius(houses, heaters[i - 1], -1));\n            } else {\n                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));\n            }\n            std::cout << res << std::endl;\n        }\n        return res;\n    }\n\n    int findMinRadius(vector<int> houses, int heater1, int heater2) {\n        if (heater1 == -1) { // means the first one\n            while (houses[idx] <= heater2) { idx++; }\n            return heater2 - houses[0];\n        } else if (heater2 == -1) { // means the last one\n            while (idx < (int)houses.size()) { idx++; }\n            return houses[idx - 1] - heater1;\n        } else {\n            int minRadius = INT_MAX;\n            for (int i = idx; houses[i] < heater2; i++) {\n                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);\n                // if there are (2n-1) houses, we need to use the mid one\n                // if there are (2n) houses, we should use the the mid two\n                // here is hard to decide which to use as the standard\n            }\n            return minRadius;\n        }\n    }\n};\n```\n\nHowever, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.\n\n+ For each house, find its position between those heaters (thus we need the heaters array to be sorted).\n+ Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.\n+ Get MAX value among distances in step 2. It's the answer.\n\nSo, here comes the solution:\n\n```\nclass Solution {\n    public:\n        int findRadius(vector<int>& houses, vector<int>& heaters) {\n            int house_size = houses.size();\n            if (house_size == 0) return 0;\n            sort(heaters.begin(), heaters.end());\n\n            int res = 0;\n            for (auto& c : houses) {\n\n                int idx = Bsearch(heaters, c);\n\n                if (idx == 0) {\n                    res = max(res, heaters[idx] - c);\n                } else if (idx >= (int)heaters.size()) {\n                    res = max(res, c - heaters.back());\n                } else {\n                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));\n                }\n            }\n            return res;\n        }\n\n        int Bsearch(vector<int>& nums, int val) {\n\n            int l = 0, r = nums.size() - 1;\n            while (l <= r) {\n                int mid = l + ((r - l) >> 1);\n                if (nums[mid] == val)\n                    return mid;\n                else if (nums[mid] < val)\n                    l = mid + 1;\n                else\n                    r = mid - 1;\n            }\n            return l;\n        }\n};\n```\n\nAnd it's AC.\n","slug":"Heaters","published":1,"updated":"2017-01-04T05:27:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oere00008q4f42geg3n81","content":"<blockquote>\n<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>\n<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>\n<p>Note:</p>\n<ul>\n<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>\n<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>\n<li>As long as a house is in the heaters’ warm radius range, it can be warmed.</li>\n<li>All the heaters follow your radius standard and the warm radius will the same.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1,2,3],[2]<br>Output: 1<br>Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</p>\n<p>Example 2:</p>\n<p>Input: [1,2,3,4],[1,4]<br>Output: 1<br>Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 475. As it’s descripted, we can quickly find a solution. Picture this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">          h1   h2        h3</div><div class=\"line\">           |    |         |</div><div class=\"line\">......................................</div></pre></td></tr></table></figure>\n<p>If we find the min value of the radius between every two heaters, and find the max one, which will be the result.</p>\n<p>And it’s time complex is O(n*m), n is the num of the houses and m is the num of heaters.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int idx;</div><div class=\"line\">    int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">        sort(houses.begin(), houses.end());</div><div class=\"line\">        sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">        int res = INT_MIN;</div><div class=\"line\">        idx = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)heaters.size(); i++) &#123;</div><div class=\"line\">            if (i == 0) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, -1, heaters[i]));</div><div class=\"line\">            &#125; else if (i == (int)heaters.size()) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], -1));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            std::cout &lt;&lt; res &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int findMinRadius(vector&lt;int&gt; houses, int heater1, int heater2) &#123;</div><div class=\"line\">        if (heater1 == -1) &#123; // means the first one</div><div class=\"line\">            while (houses[idx] &lt;= heater2) &#123; idx++; &#125;</div><div class=\"line\">            return heater2 - houses[0];</div><div class=\"line\">        &#125; else if (heater2 == -1) &#123; // means the last one</div><div class=\"line\">            while (idx &lt; (int)houses.size()) &#123; idx++; &#125;</div><div class=\"line\">            return houses[idx - 1] - heater1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            int minRadius = INT_MAX;</div><div class=\"line\">            for (int i = idx; houses[i] &lt; heater2; i++) &#123;</div><div class=\"line\">                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);</div><div class=\"line\">                // if there are (2n-1) houses, we need to use the mid one</div><div class=\"line\">                // if there are (2n) houses, we should use the the mid two</div><div class=\"line\">                // here is hard to decide which to use as the standard</div><div class=\"line\">            &#125;</div><div class=\"line\">            return minRadius;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.</p>\n<ul>\n<li>For each house, find its position between those heaters (thus we need the heaters array to be sorted).</li>\n<li>Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.</li>\n<li>Get MAX value among distances in step 2. It’s the answer.</li>\n</ul>\n<p>So, here comes the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">            int house_size = houses.size();</div><div class=\"line\">            if (house_size == 0) return 0;</div><div class=\"line\">            sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto&amp; c : houses) &#123;</div><div class=\"line\"></div><div class=\"line\">                int idx = Bsearch(heaters, c);</div><div class=\"line\"></div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    res = max(res, heaters[idx] - c);</div><div class=\"line\">                &#125; else if (idx &gt;= (int)heaters.size()) &#123;</div><div class=\"line\">                    res = max(res, c - heaters.back());</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int Bsearch(vector&lt;int&gt;&amp; nums, int val) &#123;</div><div class=\"line\"></div><div class=\"line\">            int l = 0, r = nums.size() - 1;</div><div class=\"line\">            while (l &lt;= r) &#123;</div><div class=\"line\">                int mid = l + ((r - l) &gt;&gt; 1);</div><div class=\"line\">                if (nums[mid] == val)</div><div class=\"line\">                    return mid;</div><div class=\"line\">                else if (nums[mid] &lt; val)</div><div class=\"line\">                    l = mid + 1;</div><div class=\"line\">                else</div><div class=\"line\">                    r = mid - 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return l;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it’s AC.</p>\n","excerpt":"<blockquote>\n<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>\n<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>\n<p>Note:</p>\n<ul>\n<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>\n<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>\n<li>As long as a house is in the heaters’ warm radius range, it can be warmed.</li>\n<li>All the heaters follow your radius standard and the warm radius will the same.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1,2,3],[2]<br>Output: 1<br>Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.</p>\n<p>Example 2:</p>\n<p>Input: [1,2,3,4],[1,4]<br>Output: 1<br>Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.</p>\n</blockquote>","more":"<p>This is Leetcode 475. As it’s descripted, we can quickly find a solution. Picture this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">          h1   h2        h3</div><div class=\"line\">           |    |         |</div><div class=\"line\">......................................</div></pre></td></tr></table></figure>\n<p>If we find the min value of the radius between every two heaters, and find the max one, which will be the result.</p>\n<p>And it’s time complex is O(n*m), n is the num of the houses and m is the num of heaters.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int idx;</div><div class=\"line\">    int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">        sort(houses.begin(), houses.end());</div><div class=\"line\">        sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">        int res = INT_MIN;</div><div class=\"line\">        idx = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)heaters.size(); i++) &#123;</div><div class=\"line\">            if (i == 0) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, -1, heaters[i]));</div><div class=\"line\">            &#125; else if (i == (int)heaters.size()) &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], -1));</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                res = max(res, findMinRadius(houses, heaters[i - 1], heaters[i]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            std::cout &lt;&lt; res &lt;&lt; std::endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return res;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int findMinRadius(vector&lt;int&gt; houses, int heater1, int heater2) &#123;</div><div class=\"line\">        if (heater1 == -1) &#123; // means the first one</div><div class=\"line\">            while (houses[idx] &lt;= heater2) &#123; idx++; &#125;</div><div class=\"line\">            return heater2 - houses[0];</div><div class=\"line\">        &#125; else if (heater2 == -1) &#123; // means the last one</div><div class=\"line\">            while (idx &lt; (int)houses.size()) &#123; idx++; &#125;</div><div class=\"line\">            return houses[idx - 1] - heater1;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            int minRadius = INT_MAX;</div><div class=\"line\">            for (int i = idx; houses[i] &lt; heater2; i++) &#123;</div><div class=\"line\">                // minRadius = min(max(houses[i] - heater1, heater2 - houses[i]), minRadius);</div><div class=\"line\">                // if there are (2n-1) houses, we need to use the mid one</div><div class=\"line\">                // if there are (2n) houses, we should use the the mid two</div><div class=\"line\">                // here is hard to decide which to use as the standard</div><div class=\"line\">            &#125;</div><div class=\"line\">            return minRadius;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However, there is a better way to figure this problem out. The idea is to leverage decent binarySearch function.</p>\n<ul>\n<li>For each house, find its position between those heaters (thus we need the heaters array to be sorted).</li>\n<li>Calculate the distances between this house and left heater and right heater, get a MIN value of those two values. Corner cases are there is no left or right heater.</li>\n<li>Get MAX value among distances in step 2. It’s the answer.</li>\n</ul>\n<p>So, here comes the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123;</div><div class=\"line\">            int house_size = houses.size();</div><div class=\"line\">            if (house_size == 0) return 0;</div><div class=\"line\">            sort(heaters.begin(), heaters.end());</div><div class=\"line\"></div><div class=\"line\">            int res = 0;</div><div class=\"line\">            for (auto&amp; c : houses) &#123;</div><div class=\"line\"></div><div class=\"line\">                int idx = Bsearch(heaters, c);</div><div class=\"line\"></div><div class=\"line\">                if (idx == 0) &#123;</div><div class=\"line\">                    res = max(res, heaters[idx] - c);</div><div class=\"line\">                &#125; else if (idx &gt;= (int)heaters.size()) &#123;</div><div class=\"line\">                    res = max(res, c - heaters.back());</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    res = max(res, min(heaters[idx] - c, c - heaters[idx - 1]));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int Bsearch(vector&lt;int&gt;&amp; nums, int val) &#123;</div><div class=\"line\"></div><div class=\"line\">            int l = 0, r = nums.size() - 1;</div><div class=\"line\">            while (l &lt;= r) &#123;</div><div class=\"line\">                int mid = l + ((r - l) &gt;&gt; 1);</div><div class=\"line\">                if (nums[mid] == val)</div><div class=\"line\">                    return mid;</div><div class=\"line\">                else if (nums[mid] &lt; val)</div><div class=\"line\">                    l = mid + 1;</div><div class=\"line\">                else</div><div class=\"line\">                    r = mid - 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return l;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it’s AC.</p>"},{"title":"License Key Formatting","date":"2017-01-17T15:18:47.000Z","_content":"> Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.\n>\n> We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.\n>\n> So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.\n>\n>\n> Example 1:\n>   + Input: S = \"2-4A0r7-4k\", K = 4\n>   + Output: \"24A0-R74K\"\n>   + Explanation: The string S has been split into two parts, each part has 4 characters.\n>\n> Example 2:\n>   + Input: S = \"2-4A0r7-4k\", K = 3\n>   + Output: \"24-A0R-74K\"\n>   + Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.\n>\n> Note:\n> + The length of string S will not exceed 12,000, and K is a positive integer.\n> + String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).\n> + String S is non-empty.\n\n<!--more-->\n\nThis is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.\n\n```\nclass Solution {\n    public:\n        string licenseKeyFormatting(string S, int K) {\n            vector<char> strs;\n            for (int i = 0; i < (int)S.length(); i++) {\n                if (S[i] == '-') {\n                    continue;\n                } else if ('a' <= S[i] && S[i] <= 'z') {\n                    strs.push_back((char)(S[i] - 'a' + 'A'));\n                } else {\n                    strs.push_back(S[i]);\n                }\n            }\n            int firstIdx = strs.size() % K;\n            string res = \"\";\n            for (int i = 0; i < firstIdx; i++) {\n                res = res + strs[i];\n            }\n            for (int i = firstIdx; i < (int)strs.size(); i++) {\n                if (i != 0 && (i - firstIdx) % K == 0) {\n                    res = res + '-';\n                }\n                res = res + strs[i];\n            }\n            return res;\n        }\n};\n```\n\nThis code I just type and submit and get AC in the first time. Such an easy problem.\n\n","source":"_posts/LicenseKeyFormatting.md","raw":"---\ntitle: License Key Formatting\ndate: 2017-01-17 23:18:47\ntags:\n    - String\n---\n> Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.\n>\n> We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.\n>\n> So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.\n>\n>\n> Example 1:\n>   + Input: S = \"2-4A0r7-4k\", K = 4\n>   + Output: \"24A0-R74K\"\n>   + Explanation: The string S has been split into two parts, each part has 4 characters.\n>\n> Example 2:\n>   + Input: S = \"2-4A0r7-4k\", K = 3\n>   + Output: \"24-A0R-74K\"\n>   + Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.\n>\n> Note:\n> + The length of string S will not exceed 12,000, and K is a positive integer.\n> + String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).\n> + String S is non-empty.\n\n<!--more-->\n\nThis is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.\n\n```\nclass Solution {\n    public:\n        string licenseKeyFormatting(string S, int K) {\n            vector<char> strs;\n            for (int i = 0; i < (int)S.length(); i++) {\n                if (S[i] == '-') {\n                    continue;\n                } else if ('a' <= S[i] && S[i] <= 'z') {\n                    strs.push_back((char)(S[i] - 'a' + 'A'));\n                } else {\n                    strs.push_back(S[i]);\n                }\n            }\n            int firstIdx = strs.size() % K;\n            string res = \"\";\n            for (int i = 0; i < firstIdx; i++) {\n                res = res + strs[i];\n            }\n            for (int i = firstIdx; i < (int)strs.size(); i++) {\n                if (i != 0 && (i - firstIdx) % K == 0) {\n                    res = res + '-';\n                }\n                res = res + strs[i];\n            }\n            return res;\n        }\n};\n```\n\nThis code I just type and submit and get AC in the first time. Such an easy problem.\n\n","slug":"LicenseKeyFormatting","published":1,"updated":"2017-01-17T15:33:00.000Z","_id":"ciy1oere30009q4f4bmhaybmn","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.</p>\n<p>We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.</p>\n<p>So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 4</li>\n<li>Output: “24A0-R74K”</li>\n<li>Explanation: The string S has been split into two parts, each part has 4 characters.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 3</li>\n<li>Output: “24-A0R-74K”</li>\n<li>Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>\n<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>\n<li>String S is non-empty.</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string licenseKeyFormatting(string S, int K) &#123;</div><div class=\"line\">            vector&lt;char&gt; strs;</div><div class=\"line\">            for (int i = 0; i &lt; (int)S.length(); i++) &#123;</div><div class=\"line\">                if (S[i] == &apos;-&apos;) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125; else if (&apos;a&apos; &lt;= S[i] &amp;&amp; S[i] &lt;= &apos;z&apos;) &#123;</div><div class=\"line\">                    strs.push_back((char)(S[i] - &apos;a&apos; + &apos;A&apos;));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    strs.push_back(S[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int firstIdx = strs.size() % K;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            for (int i = 0; i &lt; firstIdx; i++) &#123;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = firstIdx; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                if (i != 0 &amp;&amp; (i - firstIdx) % K == 0) &#123;</div><div class=\"line\">                    res = res + &apos;-&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This code I just type and submit and get AC in the first time. Such an easy problem.</p>\n","excerpt":"<blockquote>\n<p>Now you are given a string S, which represents a software license key which we would like to format. The string S is composed of alphanumerical characters and dashes. The dashes split the alphanumerical characters within the string into groups. (i.e. if there are M dashes, the string is split into M+1 groups). The dashes in the given string are possibly misplaced.</p>\n<p>We want each group of characters to be of length K (except for possibly the first group, which could be shorter, but still must contain at least one character). To satisfy this requirement, we will reinsert dashes. Additionally, all the lower case letters in the string must be converted to upper case.</p>\n<p>So, you are given a non-empty string S, representing a license key to format, and an integer K. And you need to return the license key formatted according to the description above.</p>\n<p>Example 1:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 4</li>\n<li>Output: “24A0-R74K”</li>\n<li>Explanation: The string S has been split into two parts, each part has 4 characters.</li>\n</ul>\n<p>Example 2:</p>\n<ul>\n<li>Input: S = “2-4A0r7-4k”, K = 3</li>\n<li>Output: “24-A0R-74K”</li>\n<li>Explanation: The string S has been split into three parts, each part has 3 characters except the first part as it could be shorter as said above.</li>\n</ul>\n<p>Note:</p>\n<ul>\n<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>\n<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>\n<li>String S is non-empty.</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 482, and I think it is just a simulation problem. So there is none technical skills just use force and quick type skills.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        string licenseKeyFormatting(string S, int K) &#123;</div><div class=\"line\">            vector&lt;char&gt; strs;</div><div class=\"line\">            for (int i = 0; i &lt; (int)S.length(); i++) &#123;</div><div class=\"line\">                if (S[i] == &apos;-&apos;) &#123;</div><div class=\"line\">                    continue;</div><div class=\"line\">                &#125; else if (&apos;a&apos; &lt;= S[i] &amp;&amp; S[i] &lt;= &apos;z&apos;) &#123;</div><div class=\"line\">                    strs.push_back((char)(S[i] - &apos;a&apos; + &apos;A&apos;));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    strs.push_back(S[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int firstIdx = strs.size() % K;</div><div class=\"line\">            string res = &quot;&quot;;</div><div class=\"line\">            for (int i = 0; i &lt; firstIdx; i++) &#123;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = firstIdx; i &lt; (int)strs.size(); i++) &#123;</div><div class=\"line\">                if (i != 0 &amp;&amp; (i - firstIdx) % K == 0) &#123;</div><div class=\"line\">                    res = res + &apos;-&apos;;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = res + strs[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>This code I just type and submit and get AC in the first time. Such an easy problem.</p>"},{"title":"Intersection of Two Arrays II","date":"2017-01-08T14:36:11.000Z","_content":"\n\n> Given two arrays, write a function to compute their intersection.\n>\n> Example:\n> Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].\n>\n> Note:\n>\n>   + Each element in the result should appear as many times as it shows in both arrays.\n>   + The result can be in any order.\n>\n> Follow up:\n>\n>   + What if the given array is already sorted? How would you optimize your algorithm?\n>   + What if nums1's size is small compared to nums2's size? Which algorithm is better?\n>   + What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n<!--more-->\n\nThis is Leetcode 350. It's an easy problem, we can quickly write a solution based on hash map:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            map<int, int> nums;\n            vector<int> res;\n\n\n            for (int i = 0; i < (int)nums1.size(); i++) {\n                if (nums.find(nums1[i]) == nums.end()) {\n                    nums.insert(pair<int, int>(nums1[i], 1));\n                } else {\n                    nums.find(nums1[i])->second++;\n                }\n            }\n\n            for (int i = 0; i < (int)nums2.size(); i++) {\n                if (nums.find(nums2[i]) != nums.end() && nums.find(nums2[i])->second > 0) {\n                    res.push_back(nums2[i]);\n                    nums.find(nums2[i])->second--;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            int idx = 0, idy = 0;\n            vector<int> res;\n\n            sort(nums1.begin(), nums1.end());\n            sort(nums2.begin(), nums2.end());\n\n            while (idx < (int)nums1.size() && idy < (int)nums2.size()) {\n                if (nums1[idx] == nums2[idy]) {\n                    res.push_back(nums1[idx]);\n                    idx++; idy++;\n                } else if (nums1[idx] > nums2[idy]) {\n                    idy++;\n                } else if (nums1[idx] < nums2[idy]) {\n                    idx++;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.\n\nIf the memeory is limited such that we can't load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.\n\n","source":"_posts/IntersectionofTwoArraysII.md","raw":"---\ntitle: Intersection of Two Arrays II\ndate: 2017-01-08 22:36:11\ntags:\n    - Binary Search\n    - Hash Table\n    - Two Pointers\n    - Sort\n---\n\n\n> Given two arrays, write a function to compute their intersection.\n>\n> Example:\n> Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].\n>\n> Note:\n>\n>   + Each element in the result should appear as many times as it shows in both arrays.\n>   + The result can be in any order.\n>\n> Follow up:\n>\n>   + What if the given array is already sorted? How would you optimize your algorithm?\n>   + What if nums1's size is small compared to nums2's size? Which algorithm is better?\n>   + What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n<!--more-->\n\nThis is Leetcode 350. It's an easy problem, we can quickly write a solution based on hash map:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            map<int, int> nums;\n            vector<int> res;\n\n\n            for (int i = 0; i < (int)nums1.size(); i++) {\n                if (nums.find(nums1[i]) == nums.end()) {\n                    nums.insert(pair<int, int>(nums1[i], 1));\n                } else {\n                    nums.find(nums1[i])->second++;\n                }\n            }\n\n            for (int i = 0; i < (int)nums2.size(); i++) {\n                if (nums.find(nums2[i]) != nums.end() && nums.find(nums2[i])->second > 0) {\n                    res.push_back(nums2[i]);\n                    nums.find(nums2[i])->second--;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:\n\n```\nclass Solution {\n    public:\n        vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n            int idx = 0, idy = 0;\n            vector<int> res;\n\n            sort(nums1.begin(), nums1.end());\n            sort(nums2.begin(), nums2.end());\n\n            while (idx < (int)nums1.size() && idy < (int)nums2.size()) {\n                if (nums1[idx] == nums2[idy]) {\n                    res.push_back(nums1[idx]);\n                    idx++; idy++;\n                } else if (nums1[idx] > nums2[idy]) {\n                    idy++;\n                } else if (nums1[idx] < nums2[idy]) {\n                    idx++;\n                }\n            }\n\n            return res;\n        }\n};\n```\n\nIts time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.\n\nIf the memeory is limited such that we can't load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.\n\n","slug":"IntersectionofTwoArraysII","published":1,"updated":"2017-01-08T15:01:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oere7000bq4f46i46o167","content":"<blockquote>\n<p>Given two arrays, write a function to compute their intersection.</p>\n<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>\n<p>Note:</p>\n<ul>\n<li>Each element in the result should appear as many times as it shows in both arrays.</li>\n<li>The result can be in any order.</li>\n</ul>\n<p>Follow up:</p>\n<ul>\n<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n<li>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?</li>\n<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 350. It’s an easy problem, we can quickly write a solution based on hash map:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            map&lt;int, int&gt; nums;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums1.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums1[i]) == nums.end()) &#123;</div><div class=\"line\">                    nums.insert(pair&lt;int, int&gt;(nums1[i], 1));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    nums.find(nums1[i])-&gt;second++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums2.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums2[i]) != nums.end() &amp;&amp; nums.find(nums2[i])-&gt;second &gt; 0) &#123;</div><div class=\"line\">                    res.push_back(nums2[i]);</div><div class=\"line\">                    nums.find(nums2[i])-&gt;second--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            int idx = 0, idy = 0;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\">            sort(nums1.begin(), nums1.end());</div><div class=\"line\">            sort(nums2.begin(), nums2.end());</div><div class=\"line\"></div><div class=\"line\">            while (idx &lt; (int)nums1.size() &amp;&amp; idy &lt; (int)nums2.size()) &#123;</div><div class=\"line\">                if (nums1[idx] == nums2[idy]) &#123;</div><div class=\"line\">                    res.push_back(nums1[idx]);</div><div class=\"line\">                    idx++; idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &gt; nums2[idy]) &#123;</div><div class=\"line\">                    idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &lt; nums2[idy]) &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.</p>\n<p>If the memeory is limited such that we can’t load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.</p>\n","excerpt":"<blockquote>\n<p>Given two arrays, write a function to compute their intersection.</p>\n<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>\n<p>Note:</p>\n<ul>\n<li>Each element in the result should appear as many times as it shows in both arrays.</li>\n<li>The result can be in any order.</li>\n</ul>\n<p>Follow up:</p>\n<ul>\n<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n<li>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?</li>\n<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n</blockquote>","more":"<p>This is Leetcode 350. It’s an easy problem, we can quickly write a solution based on hash map:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            map&lt;int, int&gt; nums;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums1.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums1[i]) == nums.end()) &#123;</div><div class=\"line\">                    nums.insert(pair&lt;int, int&gt;(nums1[i], 1));</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    nums.find(nums1[i])-&gt;second++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums2.size(); i++) &#123;</div><div class=\"line\">                if (nums.find(nums2[i]) != nums.end() &amp;&amp; nums.find(nums2[i])-&gt;second &gt; 0) &#123;</div><div class=\"line\">                    res.push_back(nums2[i]);</div><div class=\"line\">                    nums.find(nums2[i])-&gt;second--;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n), and its space complex is O(n), which makes it not a good solution. So, as the follow up, we can assume that the both arrays are sorted. Then we can use the two points method like below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</div><div class=\"line\">            int idx = 0, idy = 0;</div><div class=\"line\">            vector&lt;int&gt; res;</div><div class=\"line\"></div><div class=\"line\">            sort(nums1.begin(), nums1.end());</div><div class=\"line\">            sort(nums2.begin(), nums2.end());</div><div class=\"line\"></div><div class=\"line\">            while (idx &lt; (int)nums1.size() &amp;&amp; idy &lt; (int)nums2.size()) &#123;</div><div class=\"line\">                if (nums1[idx] == nums2[idy]) &#123;</div><div class=\"line\">                    res.push_back(nums1[idx]);</div><div class=\"line\">                    idx++; idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &gt; nums2[idy]) &#123;</div><div class=\"line\">                    idy++;</div><div class=\"line\">                &#125; else if (nums1[idx] &lt; nums2[idy]) &#123;</div><div class=\"line\">                    idx++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Its time complex is O(n) but its space complex is O(1), which makes it better than the hash map solution.</p>\n<p>If the memeory is limited such that we can’t load all elements into the memory at once? This is a common problem. And we can use the hash algorithm to divide all elements in to different group and then we deal with them one by one.</p>"},{"title":"Longest Increasing Path in a Matrix","date":"2017-01-09T08:15:57.000Z","_content":"\n> Given an integer matrix, find the length of the longest increasing path.\n>\n> From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).\n>\n> Example 1:\n>\n> nums = [ [9,9,4], [6,6,8], [2,1,1] ]\n>\n> Return 4\n> The longest increasing path is [1, 2, 6, 9].\n>\n> Example 2:\n>\n> nums = [ [3,4,5], [3,2,6], [2,2,1] ]\n>\n> Return 4\n> The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\n<!-- more -->\n\nThis is Leetcode 329, it's a classic DFS problem. And you can use more space to improve its performance.\n\nFor example, you can use two maxDepth array to store the max depth in current position and its direction.\n\nSo, its solution will be as following, (we use the build-in dfs function):\n\n```\nclass Solution {\n    public:\n        int longestIncreasingPath(vector<vector<int>>& matrix) {\n            int rows = matrix.size();\n            if (!rows) return 0;\n            int cols = matrix[0].size();\n\n            vector<vector<int>> dp(rows, vector<int>(cols, 0));\n            std::function<int(int, int)> dfs = [&] (int x, int y) {\n                if (dp[x][y]) return dp[x][y];\n                vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};\n                for (auto &dir : dirs) {\n                    int xx = x + dir[0], yy = y + dir[1];\n                    if (xx < 0 || xx >= rows || yy < 0 || yy >= cols) continue;\n                    if (matrix[xx][yy] <= matrix[x][y]) continue;\n                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));\n                }\n                return ++dp[x][y];\n            };\n\n            int ret = 0;\n            for (int i = 0; i < rows; ++i) {\n                for (int j = 0; j < cols; ++j) {\n                    ret = std::max(ret, dfs(i, j));\n                }\n            }\n\n            return ret;\n        }\n};\n```\n","source":"_posts/LongestIncreasingPathinaMatrix.md","raw":"---\ntitle: Longest Increasing Path in a Matrix\ndate: 2017-01-09 16:15:57\ntags:\n    - Depth-first Search\n    - Memoization\n    - Topological sort\n---\n\n> Given an integer matrix, find the length of the longest increasing path.\n>\n> From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).\n>\n> Example 1:\n>\n> nums = [ [9,9,4], [6,6,8], [2,1,1] ]\n>\n> Return 4\n> The longest increasing path is [1, 2, 6, 9].\n>\n> Example 2:\n>\n> nums = [ [3,4,5], [3,2,6], [2,2,1] ]\n>\n> Return 4\n> The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\n<!-- more -->\n\nThis is Leetcode 329, it's a classic DFS problem. And you can use more space to improve its performance.\n\nFor example, you can use two maxDepth array to store the max depth in current position and its direction.\n\nSo, its solution will be as following, (we use the build-in dfs function):\n\n```\nclass Solution {\n    public:\n        int longestIncreasingPath(vector<vector<int>>& matrix) {\n            int rows = matrix.size();\n            if (!rows) return 0;\n            int cols = matrix[0].size();\n\n            vector<vector<int>> dp(rows, vector<int>(cols, 0));\n            std::function<int(int, int)> dfs = [&] (int x, int y) {\n                if (dp[x][y]) return dp[x][y];\n                vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};\n                for (auto &dir : dirs) {\n                    int xx = x + dir[0], yy = y + dir[1];\n                    if (xx < 0 || xx >= rows || yy < 0 || yy >= cols) continue;\n                    if (matrix[xx][yy] <= matrix[x][y]) continue;\n                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));\n                }\n                return ++dp[x][y];\n            };\n\n            int ret = 0;\n            for (int i = 0; i < rows; ++i) {\n                for (int j = 0; j < cols; ++j) {\n                    ret = std::max(ret, dfs(i, j));\n                }\n            }\n\n            return ret;\n        }\n};\n```\n","slug":"LongestIncreasingPathinaMatrix","published":1,"updated":"2017-01-09T08:24:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oere8000dq4f4jbx0g7g4","content":"<blockquote>\n<p>Given an integer matrix, find the length of the longest increasing path.</p>\n<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\n<p>Example 1:</p>\n<p>nums = [ [9,9,4], [6,6,8], [2,1,1] ]</p>\n<p>Return 4<br>The longest increasing path is [1, 2, 6, 9].</p>\n<p>Example 2:</p>\n<p>nums = [ [3,4,5], [3,2,6], [2,2,1] ]</p>\n<p>Return 4<br>The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 329, it’s a classic DFS problem. And you can use more space to improve its performance.</p>\n<p>For example, you can use two maxDepth array to store the max depth in current position and its direction.</p>\n<p>So, its solution will be as following, (we use the build-in dfs function):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestIncreasingPath(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</div><div class=\"line\">            int rows = matrix.size();</div><div class=\"line\">            if (!rows) return 0;</div><div class=\"line\">            int cols = matrix[0].size();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt;&gt; dp(rows, vector&lt;int&gt;(cols, 0));</div><div class=\"line\">            std::function&lt;int(int, int)&gt; dfs = [&amp;] (int x, int y) &#123;</div><div class=\"line\">                if (dp[x][y]) return dp[x][y];</div><div class=\"line\">                vector&lt;vector&lt;int&gt;&gt; dirs = &#123;&#123;-1, 0&#125;, &#123;1, 0&#125;, &#123;0, 1&#125;, &#123;0, -1&#125;&#125;;</div><div class=\"line\">                for (auto &amp;dir : dirs) &#123;</div><div class=\"line\">                    int xx = x + dir[0], yy = y + dir[1];</div><div class=\"line\">                    if (xx &lt; 0 || xx &gt;= rows || yy &lt; 0 || yy &gt;= cols) continue;</div><div class=\"line\">                    if (matrix[xx][yy] &lt;= matrix[x][y]) continue;</div><div class=\"line\">                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));</div><div class=\"line\">                &#125;</div><div class=\"line\">                return ++dp[x][y];</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            int ret = 0;</div><div class=\"line\">            for (int i = 0; i &lt; rows; ++i) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; cols; ++j) &#123;</div><div class=\"line\">                    ret = std::max(ret, dfs(i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return ret;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"<blockquote>\n<p>Given an integer matrix, find the length of the longest increasing path.</p>\n<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\n<p>Example 1:</p>\n<p>nums = [ [9,9,4], [6,6,8], [2,1,1] ]</p>\n<p>Return 4<br>The longest increasing path is [1, 2, 6, 9].</p>\n<p>Example 2:</p>\n<p>nums = [ [3,4,5], [3,2,6], [2,2,1] ]</p>\n<p>Return 4<br>The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</p>\n</blockquote>","more":"<p>This is Leetcode 329, it’s a classic DFS problem. And you can use more space to improve its performance.</p>\n<p>For example, you can use two maxDepth array to store the max depth in current position and its direction.</p>\n<p>So, its solution will be as following, (we use the build-in dfs function):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int longestIncreasingPath(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</div><div class=\"line\">            int rows = matrix.size();</div><div class=\"line\">            if (!rows) return 0;</div><div class=\"line\">            int cols = matrix[0].size();</div><div class=\"line\"></div><div class=\"line\">            vector&lt;vector&lt;int&gt;&gt; dp(rows, vector&lt;int&gt;(cols, 0));</div><div class=\"line\">            std::function&lt;int(int, int)&gt; dfs = [&amp;] (int x, int y) &#123;</div><div class=\"line\">                if (dp[x][y]) return dp[x][y];</div><div class=\"line\">                vector&lt;vector&lt;int&gt;&gt; dirs = &#123;&#123;-1, 0&#125;, &#123;1, 0&#125;, &#123;0, 1&#125;, &#123;0, -1&#125;&#125;;</div><div class=\"line\">                for (auto &amp;dir : dirs) &#123;</div><div class=\"line\">                    int xx = x + dir[0], yy = y + dir[1];</div><div class=\"line\">                    if (xx &lt; 0 || xx &gt;= rows || yy &lt; 0 || yy &gt;= cols) continue;</div><div class=\"line\">                    if (matrix[xx][yy] &lt;= matrix[x][y]) continue;</div><div class=\"line\">                    dp[x][y] = std::max(dp[x][y], dfs(xx, yy));</div><div class=\"line\">                &#125;</div><div class=\"line\">                return ++dp[x][y];</div><div class=\"line\">            &#125;;</div><div class=\"line\"></div><div class=\"line\">            int ret = 0;</div><div class=\"line\">            for (int i = 0; i &lt; rows; ++i) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; cols; ++j) &#123;</div><div class=\"line\">                    ret = std::max(ret, dfs(i, j));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return ret;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>"},{"title":"Largest Divisible Subset","date":"2017-01-13T03:04:11.000Z","_content":"\n> Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.\n>\n> If there are multiple solutions, return any subset is fine.\n>\n> Example 1:\n> nums: [1,2,3]\n> Result: [1,2] (of course, [1,3] will also be ok)\n>\n> Example 2:\n> nums: [1,2,4,8]\n> Result: [1,2,4,8]\n\n<!--more-->\n\nThis is Leetcode 368, and it's a usual DP problem.\n\nWe use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.\n\nThen we can find the solution:\n\n```\nclass Solution {\n    public:\n        vector<int> largestDivisibleSubset(vector<int>& nums) {\n            vector<int> v;\n            if (nums.size() < 1) {\n                return v;\n            }\n            sort(nums.begin(), nums.end());\n            map<int, vector<int> > numMap;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                vector<int> vtmp;\n                vtmp.push_back(nums[i]);\n                numMap.insert(pair<int, vector<int> >(nums[i], vtmp));\n            }\n            for (int i = 0; i < (int)nums.size(); i++) {\n                for (int j = i + 1; j < (int)nums.size(); j++) {\n                    if (nums[j] % nums[i] == 0) {\n                        if (numMap.find(nums[j])->second.size() < numMap.find(nums[i])->second.size() + 1) {\n                            vector<int> vtmp;\n                            vtmp.assign(numMap.find(nums[i])->second.begin(), numMap.find(nums[i])->second.end());\n                            vtmp.push_back(nums[j]);\n                            numMap.find(nums[j])->second = vtmp;\n                        }\n                    }\n                }\n            }\n\n            int idx = 0, max = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (max < (int)numMap.find(nums[i])->second.size()) {\n                    idx = nums[i];\n                    max = numMap.find(nums[i])->second.size();\n                }\n            }\n            return  numMap.find(idx)->second;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/LargestDivisibleSubset.md","raw":"---\ntitle: Largest Divisible Subset\ndate: 2017-01-13 11:04:11\ntags:\n    - Math\n    - Dynamic Programming\n---\n\n> Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.\n>\n> If there are multiple solutions, return any subset is fine.\n>\n> Example 1:\n> nums: [1,2,3]\n> Result: [1,2] (of course, [1,3] will also be ok)\n>\n> Example 2:\n> nums: [1,2,4,8]\n> Result: [1,2,4,8]\n\n<!--more-->\n\nThis is Leetcode 368, and it's a usual DP problem.\n\nWe use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.\n\nThen we can find the solution:\n\n```\nclass Solution {\n    public:\n        vector<int> largestDivisibleSubset(vector<int>& nums) {\n            vector<int> v;\n            if (nums.size() < 1) {\n                return v;\n            }\n            sort(nums.begin(), nums.end());\n            map<int, vector<int> > numMap;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                vector<int> vtmp;\n                vtmp.push_back(nums[i]);\n                numMap.insert(pair<int, vector<int> >(nums[i], vtmp));\n            }\n            for (int i = 0; i < (int)nums.size(); i++) {\n                for (int j = i + 1; j < (int)nums.size(); j++) {\n                    if (nums[j] % nums[i] == 0) {\n                        if (numMap.find(nums[j])->second.size() < numMap.find(nums[i])->second.size() + 1) {\n                            vector<int> vtmp;\n                            vtmp.assign(numMap.find(nums[i])->second.begin(), numMap.find(nums[i])->second.end());\n                            vtmp.push_back(nums[j]);\n                            numMap.find(nums[j])->second = vtmp;\n                        }\n                    }\n                }\n            }\n\n            int idx = 0, max = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (max < (int)numMap.find(nums[i])->second.size()) {\n                    idx = nums[i];\n                    max = numMap.find(nums[i])->second.size();\n                }\n            }\n            return  numMap.find(idx)->second;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"LargestDivisibleSubset","published":1,"updated":"2017-01-14T12:11:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerea000fq4f40ucgwjuo","content":"<blockquote>\n<p>Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.</p>\n<p>If there are multiple solutions, return any subset is fine.</p>\n<p>Example 1:<br>nums: [1,2,3]<br>Result: [1,2] (of course, [1,3] will also be ok)</p>\n<p>Example 2:<br>nums: [1,2,4,8]<br>Result: [1,2,4,8]</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 368, and it’s a usual DP problem.</p>\n<p>We use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.</p>\n<p>Then we can find the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; largestDivisibleSubset(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; v;</div><div class=\"line\">            if (nums.size() &lt; 1) &#123;</div><div class=\"line\">                return v;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            map&lt;int, vector&lt;int&gt; &gt; numMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; vtmp;</div><div class=\"line\">                vtmp.push_back(nums[i]);</div><div class=\"line\">                numMap.insert(pair&lt;int, vector&lt;int&gt; &gt;(nums[i], vtmp));</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                    if (nums[j] % nums[i] == 0) &#123;</div><div class=\"line\">                        if (numMap.find(nums[j])-&gt;second.size() &lt; numMap.find(nums[i])-&gt;second.size() + 1) &#123;</div><div class=\"line\">                            vector&lt;int&gt; vtmp;</div><div class=\"line\">                            vtmp.assign(numMap.find(nums[i])-&gt;second.begin(), numMap.find(nums[i])-&gt;second.end());</div><div class=\"line\">                            vtmp.push_back(nums[j]);</div><div class=\"line\">                            numMap.find(nums[j])-&gt;second = vtmp;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx = 0, max = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (max &lt; (int)numMap.find(nums[i])-&gt;second.size()) &#123;</div><div class=\"line\">                    idx = nums[i];</div><div class=\"line\">                    max = numMap.find(nums[i])-&gt;second.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return  numMap.find(idx)-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies: Si % Sj = 0 or Sj % Si = 0.</p>\n<p>If there are multiple solutions, return any subset is fine.</p>\n<p>Example 1:<br>nums: [1,2,3]<br>Result: [1,2] (of course, [1,3] will also be ok)</p>\n<p>Example 2:<br>nums: [1,2,4,8]<br>Result: [1,2,4,8]</p>\n</blockquote>","more":"<p>This is Leetcode 368, and it’s a usual DP problem.</p>\n<p>We use a numMap to store the pairs for each number. For example: {4:[1,2], 8:[1,2,4]}.</p>\n<p>Then we can find the solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        vector&lt;int&gt; largestDivisibleSubset(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            vector&lt;int&gt; v;</div><div class=\"line\">            if (nums.size() &lt; 1) &#123;</div><div class=\"line\">                return v;</div><div class=\"line\">            &#125;</div><div class=\"line\">            sort(nums.begin(), nums.end());</div><div class=\"line\">            map&lt;int, vector&lt;int&gt; &gt; numMap;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                vector&lt;int&gt; vtmp;</div><div class=\"line\">                vtmp.push_back(nums[i]);</div><div class=\"line\">                numMap.insert(pair&lt;int, vector&lt;int&gt; &gt;(nums[i], vtmp));</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                    if (nums[j] % nums[i] == 0) &#123;</div><div class=\"line\">                        if (numMap.find(nums[j])-&gt;second.size() &lt; numMap.find(nums[i])-&gt;second.size() + 1) &#123;</div><div class=\"line\">                            vector&lt;int&gt; vtmp;</div><div class=\"line\">                            vtmp.assign(numMap.find(nums[i])-&gt;second.begin(), numMap.find(nums[i])-&gt;second.end());</div><div class=\"line\">                            vtmp.push_back(nums[j]);</div><div class=\"line\">                            numMap.find(nums[j])-&gt;second = vtmp;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            int idx = 0, max = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (max &lt; (int)numMap.find(nums[i])-&gt;second.size()) &#123;</div><div class=\"line\">                    idx = nums[i];</div><div class=\"line\">                    max = numMap.find(nums[i])-&gt;second.size();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return  numMap.find(idx)-&gt;second;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Partition Equal Subset Sum","date":"2017-01-06T05:46:25.000Z","_content":"\n> Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n>\n> Note:\n>\n> + Each of the array element will not exceed 100.\n> + The array size will not exceed 200.\n>\n> Example 1:\n>\n> Input: [1, 5, 11, 5]\n> Output: true\n>\n> Explanation: The array can be partitioned as [1, 5, 5] and [11].\n>\n> Example 2:\n>\n> Input: [1, 2, 3, 5]\n> Output: false\n>\n> Explanation: The array cannot be partitioned into equal sum subsets.\n\n<!-- more -->\n\nThis is Leetcode 416, and it is a leetweek problem. My last pass code like these:\n```\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            if (nums.size() < 2) {\n                return false;\n            }\n            int sum = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                sum = sum + nums[i];\n            }\n            if (sum % 2 != 0) {\n                return false;\n            }\n            return check(0, 0, nums, sum);\n        }\n\n        bool check(int start, int current, vector<int> nums, int sum) {\n            bool res = false;\n            if (current > sum / 2) {\n                return false;\n            }\n            if (current == sum / 2) {\n                return true;\n            }\n            for (int i = start + 1; i < (int)nums.size(); i++) {\n                res = res || check(i, current + nums[i], nums, sum);\n            }\n            return res;\n        }\n};\n```\nBecause the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.\n\nFind a set of the subarray which its sum is sum / 2. And we can use the DP solution.\n\nBecause we know the sum of the array, so we make a array **dp** in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:\n```\nfor (auto num : nums) {\n    for(int i = target; i >= num; i--) { // to be quick we don't visit the whole dp array\n        dp[i] = dp[i] || dp[i - num];\n    }\n}\n```\n\nSo, here comes a better solution based on DP:\n\n```\nusing namespace std;\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            int sum = accumulate(nums.begin(), nums.end(), 0);\n            if (sum & 1) return false;\n            int half = sum >> 1;\n\n            vector<bool> accessibility(half + 1, false);\n            accessibility[0] = true;    // '0' is always reachable\n            //For all num in nums, check the accessibility from half - num to 0.\n            //If 'i' is accessible by former numbers, then 'i + num' is also accessible. (DP Algorithm)\n            for(int num: nums)\n                //Below here we must start from 'half' downto 'num', otherwise current 'num' might be multiply used.\n                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.\n                for(int i = half; i >= num; i--){\n                    if (accessibility[i - num] == true){\n                        accessibility[i] = true;\n                    }\n                }\n            return accessibility[half];\n        }\n};\n```\n\nHowever it's space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.\n\n```\nbool canPartition(vector<int>& nums) {\n    bitset<5001> bits(1);\n    int sum = accumulate(nums.begin(), nums.end(), 0);\n    for (auto n : nums) bits |= bits << n;\n    return !(sum & 1) && bits[sum >> 1];\n}\n```\nWhy and how it works, remaining unknown.\n","source":"_posts/PartitionEqualSubsetSum.md","raw":"---\ntitle: Partition Equal Subset Sum\ndate: 2017-01-06 13:46:25\ntags:\n    - Dynamic Programming\n---\n\n> Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\n>\n> Note:\n>\n> + Each of the array element will not exceed 100.\n> + The array size will not exceed 200.\n>\n> Example 1:\n>\n> Input: [1, 5, 11, 5]\n> Output: true\n>\n> Explanation: The array can be partitioned as [1, 5, 5] and [11].\n>\n> Example 2:\n>\n> Input: [1, 2, 3, 5]\n> Output: false\n>\n> Explanation: The array cannot be partitioned into equal sum subsets.\n\n<!-- more -->\n\nThis is Leetcode 416, and it is a leetweek problem. My last pass code like these:\n```\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            if (nums.size() < 2) {\n                return false;\n            }\n            int sum = 0;\n            for (int i = 0; i < (int)nums.size(); i++) {\n                sum = sum + nums[i];\n            }\n            if (sum % 2 != 0) {\n                return false;\n            }\n            return check(0, 0, nums, sum);\n        }\n\n        bool check(int start, int current, vector<int> nums, int sum) {\n            bool res = false;\n            if (current > sum / 2) {\n                return false;\n            }\n            if (current == sum / 2) {\n                return true;\n            }\n            for (int i = start + 1; i < (int)nums.size(); i++) {\n                res = res || check(i, current + nums[i], nums, sum);\n            }\n            return res;\n        }\n};\n```\nBecause the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.\n\nFind a set of the subarray which its sum is sum / 2. And we can use the DP solution.\n\nBecause we know the sum of the array, so we make a array **dp** in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:\n```\nfor (auto num : nums) {\n    for(int i = target; i >= num; i--) { // to be quick we don't visit the whole dp array\n        dp[i] = dp[i] || dp[i - num];\n    }\n}\n```\n\nSo, here comes a better solution based on DP:\n\n```\nusing namespace std;\nclass Solution {\n    public:\n        bool canPartition(vector<int>& nums) {\n            int sum = accumulate(nums.begin(), nums.end(), 0);\n            if (sum & 1) return false;\n            int half = sum >> 1;\n\n            vector<bool> accessibility(half + 1, false);\n            accessibility[0] = true;    // '0' is always reachable\n            //For all num in nums, check the accessibility from half - num to 0.\n            //If 'i' is accessible by former numbers, then 'i + num' is also accessible. (DP Algorithm)\n            for(int num: nums)\n                //Below here we must start from 'half' downto 'num', otherwise current 'num' might be multiply used.\n                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.\n                for(int i = half; i >= num; i--){\n                    if (accessibility[i - num] == true){\n                        accessibility[i] = true;\n                    }\n                }\n            return accessibility[half];\n        }\n};\n```\n\nHowever it's space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.\n\n```\nbool canPartition(vector<int>& nums) {\n    bitset<5001> bits(1);\n    int sum = accumulate(nums.begin(), nums.end(), 0);\n    for (auto n : nums) bits |= bits << n;\n    return !(sum & 1) && bits[sum >> 1];\n}\n```\nWhy and how it works, remaining unknown.\n","slug":"PartitionEqualSubsetSum","published":1,"updated":"2017-01-13T03:10:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oereb000hq4f4smghl5dz","content":"<blockquote>\n<p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>\n<p>Note:</p>\n<ul>\n<li>Each of the array element will not exceed 100.</li>\n<li>The array size will not exceed 200.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1, 5, 11, 5]<br>Output: true</p>\n<p>Explanation: The array can be partitioned as [1, 5, 5] and [11].</p>\n<p>Example 2:</p>\n<p>Input: [1, 2, 3, 5]<br>Output: false</p>\n<p>Explanation: The array cannot be partitioned into equal sum subsets.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 416, and it is a leetweek problem. My last pass code like these:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt; 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                sum = sum + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum % 2 != 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return check(0, 0, nums, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(int start, int current, vector&lt;int&gt; nums, int sum) &#123;</div><div class=\"line\">            bool res = false;</div><div class=\"line\">            if (current &gt; sum / 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current == sum / 2) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = start + 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = res || check(i, current + nums[i], nums, sum);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Because the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.</p>\n<p>Find a set of the subarray which its sum is sum / 2. And we can use the DP solution.</p>\n<p>Because we know the sum of the array, so we make a array <strong>dp</strong> in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (auto num : nums) &#123;</div><div class=\"line\">    for(int i = target; i &gt;= num; i--) &#123; // to be quick we don&apos;t visit the whole dp array</div><div class=\"line\">        dp[i] = dp[i] || dp[i - num];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>So, here comes a better solution based on DP:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">            if (sum &amp; 1) return false;</div><div class=\"line\">            int half = sum &gt;&gt; 1;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;bool&gt; accessibility(half + 1, false);</div><div class=\"line\">            accessibility[0] = true;    // &apos;0&apos; is always reachable</div><div class=\"line\">            //For all num in nums, check the accessibility from half - num to 0.</div><div class=\"line\">            //If &apos;i&apos; is accessible by former numbers, then &apos;i + num&apos; is also accessible. (DP Algorithm)</div><div class=\"line\">            for(int num: nums)</div><div class=\"line\">                //Below here we must start from &apos;half&apos; downto &apos;num&apos;, otherwise current &apos;num&apos; might be multiply used.</div><div class=\"line\">                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.</div><div class=\"line\">                for(int i = half; i &gt;= num; i--)&#123;</div><div class=\"line\">                    if (accessibility[i - num] == true)&#123;</div><div class=\"line\">                        accessibility[i] = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            return accessibility[half];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However it’s space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    bitset&lt;5001&gt; bits(1);</div><div class=\"line\">    int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">    for (auto n : nums) bits |= bits &lt;&lt; n;</div><div class=\"line\">    return !(sum &amp; 1) &amp;&amp; bits[sum &gt;&gt; 1];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Why and how it works, remaining unknown.</p>\n","excerpt":"<blockquote>\n<p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>\n<p>Note:</p>\n<ul>\n<li>Each of the array element will not exceed 100.</li>\n<li>The array size will not exceed 200.</li>\n</ul>\n<p>Example 1:</p>\n<p>Input: [1, 5, 11, 5]<br>Output: true</p>\n<p>Explanation: The array can be partitioned as [1, 5, 5] and [11].</p>\n<p>Example 2:</p>\n<p>Input: [1, 2, 3, 5]<br>Output: false</p>\n<p>Explanation: The array cannot be partitioned into equal sum subsets.</p>\n</blockquote>","more":"<p>This is Leetcode 416, and it is a leetweek problem. My last pass code like these:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() &lt; 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int sum = 0;</div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                sum = sum + nums[i];</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum % 2 != 0) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return check(0, 0, nums, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        bool check(int start, int current, vector&lt;int&gt; nums, int sum) &#123;</div><div class=\"line\">            bool res = false;</div><div class=\"line\">            if (current &gt; sum / 2) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (current == sum / 2) &#123;</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = start + 1; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                res = res || check(i, current + nums[i], nums, sum);</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Because the time complex of this recursive functoin is O(n!), the worst condition. So, we can change our mind to turn this problem into another one.</p>\n<p>Find a set of the subarray which its sum is sum / 2. And we can use the DP solution.</p>\n<p>Because we know the sum of the array, so we make a array <strong>dp</strong> in size sum/2. And after a for loop. we will know the dp[num] and dp[sum/2 - num] can achieve. So, when we for twice, like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (auto num : nums) &#123;</div><div class=\"line\">    for(int i = target; i &gt;= num; i--) &#123; // to be quick we don&apos;t visit the whole dp array</div><div class=\"line\">        dp[i] = dp[i] || dp[i - num];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>So, here comes a better solution based on DP:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">            if (sum &amp; 1) return false;</div><div class=\"line\">            int half = sum &gt;&gt; 1;</div><div class=\"line\"></div><div class=\"line\">            vector&lt;bool&gt; accessibility(half + 1, false);</div><div class=\"line\">            accessibility[0] = true;    // &apos;0&apos; is always reachable</div><div class=\"line\">            //For all num in nums, check the accessibility from half - num to 0.</div><div class=\"line\">            //If &apos;i&apos; is accessible by former numbers, then &apos;i + num&apos; is also accessible. (DP Algorithm)</div><div class=\"line\">            for(int num: nums)</div><div class=\"line\">                //Below here we must start from &apos;half&apos; downto &apos;num&apos;, otherwise current &apos;num&apos; might be multiply used.</div><div class=\"line\">                //e.g.: If num == 2, then we will have 2, 4, 6... will all be accessible and lead to wrong answer.</div><div class=\"line\">                for(int i = half; i &gt;= num; i--)&#123;</div><div class=\"line\">                    if (accessibility[i - num] == true)&#123;</div><div class=\"line\">                        accessibility[i] = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            return accessibility[half];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>However it’s space complex is O(n), so if you need a O(1) solution, I find a cool solution based on bitset.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">bool canPartition(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    bitset&lt;5001&gt; bits(1);</div><div class=\"line\">    int sum = accumulate(nums.begin(), nums.end(), 0);</div><div class=\"line\">    for (auto n : nums) bits |= bits &lt;&lt; n;</div><div class=\"line\">    return !(sum &amp; 1) &amp;&amp; bits[sum &gt;&gt; 1];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Why and how it works, remaining unknown.</p>"},{"title":"Max Consecutive Ones II","date":"2017-01-15T06:18:18.000Z","_content":"\n> Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.\n>\n> Example 1:\n>\n> Input: [1,0,1,1,0]\n> Output: 4\n> Explanation: Flip the first zero will get the the maximum number of consecutive 1s.\n> > After flipping, the maximum number of consecutive 1s is 4.\n>\n> Note:\n> + The input array will only contain 0 and 1.\n> + The length of input array is a positive integer and will not exceed 10,000\n>\n> Follow up:\n> What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?\n\n<!--more-->\n\nThis is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.\n\nFirst, I find a bad idea, I try to combine the nums like:\n```\n1 0 1 1 0 1 => 1 0 2 0 1\n```\n\nAnd try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.\n```\nnums: 1 0 1 1 0 1\nDP 1: 1 2 3 4 0 1\nDP 2: 1 0 1 2 3 4\n```\n\nBecause only four situation will happen. 0 -> 1, 1 -> 1, 0 -> 0, 1 -> 0.\n\nSo the solution is following:\n\n```\nclass Solution {\n    public:\n        int findMaxConsecutiveOnes(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n            int res = 0, flag = 0; // flag 0 represents up use the flip\n            vector<int> flags1(nums.size() + 1), flags2(nums.size() + 1);\n            flags1.push_back(0);\n            flags2.push_back(0);\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (nums[i] == 0) {\n                    if (flag == 0) {\n                        flag = 1;\n                        flags1[i+1] = flags1[i] + 1;\n                        flags2[i+1] = 0;\n                    } else {\n                        flag = 0;\n                        flags1[i+1] = 0;\n                        flags2[i+1] = flags2[i] + 1;\n                    }\n                } else {\n                    flags1[i+1] = flags1[i] + 1;\n                    flags2[i+1] = flags2[i] + 1;\n                }\n                res = max(res, max(flags1[i+1], flags2[i+1]));\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/MaxConsecutiveOnesII.md","raw":"---\ntitle: Max Consecutive Ones II\ndate: 2017-01-15 14:18:18\ntags:\n    - Dynamic Programming\n---\n\n> Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.\n>\n> Example 1:\n>\n> Input: [1,0,1,1,0]\n> Output: 4\n> Explanation: Flip the first zero will get the the maximum number of consecutive 1s.\n> > After flipping, the maximum number of consecutive 1s is 4.\n>\n> Note:\n> + The input array will only contain 0 and 1.\n> + The length of input array is a positive integer and will not exceed 10,000\n>\n> Follow up:\n> What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?\n\n<!--more-->\n\nThis is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.\n\nFirst, I find a bad idea, I try to combine the nums like:\n```\n1 0 1 1 0 1 => 1 0 2 0 1\n```\n\nAnd try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.\n```\nnums: 1 0 1 1 0 1\nDP 1: 1 2 3 4 0 1\nDP 2: 1 0 1 2 3 4\n```\n\nBecause only four situation will happen. 0 -> 1, 1 -> 1, 0 -> 0, 1 -> 0.\n\nSo the solution is following:\n\n```\nclass Solution {\n    public:\n        int findMaxConsecutiveOnes(vector<int>& nums) {\n            if (nums.size() == 0) {\n                return 0;\n            }\n            int res = 0, flag = 0; // flag 0 represents up use the flip\n            vector<int> flags1(nums.size() + 1), flags2(nums.size() + 1);\n            flags1.push_back(0);\n            flags2.push_back(0);\n\n            for (int i = 0; i < (int)nums.size(); i++) {\n                if (nums[i] == 0) {\n                    if (flag == 0) {\n                        flag = 1;\n                        flags1[i+1] = flags1[i] + 1;\n                        flags2[i+1] = 0;\n                    } else {\n                        flag = 0;\n                        flags1[i+1] = 0;\n                        flags2[i+1] = flags2[i] + 1;\n                    }\n                } else {\n                    flags1[i+1] = flags1[i] + 1;\n                    flags2[i+1] = flags2[i] + 1;\n                }\n                res = max(res, max(flags1[i+1], flags2[i+1]));\n            }\n            return res;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"MaxConsecutiveOnesII","published":1,"updated":"2017-01-15T06:31:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerec000jq4f46vwq5tkh","content":"<blockquote>\n<p>Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.</p>\n<p>Example 1:</p>\n<p>Input: [1,0,1,1,0]<br>Output: 4<br>Explanation: Flip the first zero will get the the maximum number of consecutive 1s.</p>\n<blockquote>\n<p>After flipping, the maximum number of consecutive 1s is 4.</p>\n</blockquote>\n<p>Note:</p>\n<ul>\n<li>The input array will only contain 0 and 1.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n<p>Follow up:<br>What if the input numbers come in one by one as an infinite stream? In other words, you can’t store all numbers coming from the stream as it’s too large to hold in memory. Could you solve it efficiently?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.</p>\n<p>First, I find a bad idea, I try to combine the nums like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 0 1 1 0 1 =&gt; 1 0 2 0 1</div></pre></td></tr></table></figure></p>\n<p>And try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nums: 1 0 1 1 0 1</div><div class=\"line\">DP 1: 1 2 3 4 0 1</div><div class=\"line\">DP 2: 1 0 1 2 3 4</div></pre></td></tr></table></figure></p>\n<p>Because only four situation will happen. 0 -&gt; 1, 1 -&gt; 1, 0 -&gt; 0, 1 -&gt; 0.</p>\n<p>So the solution is following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int res = 0, flag = 0; // flag 0 represents up use the flip</div><div class=\"line\">            vector&lt;int&gt; flags1(nums.size() + 1), flags2(nums.size() + 1);</div><div class=\"line\">            flags1.push_back(0);</div><div class=\"line\">            flags2.push_back(0);</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] == 0) &#123;</div><div class=\"line\">                    if (flag == 0) &#123;</div><div class=\"line\">                        flag = 1;</div><div class=\"line\">                        flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                        flags2[i+1] = 0;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        flag = 0;</div><div class=\"line\">                        flags1[i+1] = 0;</div><div class=\"line\">                        flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                    flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = max(res, max(flags1[i+1], flags2[i+1]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.</p>\n<p>Example 1:</p>\n<p>Input: [1,0,1,1,0]<br>Output: 4<br>Explanation: Flip the first zero will get the the maximum number of consecutive 1s.</p>\n<blockquote>\n<p>After flipping, the maximum number of consecutive 1s is 4.</p>\n</blockquote>\n<p>Note:</p>\n<ul>\n<li>The input array will only contain 0 and 1.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n<p>Follow up:<br>What if the input numbers come in one by one as an infinite stream? In other words, you can’t store all numbers coming from the stream as it’s too large to hold in memory. Could you solve it efficiently?</p>\n</blockquote>","more":"<p>This is a problem from Leetcode week contest, AKA No.487. And I think it is a DP problem.</p>\n<p>First, I find a bad idea, I try to combine the nums like:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 0 1 1 0 1 =&gt; 1 0 2 0 1</div></pre></td></tr></table></figure></p>\n<p>And try to deal with the transformed array. But it is still a hard problem. So I think in the DP way. Because its number of situations is limited. So, I can use a two DP array to store the number currently.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nums: 1 0 1 1 0 1</div><div class=\"line\">DP 1: 1 2 3 4 0 1</div><div class=\"line\">DP 2: 1 0 1 2 3 4</div></pre></td></tr></table></figure></p>\n<p>Because only four situation will happen. 0 -&gt; 1, 1 -&gt; 1, 0 -&gt; 0, 1 -&gt; 0.</p>\n<p>So the solution is following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">            if (nums.size() == 0) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            int res = 0, flag = 0; // flag 0 represents up use the flip</div><div class=\"line\">            vector&lt;int&gt; flags1(nums.size() + 1), flags2(nums.size() + 1);</div><div class=\"line\">            flags1.push_back(0);</div><div class=\"line\">            flags2.push_back(0);</div><div class=\"line\"></div><div class=\"line\">            for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">                if (nums[i] == 0) &#123;</div><div class=\"line\">                    if (flag == 0) &#123;</div><div class=\"line\">                        flag = 1;</div><div class=\"line\">                        flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                        flags2[i+1] = 0;</div><div class=\"line\">                    &#125; else &#123;</div><div class=\"line\">                        flag = 0;</div><div class=\"line\">                        flags1[i+1] = 0;</div><div class=\"line\">                        flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    flags1[i+1] = flags1[i] + 1;</div><div class=\"line\">                    flags2[i+1] = flags2[i] + 1;</div><div class=\"line\">                &#125;</div><div class=\"line\">                res = max(res, max(flags1[i+1], flags2[i+1]));</div><div class=\"line\">            &#125;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"New Start","date":"2017-01-01T05:46:25.000Z","_content":"\nAs I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.\n\n<!--more-->\n","source":"_posts/NewStart.md","raw":"---\ntitle: New Start\ndate: 2017-01-01 13:46:25\ntags: \n    - Description\n---\n\nAs I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.\n\n<!--more-->\n","slug":"NewStart","published":1,"updated":"2017-01-03T06:47:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oeree000lq4f4kw4t61xf","content":"<p>As I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.</p>\n<a id=\"more\"></a>\n","excerpt":"<p>As I promised before. I will write blogs in two languages. And here, I will use English to write about my oj games in order to improve my interview skills.</p>","more":""},{"title":"Path Sum III","date":"2017-01-07T11:46:25.000Z","_content":"\n> You are given a binary tree in which each node contains an integer value.\n>\n> Find the number of paths that sum to a given value.\n>\n> The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n>\n> The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n>\n> Example:\n>\n> root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n>\n>           10\n>          /  \\\n>         5   -3\n>        / \\    \\\n>       3   2   11\n>      / \\   \\\n>     3  -2   1\n>\n> Return 3. The paths that sum to 8 are:\n>\n> 1.  5 -> 3\n> 2.  5 -> 2 -> 1\n> 3. -3 -> 11\n\n<!-- more -->\n\n\nThis is Leetcode 437, easy problem, and it's solution as following:\n\n```\nclass Solution {\n    public:\n        int pathSum(TreeNode* root, int sum) {\n            if(root == NULL)\n                return 0;\n            return visit(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);\n        }\n\n        int visit(TreeNode* node, int sum) {\n            int res = 0;\n            if(node == NULL)\n                return res;\n            if(sum == node->val)\n                res++;\n            res += visit(node->left, sum - node->val);\n            res += visit(node->right, sum - node->val);\n            return res;\n        }\n};\n```\n\nIt's time complex is O(nlogn) if it's a balanced tree while O(n^2) in the worst case.\n\nThe better solution is the DP solution using a map to store all the value of the tree node.\n\n```\nclass Solution {\n    public:\n        int help(TreeNode* root, int sum, unordered_map<int, int>& store, int pre) {\n            if (!root) return 0;\n            root->val += pre;\n            int res = (root->val == sum) + (store.count(root->val - sum) ? store[root->val - sum] : 0);\n            store[root->val]++;\n            res += help(root->left, sum, store, root->val) + help(root->right, sum, store, root->val);\n            store[root->val]--;\n            return res;\n        }\n\n        int pathSum(TreeNode* root, int sum) {\n            unordered_map<int, int> store;\n            return help(root, sum, store, 0);\n        }\n};\n```\n\nThat's it.\n","source":"_posts/PathSumIII.md","raw":"---\ntitle: Path Sum III\ndate: 2017-01-07 19:46:25\ntags:\n    - Tree\n---\n\n> You are given a binary tree in which each node contains an integer value.\n>\n> Find the number of paths that sum to a given value.\n>\n> The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n>\n> The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\n>\n> Example:\n>\n> root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n>\n>           10\n>          /  \\\n>         5   -3\n>        / \\    \\\n>       3   2   11\n>      / \\   \\\n>     3  -2   1\n>\n> Return 3. The paths that sum to 8 are:\n>\n> 1.  5 -> 3\n> 2.  5 -> 2 -> 1\n> 3. -3 -> 11\n\n<!-- more -->\n\n\nThis is Leetcode 437, easy problem, and it's solution as following:\n\n```\nclass Solution {\n    public:\n        int pathSum(TreeNode* root, int sum) {\n            if(root == NULL)\n                return 0;\n            return visit(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);\n        }\n\n        int visit(TreeNode* node, int sum) {\n            int res = 0;\n            if(node == NULL)\n                return res;\n            if(sum == node->val)\n                res++;\n            res += visit(node->left, sum - node->val);\n            res += visit(node->right, sum - node->val);\n            return res;\n        }\n};\n```\n\nIt's time complex is O(nlogn) if it's a balanced tree while O(n^2) in the worst case.\n\nThe better solution is the DP solution using a map to store all the value of the tree node.\n\n```\nclass Solution {\n    public:\n        int help(TreeNode* root, int sum, unordered_map<int, int>& store, int pre) {\n            if (!root) return 0;\n            root->val += pre;\n            int res = (root->val == sum) + (store.count(root->val - sum) ? store[root->val - sum] : 0);\n            store[root->val]++;\n            res += help(root->left, sum, store, root->val) + help(root->right, sum, store, root->val);\n            store[root->val]--;\n            return res;\n        }\n\n        int pathSum(TreeNode* root, int sum) {\n            unordered_map<int, int> store;\n            return help(root, sum, store, 0);\n        }\n};\n```\n\nThat's it.\n","slug":"PathSumIII","published":1,"updated":"2017-01-07T16:00:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oeref000nq4f42lqf36sk","content":"<blockquote>\n<p>You are given a binary tree in which each node contains an integer value.</p>\n<p>Find the number of paths that sum to a given value.</p>\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>\n<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>\n<p>Example:</p>\n<p>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</p>\n<pre><code>      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n</code></pre><p>Return 3. The paths that sum to 8 are:</p>\n<ol>\n<li>5 -&gt; 3</li>\n<li>5 -&gt; 2 -&gt; 1</li>\n<li>-3 -&gt; 11</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 437, easy problem, and it’s solution as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            if(root == NULL)</div><div class=\"line\">                return 0;</div><div class=\"line\">            return visit(root, sum) + pathSum(root-&gt;left, sum) + pathSum(root-&gt;right, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int visit(TreeNode* node, int sum) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            if(node == NULL)</div><div class=\"line\">                return res;</div><div class=\"line\">            if(sum == node-&gt;val)</div><div class=\"line\">                res++;</div><div class=\"line\">            res += visit(node-&gt;left, sum - node-&gt;val);</div><div class=\"line\">            res += visit(node-&gt;right, sum - node-&gt;val);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It’s time complex is O(nlogn) if it’s a balanced tree while O(n^2) in the worst case.</p>\n<p>The better solution is the DP solution using a map to store all the value of the tree node.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int help(TreeNode* root, int sum, unordered_map&lt;int, int&gt;&amp; store, int pre) &#123;</div><div class=\"line\">            if (!root) return 0;</div><div class=\"line\">            root-&gt;val += pre;</div><div class=\"line\">            int res = (root-&gt;val == sum) + (store.count(root-&gt;val - sum) ? store[root-&gt;val - sum] : 0);</div><div class=\"line\">            store[root-&gt;val]++;</div><div class=\"line\">            res += help(root-&gt;left, sum, store, root-&gt;val) + help(root-&gt;right, sum, store, root-&gt;val);</div><div class=\"line\">            store[root-&gt;val]--;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            unordered_map&lt;int, int&gt; store;</div><div class=\"line\">            return help(root, sum, store, 0);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>That’s it.</p>\n","excerpt":"<blockquote>\n<p>You are given a binary tree in which each node contains an integer value.</p>\n<p>Find the number of paths that sum to a given value.</p>\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>\n<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>\n<p>Example:</p>\n<p>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</p>\n<pre><code>      10\n     /  \\\n    5   -3\n   / \\    \\\n  3   2   11\n / \\   \\\n3  -2   1\n</code></pre><p>Return 3. The paths that sum to 8 are:</p>\n<ol>\n<li>5 -&gt; 3</li>\n<li>5 -&gt; 2 -&gt; 1</li>\n<li>-3 -&gt; 11</li>\n</ol>\n</blockquote>","more":"<p>This is Leetcode 437, easy problem, and it’s solution as following:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            if(root == NULL)</div><div class=\"line\">                return 0;</div><div class=\"line\">            return visit(root, sum) + pathSum(root-&gt;left, sum) + pathSum(root-&gt;right, sum);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int visit(TreeNode* node, int sum) &#123;</div><div class=\"line\">            int res = 0;</div><div class=\"line\">            if(node == NULL)</div><div class=\"line\">                return res;</div><div class=\"line\">            if(sum == node-&gt;val)</div><div class=\"line\">                res++;</div><div class=\"line\">            res += visit(node-&gt;left, sum - node-&gt;val);</div><div class=\"line\">            res += visit(node-&gt;right, sum - node-&gt;val);</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It’s time complex is O(nlogn) if it’s a balanced tree while O(n^2) in the worst case.</p>\n<p>The better solution is the DP solution using a map to store all the value of the tree node.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int help(TreeNode* root, int sum, unordered_map&lt;int, int&gt;&amp; store, int pre) &#123;</div><div class=\"line\">            if (!root) return 0;</div><div class=\"line\">            root-&gt;val += pre;</div><div class=\"line\">            int res = (root-&gt;val == sum) + (store.count(root-&gt;val - sum) ? store[root-&gt;val - sum] : 0);</div><div class=\"line\">            store[root-&gt;val]++;</div><div class=\"line\">            res += help(root-&gt;left, sum, store, root-&gt;val) + help(root-&gt;right, sum, store, root-&gt;val);</div><div class=\"line\">            store[root-&gt;val]--;</div><div class=\"line\">            return res;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        int pathSum(TreeNode* root, int sum) &#123;</div><div class=\"line\">            unordered_map&lt;int, int&gt; store;</div><div class=\"line\">            return help(root, sum, store, 0);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>That’s it.</p>"},{"title":"Ransom Note","date":"2017-01-12T15:45:36.000Z","_content":"\n> Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\n>\n> Each letter in the magazine string can only be used once in your ransom note.\n>\n> Note:\n> You may assume that both strings contain only lowercase letters.\n>\n> canConstruct(\"a\", \"b\") -> false\n> canConstruct(\"aa\", \"ab\") -> false\n> canConstruct(\"aa\", \"aab\") -> true\n\n<!--more-->\n\nThis is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.\n\n\n```\nclass Solution {\n    public:\n        bool canConstruct(string ransomNote, string magazine) {\n            int chars[512] = {0};\n            for (int i = 0; i < (int)magazine.size(); i++) {\n                chars[(int)magazine[i]]++;\n            }\n            for (int i = 0; i < (int)ransomNote.size(); i++) {\n                chars[(int)ransomNote[i]]--;\n                if (chars[(int)ransomNote[i]] < 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n};\n```\n\nAnd it gets AC.\n","source":"_posts/RansomNote.md","raw":"---\ntitle: Ransom Note\ndate: 2017-01-12 23:45:36\ntags:\n    - String\n---\n\n> Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\n>\n> Each letter in the magazine string can only be used once in your ransom note.\n>\n> Note:\n> You may assume that both strings contain only lowercase letters.\n>\n> canConstruct(\"a\", \"b\") -> false\n> canConstruct(\"aa\", \"ab\") -> false\n> canConstruct(\"aa\", \"aab\") -> true\n\n<!--more-->\n\nThis is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.\n\n\n```\nclass Solution {\n    public:\n        bool canConstruct(string ransomNote, string magazine) {\n            int chars[512] = {0};\n            for (int i = 0; i < (int)magazine.size(); i++) {\n                chars[(int)magazine[i]]++;\n            }\n            for (int i = 0; i < (int)ransomNote.size(); i++) {\n                chars[(int)ransomNote[i]]--;\n                if (chars[(int)ransomNote[i]] < 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n};\n```\n\nAnd it gets AC.\n","slug":"RansomNote","published":1,"updated":"2017-01-12T15:58:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerfx001hq4f486wmca1k","content":"<blockquote>\n<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>\n<p>Each letter in the magazine string can only be used once in your ransom note.</p>\n<p>Note:<br>You may assume that both strings contain only lowercase letters.</p>\n<p>canConstruct(“a”, “b”) -&gt; false<br>canConstruct(“aa”, “ab”) -&gt; false<br>canConstruct(“aa”, “aab”) -&gt; true</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canConstruct(string ransomNote, string magazine) &#123;</div><div class=\"line\">            int chars[512] = &#123;0&#125;;</div><div class=\"line\">            for (int i = 0; i &lt; (int)magazine.size(); i++) &#123;</div><div class=\"line\">                chars[(int)magazine[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)ransomNote.size(); i++) &#123;</div><div class=\"line\">                chars[(int)ransomNote[i]]--;</div><div class=\"line\">                if (chars[(int)ransomNote[i]] &lt; 0) &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>\n","excerpt":"<blockquote>\n<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.</p>\n<p>Each letter in the magazine string can only be used once in your ransom note.</p>\n<p>Note:<br>You may assume that both strings contain only lowercase letters.</p>\n<p>canConstruct(“a”, “b”) -&gt; false<br>canConstruct(“aa”, “ab”) -&gt; false<br>canConstruct(“aa”, “aab”) -&gt; true</p>\n</blockquote>","more":"<p>This is Leetcode 383 and it is an easy problem. Just notice one thing: whiteSpace, numbers, should be taken into consideration. So the length of the char array should not be only 26.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        bool canConstruct(string ransomNote, string magazine) &#123;</div><div class=\"line\">            int chars[512] = &#123;0&#125;;</div><div class=\"line\">            for (int i = 0; i &lt; (int)magazine.size(); i++) &#123;</div><div class=\"line\">                chars[(int)magazine[i]]++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            for (int i = 0; i &lt; (int)ransomNote.size(); i++) &#123;</div><div class=\"line\">                chars[(int)ransomNote[i]]--;</div><div class=\"line\">                if (chars[(int)ransomNote[i]] &lt; 0) &#123;</div><div class=\"line\">                    return false;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>And it gets AC.</p>"},{"title":"Perfect Squares","date":"2017-01-16T07:31:29.000Z","_content":"\n>  Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n>\n>  For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.\n\n<!--more-->\n\nIt is Leetcode 279 and a quite easy DP problem.\n\nI used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,\n\nI will find 2(1+1), 5(1+4), 10(1+9)... are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.\n\nHowever, this solution gets a TLE. And, I just find another way to solve:\n\n```\nclass Solution {\n    public:\n        int numSquares(int n) {\n            vector<long> DP(n + 1, INT_MAX);\n            DP[0] = 0;\n            for (int i = 0; i <= n; i++) {\n                for (int idx = 0; idx <= (int)sqrt(i); idx++) {\n                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);\n                }\n            }\n            return DP[n];\n        }\n};\n```\n\nMuch easier than the former one. And it gets AC.\n","source":"_posts/PerfectSquares.md","raw":"---\ntitle: Perfect Squares\ndate: 2017-01-16 15:31:29\ntags:\n    - Dynamic Programming\n    - Math\n    - Breadth-first Search\n---\n\n>  Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n>\n>  For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.\n\n<!--more-->\n\nIt is Leetcode 279 and a quite easy DP problem.\n\nI used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,\n\nI will find 2(1+1), 5(1+4), 10(1+9)... are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.\n\nHowever, this solution gets a TLE. And, I just find another way to solve:\n\n```\nclass Solution {\n    public:\n        int numSquares(int n) {\n            vector<long> DP(n + 1, INT_MAX);\n            DP[0] = 0;\n            for (int i = 0; i <= n; i++) {\n                for (int idx = 0; idx <= (int)sqrt(i); idx++) {\n                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);\n                }\n            }\n            return DP[n];\n        }\n};\n```\n\nMuch easier than the former one. And it gets AC.\n","slug":"PerfectSquares","published":1,"updated":"2017-01-16T08:11:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerg0001jq4f4wprygp8h","content":"<blockquote>\n<p> Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.</p>\n<p> For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>It is Leetcode 279 and a quite easy DP problem.</p>\n<p>I used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,</p>\n<p>I will find 2(1+1), 5(1+4), 10(1+9)… are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.</p>\n<p>However, this solution gets a TLE. And, I just find another way to solve:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int numSquares(int n) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(n + 1, INT_MAX);</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int i = 0; i &lt;= n; i++) &#123;</div><div class=\"line\">                for (int idx = 0; idx &lt;= (int)sqrt(i); idx++) &#123;</div><div class=\"line\">                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[n];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Much easier than the former one. And it gets AC.</p>\n","excerpt":"<blockquote>\n<p> Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, …) which sum to n.</p>\n<p> For example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.</p>\n</blockquote>","more":"<p>It is Leetcode 279 and a quite easy DP problem.</p>\n<p>I used to find a hard way, for example, 1 4 9 16 25 are square numbers, and I use it as a seed to find the second level numbers. Use 1 as a example,</p>\n<p>I will find 2(1+1), 5(1+4), 10(1+9)… are level 2 square numbers, and so on. I will find level N. Once if find the target number, return the level number, and the problem is done.</p>\n<p>However, this solution gets a TLE. And, I just find another way to solve:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Solution &#123;</div><div class=\"line\">    public:</div><div class=\"line\">        int numSquares(int n) &#123;</div><div class=\"line\">            vector&lt;long&gt; DP(n + 1, INT_MAX);</div><div class=\"line\">            DP[0] = 0;</div><div class=\"line\">            for (int i = 0; i &lt;= n; i++) &#123;</div><div class=\"line\">                for (int idx = 0; idx &lt;= (int)sqrt(i); idx++) &#123;</div><div class=\"line\">                    DP[i] = min(1 + DP[i - idx*idx], DP[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return DP[n];</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Much easier than the former one. And it gets AC.</p>"},{"title":"Total Hamming Distance","date":"2017-01-02T05:46:25.000Z","_content":"\n> The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n>\n> Now your job is to find the total Hamming distance between all pairs of the given numbers.\n>\n> Example:\n>\n> Input: 4, 14, 2\n> Output: 6\n>\n> Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n> showing the four bits relevant in this case). So the answer will be:\n> HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n>\n> Note:\n> + Elements of the given array are in the range of 0 to 10^9\n> + Length of the array will not exceed 10^4.\n>\n> Subscribe to see which companies asked this question\n\n<!--more-->\n\nThis is the leetcode No.477, we can quickly find a solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int totalHammingDistance(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < (int)nums.size() - 1; i++) {\n            for (int j = i + 1; j < (int)nums.size(); j++) {\n                sum += hamming_distance(nums[i], nums[j]);\n            }\n        }\n        return sum;\n    }\n\n    int hamming_distance(unsigned long long x, unsigned long long y) {\n        return __builtin_popcountll(x ^ y);\n    }\n};\n```\n\nIt is correct, however it time complex is O(n^2), and the result is TLE.\n\nSo, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.\n\n```\n0000 0000\n1110 0010\n1101 0101\n```\n\nWe get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)*(1) which stands for (n - bitCount) * bitCount.\n\nSo, what we should do is to add the total 32 bits.\n\nLast, here comes to a solution:\n\n```\nint totalHammingDistance(vector<int>& nums) {\n    int total = 0, bitCount = 0;\n    for (int idx = 0; idx < 32; idx++) {\n        for (int i = 0; i < (int)nums.size(); i++) {\n            bitCount += (nums[i] >> idx) & 1;\n        }\n        total += bitCount * (nums.size() - bitCount);\n    }\n    return total;\n}\n```\n\nAnd it's time complex is O(n*32) which means O(n) and it's accepted.\n","source":"_posts/TotalHammingDistance.md","raw":"---\ntitle: Total Hamming Distance\ndate: 2017-01-02 13:46:25\ntags: \n    - Bitmap\n---\n\n> The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n>\n> Now your job is to find the total Hamming distance between all pairs of the given numbers.\n>\n> Example:\n>\n> Input: 4, 14, 2\n> Output: 6\n>\n> Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n> showing the four bits relevant in this case). So the answer will be:\n> HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n>\n> Note:\n> + Elements of the given array are in the range of 0 to 10^9\n> + Length of the array will not exceed 10^4.\n>\n> Subscribe to see which companies asked this question\n\n<!--more-->\n\nThis is the leetcode No.477, we can quickly find a solution like this:\n\n```\nusing namespace std;\n\nclass Solution {\npublic:\n    int totalHammingDistance(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < (int)nums.size() - 1; i++) {\n            for (int j = i + 1; j < (int)nums.size(); j++) {\n                sum += hamming_distance(nums[i], nums[j]);\n            }\n        }\n        return sum;\n    }\n\n    int hamming_distance(unsigned long long x, unsigned long long y) {\n        return __builtin_popcountll(x ^ y);\n    }\n};\n```\n\nIt is correct, however it time complex is O(n^2), and the result is TLE.\n\nSo, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.\n\n```\n0000 0000\n1110 0010\n1101 0101\n```\n\nWe get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)*(1) which stands for (n - bitCount) * bitCount.\n\nSo, what we should do is to add the total 32 bits.\n\nLast, here comes to a solution:\n\n```\nint totalHammingDistance(vector<int>& nums) {\n    int total = 0, bitCount = 0;\n    for (int idx = 0; idx < 32; idx++) {\n        for (int i = 0; i < (int)nums.size(); i++) {\n            bitCount += (nums[i] >> idx) & 1;\n        }\n        total += bitCount * (nums.size() - bitCount);\n    }\n    return total;\n}\n```\n\nAnd it's time complex is O(n*32) which means O(n) and it's accepted.\n","slug":"TotalHammingDistance","published":1,"updated":"2017-01-13T03:10:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy1oerg2001lq4f4bi9lx1ao","content":"<blockquote>\n<p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>\n<p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p>\n<p>Example:</p>\n<p>Input: 4, 14, 2<br>Output: 6</p>\n<p>Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just<br>showing the four bits relevant in this case). So the answer will be:<br>HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.</p>\n<p>Note:</p>\n<ul>\n<li>Elements of the given array are in the range of 0 to 10^9</li>\n<li>Length of the array will not exceed 10^4.</li>\n</ul>\n<p>Subscribe to see which companies asked this question</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>This is the leetcode No.477, we can quickly find a solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">        int sum = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">            for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                sum += hamming_distance(nums[i], nums[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int hamming_distance(unsigned long long x, unsigned long long y) &#123;</div><div class=\"line\">        return __builtin_popcountll(x ^ y);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is correct, however it time complex is O(n^2), and the result is TLE.</p>\n<p>So, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">0000 0000</div><div class=\"line\">1110 0010</div><div class=\"line\">1101 0101</div></pre></td></tr></table></figure>\n<p>We get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)<em>(1) which stands for (n - bitCount) </em> bitCount.</p>\n<p>So, what we should do is to add the total 32 bits.</p>\n<p>Last, here comes to a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int total = 0, bitCount = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; 32; idx++) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">            bitCount += (nums[i] &gt;&gt; idx) &amp; 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        total += bitCount * (nums.size() - bitCount);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return total;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And it’s time complex is O(n*32) which means O(n) and it’s accepted.</p>\n","excerpt":"<blockquote>\n<p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>\n<p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p>\n<p>Example:</p>\n<p>Input: 4, 14, 2<br>Output: 6</p>\n<p>Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just<br>showing the four bits relevant in this case). So the answer will be:<br>HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.</p>\n<p>Note:</p>\n<ul>\n<li>Elements of the given array are in the range of 0 to 10^9</li>\n<li>Length of the array will not exceed 10^4.</li>\n</ul>\n<p>Subscribe to see which companies asked this question</p>\n</blockquote>","more":"<p>This is the leetcode No.477, we can quickly find a solution like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">class Solution &#123;</div><div class=\"line\">public:</div><div class=\"line\">    int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">        int sum = 0;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size() - 1; i++) &#123;</div><div class=\"line\">            for (int j = i + 1; j &lt; (int)nums.size(); j++) &#123;</div><div class=\"line\">                sum += hamming_distance(nums[i], nums[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int hamming_distance(unsigned long long x, unsigned long long y) &#123;</div><div class=\"line\">        return __builtin_popcountll(x ^ y);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>It is correct, however it time complex is O(n^2), and the result is TLE.</p>\n<p>So, I found a better solution here. As we can see from the question, we can find the number is int type, and no larger than 2^32 in that we use a 32 bit size bitmap. For better explaination, I use 8 bit size as example.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">0000 0000</div><div class=\"line\">1110 0010</div><div class=\"line\">1101 0101</div></pre></td></tr></table></figure>\n<p>We get such an array, and we just need to figure out how many 1s in each index. Take 1st index as an example, we get one 1 bit, and the total distance for the 1st index is (3-1)<em>(1) which stands for (n - bitCount) </em> bitCount.</p>\n<p>So, what we should do is to add the total 32 bits.</p>\n<p>Last, here comes to a solution:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">int totalHammingDistance(vector&lt;int&gt;&amp; nums) &#123;</div><div class=\"line\">    int total = 0, bitCount = 0;</div><div class=\"line\">    for (int idx = 0; idx &lt; 32; idx++) &#123;</div><div class=\"line\">        for (int i = 0; i &lt; (int)nums.size(); i++) &#123;</div><div class=\"line\">            bitCount += (nums[i] &gt;&gt; idx) &amp; 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">        total += bitCount * (nums.size() - bitCount);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return total;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And it’s time complex is O(n*32) which means O(n) and it’s accepted.</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciy1oerdm0000q4f4o8lzst3v","tag_id":"ciy1oerds0002q4f4qacuo052","_id":"ciy1oere00007q4f4wikahsq0"},{"post_id":"ciy1oerdq0001q4f4einvfjdl","tag_id":"ciy1oerdz0006q4f40jbc4l1b","_id":"ciy1oere8000cq4f482akqsv4"},{"post_id":"ciy1oerdu0003q4f45msfu6zt","tag_id":"ciy1oere6000aq4f496eog7ko","_id":"ciy1oerea000gq4f4utghuom4"},{"post_id":"ciy1oereb000hq4f4smghl5dz","tag_id":"ciy1oere6000aq4f496eog7ko","_id":"ciy1oered000kq4f4l5u58a66"},{"post_id":"ciy1oerec000jq4f46vwq5tkh","tag_id":"ciy1oere6000aq4f496eog7ko","_id":"ciy1oeree000mq4f44dcj3jlr"},{"post_id":"ciy1oerdv0004q4f4ztjf80cn","tag_id":"ciy1oere9000eq4f4kxsrmzya","_id":"ciy1oerej000pq4f4ja2ujfoz"},{"post_id":"ciy1oerdv0004q4f4ztjf80cn","tag_id":"ciy1oerec000iq4f4ooov7l54","_id":"ciy1oerej000qq4f447y8kmmw"},{"post_id":"ciy1oerdx0005q4f4ckpwhzh9","tag_id":"ciy1oere6000aq4f496eog7ko","_id":"ciy1oerek000sq4f4vgrth73e"},{"post_id":"ciy1oere00008q4f42geg3n81","tag_id":"ciy1oerej000rq4f4a030y3hw","_id":"ciy1oerel000uq4f4bcu1d0f8"},{"post_id":"ciy1oere30009q4f4bmhaybmn","tag_id":"ciy1oerec000iq4f4ooov7l54","_id":"ciy1oerem000wq4f4hwatv1uw"},{"post_id":"ciy1oere7000bq4f46i46o167","tag_id":"ciy1oerej000rq4f4a030y3hw","_id":"ciy1oerep0011q4f4nunewaoj"},{"post_id":"ciy1oere7000bq4f46i46o167","tag_id":"ciy1oere9000eq4f4kxsrmzya","_id":"ciy1oerep0012q4f4f8u8iiud"},{"post_id":"ciy1oere7000bq4f46i46o167","tag_id":"ciy1oereo000yq4f4rg1x66xe","_id":"ciy1oerep0014q4f4adzo78ad"},{"post_id":"ciy1oere7000bq4f46i46o167","tag_id":"ciy1oereo000zq4f4u48wie8o","_id":"ciy1oerep0015q4f4mu15qsxb"},{"post_id":"ciy1oere8000dq4f4jbx0g7g4","tag_id":"ciy1oerep0010q4f4r5n8m3jf","_id":"ciy1oereq0018q4f4jlbnfzoj"},{"post_id":"ciy1oere8000dq4f4jbx0g7g4","tag_id":"ciy1oerep0013q4f4bcjlc5vp","_id":"ciy1oereq0019q4f4nufoczhr"},{"post_id":"ciy1oere8000dq4f4jbx0g7g4","tag_id":"ciy1oereq0016q4f44sqky45s","_id":"ciy1oerer001bq4f44uaf7pws"},{"post_id":"ciy1oerea000fq4f40ucgwjuo","tag_id":"ciy1oereq0017q4f4p25o0bcg","_id":"ciy1oerer001cq4f470g9egq3"},{"post_id":"ciy1oerea000fq4f40ucgwjuo","tag_id":"ciy1oere6000aq4f496eog7ko","_id":"ciy1oerer001eq4f4kymb3m37"},{"post_id":"ciy1oeree000lq4f4kw4t61xf","tag_id":"ciy1oereq001aq4f4gkt4t1xo","_id":"ciy1oerer001fq4f4pjqu4l9q"},{"post_id":"ciy1oeref000nq4f42lqf36sk","tag_id":"ciy1oerer001dq4f4kd5u9pfy","_id":"ciy1oeres001gq4f4aqrjnqdt"},{"post_id":"ciy1oerfx001hq4f486wmca1k","tag_id":"ciy1oerec000iq4f4ooov7l54","_id":"ciy1oerg1001kq4f4645gu44n"},{"post_id":"ciy1oerg0001jq4f4wprygp8h","tag_id":"ciy1oere6000aq4f496eog7ko","_id":"ciy1oerg8001oq4f4kf4onalm"},{"post_id":"ciy1oerg0001jq4f4wprygp8h","tag_id":"ciy1oereq0017q4f4p25o0bcg","_id":"ciy1oerg9001pq4f46rvbktkf"},{"post_id":"ciy1oerg0001jq4f4wprygp8h","tag_id":"ciy1oerg4001mq4f4so4k4s19","_id":"ciy1oerg9001qq4f4j3wavkbc"},{"post_id":"ciy1oerg2001lq4f4bi9lx1ao","tag_id":"ciy1oerg8001nq4f4xr8b4pkf","_id":"ciy1oerga001rq4f48c3j6zxz"}],"Tag":[{"name":"Stack","_id":"ciy1oerds0002q4f4qacuo052"},{"name":"Simulation","_id":"ciy1oerdz0006q4f40jbc4l1b"},{"name":"Dynamic Programming","_id":"ciy1oere6000aq4f496eog7ko"},{"name":"Hash Table","_id":"ciy1oere9000eq4f4kxsrmzya"},{"name":"String","_id":"ciy1oerec000iq4f4ooov7l54"},{"name":"Binary Search","_id":"ciy1oerej000rq4f4a030y3hw"},{"name":"Two Pointers","_id":"ciy1oereo000yq4f4rg1x66xe"},{"name":"Sort","_id":"ciy1oereo000zq4f4u48wie8o"},{"name":"Depth-first Search","_id":"ciy1oerep0010q4f4r5n8m3jf"},{"name":"Memoization","_id":"ciy1oerep0013q4f4bcjlc5vp"},{"name":"Topological sort","_id":"ciy1oereq0016q4f44sqky45s"},{"name":"Math","_id":"ciy1oereq0017q4f4p25o0bcg"},{"name":"Description","_id":"ciy1oereq001aq4f4gkt4t1xo"},{"name":"Tree","_id":"ciy1oerer001dq4f4kd5u9pfy"},{"name":"Breadth-first Search","_id":"ciy1oerg4001mq4f4so4k4s19"},{"name":"Bitmap","_id":"ciy1oerg8001nq4f4xr8b4pkf"}]}}